{"id": "a8218689-f320-430e-af7a-2c7031d3d075", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.3740534804657194, "feedback": "The algorithm HybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.31.", "error": "", "parent_id": null, "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "0cd5166a-d4df-4d8c-a042-85caa3746fb7", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "5ee7f7ac-5f9c-4366-bb59-1f236587895c", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "5bc64839-b577-48e3-92fa-1ae2bb87bce7", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "020fdac8-857a-42d7-9bee-a8e3d7567474", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "a5f1aed9-1e5f-4c61-b64a-0390ca962717", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "38db1e95-1721-4981-b90a-a1076d34a307", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "2d723843-8425-4153-a0a0-d51d330b8021", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "d654f4da-ea52-467e-8ac2-1eaec5ecdb3f", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "488238e3-3fe7-4f68-b07a-68c3f8f9cf94", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "8ebc317c-e4c9-4bc1-a1bc-c4f26f483c8d", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "13e5d6ea-91a5-4c26-9ef5-b8093a7d2aae", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "afe6e4dd-b9d9-49b4-8a80-3b904adce00b", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "8ed3f0d5-df01-4fd9-96ca-b23910df0833", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "4157192b-ab99-4003-8c0e-8cfaf42f3d31", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "a20c3350-b49c-4c47-9b8f-ae1ebc5d44c0", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "aea401b8-56b2-466c-80a4-028b9cad027f", "solution": "import numpy as np\n\nclass EnhancedDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30  # Increased population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F_min = 0.5  # Dynamic scaling factor\n        self.F_max = 0.9\n        self.CR_min = 0.1  # Adaptive crossover probability\n        self.CR_max = 0.9\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def adaptive_crossover(self, score):\n        \"\"\"Adapt the crossover rate based on current score.\"\"\"\n        return self.CR_min + (self.CR_max - self.CR_min) * ((score - min(self.scores)) / (max(self.scores) - min(self.scores) + 1e-9))\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Dynamic Mutation\n                F = self.F_min + np.random.rand() * (self.F_max - self.F_min)\n                mutant = self.population[a] + F * (self.population[b] - self.population[c])\n\n                # Adaptive Crossover\n                CR = self.adaptive_crossover(self.scores[i])\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Clipping and Evaluation\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedDE", "description": "Enhanced Differential Evolution with Stochastic Adaptive Crossover and Dynamic Scaling for improved convergence.", "configspace": "", "generation": 16, "fitness": 0.34859452840505556, "feedback": "The algorithm EnhancedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.8356591898716192, 0.8394897249352946, 0.8502117065879099, 0.8527236355821715, 0.8422917897932316, 0.8580922889087892, 0.8336736219066874, 0.8506081673427156, 0.8416529000888906, 0.7011424225555805, 0.7119679303908644, 0.709511757041775, 0.6762210962471006, 0.6929942381927052, 0.7189537358255857, 0.6853395946209306, 0.730508489520986, 0.7159413243990139, 0.5067813141679847, 0.5562112429786348, 0.49962603441481324, 0.5274182121366091, 0.49300502723898154, 0.5389406959100078, 0.5369857463165719, 0.43617480491839034, 0.6058972953886027, 0.5213161410309518, 0.46855647608149587, 0.16291016405174596, 0.42566881167743087, 0.43664929482711645, 0.4323002819382359, 0.48497641408212167, 0.45893789823183895, 0.5560032707602014, 0.966398154348445, 0.946828131152638, 0.9586828978576318, 0.9769878965324239, 0.9694277133319524, 0.9678637355928232, 0.971218151995725, 0.9597073540873395, 0.9643968164260236, 0.4337060348777242, 0.46586943241682277, 0.4405823280146969, 0.461894412957922, 0.43267735892854575, 0.4552622668971623, 0.4179374478854483, 0.4192577797851418, 0.3914345298670544, 0.6864332579115033, 0.5529650477132211, 0.5238166780520116, 0.6792833830565731, 0.6454967749026601, 0.5971549541717461, 0.5995955424844543, 0.6582912945370131, 0.5989720502045941, 0.19422513512219863, 0.17254884389994118, 0.20593923276746506, 0.22949256903960336, 0.16025811896900755, 0.16511976249469007, 0.202033353964178, 0.2658558366350805, 0.22173616314906508, 0.19434024317687626, 0.1895122784378236, 0.20279723958625395, 0.2845837836416766, 0.19129597440157875, 0.1838098995399512, 0.19322778972532828, 0.263773512218503, 0.27168836434727395, 0.054470217787435105, 0.05420939247816603, 0.031020419539001476, 0.05170526927998398, 0.07415012313669433, 0.0548583163700197, 0.03416579962160882, 0.048073400880584094, 0.044249918773771935, 0.14881293169770238, 0.12048068899429565, 0.13745188499241634, 0.10072030599452442, 0.14420560627330692, 0.1477817309594841, 0.19033630279734548, 0.15147679637079148, 0.2006937485039958, 0.007289878161922947, 0.014713949456926279, 0.05202265644998638, 0.023789052843886882, 0.01665131583726065, 0.043033780552907075, 0.0660578621814033, 0.05883800644488291, 0.05406045622993083, 0.1928482727093671, 0.1931757630418437, 0.21319575416459857, 0.22447127483494822, 0.19810125226652764, 0.2204930710726729, 0.16299923451771936, 0.19942673052125415, 0.2017661357440026, 0.5551661162031738, 0.5599516903848885, 0.5529686112912631, 0.5458792285223678, 0.5628704325125675, 0.5419443071812908, 0.5363046474716298, 0.572151213927462, 0.5590104419121719, 0.10035527199269434, 0.11988732412497705, 0.1293641827157489, 0.11542274531182994, 0.0971456693922601, 0.097430104682106, 0.1086501124746212, 0.09872419442945135, 0.10224800751593899, 0.15356433075314346, 0.1925565837057549, 0.14167243910131766, 0.1408808003252474, 0.12959822180526204, 0.14885372813563758, 0.1563399797460152, 0.14303126786241815, 0.14267420746721837, 0.3587148999438058, 0.34951658415103215, 0.3191087925832412, 0.33029084371622897, 0.36874951391301625, 0.37081030546458504, 0.3709990537613488, 0.37076235813351044, 0.4345877496579156, 0.22553849020317984, 0.22529235438562145, 0.2536739747696233, 0.22647449558582244, 0.23019868308826896, 0.2637670612512035, 0.2469235809443926, 0.3029452896500481, 0.2760367241970829, 0.2049259978345539, 0.18429822199021473, 0.19579128820915492, 0.19319521354436708, 0.1929817625161604, 0.20183475779277527, 0.18355570101447383, 0.19002926379341334, 0.19347226638012716, 0.20018798074939737, 0.22892803434621323, 0.3626387310348378, 0.2428634347629811, 0.38517423336371526, 0.5116826268155541, 0.2697020999507169, 0.23314497854648109, 0.3507349893771473, 0.5571435783720946, 0.40152354420560854, 0.5860106582408107, 0.34839766432690056, 0.4224765966495706, 0.5256070642077703, 0.20827551724051652, 0.4726618289161334, 0.357627543127778, 0.5814476152024297, 0.35441950384925636, 0.19482922577608275, 0.1920181445184751, 0.39090537803192027, 0.1933164804575166, 0.20790325260291087, 0.5504050509359498, 0.5401449334665365, 0.1773700866006499, 0.18600357484946095, 0.1853279499815108, 0.18502609026509198, 0.18869929556755538, 0.16638494267634774, 0.18815785562434773, 0.20021693523810224, 0.18170112887515177, 0.0798905823173478, 0.07365713979421906, 0.07852646190286028, 0.0849312666451284, 0.0894434992511004, 0.08544608043477053, 0.07682099233420336, 0.08511042156965976, 0.08289248451302433]}, "mutation_prompt": null}
{"id": "ca3d2c7f-f2b7-4cfc-9f19-0db8ab9a9a86", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "b455da11-8a3b-4236-aab0-7d72e6e95362", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "20ce9431-9dbf-44d4-b79f-ed27ec1fa932", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "01cd754b-bd98-4592-9e48-5736418a55c1", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "bcdcca95-be2e-4687-9ff7-9577502f0189", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "e0a021b2-6009-4b2a-8042-88b1ba0bc555", "solution": "import numpy as np\n\nclass HybridDELevyDynamic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8\n        self.CR = 0.9\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n        self.dynamic_factor = 0.5  # Factor for dynamic population changes\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def dynamic_population_size(self):\n        new_size = int(self.population_size * (1 - self.dynamic_factor * self.func_evals / self.budget))\n        return max(5, new_size)\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            new_population_size = self.dynamic_population_size()\n            if new_population_size < self.population_size:\n                indices = np.argsort(self.scores)[:new_population_size]\n                self.population = self.population[indices]\n                self.scores = self.scores[indices]\n            self.population_size = new_population_size\n\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevyDynamic", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight and Dynamic Population Sizing to improve convergence speed.", "configspace": "", "generation": 22, "fitness": 0.1738872670842166, "feedback": "The algorithm HybridDELevyDynamic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.315097659829793, 0.5360327497642108, 0.35404345761034606, 0.35075518931683247, 0.43568670820449884, 0.26877404058737053, 0.46131923708936806, 0.41947201664379585, 0.2108928641418817, 0.040035082909861575, 0.054831795199604905, 9.999999999998899e-05, 0.332985207086379, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019822448299980144, 0.05676900389155293, 0.08752456522016838, 0.11094650620139201, 0.08903358477186607, 0.06535632524995927, 0.09034125367470425, 0.077880528034589, 0.05276956388708953, 0.12021786368977572, 0.1141439390336424, 0.06658226626908181, 0.10847179752686675, 0.028561504783329972, 0.07997979630755636, 0.02883759923189877, 0.08395696476103365, 0.07784933779121073, 0.06831153022907088, 0.052885050801232736, 0.9957859285349921, 0.9835536821071373, 0.9971284088950767, 0.9823399028015853, 0.9923263760908325, 0.9907763050753331, 0.9836051038833509, 0.9852289241347137, 0.9872982162305217, 0.1411457047096052, 0.04337444730463391, 0.0837668392767913, 0.22122667297966137, 0.13964786219257963, 0.15346191964679623, 0.09326418958756477, 0.07025677452038548, 0.1641104058018198, 0.3318768076348576, 0.18617830589290418, 0.11630545434131234, 0.13607349004106817, 0.16239307859515428, 0.07002113835971702, 0.06664432379240193, 0.23985386653841778, 0.14122695574100397, 9.999999999998899e-05, 0.13740385593694393, 9.999999999998899e-05, 0.1455993030023257, 0.008189979040995832, 0.2620257118238377, 0.18079346018742704, 0.2362783747239341, 0.21800141959887465, 0.009652526644112869, 9.999999999998899e-05, 0.13339500794984893, 0.15004646385311027, 0.3374799028768508, 0.13592779849387715, 0.1343539649824923, 0.14570942728714287, 0.05257314375363964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02413239343490403, 9.999999999998899e-05, 0.0028450864853079016, 9.999999999998899e-05, 9.999999999998899e-05, 0.15620261882567243, 0.028596330439585427, 0.07715442315831611, 0.09175723811254688, 0.0464544029697227, 0.015190614793227142, 0.09051932898670334, 0.06108625098826337, 0.09625105746920815, 9.999999999998899e-05, 0.1553665443248392, 9.999999999998899e-05, 0.043297824489425096, 0.15785441601717898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01172891235909379, 0.06978730706277869, 0.07711012507837911, 0.03999594048121957, 9.999999999998899e-05, 0.035047846552532014, 0.07404584926071767, 0.03496293350249957, 0.060102257473182874, 0.057916314014787584, 0.432020959528051, 0.17653494909281398, 0.38310732660261615, 0.21474283079425405, 0.26814353731875185, 0.4797679781149833, 0.22962316952353712, 0.3305368227132266, 0.34925173541781196, 0.11728698909096924, 0.08620395620361487, 0.0730018467210779, 0.15806880259603162, 0.04901525520773997, 0.09573178690529405, 0.08360208551854498, 0.05323944297986838, 0.08538825328943112, 0.15169133045156635, 0.12474369723117085, 0.11841820509645573, 0.1199404301101642, 0.16025812777260506, 0.11931734705619768, 0.15199250376473594, 0.15215386850320667, 0.29575586348044014, 0.185170760308336, 0.22846293754786307, 0.14299116410384793, 0.21070904887505404, 0.19744052860661498, 0.2153959367066718, 0.24106272247609162, 0.21674366566963887, 0.16807701419573062, 0.17838795952909348, 0.10243721835531738, 0.1854947763175825, 0.1322992761239712, 0.1258440309056652, 0.1255543373333483, 0.13884188493234983, 0.22202377213596014, 0.10266750919351275, 0.24404023078402415, 0.26697154135476553, 0.17729884823914344, 0.19507001416023306, 0.2651381752602293, 0.20314711166765032, 0.20452899616074427, 0.23654049626095397, 0.24799421185509196, 0.1801388462655915, 0.17372189524386905, 0.18146723590840552, 0.19037342093868215, 0.18958431857523061, 0.16693314302295725, 0.16645765693873382, 0.16996349520011078, 0.16544445073788794, 0.5254760545125373, 0.1232496018971253, 0.14714820336382295, 0.1734406282544354, 0.2015405953120024, 0.20046967044842245, 0.09906809307778097, 0.170757765018003, 0.15212000679238968, 0.08314243927274678, 0.16793527111697226, 0.11311894978372472, 0.10244110402944662, 0.13686239467207995, 0.2131197404060624, 0.10514518422251351, 0.14338321908325924, 0.11894970043959752, 0.18465912662601758, 0.15888508504513743, 0.20166777755433818, 0.20377858018469475, 0.21144684579538287, 0.18247625876758455, 0.16811038003805356, 0.1757872805040308, 0.14689007985489466, 0.08501096482370207, 0.06536159869163038, 0.05444400274570527, 0.07957487290455756, 0.07856110289040952, 0.05074972871757877, 0.04682716891532779, 0.0938429712276384, 0.07437463103938846]}, "mutation_prompt": null}
{"id": "a5b10eaa-6c68-4d1f-8db6-a46e52ccde8b", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "bfbd39b9-4056-4627-97fa-1ce1eaaec10b", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "ed6be3c6-36e2-420a-935f-8aa56323cf1f", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "4f1c9e69-f8fc-4bd9-85ab-27325962b3ba", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "43a3d459-819f-4419-ae51-59ac9e853851", "solution": "import numpy as np\n\nclass EnhancedHybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30  # Increased population size for diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.7  # Adjusted mutation factor for improved control\n        self.CR = 0.8  # Adjusted crossover probability for better diversity\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma_u = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            ranked_indices = np.argsort(self.scores)\n            for i in range(self.population_size):\n                # Rank-based selection for diversity\n                if i < self.population_size // 2:\n                    # Select from top half\n                    a, b, c = np.random.choice(ranked_indices[:self.population_size // 2], 3, replace=False)\n                else:\n                    # Select from entire population\n                    indices = list(range(self.population_size))\n                    indices.remove(i)\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n\n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedHybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight and Rank-Based Selection for improved convergence speed and solution quality.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"module 'numpy' has no attribute 'gamma'\").", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {}, "mutation_prompt": null}
{"id": "91f69e77-0078-4346-ad78-6a3018f4c609", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "525d2a9b-a5b6-4272-b248-004c3f76b33c", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "88243556-f467-4674-a49f-6ee0fc779f7e", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "d0a4beb6-5b58-47ef-9a93-eee324598b82", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "1bcf580d-cd08-4b0e-b0db-c4aa61b2693d", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "99f17db8-8e50-487e-9127-392acf3953ce", "solution": "import numpy as np\n\nclass EnhancedHybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 20  # Initial population size\n        self.population_growth_rate = 1.1  # Dynamic population growth rate\n        self.max_population_size = 50  # Maximum allowed population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.7  # DE Mutation factor (adjusted)\n        self.CR = 0.85  # Crossover probability (adjusted)\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.scores = np.full(self.initial_population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        energy_boost = np.random.uniform(0.9, 1.1)  # Energy boost factor\n        return step * energy_boost\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(len(self.population)):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            population_size = min(int(len(self.population) * self.population_growth_rate), self.max_population_size)\n            new_population = []\n            new_scores = []\n\n            for i in range(len(self.population)):\n                indices = list(range(len(self.population)))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    new_population.append(trial)\n                    new_scores.append(trial_score)\n                else:\n                    new_population.append(self.population[i])\n                    new_scores.append(self.scores[i])\n\n            self.population = np.array(new_population)\n            self.scores = np.array(new_scores)\n\n        return best, best_score", "name": "EnhancedHybridDELevy", "description": "Enhanced Hybrid Differential Evolution leveraging a dynamic population size and energy-boosted Lévy Flight for improved convergence speed.", "configspace": "", "generation": 33, "fitness": 0.3620801916044049, "feedback": "The algorithm EnhancedHybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.30.", "error": "", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.9476534164883633, 0.9260325934104744, 0.942120362020023, 0.9501860463201438, 0.9468904049629926, 0.9342703364993179, 0.9427291119475525, 0.9384228112914462, 0.9426320367475011, 0.8666094505101034, 0.8554354416588463, 0.8718564764230992, 0.8580542498976865, 0.8693267659048576, 0.8598620533539671, 0.8692632331546142, 0.907218478897714, 0.8887769465890253, 0.11271082824282563, 0.09765482148353044, 0.044039113869059676, 0.07520726148609425, 0.10739619181522053, 0.1072430769636743, 0.1625342264188957, 0.07777457115933517, 0.07381991157715673, 0.09307559505753737, 0.06501970456954953, 0.05820812118238827, 0.11931408562634227, 0.07259762439235706, 0.060904658742754636, 0.11726158592075075, 0.08044810064142072, 0.08007066677763885, 0.997516002747193, 0.9839982384597006, 0.9916977448211677, 0.9908283344272152, 0.9814930477926185, 0.9905294232137145, 0.9910030275552917, 0.9915048913074809, 0.9783787453192043, 0.7743655906992661, 0.06021735827339869, 0.7593488902051981, 0.819140507182097, 0.7761864760531036, 0.8190518314286612, 0.7652086311653756, 0.6966353205033285, 0.6770998787529053, 0.23021394137574192, 0.1795411083806845, 0.1404443472279152, 0.33403720783163393, 0.280288361409735, 0.21427050666909764, 0.23696517589975652, 0.17891206578502206, 0.17159101701330237, 0.6171460872587893, 0.7227524763576558, 0.673013381345879, 0.6399040729176604, 0.7624936265348486, 0.12941748437414413, 0.7115059574298626, 0.13602725714876052, 0.6716225160959666, 0.6772255700906913, 0.13431445887097726, 0.7181131620639354, 0.7271263834761188, 0.13513421614835464, 0.8016784541853295, 0.1355156862020911, 0.7410485119888881, 0.78056224535052, 0.0957679177979408, 0.08331441993424671, 0.12777376281342767, 0.13490188097759948, 0.15019685427441998, 0.27442856525174486, 0.06150243867368499, 0.01258152350338948, 0.26460186330938085, 0.1345967932590273, 0.09533251061372416, 0.18149951421621158, 0.12664784768743065, 0.03411568344223981, 0.07360832398757122, 0.21449255502175424, 0.17688296410769633, 0.06483114740809726, 0.12883587471426183, 0.09684468963817583, 0.34502862952887936, 0.4962440365922395, 0.36518701581451585, 0.40956912347134167, 0.4399782234214594, 0.2938134082301085, 0.3025074994878164, 0.424243235473437, 0.30628773803616627, 0.15696688253026259, 0.5403152369420885, 0.4525079254821671, 0.3707326709993074, 0.17342275354479808, 0.14466146000370117, 0.41980187369874966, 0.6757883649700946, 0.6451717202196527, 0.6992562416798835, 0.6054257453483007, 0.5964161468386717, 0.6433430330408476, 0.7358748937663682, 0.718055507983884, 0.7639038521786012, 0.11141632066793683, 0.1373664306096034, 0.07093668637073136, 0.11894597688127528, 0.06514825404158842, 0.11980739400370966, 0.11237199299152412, 0.11728904375645144, 0.1645125279467331, 0.2825397703608066, 0.17758056801979005, 0.23033169414989985, 0.23775825367142378, 0.21760096726304357, 0.1275493194972147, 0.17907557313795164, 0.20624461103844083, 0.27924441260646105, 0.2597212225546185, 0.2796823580228178, 0.2310349202273847, 0.27968481902618914, 0.23142306336322738, 0.264068980606352, 0.3637933089875841, 0.2472611802482525, 0.16076433572096505, 0.17815637684548435, 0.19361319907303298, 0.1815602008605084, 0.18065533250648436, 0.24664306538319192, 0.3248544083576237, 0.1682894488772878, 0.25415171635220946, 0.1890020859132785, 0.24562815171253827, 0.24517647345137106, 0.21741146360565322, 0.21309213035825592, 0.26093235638615064, 0.25235556829059524, 0.25080414509056326, 0.2836009381581208, 0.24055258525994216, 0.18880254718376732, 0.21382591640097381, 0.19970167263977634, 0.19770759217010958, 0.20860381556809138, 0.17939331914492973, 0.1939281005098965, 0.25712728553118014, 0.17517589230870612, 0.16611524561782465, 0.12697303915593916, 0.15472457837986853, 0.1656552195892258, 0.20153030676163408, 0.20058627531012163, 0.1000146419168585, 0.1703287726165812, 0.1676505397592799, 0.08311247654051512, 0.21316135657410162, 0.08294206086040745, 0.21274661410320472, 0.8535070891440322, 0.21318477291275983, 0.21387456558084128, 0.891703997561218, 0.8167494443222283, 0.19643155765200904, 0.19030809355321987, 0.20199081821872045, 0.24272445052607705, 0.15013512443367327, 0.23781849811609201, 0.38413845194087437, 0.1931054481811867, 0.2512444715932354, 0.08912598661608717, 0.09986197507170269, 0.08699297474036194, 0.08823057723006844, 0.06831327185629565, 0.10400221380533003, 0.100689767496839, 0.0734919834512886, 0.09730502039014843]}, "mutation_prompt": null}
{"id": "7b477efb-ee9b-4dce-a3fd-b94f0e6d3ae1", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "0b26af47-abea-4820-9fda-4b8149d61071", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "90043517-a1df-4e33-92a9-8c0d2cb08bf9", "solution": "import numpy as np\n\nclass EnhancedHybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8 \n        self.CR = 0.9 \n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def dynamic_population_size(self):\n        return max(5, int(20 * (1 - (self.func_evals / self.budget))))\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n\n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = np.copy(ind)\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.population_size = self.dynamic_population_size()\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                \n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedHybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Adaptive Lévy Flight and Dynamic Population Resizing to improve convergence speed.", "configspace": "", "generation": 36, "fitness": 0.3233909541039899, "feedback": "The algorithm EnhancedHybridDELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.29.", "error": "", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.9090174848520106, 0.9297113428484823, 0.9365857988634497, 0.9249445834163535, 0.9511679037481285, 0.9454094649215078, 0.9359934993502965, 0.9345114575501045, 0.9543309509704889, 0.8622096836902634, 0.8495888126575489, 0.8627074285319808, 0.8602038028665049, 0.8067452308911208, 0.8544700083457427, 0.8204820935907033, 0.8628083006158144, 0.8177967108537807, 0.11892544593590249, 0.056202984667494404, 0.08058609454030485, 0.1260517579632171, 0.09819889737028409, 0.1268501783937871, 0.14624472051777315, 0.1191119607578579, 0.10321802123096491, 0.04277569329803066, 0.11963730827353136, 0.07302716634319295, 0.073691763596748, 0.07542344400969869, 0.08270074464045807, 0.08744374397420995, 0.06636591827635674, 0.0939781597442999, 0.9970503185220381, 0.9831473771311738, 0.9971469019767664, 0.9834543871768877, 0.9854569303387233, 0.9871277138350609, 0.9914844887695494, 0.9798870012840771, 0.9971120215021229, 0.8003194324958469, 0.7383412050952196, 0.584298511611338, 0.578120170644921, 0.678227646407373, 0.7373542975690632, 0.7187182252848545, 0.8055908261494147, 0.46819011675193345, 0.21876102833550726, 0.17100340877497966, 0.1723463018029524, 0.20392506522403486, 0.2830637190891475, 0.2044782347410009, 0.23772790789044462, 0.14479627579168897, 0.1996854190430709, 0.6475469836091146, 0.26525054104865453, 0.4425061294406504, 0.2545510923681872, 0.13600438544632032, 0.6046371843368139, 0.24879304072752362, 0.8016875366150293, 0.462487510445143, 0.2526186015331672, 0.13274307128415108, 0.13853630443304388, 0.2271356737704595, 0.1865432444101952, 0.13785214863869244, 0.31707831656627805, 0.129484033446446, 0.7706339651699614, 0.44194209246222094, 9.999999999998899e-05, 0.09734460514235344, 0.12497783838754206, 0.054780516004576785, 0.14777059116047908, 0.21604823574550558, 0.4042086187615107, 0.11635559133063378, 0.08837718495633484, 0.07492707329740367, 0.24586936318755093, 0.16851858340953618, 0.0727023524282695, 0.06766536405922818, 0.18362053670049383, 0.16274338258060395, 0.11415881149989127, 0.11692163728127414, 0.06628645220707696, 0.31363438361180096, 0.09641845358952628, 0.15491253975484687, 0.1196562510267769, 0.13329856358118886, 0.13053824748363063, 0.12827995792388025, 0.12343806919613931, 0.1701389895187132, 0.26451026373424524, 0.2657885134913103, 0.30722908884058997, 0.2889175720227849, 0.15084629787319248, 0.18114408868285714, 0.08777643401085677, 0.6198248218055062, 0.5676693665480017, 0.7068147005520499, 0.5596102752498064, 0.6167464376922224, 0.6261322041082829, 0.7929291287806146, 0.6303307748208524, 0.6812245708472651, 0.09039894421057593, 0.07358069606848094, 0.11215866131116548, 0.07363885347706545, 0.09039622555694005, 0.19240176887344684, 0.0630972695533748, 0.14790445436856847, 0.07613442900198697, 0.18761783153367972, 0.2609266948477088, 0.15157985547272423, 0.14128942443584014, 0.1978299098133297, 0.1753422048322838, 0.23922612090009632, 0.2109220934106676, 0.2154048487978697, 0.18894087638006996, 0.2927108315175514, 0.17244524532334127, 0.34058917108124465, 0.35438805063433587, 0.2681080610906754, 0.1855142600701054, 0.2650636484506095, 0.23158836124905313, 0.1417520532175902, 0.26567420348003656, 0.14789673152649918, 0.26384585194338206, 0.21664858770880668, 0.2350454321890174, 0.1446994667335988, 0.27665181130288374, 0.17720821363144446, 0.3201393162401953, 0.21058730158325234, 0.24734502857946472, 0.25527025726006136, 0.20267751024019343, 0.21629107172983963, 0.23037877189644873, 0.19574462602529807, 0.22223620314242654, 0.1859193645310797, 0.18918140907383663, 0.21204059307316847, 0.20561623168054377, 0.16347332442732154, 0.19463220913124135, 0.17478856473753435, 0.18779649441090662, 0.16666646944952024, 0.16967310415312353, 0.12712178980088862, 0.1542707280933635, 0.9462619740657746, 0.18949555772610616, 0.18901670490796463, 0.09995815192113422, 0.1702071829280154, 0.16295033922987934, 0.0832297740588861, 0.21194434662193307, 0.156749740703365, 0.211060089734604, 0.9116884679833259, 0.21317929461304186, 0.10471602782575917, 0.08300539638448923, 0.15684864016306344, 0.1877966515482552, 0.18291767004670312, 0.19807687147599085, 0.1670363477994108, 0.14991035300305156, 0.21273804026064946, 0.16531022963557462, 0.2069517013875546, 0.20141784817160469, 0.09497237544839321, 0.07579304311192958, 0.09546950399355714, 0.0882795202689084, 0.09332694930950924, 0.07498542625911819, 0.08208954360551202, 0.09573040520521625, 0.09370831983093264]}, "mutation_prompt": null}
{"id": "022ca2c2-6aee-432e-a2fd-0b68497e4edc", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "e99b2ea1-9a16-4899-85bc-a7632418d632", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "7e20dcbd-c017-40ff-972e-263be7bf9170", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "8c5ceb03-cc17-445f-82f2-279e4cec8d4d", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "543adcc3-c733-44dd-8651-12f83fa60ed8", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "749dd450-71f7-4f81-8c7a-9189531e94e1", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "9510f97c-8a90-4b29-9ebc-a04e6548fc60", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "a7e48b9b-3791-4e14-b8ff-9c9b10530b4a", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "2e5a6d15-b427-4e3e-a733-2c6fd12b99fa", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "afa1e012-a11c-4360-9b55-4bc56e1d70e1", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "0c8fb3c8-5013-44a6-8740-d6e4a47fab9a", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "9cfc1d90-6d9b-4b12-b50f-bf5ce538e67b", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "7183bb71-8789-43d4-82e6-f7d4a10191bc", "solution": "import numpy as np\n\nclass EnhancedHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # Initial DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.scores = np.full(self.initial_population_size, np.inf)\n        self.func_evals = 0\n        self.dynamic_population_size = self.initial_population_size\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def dynamic_mutation_factor(self, current_eval):\n        return self.F * (1 - current_eval / self.budget)\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.dynamic_population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.dynamic_population_size = max(5, int(self.initial_population_size * (1 - self.func_evals / self.budget)))\n\n            for i in range(self.dynamic_population_size):\n                indices = list(range(self.dynamic_population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Dynamic Mutation\n                F_dynamic = self.dynamic_mutation_factor(self.func_evals)\n                mutant = self.population[a] + F_dynamic * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedHybridDE", "description": "Enhanced Hybrid Differential Evolution with Dynamic Population and Adaptive Mutation to expedite convergence rates.", "configspace": "", "generation": 49, "fitness": 0.31392025752711195, "feedback": "The algorithm EnhancedHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.9439826940383852, 0.9296388038519956, 0.950406003750301, 0.9284325303317613, 0.9473571378690968, 0.9455062951779005, 0.9338387648841932, 0.9491246273528676, 0.9563001480049322, 0.8841035286758, 0.8576915945839068, 0.8541107911308468, 0.8784529866410768, 0.8008854344252803, 0.8536097001997147, 0.8676157965544445, 0.8483991623122529, 0.9187188557993006, 0.0783297478400038, 0.089872707821264, 0.12002641953244109, 0.08787133394425106, 0.1032616678072854, 0.08324420450720005, 0.1277406803431066, 0.10770678552320567, 0.10298516890813192, 0.07208168471356258, 0.11168749712294135, 0.09785569943332861, 0.07111122116420865, 0.1017667557750701, 0.07526593248300129, 0.11934442509168275, 0.051746132960720614, 0.11067944654855677, 0.9970503241172197, 0.9813393446902282, 0.9971468635288153, 0.9864033134121315, 0.9884687528376191, 0.9871268507229974, 0.9914839460903634, 0.9791677125813489, 0.997111999958907, 0.3480143210126483, 0.711939039621712, 0.759844846056577, 0.5101291499755736, 0.5284153870721651, 0.56229054332455, 0.5643618540175643, 0.6548576070565609, 0.48573669482470627, 0.23232786807272265, 0.1612605144787802, 0.17234446927917102, 0.1505838018446055, 0.2829263305884331, 0.20914548827068047, 0.1788412681374001, 0.1627711574622439, 0.21936295393961358, 0.21188111384224317, 0.22964449497939365, 0.5263619510981519, 0.1716855781018366, 0.13708488528591856, 0.36983403974749784, 0.2328346604328957, 0.19986331311119288, 0.35048382995563765, 0.2425234747943672, 0.12682214728206231, 0.13762422831947696, 0.44896173819788143, 0.17155812438897788, 0.13826871514620032, 0.8322822738292935, 0.16885687405820426, 0.34599726097296624, 0.13952621348435446, 9.999999999998899e-05, 0.00903324500548186, 0.10939427851056749, 0.0003942816183934994, 0.030132944497898273, 0.02106406376198644, 0.09576232263423301, 0.1376356896592119, 0.06966572746362598, 0.13577422579565668, 0.2401555953208303, 0.31932174611210173, 0.05896193075222622, 0.09601114479548323, 0.3110234254723969, 0.15678518387404505, 0.11882257124437234, 0.09179629124404987, 0.055841041345447984, 0.21333792249502892, 0.1597060835526527, 0.37977665607968936, 0.15163509085711024, 0.12462140630357021, 0.26916291417923255, 0.10439679325959095, 0.07306413871460249, 0.42935854760131287, 0.180674113871089, 0.17051132809744107, 0.43578141962047057, 0.34935537368392633, 0.170729425615456, 0.16543344089371492, 0.09863871821023695, 0.6663437163420862, 0.6485279815175253, 0.6247770380326351, 0.6376018866145725, 0.529444614705921, 0.6808419819924665, 0.5661541059874642, 0.890082851960325, 0.5846425096261283, 0.11220403786957356, 0.04685169704139802, 0.09075026514391571, 0.09769126996399535, 0.09800166245532349, 0.16499837342467671, 0.06319919669803709, 0.11345019987197269, 0.07852337137618526, 0.15829289047387773, 0.1763736683806152, 0.3287049555876468, 0.25694329115493275, 0.3460567568027524, 0.2239399435324474, 0.22833199687711347, 0.23834388090870728, 0.16151901871415497, 0.19619153962575286, 0.28309294254026707, 0.1696118422153462, 0.27278934690494683, 0.18828386765683247, 0.2333583132678705, 0.1892462030373343, 0.2570454864194126, 0.2355296782176075, 0.2222383069773839, 0.16644327327337383, 0.18676590198463905, 0.20900826745140455, 0.15876894668236075, 0.2166696004631189, 0.19847209439938074, 0.2724063821092182, 0.20220193833924072, 0.20965986571122774, 0.27131302086600295, 0.23131875099177324, 0.24249507362224954, 0.2165142210901827, 0.2109993717392975, 0.24540830113488032, 0.19723728551708453, 0.20223723853218345, 0.17381983662064326, 0.19867708951239094, 0.21276301482866822, 0.1879053297473432, 0.20945789889283128, 0.18048470725283128, 0.18446851827038246, 0.16668439260606416, 0.1743791461528832, 0.1696978853688499, 0.12711420711033183, 0.154402198575725, 0.946412593828182, 0.18940158158365528, 0.18847488215367303, 0.09993997627650975, 0.17021334748311912, 0.16307116175255632, 0.08327013136365258, 0.2114375674131168, 0.15617795296127368, 0.21244409213220383, 0.1285484597651706, 0.21340643464597486, 0.10489495889582501, 0.9125367485964233, 0.15694349393100349, 0.1778959264150477, 0.21556391022886678, 0.20407719458460738, 0.1556876916948553, 0.1222964094580653, 0.19849246759745132, 0.16849531963825992, 0.19992550299389766, 0.2663512903104167, 0.1138202750448889, 0.07687172596757597, 0.10075172837192004, 0.0920229509831646, 0.08111745167855478, 0.09084836707653243, 0.0821127713558144, 0.10699353786715005, 0.10136450378996054]}, "mutation_prompt": null}
{"id": "bcfd8df6-5704-424c-a06b-644749df9797", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "71166f0e-9b12-4341-a8fe-84a9eb1c466a", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "37299650-16a7-4e66-b388-e05fd8b41c17", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "b4d40179-1651-4a12-a794-403df1d6d573", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "7e558eff-f2da-4870-8459-0ddb92db83e9", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "a8f8125a-ace3-48e7-b149-789ee58ea7c8", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "e422d27f-b46e-4172-8d63-800ce438a45c", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "31e983fc-8670-40f8-b079-a6fb1bee69da", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "14ffa8c8-9122-46c2-9b16-2ed3de5da72d", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "7e7bf9a7-c55a-42b4-87ad-a257ca900d72", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "712d2f80-7df7-4df1-9029-f7b50a1e1803", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        u = np.random.normal(0, 1) * (L ** (-1/3))\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1/3))\n        return step\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDELevy", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight to enhance exploration and exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.949770427797182, 0.9313123779775676, 0.9299150772664551, 0.9473621241831203, 0.9430424405168668, 0.9455686816042337, 0.9335490473099227, 0.9390968831563146, 0.9470493008826233, 0.9276880254076099, 0.857029530959377, 0.8755931578758774, 0.8476339495342597, 0.8551824833334383, 0.8584989381163389, 0.8632838177039364, 0.8956240181414757, 0.8333634748597338, 0.05285257772081442, 0.1261662623374039, 0.08626642332098067, 0.12018919294894459, 0.16562448071997316, 0.08133609983695933, 0.05811100981395134, 0.08738501288175049, 0.11303648677577605, 0.07493510637691869, 0.08361589074765052, 0.07275242461217313, 0.08736409870420936, 0.037068340407807265, 0.07765962169216745, 0.07319556279796835, 0.08086965620724529, 0.08286898069334547, 0.9914157737276607, 0.9842473430731042, 0.9910262162014923, 0.983456020182299, 0.971597654314159, 0.9940221380170589, 0.9915231863971621, 0.9952014995012116, 0.9879736528570285, 0.7523108426885198, 0.576558351515964, 0.704178202794613, 0.8052080098184373, 0.6377036874497871, 0.767156150483932, 0.6141679937919309, 0.7674303553578816, 0.8296396782631466, 0.2317645330672986, 0.21520987144365777, 0.20801061245885255, 0.17832190544316906, 0.28334221681672456, 0.28172019498964496, 0.23747909329390327, 0.17859877991371265, 0.4103307662779162, 0.7300015911159117, 0.7299633867130002, 0.7527921084885372, 0.6228712879653746, 0.8072380715267168, 0.7137532330876522, 0.6439034325359048, 0.6711965376177111, 0.6810811631100164, 0.6436661715361867, 0.13142042088217132, 0.13460910095418932, 0.8285470358172105, 0.13716663825474806, 0.5658866460894569, 0.657412281044913, 0.7060560299587668, 0.12879907364137144, 0.11858338265889912, 0.043390309747841416, 0.0806234009494885, 0.104222854829354, 0.059735408621539476, 0.03653745746364567, 0.12306619090083859, 0.08512123886578482, 0.26165354149851927, 0.32195511912042307, 0.23617625348094118, 0.2000953200539447, 0.34801398634963865, 0.0840371211019737, 0.147154019443268, 0.21629270259136224, 0.17968990275830288, 0.1851610283165851, 0.10573928883314165, 0.16573001400852627, 0.15960126385012896, 0.6397966769317867, 0.48644523365283276, 0.41811313852814325, 0.18302132518214675, 0.3358772554690622, 0.27775191929817333, 0.23181181497041092, 0.30907630543679065, 0.2941104011303458, 0.2522004659579159, 0.2726647711851037, 0.34056180990309437, 0.263412832014123, 0.26120093555371215, 0.10842232371165483, 0.7770082434044392, 0.7388841525720965, 0.7170503501834492, 0.6912216534347295, 0.670293962310178, 0.6928818633339389, 0.6213146252174311, 0.6536564419149484, 0.8251520874768603, 0.11262774887103644, 0.10248530523123334, 0.11951138569720299, 0.11912099300252921, 0.0576641369242068, 0.12018589045353456, 0.07045873929481661, 0.0899886688289071, 0.10713590610254942, 0.1475950484286166, 0.1527776784295951, 0.15427752709128473, 0.23919619843181306, 0.3334399700547006, 0.21947339258782284, 0.17732927970861234, 0.2006385630991705, 0.19467818343445653, 0.2860833389594487, 0.28381606448389063, 0.1761355185563832, 0.22704084102748356, 0.1781617489622782, 0.26582336514462146, 0.17328525046874388, 0.24523303828842113, 0.25472659887258864, 0.21979502573901932, 0.24021298717263528, 0.1496693235171237, 0.20366302892264598, 0.14319609024328006, 0.16571735516737574, 0.1996015128872315, 0.22825162357062767, 0.15551121764136533, 0.20284165509866403, 0.230542544768217, 0.24360995232726412, 0.21951161421025467, 0.23827701770699727, 0.2780327791860191, 0.2834971053498828, 0.22158325704131432, 0.2565804287956799, 0.2147953504577329, 0.2578720064806904, 0.1833709742574734, 0.18777432283945172, 0.1697605232709577, 0.18730002833609438, 0.21251189656483715, 0.17966444679798865, 0.21201608961602503, 0.9538995602138752, 0.9454218646553202, 0.14842532278666964, 0.9218766411574161, 0.2011240406673135, 0.16780189808936663, 0.12270748309018586, 0.16930884635704546, 0.16748032243515631, 0.08317337511619294, 0.21244130799265537, 0.8769177101858536, 0.21242479404094305, 0.8989288697283515, 0.21216677447227872, 0.21413941049653162, 0.8297526943617634, 0.11268521113226848, 0.18846176726811015, 0.1860741689967298, 0.36316380440855855, 0.24907433529950174, 0.1999293781883572, 0.2505367265106708, 0.21795815622061543, 0.1626728091225781, 0.17953217901896046, 0.10870384583230785, 0.11435368734301132, 0.09552187785792887, 0.06857000955518433, 0.10848697318876677, 0.08732942429264601, 0.08400812017681547, 0.07073486768153603, 0.09338266433113618]}, "mutation_prompt": null}
{"id": "c2020b55-e6ce-470d-ac87-efdb01be2804", "solution": "import numpy as np\n\nclass EnhancedHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 20\n        self.population_size = int(self.initial_population_size * 1.5)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.7  # Slightly reduced DE Mutation factor\n        self.CR = 0.8  # Reduced Crossover probability for diversity\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.3 * np.random.rand()  # Vary mutation factor\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Vary crossover probability\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedHybridDE", "description": "Enhanced Hybrid DE with Dynamic Population and Adaptive Parameters for Improved Convergence Speed in Black Box Optimization.", "configspace": "", "generation": 61, "fitness": 0.40383754379577314, "feedback": "The algorithm EnhancedHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.30.", "error": "", "parent_id": "a8218689-f320-430e-af7a-2c7031d3d075", "metadata": {"aucs": [0.9475584972792769, 0.9223164203910236, 0.9351149007098307, 0.9284789142881497, 0.9400227167145745, 0.9112759714160718, 0.9376546410440676, 0.9384044603729463, 0.951759739934739, 0.8822002111946954, 0.8749329350486725, 0.8941385093449612, 0.882234667041688, 0.8778424285098134, 0.8514513650355999, 0.8598192660913901, 0.8664292768268536, 0.8773268214460003, 0.14648725897068926, 0.11729974600127901, 0.05797154146892136, 0.09731213696086038, 0.12488416180276729, 0.0903519501563782, 0.08101012391176499, 0.11821465005406862, 0.12683219448552796, 0.14317525495541372, 0.12466628067513508, 0.06112357833440052, 0.09304275284030605, 0.13106449165392586, 0.09121116743066726, 0.09613867186408931, 0.10596728985714365, 0.13384563557856222, 0.9917580049333238, 0.9897021158691478, 0.9966376764803425, 0.9842946442796545, 0.9926283641983517, 0.9684444004801329, 0.9926379444753948, 0.992585363101873, 0.9822896862804352, 0.8147823045244665, 0.7882408469557499, 0.7547297501845966, 0.7957440885409961, 0.7253623066142745, 0.6539112148661145, 0.7664442024074709, 0.7618441179912352, 0.7941859511513527, 0.26416106883930524, 0.38575774364397875, 0.22793174989693787, 0.3817938923739057, 0.21228868658037203, 0.2818682970911741, 0.3197480306544931, 0.2336060447811823, 0.2312105385954224, 0.741083685290951, 0.6541190767945124, 0.6165888173491889, 0.756853529403369, 0.7138826586617415, 0.6384503112163338, 0.6620533618046589, 0.13357648565441937, 0.6968969911829117, 0.13720562712405515, 0.5492837221584698, 0.13441248193532407, 0.7413904387102495, 0.6973568927001754, 0.1369521291335688, 0.5981035503041371, 0.8418983207057721, 0.6731393185010806, 0.06435959224414656, 0.07513744313031057, 0.392290789651634, 0.04211703833856573, 0.5165517270776199, 0.09747527424198088, 0.6281051779178384, 0.09807156977643006, 0.20464529297077438, 0.1349623967198078, 0.3849079615439198, 0.323150233802749, 0.48272557326927745, 0.267118061612701, 0.1061025328151427, 0.17175083071481367, 0.1324213873209803, 0.558934676255036, 0.5994770012100894, 0.3108127928554053, 0.32178047791209674, 0.5645172493709829, 0.2059123860826515, 0.5118402534227702, 0.225593303944575, 0.11479237967938738, 0.5650218554178184, 0.23171073559178068, 0.3730607972896579, 0.24952211950964853, 0.4427424320631915, 0.3183303732078997, 0.3940540335867432, 0.32966964639620033, 0.43395235516247177, 0.3152999746432159, 0.6639181671004099, 0.7449100956735453, 0.8191757917577147, 0.6904253900462957, 0.8487918433299197, 0.8141341010198949, 0.6162933508589803, 0.7013668610324545, 0.7468784495766803, 0.16251759857558812, 0.07030927635260176, 0.13474052129708836, 0.14763371726858932, 0.10065261022710725, 0.11918235096551366, 0.14623716890386462, 0.0828450422801228, 0.08076776152427267, 0.1308581720855665, 0.2322102463965876, 0.18195558004519363, 0.15206168732108238, 0.36233725066321343, 0.1493650448055145, 0.27844901398533817, 0.1931851951119593, 0.17241473295382803, 0.31972048513452256, 0.4983565264155141, 0.3907332310607119, 0.30397698922515837, 0.3564585095296724, 0.3380120097094401, 0.3767885164545325, 0.39577670114559127, 0.25694999038741473, 0.2440425600603071, 0.2993640556463544, 0.16755121505046777, 0.2837799406876763, 0.24958636720989003, 0.36142108055590083, 0.29427796735852807, 0.21286000970315166, 0.252174049795613, 0.2264359777079018, 0.20064837916624345, 0.22088320661471483, 0.24665332486942948, 0.19816475069191974, 0.23701146904927806, 0.6531429227553553, 0.2029909552132767, 0.20605505086623122, 0.18606977774323685, 0.18172142222007515, 0.2005533886631804, 0.19361512452584917, 0.18552271330238101, 0.20181526648639292, 0.1870068959623873, 0.20909655902762447, 0.1702275256792274, 0.1888964201495007, 0.12711971969768543, 0.9387937643179189, 0.9529197022249475, 0.1995467147869181, 0.20066558625920983, 0.09974221962198504, 0.16982687098714688, 0.950412305212626, 0.8856676352273669, 0.8836534252061741, 0.12811449073749026, 0.8538965625133843, 0.1687573074562042, 0.21349598506694079, 0.10498732670202138, 0.21245700355557973, 0.10504759968463184, 0.22859516066244923, 0.20135353605767592, 0.1933607114409831, 0.20811836231659608, 0.18002935802507725, 0.20315559494652347, 0.19656360554216834, 0.17548727288200638, 0.2844113108056038, 0.0824995937504025, 0.10077351131429735, 0.119533874527188, 0.08547811925030468, 0.09681098248189246, 0.1012870808542713, 0.09398800364467774, 0.11531510840386527, 0.10877090587402616]}, "mutation_prompt": null}
{"id": "b168a4fb-667c-43e4-bfed-03b574a88767", "solution": "import numpy as np\n\nclass EnhancedHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 20\n        self.population_size = int(self.initial_population_size * 1.5)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.7  # Slightly reduced DE Mutation factor\n        self.CR = 0.8  # Reduced Crossover probability for diversity\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.3 * np.random.rand()  # Vary mutation factor\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Vary crossover probability\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedHybridDE", "description": "Enhanced Hybrid DE with Dynamic Population and Adaptive Parameters for Improved Convergence Speed in Black Box Optimization.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2020b55-e6ce-470d-ac87-efdb01be2804", "metadata": {"aucs": [0.9475584972792769, 0.9223164203910236, 0.9351149007098307, 0.9284789142881497, 0.9400227167145745, 0.9112759714160718, 0.9376546410440676, 0.9384044603729463, 0.951759739934739, 0.8822002111946954, 0.8749329350486725, 0.8941385093449612, 0.882234667041688, 0.8778424285098134, 0.8514513650355999, 0.8598192660913901, 0.8664292768268536, 0.8773268214460003, 0.14648725897068926, 0.11729974600127901, 0.05797154146892136, 0.09731213696086038, 0.12488416180276729, 0.0903519501563782, 0.08101012391176499, 0.11821465005406862, 0.12683219448552796, 0.14317525495541372, 0.12466628067513508, 0.06112357833440052, 0.09304275284030605, 0.13106449165392586, 0.09121116743066726, 0.09613867186408931, 0.10596728985714365, 0.13384563557856222, 0.9917580049333238, 0.9897021158691478, 0.9966376764803425, 0.9842946442796545, 0.9926283641983517, 0.9684444004801329, 0.9926379444753948, 0.992585363101873, 0.9822896862804352, 0.8147823045244665, 0.7882408469557499, 0.7547297501845966, 0.7957440885409961, 0.7253623066142745, 0.6539112148661145, 0.7664442024074709, 0.7618441179912352, 0.7941859511513527, 0.26416106883930524, 0.38575774364397875, 0.22793174989693787, 0.3817938923739057, 0.21228868658037203, 0.2818682970911741, 0.3197480306544931, 0.2336060447811823, 0.2312105385954224, 0.741083685290951, 0.6541190767945124, 0.6165888173491889, 0.756853529403369, 0.7138826586617415, 0.6384503112163338, 0.6620533618046589, 0.13357648565441937, 0.6968969911829117, 0.13720562712405515, 0.5492837221584698, 0.13441248193532407, 0.7413904387102495, 0.6973568927001754, 0.1369521291335688, 0.5981035503041371, 0.8418983207057721, 0.6731393185010806, 0.06435959224414656, 0.07513744313031057, 0.392290789651634, 0.04211703833856573, 0.5165517270776199, 0.09747527424198088, 0.6281051779178384, 0.09807156977643006, 0.20464529297077438, 0.1349623967198078, 0.3849079615439198, 0.323150233802749, 0.48272557326927745, 0.267118061612701, 0.1061025328151427, 0.17175083071481367, 0.1324213873209803, 0.558934676255036, 0.5994770012100894, 0.3108127928554053, 0.32178047791209674, 0.5645172493709829, 0.2059123860826515, 0.5118402534227702, 0.225593303944575, 0.11479237967938738, 0.5650218554178184, 0.23171073559178068, 0.3730607972896579, 0.24952211950964853, 0.4427424320631915, 0.3183303732078997, 0.3940540335867432, 0.32966964639620033, 0.43395235516247177, 0.3152999746432159, 0.6639181671004099, 0.7449100956735453, 0.8191757917577147, 0.6904253900462957, 0.8487918433299197, 0.8141341010198949, 0.6162933508589803, 0.7013668610324545, 0.7468784495766803, 0.16251759857558812, 0.07030927635260176, 0.13474052129708836, 0.14763371726858932, 0.10065261022710725, 0.11918235096551366, 0.14623716890386462, 0.0828450422801228, 0.08076776152427267, 0.1308581720855665, 0.2322102463965876, 0.18195558004519363, 0.15206168732108238, 0.36233725066321343, 0.1493650448055145, 0.27844901398533817, 0.1931851951119593, 0.17241473295382803, 0.31972048513452256, 0.4983565264155141, 0.3907332310607119, 0.30397698922515837, 0.3564585095296724, 0.3380120097094401, 0.3767885164545325, 0.39577670114559127, 0.25694999038741473, 0.2440425600603071, 0.2993640556463544, 0.16755121505046777, 0.2837799406876763, 0.24958636720989003, 0.36142108055590083, 0.29427796735852807, 0.21286000970315166, 0.252174049795613, 0.2264359777079018, 0.20064837916624345, 0.22088320661471483, 0.24665332486942948, 0.19816475069191974, 0.23701146904927806, 0.6531429227553553, 0.2029909552132767, 0.20605505086623122, 0.18606977774323685, 0.18172142222007515, 0.2005533886631804, 0.19361512452584917, 0.18552271330238101, 0.20181526648639292, 0.1870068959623873, 0.20909655902762447, 0.1702275256792274, 0.1888964201495007, 0.12711971969768543, 0.9387937643179189, 0.9529197022249475, 0.1995467147869181, 0.20066558625920983, 0.09974221962198504, 0.16982687098714688, 0.950412305212626, 0.8856676352273669, 0.8836534252061741, 0.12811449073749026, 0.8538965625133843, 0.1687573074562042, 0.21349598506694079, 0.10498732670202138, 0.21245700355557973, 0.10504759968463184, 0.22859516066244923, 0.20135353605767592, 0.1933607114409831, 0.20811836231659608, 0.18002935802507725, 0.20315559494652347, 0.19656360554216834, 0.17548727288200638, 0.2844113108056038, 0.0824995937504025, 0.10077351131429735, 0.119533874527188, 0.08547811925030468, 0.09681098248189246, 0.1012870808542713, 0.09398800364467774, 0.11531510840386527, 0.10877090587402616]}, "mutation_prompt": null}
{"id": "ceb4bace-8d2e-4409-8418-880460fca869", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 63, "fitness": 0.41193693925860125, "feedback": "The algorithm AdaptiveMultiStrategyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.32.", "error": "", "parent_id": "c2020b55-e6ce-470d-ac87-efdb01be2804", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "0f8392e3-4ae7-4a2c-9615-879dfe60e0c7", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "6b46cabf-dda7-40bf-801e-92131deeb7b7", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "6b693343-c85b-44f4-aa95-9cde81219dfe", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "c03701cc-6f5b-4c72-a3e2-3210b09db825", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "e5238864-d502-481a-9089-ed555c94dd75", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "49395a73-1707-444c-b822-7839a5ec6c86", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40  # Increase population for diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.3  # Lower initial mutation factor for better stability\n        self.CR = 0.8  # Crossover probability to balance exploration and exploitation\n        self.alpha = 0.3  # Weight for history learning\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n        self.history = np.zeros((self.population_size, dim))  # History buffer for learning\n\n    def adapt_parameters(self):\n        self.F = 0.2 + 0.5 * np.random.rand()  # Broader mutation factor range\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Enhanced crossover variability\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover with dynamic learning\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                trial = trial + self.alpha * self.history[i]  # Learning from history\n\n                # Selection\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.history[i] = trial - self.population[i]  # Update history\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridDE", "description": "Hybrid Differential Evolution with Dynamic Learning and Adaptive Parameters for Enhanced Convergence Speed.", "configspace": "", "generation": 69, "fitness": 0.3342506390633808, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.8303987623202119, 0.802697197631261, 0.8478088105431558, 0.8520005819640213, 0.8339868512440147, 0.8113912904661653, 0.8558650363779461, 0.8399839896716005, 0.836576594570238, 0.29854193293656217, 0.3864525249097549, 0.3604591888214731, 0.3699491787238135, 0.3123957376193318, 0.47369912329665254, 0.3175863993591014, 0.46703653588047067, 0.41658039039832784, 0.11210308629704469, 0.10109938445891853, 0.09601221612913124, 0.09871703556301747, 0.10707946545997982, 0.11330374554714906, 0.09310810048309215, 0.09395050941407845, 0.09501744898953879, 0.0848498847681527, 0.09239308072076347, 0.10980130789463105, 0.08501912192844974, 0.08640733339068773, 0.09855074751286008, 0.08885689366738503, 0.11091267084181977, 0.1139504661984454, 0.9852504216676005, 0.9900417088629331, 0.9873314484865279, 0.9853213186256393, 0.9830517351733725, 0.9802038415582773, 0.9878332777734726, 0.9870135772183259, 0.9848284296560916, 0.29895700481527343, 0.32054657359125394, 0.2778318143502566, 0.2942461062130185, 0.3260456106995254, 0.30581667475457064, 0.3218713548290131, 0.3093737899698654, 0.33358169987098674, 0.7540103025267973, 0.7159884982496706, 0.7610906182091407, 0.8007143359528681, 0.7633101579786433, 0.8105339984127277, 0.818132252922336, 0.6947004376290291, 0.8893315105201323, 0.38837942643192136, 0.3607867449945086, 0.27178136414949816, 0.25326872391144695, 0.1471283685987257, 0.2948730545805993, 0.2408344806176954, 0.3016466388728568, 0.2798730177085569, 0.21709971931977012, 0.28298569260544215, 0.2668257675523087, 0.36139484868383454, 0.24309331115761312, 0.27514997404344255, 0.3528036456406185, 0.12575047321704602, 0.11430392003634493, 0.21549901087716772, 0.32401425693091224, 0.20737815307886975, 0.15602937356447766, 0.2582899936823455, 0.24237977011486878, 0.10458400883423546, 0.15482467067195116, 0.2776171325370065, 0.332561878433532, 0.3572976654805142, 0.3259455427591238, 0.31436710512490496, 0.32557684314768787, 0.3214443255015469, 0.22614749441259052, 0.3283597992675419, 0.3212668670790234, 0.0520852882249806, 0.06327353782967171, 0.0642863215311349, 0.06819153575831538, 0.16772794921263035, 0.08897495170683722, 0.06168626295470225, 0.07341301803839484, 0.1256467596420402, 0.25555629868629326, 0.310113828579599, 0.2512641429464527, 0.28620837233635577, 0.2642974683162779, 0.32685835508634653, 0.31570177552261813, 0.269124585073371, 0.13544410865817647, 0.5991028817303465, 0.6230362377984675, 0.5979664831767975, 0.6276901056222592, 0.6116168808911128, 0.5989531389794398, 0.6373291893001076, 0.6110737007021989, 0.6077320010372486, 0.10241191123577609, 0.09633919179515837, 0.08728843957512888, 0.1265479826154704, 0.12028705432229703, 0.108004386606249, 0.09161828282815565, 0.11617414285036642, 0.11368284265371398, 0.17796714090899513, 0.15108113946568769, 0.16136980584374183, 0.1431090377289831, 0.1367868279333545, 0.14521029996940793, 0.1736115704729969, 0.18215236226485731, 0.1818869317690207, 0.38491677764019816, 0.4096049095452252, 0.42242136974123057, 0.3605689608555144, 0.4018826175147536, 0.4125791428790453, 0.4313953775557927, 0.4716468776210697, 0.42504915187789183, 0.27663277642528206, 0.31186430859919567, 0.3057902511973618, 0.30250038913761124, 0.18595268288574518, 0.32372508033746183, 0.2837366962003153, 0.3370784838666222, 0.3372089902571693, 0.19523249624428574, 0.1984975280710326, 0.18017992377669145, 0.2266226815622081, 0.1751291335052605, 0.18592801264852588, 0.186243779780921, 0.18924248472796712, 0.19433280395836017, 0.20547783221562188, 0.21936691018238552, 0.19137730985903934, 0.19416987084616277, 0.25618672256304775, 0.17690018986328138, 0.18384136427616038, 0.1887060773294561, 0.19727397251174117, 0.8409873412542531, 0.2020966280288199, 0.17226280135420724, 0.8014063579380736, 0.19707593648946398, 0.7815659187389692, 0.6591126473841293, 0.16809979795688612, 0.8501402095798629, 0.7520793827377372, 0.25302326734767955, 0.21013453851749653, 0.6272696728770484, 0.6801427325198512, 0.19602291696024, 0.10484395710916994, 0.21156887891725007, 0.10435376493193693, 0.1859788212116874, 0.18649235918498774, 0.19076246459208424, 0.20668886432737832, 0.1800540215600015, 0.18938708218617906, 0.18217631708025317, 0.1776953552672298, 0.1928544464728409, 0.08598214124480419, 0.07738756299154537, 0.08404198031554455, 0.07480402064321512, 0.07306668291204277, 0.08338886002015333, 0.0737701923448223, 0.07289644885229041, 0.09631100746182142]}, "mutation_prompt": null}
{"id": "13a71653-da6c-4ecf-9676-6906bfdf32f7", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "f3494653-4d78-4b3c-8789-714bd6da698d", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "7308c322-2e9d-45a2-a1b3-276e17c23c60", "solution": "import numpy as np\n\nclass QuantumAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40  # Increased population size for better exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Base mutation factor\n        self.CR = 0.9  # Base crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.5  # Adjusted to explore different step sizes\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def quantum_search(self, current, best):\n        return current + 0.01 * np.random.randn(self.dim) * (best - current)  # Quantum-inspired local search\n\n    def adapt_parameters(self):\n        if self.func_evals < self.budget * 0.5:\n            self.F = 0.5 + 0.3 * np.random.rand()  # Higher variation in early phase\n            self.CR = 0.8 + 0.2 * np.random.rand()  # Adjusted for early exploration\n        else:\n            self.F = 0.3 + 0.2 * np.random.rand()  # Tighter range in later phase\n            self.CR = 0.9  # Focus on exploitation\n\n    def dynamic_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:3]  # Focus on top 3 solutions\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.dynamic_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Quantum-inspired search addition\n                quantum_trial = self.quantum_search(trial, best)\n                trial = np.clip(quantum_trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "QuantumAdaptiveDE", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Selection and Quantum-inspired Search for Accelerated Convergence.", "configspace": "", "generation": 72, "fitness": 0.3602131778826624, "feedback": "The algorithm QuantumAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.885304117246333, 0.8856605988082246, 0.8883082842359533, 0.892304129065493, 0.12427765243960165, 0.1410919200163011, 0.8752580267047498, 0.8810124543419343, 0.1826655391497478, 0.7916974652871461, 9.999999999998899e-05, 0.07853729355459871, 0.0668451592136644, 9.999999999998899e-05, 9.999999999998899e-05, 0.8015212535527854, 0.05422124061399658, 0.7517227063043892, 0.1415104203789015, 0.5511292939279449, 0.1546368764118432, 0.30543774811629487, 0.13280214761748976, 0.16356924584181054, 0.15822455617696596, 0.13381465611307064, 0.1479896692470991, 0.1376388772615963, 0.11029653933815753, 0.12033468687313764, 0.12145565036912032, 0.1394717992727259, 0.10594882787468252, 0.09570266816650164, 0.12527937098279052, 0.12392686782636297, 0.9948983412123144, 0.07493217768825056, 0.9951429565071109, 0.9903393572007831, 0.996012413680115, 0.9884629606503109, 0.07498648111105521, 0.9930179033251917, 0.9954710021047787, 0.37870898637507466, 0.396549936620739, 0.40623198978250963, 0.4178122075629078, 0.14456523510503572, 0.44981522300824106, 0.3904520344974126, 0.4395626607581221, 0.08920744139107262, 0.22635386072063923, 0.8098324983213229, 0.8345712679081853, 0.8383790190515317, 0.11628824545860283, 0.20311027697927142, 0.8077691277565072, 0.8830483978343744, 0.8414482020868219, 0.6352840510648705, 0.6473713097020752, 0.7078368826604904, 0.6440195434399578, 0.648182138789785, 0.605979769721588, 0.6588233274258317, 0.6728069611758943, 0.1295029537712069, 0.6156194499775178, 0.010120827540252453, 0.01654350683880146, 0.6468218692869486, 0.6500312807750069, 0.6051221383741577, 0.12925019328645904, 0.6982505037240172, 0.12993218897580228, 0.5369863595653572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5346541694597209, 9.999999999998899e-05, 0.6354906254138593, 9.999999999998899e-05, 0.6053357547694667, 0.5964500113329432, 0.5262306133967483, 0.0771623236948823, 0.5186550702197711, 0.01733227523133285, 0.4811882185640932, 0.5551467737037578, 0.6582742596682043, 0.5433804841769545, 9.999999999998899e-05, 9.999999999998899e-05, 0.2605017688037403, 0.3202778086892507, 0.09682725081912413, 0.07717336277342035, 9.999999999998899e-05, 0.09974506212179512, 9.999999999998899e-05, 0.3385996863515828, 0.3834587984168525, 9.999999999998899e-05, 0.4272135241365833, 0.4232420801210022, 0.4505556179982594, 0.049424994324601346, 0.36703136560186533, 0.40312035188182205, 0.7683255952303294, 0.7458277402564465, 0.71791033451354, 0.7444748023423562, 0.7410210502076604, 0.7837658247798226, 0.7996882286705327, 0.7710287467648694, 0.7541231354273699, 0.1396649077725335, 0.1287864871549529, 0.10194421190476821, 0.11802862863899533, 0.114565898018816, 0.11373828527651475, 0.09400248343293993, 0.09349642492512977, 0.0966497691575412, 0.1817728559996452, 0.20088338406542627, 0.21002814933475078, 0.16306561137868925, 0.4301987608624248, 0.18473651753007114, 0.2336199423859292, 0.2967204058502466, 0.3074119632417971, 0.5351697095438971, 0.4396433455346761, 0.5139054870153772, 0.5121812972760005, 0.5380106021593621, 0.45715851456191503, 0.5021522728453105, 0.5315659719208359, 0.5064150812315071, 0.4451389601438692, 0.36111853117364234, 0.40860159926775497, 0.3913618071428333, 0.19194267084076078, 0.38278473212613695, 0.2821082945292842, 0.45185060521636666, 0.5476687233359223, 0.18040539828002278, 0.19241520155126368, 0.194754810596944, 0.19045243185838656, 0.21082257765217738, 0.1821098507446942, 0.19532229122928424, 0.19910235029584722, 0.18925648541821305, 0.21903089075744142, 0.20743046653369435, 0.19748489952066683, 0.2193167276545812, 0.2155440907410784, 0.5779854024147711, 0.7035993314051016, 0.4605999435390271, 0.21467188518512414, 0.8309541062001766, 0.2586974002476836, 0.11285243675151246, 0.16778605749344766, 0.1945181024250655, 0.8861707674679313, 0.14243685676399032, 0.1673787967426863, 0.7884034343545474, 0.8893510049317206, 0.20782307500371022, 0.11101494058463124, 0.19701443990928047, 0.16628904643692877, 0.8734761633102754, 0.19918232180189333, 0.18881383986333522, 0.2898274466249098, 0.21250378371499257, 0.17540247945301146, 0.18953517165112121, 0.18078519059867448, 0.19716573643540292, 0.1886773519232603, 0.21126736004077007, 0.1793564823876148, 0.1813653805220098, 0.07967924077713251, 0.08477342238086605, 0.08048216224605109, 0.08963647759534632, 0.07425382959130744, 0.08240101579223791, 0.08835967225141106, 0.07620260533840595, 0.09481998187651042]}, "mutation_prompt": null}
{"id": "df1122eb-8991-4118-b35a-455906750145", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "2f808d0e-42e9-44c1-9070-6bf1764a1e60", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "707efaca-21ee-4828-a215-db1b58fdd9cc", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Further increased initial population for more diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.scores = np.full(self.initial_population_size, np.inf)\n        self.func_evals = 0\n        self.dynamic_population_size = self.initial_population_size\n        self.F = 0.5\n        self.CR = 0.9\n\n    def levy_flight(self, L):\n        beta = 1.5  # Adjusted for exploration-exploitation balance\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step * np.random.normal(0, 1, self.dim)\n\n    def adapt_parameters(self):\n        self.F = 0.3 + 0.5 * np.random.rand()  # Further variation for adaptive mutation\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Increased range for crossover\n\n    def multi_strategy_mutation(self, best_idx):\n        indices = list(range(self.dynamic_population_size))\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        if np.random.rand() < 0.6:  # Favor DE/rand/1\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            return self.population[best_idx] + self.F * (self.population[a] - self.population[b])  # DE/best/1\n\n    def dynamic_population_resize(self):\n        # Gradually reduce population size for focused search\n        self.dynamic_population_size = max(4, int(self.initial_population_size * (1 - 0.5 * (self.func_evals / self.budget))))\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n\n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.initial_population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            self.dynamic_population_resize()\n            for i in range(self.dynamic_population_size):\n                best_idx = np.argmin(self.scores[:self.dynamic_population_size])\n                mutant = self.multi_strategy_mutation(best_idx)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                levy_step = self.levy_flight(1.5)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybridized Adaptive Differential Evolution with Novel Levy-based Exploitation and Dynamic Population Resizing.", "configspace": "", "generation": 75, "fitness": 0.21825421652850727, "feedback": "The algorithm HybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.4360877298910937, 0.4495870030116009, 0.4505353305679971, 0.44640424795068323, 0.44635656341432406, 0.45014589520653125, 0.4691675392211553, 0.44337013809924974, 0.4368318429207061, 0.05527569517538122, 0.020911494358723415, 0.029447572253317067, 0.034939714259775045, 0.0793674580187953, 0.03166289078731732, 0.013104770911751773, 0.03081317707693254, 0.025299080971350696, 0.09173516123158665, 0.09627719441255356, 0.0946424109453966, 0.09848112149378263, 0.10141068849609747, 0.10769002079761358, 0.10289321921720906, 0.09776724032896433, 0.10137313183548358, 0.09366267656406402, 0.0905528740860746, 0.09435865988963321, 0.08820010791693589, 0.09623217958266628, 0.08073135719523328, 0.09562517517559521, 0.08725670146811282, 0.08887156813805397, 0.9766773094645773, 0.9792690147133326, 0.971964235334376, 0.9841892589830824, 0.9906843294144255, 0.9733377342425632, 0.9802491551882193, 0.9671887239148581, 0.9815137269150451, 0.2609838465632337, 0.25612497086992325, 0.26044304633088, 0.28083209505464213, 0.2790407623934411, 0.2639150837848422, 0.23817012960747075, 0.2678453922591485, 0.2598295303899083, 0.43400942595305536, 0.32582300827837785, 0.4906815044542835, 0.4213253576641307, 0.3299541956569009, 0.33046710783214317, 0.29217299860643275, 0.42756018046623256, 0.3652187310118783, 0.14338455384991644, 0.1615308854998866, 0.13989469988406567, 0.1500653422846654, 0.17913068393782416, 0.14271146947563906, 0.16411775215101043, 0.16703657715463593, 0.15446312317548616, 0.14582869211426763, 0.14381487460376918, 0.14134486021668125, 0.15221267857698695, 0.136191734935583, 0.13690473064788855, 0.15892407821410415, 0.11357326301473292, 0.15923763793892942, 9.999999999998899e-05, 0.014029191016634246, 0.022729915638410425, 0.019688308433397417, 0.002981033166902902, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004077727446194501, 0.009901264092696094, 0.09244210609426917, 0.050497056087733805, 0.1023101658601947, 0.12320279727191319, 0.06337674538399674, 0.06834865736222806, 0.13733291399442993, 0.08122371182812527, 0.10428155503327285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08270246546413695, 0.08572574897856833, 0.1046500540978692, 0.10010816817251, 0.11420077810403051, 0.11208520512784403, 0.12031507069821656, 0.0654328685857678, 0.09637072995840268, 0.4005498203700757, 0.4031714870342181, 0.3792090159207444, 0.37696884433637623, 0.4090500749235355, 0.3993144776755341, 0.39345754751039275, 0.39195233982764344, 0.3946189441701583, 0.09613053645337055, 0.09057192625561183, 0.08836431447426263, 0.09829138837598661, 0.10709025038169562, 0.09275026285174759, 0.08695387102415875, 0.11737312017378976, 0.0834428314310689, 0.15412940416018295, 0.1539086807937161, 0.18962585142951938, 0.21939501845369747, 0.19221897010994726, 0.17596669069492998, 0.13443211208471129, 0.1895685489589014, 0.15542341337612997, 0.28462415125849916, 0.2871277847951643, 0.29256010047278025, 0.2822221839117187, 0.2892777073127475, 0.26490071190397524, 0.2910860505247175, 0.2882713376552505, 0.2809289352752975, 0.2259839297437337, 0.21563660092817782, 0.19334724380744106, 0.21897784963601474, 0.19462684936703667, 0.20944314412661658, 0.20325309714366302, 0.23009776545332894, 0.21569413698927642, 0.20061117494903546, 0.20269717072794435, 0.1830823933161856, 0.1841215590681149, 0.1817353765151929, 0.1975778305468443, 0.19783339159451718, 0.1921150115022301, 0.19179586014908123, 0.24099238692560154, 0.2473018932524823, 0.17912250236403449, 0.1865347708898667, 0.21081885266691525, 0.1723652413983091, 0.18741115650865536, 0.19127231947922896, 0.17967311804295572, 0.590899539866336, 0.2078504781402386, 0.196634778707519, 0.17707764745460264, 0.6121808833474924, 0.16186805725481845, 0.609434215482492, 0.16901656845134383, 0.6375557353281635, 0.47770317487664016, 0.20978972118391337, 0.1665966316888282, 0.20442811947330874, 0.16683506626769617, 0.20074443290442012, 0.4804443924231451, 0.21281856758315443, 0.15392289967132888, 0.18809198300617735, 0.1942610628867979, 0.19104845018266192, 0.18238033206748228, 0.18547672388396397, 0.19376930519812685, 0.20257655070854685, 0.1983571918025363, 0.17554602907704686, 0.0704595918385994, 0.07407637655553301, 0.07895156010679727, 0.08848390129775285, 0.08912951192717389, 0.07014746954496132, 0.07958983146752108, 0.0799299087734836, 0.08333033718082894]}, "mutation_prompt": null}
{"id": "a64bd3ed-0d6c-4a99-b95b-972e34014e04", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "d6e1c57d-3454-41b1-9083-b94b8a16e0eb", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased population for diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for balanced exploration\n        self.CR = 0.8  # Balanced crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.scores = np.full(self.initial_population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.3 * np.random.rand()  # Slightly narrower mutation factor range\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Increased crossover range\n\n    def competitive_selection(self, trial_score, current_score):\n        return trial_score < current_score\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.4:\n            # DE/rand/1 mutation\n            indices = list(range(self.initial_population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/1 with competitive mutation\n            indices = list(range(self.initial_population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a = np.random.choice(best_indices)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.initial_population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.initial_population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Lévy flight step for global exploration\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection with competitive selection strategy\n                trial_score = evaluate(trial)\n                if trial_score is not None and self.competitive_selection(trial_score, self.scores[i]):\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Adaptive Differential Evolution with Competitive Selection and Mutation Strategy for Enhanced Convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'b' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'b' referenced before assignment\")", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {}, "mutation_prompt": null}
{"id": "391e37e1-0a33-4cc5-aca2-482f739a340a", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Increased initial population for diversity\n        self.population_size = int(self.initial_population_size * 1.2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for more stability\n        self.CR = 0.9  # Higher crossover probability to encourage exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self, L):\n        beta = 1.7\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.4 * np.random.rand()  # Wider variation in mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def multi_strategy_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n        else:\n            # DE/best/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            best_indices = np.argsort(self.scores)[:5]  # Select top 5 as potential best\n            a, b = np.random.choice(best_indices, 2, replace=False)\n            c, d = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[c] + self.population[b] - self.population[d])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.multi_strategy_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight(1.5) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Differential Evolution with Multi-Strategy Mutation and Dynamic Subpopulation for Accelerated Convergence.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9499254973503843, 0.9440899493994659, 0.9422759055145771, 0.9310496238456517, 0.9520634443711742, 0.9430689076572975, 0.9469231982336025, 0.9458250416390106, 0.9515930369602998, 0.8943083291744027, 0.8790985645103289, 0.8907141479763061, 0.886397854421583, 0.8654960055708791, 0.8587803681527163, 0.8830898083227604, 0.84410280803709, 0.904530223173091, 0.09820327375584403, 0.08123802521717605, 0.1198585247093451, 0.13625934068131995, 0.09397806179677304, 0.16398842391174784, 0.0887706525157439, 0.10722520396466695, 0.13570553151749076, 0.11849437344992275, 0.10232388871957943, 0.10051990151372936, 0.12490225805940336, 0.07998596928568624, 0.09738712164747654, 0.09673262239298797, 0.04462642623920565, 0.14412915086634492, 0.9953906592502344, 0.9938906823963927, 0.9930515520463686, 0.9940434098367908, 0.9921473589771642, 0.9930380763254046, 0.9932610768507764, 0.993638164162989, 0.9943716977918066, 0.7688810817511357, 0.7134485573324294, 0.7708390552231376, 0.7000438675462023, 0.7697086308670538, 0.8076065096429301, 0.7480521595334582, 0.7975475705691839, 0.790498781275202, 0.23041484484956787, 0.8629163131734797, 0.1936961154640472, 0.2232325207238003, 0.14114181351441835, 0.28305101397956345, 0.12595481702825395, 0.14355694910831407, 0.24805577787103394, 0.8613243950320855, 0.7937232054926899, 0.7536645605117162, 0.7665221333947648, 0.13573083752086856, 0.13528964342569305, 0.8003101380900148, 0.7970042767426224, 0.7475823957255898, 0.1360319121271779, 0.7770622979503921, 0.8458202746570095, 0.7328469890509168, 0.7654464891732427, 0.13608052612905253, 0.7726592641417747, 0.760614603536898, 0.8250610293007064, 0.08758478760752442, 0.14753235294390143, 0.05327691976451587, 0.08365149546161099, 0.07083558961801206, 0.10648325141869319, 0.6356473694847546, 0.6240688493743753, 0.6350505405338018, 0.30916901874611014, 0.3189320047126817, 0.36901822330327894, 0.15525713475731207, 0.07103968157601792, 0.2092461650666545, 0.6824201701290257, 0.2438806079640884, 0.40757335769149494, 0.4027222139378098, 0.2723700316605243, 0.6703571454322246, 0.08584222351125936, 0.49131112888181483, 0.22089937425629835, 0.1528996368666683, 0.3413072090611, 0.47348477905421993, 0.5274152276421065, 0.2186501586234224, 0.421039250273221, 0.4048422345603764, 0.5674190834226323, 0.4726649922175429, 0.4783980900996495, 0.35637645900386694, 0.3954507827030451, 0.8741639497004299, 0.8005803482054262, 0.7265710127725061, 0.657286784128338, 0.7893201962629464, 0.7278421220436573, 0.7877886032518684, 0.8874003732296143, 0.7780814489975498, 0.058041089254148526, 0.09394007994466869, 0.1180282887135976, 0.19103560233701122, 0.05469737415929321, 0.13601767401239617, 0.08029726039022644, 0.07542615397201191, 0.08396158776833251, 0.20443297171320018, 0.192333519082449, 0.14836271024717518, 0.21674784226926624, 0.20335090060838046, 0.15330890939634556, 0.5709976458382218, 0.19267730931052562, 0.23861229383762583, 0.2972683533960496, 0.27355217225291895, 0.5372410640861118, 0.2288048083250095, 0.3411074494324362, 0.29158592090856306, 0.32159758041884723, 0.3314422027743822, 0.25640726423249816, 0.36195128318822845, 0.13416955793050966, 0.19502696631947303, 0.27149345618648946, 0.17193764225998853, 0.19247113318385378, 0.19519126498795003, 0.2382078707444525, 0.2758623561588084, 0.21043590233918863, 0.20367097091562536, 0.20813402545105752, 0.22261940600356034, 0.2594723378724827, 0.2441660555716585, 0.2516058056520476, 0.30521370658500446, 0.21148683316709305, 0.19442491346779467, 0.17035239313395978, 0.20372738971899962, 0.20172510194280746, 0.20065218223260095, 0.20079242133737263, 0.18934122251886343, 0.25578679656853753, 0.1990393730443204, 0.9510985634364124, 0.12701108167435837, 0.15487341045358294, 0.9680462479248759, 0.2013730159247299, 0.16977499976029098, 0.14318720078675817, 0.16993960991481583, 0.21364405213777715, 0.9513113912157035, 0.2134728501464791, 0.1452889999465684, 0.9242523776430589, 0.16879456105815682, 0.15717573697155207, 0.21417173884743812, 0.12787066000663505, 0.9412645171724205, 0.20911709034640957, 0.2327459731268231, 0.24341889628961622, 0.1499467066874357, 0.18864323833164276, 0.22597167865721368, 0.25206029200442703, 0.19915735451955974, 0.2741607287944764, 0.09980506729678418, 0.07559858261733876, 0.08364590576174491, 0.10446007661928502, 0.09603755005043058, 0.1072008847300554, 0.0907259572332283, 0.08818315955128642, 0.1096464514506682]}, "mutation_prompt": null}
{"id": "153fad17-88ac-405c-affe-dc5598c35486", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 79, "fitness": 0.43077864873777105, "feedback": "The algorithm HybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.30.", "error": "", "parent_id": "ceb4bace-8d2e-4409-8418-880460fca869", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "508b401f-ef32-420a-902b-fba8f0f0e0ac", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 50  # Increased initial population for enhanced exploration\n        self.population_size = int(self.initial_population_size * 1.2)  # Slightly adjusted population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.7  # Increased mutation factor for broader search\n        self.CR = 0.7  # Adjusted crossover probability for balance\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def dual_levy_flight(self):\n        beta1, beta2 = 1.5, 3.0\n        sigma_u1 = (np.math.gamma(1 + beta1) * np.sin(np.pi * beta1 / 2) /\n                   (np.math.gamma((1 + beta1) / 2) * beta1 * 2 ** ((beta1 - 1) / 2))) ** (1 / beta1)\n        sigma_u2 = (np.math.gamma(1 + beta2) * np.sin(np.pi * beta2 / 2) /\n                   (np.math.gamma((1 + beta2) / 2) * beta2 * 2 ** ((beta2 - 1) / 2))) ** (1 / beta2)\n        u1, u2 = np.random.normal(0, sigma_u1), np.random.normal(0, sigma_u2)\n        v = np.random.normal(0, 1)\n        step1 = u1 / (abs(v) ** (1 / beta1))\n        step2 = u2 / (abs(v) ** (1 / beta2))\n        return step1, step2\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.6 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.5 + 0.5 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.7:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Dual Lévy flight step\n                levy_step1, levy_step2 = self.dual_levy_flight()\n                trial = trial + levy_step1 * (trial - best) + levy_step2 * np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Learning and Dual-Levy Exploration for Enhanced Convergence.", "configspace": "", "generation": 80, "fitness": 0.045878184225776046, "feedback": "The algorithm HybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.11860917256239101, 0.08099573939876048, 0.0916041897440597, 0.13103955980024673, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.0754446916850493, 0.06854154161076553, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003167488323905898, 0.015070848613724208, 0.005275638633511881, 0.010544468052148481, 0.006493004426635696, 0.006570620486303191, 0.018505147871674454, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.0, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.045084250649534585, 0.04529032155668278, 0.04278205048616679, 0.05324558914821231, 0.046780137227089624, 0.037332462972905156, 0.06379241875032005, 0.053653043499155006, 0.03910579656890856, 0.06265423285317917, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.01119445381188322, 0.0, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.0, 0.026181922062048946, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322754993, 0.14829537673711224, 0.10270171191051303, 0.10265315387628593, 0.09571399605654973, 0.16104568613219816, 0.12639624065450605, 0.12096781838999704, 0.0, 0.0, 0.021886321886607996, 0.03257212990950742, 0.0, 0.01750168379108641, 0.0, 0.0, 0.02666833626569931, 0.08484849337016587, 0.08600231476351294, 0.11833361437130152, 0.13757644454574725, 0.10844057434014054, 0.10789794917811213, 0.08799080449358876, 0.08090029113184061, 0.07717165476235788, 0.09597227240618145, 0.10948869386197935, 0.16130937881362284, 0.1379205218140116, 0.11685663037404337, 0.10540477193499587, 0.12019368026040644, 0.17369512487615557, 0.11535598085832532, 0.059761631126171944, 0.0360265226978832, 0.08389423256590178, 0.05686290050998832, 0.06397588396999376, 0.06333484497577468, 0.08364015581209883, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.10482363617162227, 0.13336421106438556, 0.11026790024335642, 0.10239522617085317, 0.10887980745480186, 0.12237199858757541, 0.10192819487496041, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.0, 0.05559179745858711, 0.08958410382055226, 0.09029831541216649, 0.07318573935631267, 0.12070353966556191, 0.0665206661762211, 0.10692837481480566, 0.10502535409825264, 0.06926818844989102, 0.1103137036995071, 0.10258192672273381, 0.06922728298844594, 0.0505908534635271, 0.03728632333816162, 0.05893840155281016, 0.04680845216491614, 0.04009445607431428, 0.046897177062183215, 0.13471522306136396, 0.1282849674499068, 0.1475449842687161, 0.14543725022082632, 0.12243484664342763, 0.13224602528921636, 0.14961211855402412, 0.12496478658923171, 0.14680476350940785, 0.01351929609764324, 0.015817976510868692, 0.03129662407793532, 0.02691798931623457, 0.03415436066354682, 0.03872045048850137, 0.01612999899170031, 0.03793735337628057, 0.01754558650804161]}, "mutation_prompt": null}
{"id": "8f74d752-362f-47ac-98dd-7210e93e9756", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "94720de8-28e1-4308-98fb-13607def9893", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "dfbf9749-47b0-48c3-8ec6-923544b2c9dc", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "d4c3a77b-71de-4667-92e1-75cc04d3c27d", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "a4ba6fb9-3902-4dff-98a7-f0deedcbbe33", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "074decd0-ee26-4d22-978b-eaeecab7ddd9", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 50  # Further increased initial population for exploration\n        self.population_size = int(self.initial_population_size * 1.5)  # Larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.7  # Increased mutation factor for exploration\n        self.CR = 0.9  # Higher crossover probability for diverse combinations\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.3 * np.random.rand()  # Modified dynamic mutation\n        self.CR = 0.7 + 0.2 * np.random.rand()  # Slightly reduced range for crossover\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            # DE/rand/2 mutation with added diversity\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation with opposition-based learning\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            opposite = self.lower_bound + self.upper_bound - self.population[a]\n            return best + self.F * (opposite - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover with opposition-based strategy\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Lévy flight step integrated with mutation\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Algorithm with Enhanced Exploration and Opposition-Based Learning for Accelerated Convergence.", "configspace": "", "generation": 86, "fitness": 0.31619061617326205, "feedback": "The algorithm HybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.793064225518863, 0.7648645426004733, 0.7720302395549885, 0.7877302025705808, 0.7475675054936101, 0.810381982401607, 0.7754898764554901, 0.7470453882577492, 0.7750276533643726, 0.488730145154995, 0.44300471800631214, 0.42268563117393476, 0.48238267266086166, 0.4385950118443659, 0.47222595184749894, 0.5086579413280397, 0.38513156429072204, 0.4717499908044249, 0.13158825449906397, 0.10904211232868888, 0.15823790027195717, 0.10714290703029605, 0.10203253261565803, 0.15218911674265123, 0.155549807466835, 0.13510477470904803, 0.10947577372865835, 0.1277573350870318, 0.1074602222875366, 0.11124161383735953, 0.10859767266990494, 0.11981411424658528, 0.1049613426286845, 0.11065082091678813, 0.1183150937039894, 0.11809575759671076, 0.9913833193182874, 0.9785930869168078, 0.9877384153954358, 0.9866315063972071, 0.9796406662611586, 0.9886125864499692, 0.9853699187537135, 0.9881240293384315, 0.9873812943914659, 0.350782526364107, 0.34690502778555554, 0.3664076844178443, 0.3989911242910128, 0.35672232512775703, 0.3322439775225966, 0.407803673118173, 0.39027284692310227, 0.39490824215417974, 0.7706947526004471, 0.7243270602618059, 0.6175093955212214, 0.8785916707948154, 0.5387084438498912, 0.21092639798328194, 0.6272961048750282, 0.6951112865476906, 0.2230568613186732, 0.20604403350870737, 0.12358661190314069, 0.38579494199235265, 0.10908323660590247, 0.20232239078758107, 0.36832684329824683, 0.23948839871279837, 0.1099431182155729, 0.2735345346870155, 0.3119714694592197, 0.3753709006788434, 0.3221431162409567, 0.30500093517936766, 0.3402988322252769, 0.3836251102221335, 0.3481307282848134, 0.31289459097714245, 0.31482284753027023, 0.05344962854330604, 0.0645467104899421, 0.030545331488149197, 0.027052631205126132, 0.09589316567414186, 0.08738426386864517, 0.08062061637643769, 0.12593253820054107, 0.14141678932300206, 0.19139743539220166, 0.20411137249613953, 0.2402820692437042, 0.20998548237395676, 0.2357165659317041, 0.18910786658337697, 0.2206857841692197, 0.2539956138614945, 0.2165106306566864, 0.0653316693804803, 0.04242091808189985, 0.07741175364078623, 0.07656530858663735, 0.0663264443360827, 0.10273319146996651, 0.10692460119147496, 0.1314051220924104, 0.1799109617273763, 0.17803894975272738, 0.1336146157808713, 0.15217461883185657, 0.21476049051906954, 0.21422905775891754, 0.20523509862904266, 0.20537908379191105, 0.205221628151098, 0.12717000696706204, 0.5527925788749413, 0.5981686603558665, 0.5418526391384382, 0.5508568587490026, 0.5465073736716175, 0.593971001286236, 0.5605422002754616, 0.5444529880457797, 0.5588250822887049, 0.11225166747869642, 0.13809132694486037, 0.12848630136377837, 0.09917453290875777, 0.14783208186270624, 0.11466895675287758, 0.09486907897144425, 0.09028607945256606, 0.10133516505237661, 0.28452870090479143, 0.29994088578466305, 0.18076931006949615, 0.18550920759005507, 0.4159534061330653, 0.3705474942033463, 0.17903147877183312, 0.16149500382948667, 0.17094112069020062, 0.295406625544286, 0.3107113453700453, 0.29291293110632977, 0.4472971141496157, 0.3521843029159427, 0.34864724548364323, 0.3358241252004316, 0.3080813747234986, 0.31808977957377793, 0.28353195110089935, 0.2909512867507157, 0.2571147148548465, 0.18919768530849124, 0.30436108421265284, 0.23229025657676405, 0.22664100413368105, 0.27430154535820517, 0.19480083809829707, 0.25066078029160377, 0.24694833968131336, 0.25142534670214256, 0.2250988395175827, 0.22789619607658473, 0.2135107573060876, 0.20701493734502163, 0.22430571343753092, 0.2134260844098257, 0.18467934891643933, 0.22059403775505548, 0.19565865345636024, 0.19042295308605195, 0.2115733059178989, 0.19841052136177384, 0.22276030930272195, 0.20308672626397628, 0.1867785690218876, 0.1725428082769611, 0.18652954316759118, 0.840054109200923, 0.1673365313019074, 0.19900798727042146, 0.16740464107143105, 0.1715136899112133, 0.1541812892264024, 0.6571392136997933, 0.7842903484635587, 0.684343410652267, 0.7079005043697415, 0.20760211821465757, 0.4765806194886484, 0.1491230600337976, 0.16878781059030246, 0.7329478932692969, 0.7489487358368929, 0.18647474239477857, 0.1935681675294192, 0.18398391492416133, 0.1887544819791378, 0.1771691738985386, 0.1885518297849279, 0.20064849356439396, 0.1807048932647738, 0.17629762892881684, 0.09581513905985917, 0.09796604964918787, 0.08944718290613995, 0.0890138651477459, 0.08687163941170306, 0.07535403149780884, 0.09935018655809058, 0.09175343512903233, 0.09470883453446599]}, "mutation_prompt": null}
{"id": "44271ab3-577a-4a8e-8b62-a052aa205086", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "8bad44ea-dfb8-46ef-8b19-3ef24a7821b0", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "59dcd97f-ea22-4c85-885a-a5a08a13062e", "solution": "import numpy as np\n\nclass EnhancedDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 50\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.scores = np.full(self.initial_population_size, np.inf)\n        self.func_evals = 0\n        self.F = 0.7\n        self.CR = 0.9\n\n    def levy_flight(self, scale=0.01):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return scale * step\n\n    def adapt_parameters(self):\n        self.F = np.random.uniform(0.5, 0.9)\n        self.CR = np.random.uniform(0.7, 0.95)\n\n    def resized_population(self):\n        proportion = min(1, max(0.5, (self.budget - self.func_evals) / self.budget))\n        new_size = int(self.initial_population_size * proportion)\n        if new_size < len(self.population):\n            indices = np.argsort(self.scores)[:new_size]\n            self.population = self.population[indices]\n            self.scores = self.scores[indices]\n\n    def enhanced_mutation(self, best, idx):\n        indices = np.random.choice(np.delete(np.arange(len(self.population)), idx), 5, replace=False)\n        if np.random.rand() < 0.7:\n            return self.population[indices[0]] + self.F * (self.population[indices[1]] - self.population[indices[2]] + self.population[indices[3]] - self.population[indices[4]])\n        else:\n            return best + self.F * (self.population[indices[0]] - self.population[indices[1]])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n\n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(len(self.population)):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            self.resized_population()\n            for i in range(len(self.population)):\n                mutant = self.enhanced_mutation(best, i)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedDE", "description": "Enhanced Differential Evolution with Dynamic Population Resizing and Adaptive Selection for Improved Convergence.", "configspace": "", "generation": 89, "fitness": 0.36827290735573387, "feedback": "The algorithm EnhancedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.8092587608865366, 0.776958258238762, 0.8042550927441907, 0.8019604855947119, 0.8046236524043386, 0.7954445017319769, 0.8117552792853913, 0.7883760568828042, 0.8140005215913577, 0.6772561059361613, 0.6580656037899064, 0.6682961779279041, 0.6718724547404213, 0.6496972018044957, 0.6554450188037102, 0.6758019323858075, 0.6422812420795228, 0.6629417967398049, 0.3269870530957706, 0.1471184281321828, 0.12450386478139608, 0.3870032071165459, 0.11752447101857488, 0.1422232178053553, 0.12770626363827087, 0.25107590520019185, 0.13807946067030663, 0.1265483789038382, 0.10732904810989474, 0.10600912814542263, 0.12543180719231728, 0.11799959052042308, 0.12905003722646946, 0.1263375436059634, 0.21389738314255347, 0.252115041402744, 0.9910644317930423, 0.9906668344582571, 0.9885197906024342, 0.9714958247968153, 0.9837845633334467, 0.9801866035942113, 0.9811474676872481, 0.9824676415405965, 0.9723743301460381, 0.5040240103105069, 0.5148093011881871, 0.5299761109363781, 0.4863796381147154, 0.5186332744137276, 0.5169034896102205, 0.5098833548791437, 0.49006325811464013, 0.5266035558403386, 0.7241480623166693, 0.7191593191762232, 0.6839109264664558, 0.7615047680153452, 0.7098446149071524, 0.704168184518354, 0.7459019054357361, 0.7702707296571382, 0.7528048851745498, 0.4787400693935061, 0.47138267579609305, 0.4861488779216693, 0.4806609683071581, 0.494374655349474, 0.4812417746793104, 0.5152537021522421, 0.503352950463223, 0.4555117552165677, 0.6121184343052628, 0.40819428960143833, 0.0517102851208916, 0.5074635023343959, 0.5188889815373907, 0.43503382818233927, 0.4560907644188642, 0.4372305052049523, 0.4371280167139625, 0.25714055011008097, 0.2076015508622805, 0.2149358327732418, 0.22461192663641694, 0.246458186572047, 0.15442909940141913, 0.2616348624390601, 0.2254650409051575, 0.2829158481380979, 0.25170283969204454, 0.3014976002700338, 0.23118026801045022, 0.25915331382567064, 0.23199903671741062, 0.2540182385104851, 0.3059669009674041, 0.25012036477247956, 0.3145192748665512, 0.08630540828778699, 0.06872779329357759, 0.1909237159872028, 0.13470315597879123, 0.07427850894234111, 0.10566139946677067, 0.14929992477129472, 0.14872344793447612, 0.12950647900727397, 0.26497601436647433, 0.2353754687153271, 0.26108710162952453, 0.2760096265308676, 0.2737343947639531, 0.27035507630711375, 0.30000141756427845, 0.24863896568897248, 0.2588480274611036, 0.5970364492372668, 0.6450296291684078, 0.6269885885216668, 0.639013726855715, 0.6346474845001278, 0.5936261909918636, 0.6828793163407973, 0.623178800328988, 0.6360299051378759, 0.08859221369539139, 0.11837290262258471, 0.10151833845428204, 0.09458484416917434, 0.09916929052654411, 0.08374734252591098, 0.0958487092976178, 0.09558875929796229, 0.1102352484788911, 0.1710931985742915, 0.13409932329580043, 0.25328789706217447, 0.2913606652914159, 0.1412883312676919, 0.41343670814063993, 0.1780097089705579, 0.23480224380670545, 0.16068240450588178, 0.4248282663735803, 0.4088381311909046, 0.44140664194336376, 0.43191196529011444, 0.44441697338222963, 0.43440675051819966, 0.458577724858387, 0.5332429363565441, 0.475196110539029, 0.3213914094437651, 0.29460025941139756, 0.3225034127043134, 0.29510572031092774, 0.2959816826869165, 0.3132430782736416, 0.34938846310933447, 0.34590301630770237, 0.3422951290868643, 0.2004733826057178, 0.19321480199276198, 0.215460130274982, 0.1851066054381234, 0.194772130035605, 0.1817287517549968, 0.18450262039347098, 0.18305385451987521, 0.21113928505195434, 0.22033394498290548, 0.2030186199449554, 0.4667247302643587, 0.2211682443455526, 0.23113415989007313, 0.20128546382422063, 0.19284884747349829, 0.21685374189282702, 0.22985302092758741, 0.15180139501972534, 0.155733051027812, 0.16788032305552392, 0.7810973644615391, 0.18619010524552837, 0.18973887923182642, 0.17380802266617879, 0.17845515495407727, 0.17581961728683126, 0.760034201515017, 0.20176655765817975, 0.16025630964608084, 0.6373720256981934, 0.14764947943564488, 0.6517533463046767, 0.2028353924551568, 0.19129494695935034, 0.2106732766052154, 0.20329287324304834, 0.1795879707176118, 0.1966009644755089, 0.19917454181216054, 0.18695057952123906, 0.1698029545125157, 0.19316436149391347, 0.19586955045603271, 0.1878889110351062, 0.07311462643949485, 0.07509311441888089, 0.07164525426450041, 0.06255734048351247, 0.07728303651575752, 0.08834574933191741, 0.06854713521757638, 0.0747308086535593, 0.08012098938291023]}, "mutation_prompt": null}
{"id": "296c9497-71ef-483b-9e71-07f993cd6a5b", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "751c0b54-46fe-4a8f-99ce-fe4597301b39", "solution": "import numpy as np\n\nclass EnhancedHybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50  # Slightly larger population for better exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Adjusted mutation factor for balance\n        self.CR = 0.9  # Increased crossover probability for exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        return u / (np.abs(v) ** (1 / beta))\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.6 * np.random.rand()  # Wider range for mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Narrower range for crossover\n\n    def enhanced_mutation(self, best, idx):\n        indices = np.arange(self.population_size)\n        indices = indices[indices != idx]\n        if np.random.rand() < 0.3:\n            # DE/best/2 mutation\n            a, b, c, d = np.random.choice(indices, 4, replace=False)\n            return best + self.F * (self.population[a] - self.population[b] + self.population[c] - self.population[d])\n        else:\n            # DE/rand/1 mutation\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c])\n\n    def dynamic_local_search(self, candidate, best):\n        scale = np.random.uniform(0.1, 0.3, self.dim)  # Small local search step\n        return candidate + scale * (best - candidate)\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                if np.random.rand() < 0.2:\n                    # Apply dynamic local search with a certain probability\n                    trial = self.dynamic_local_search(trial, best)\n\n                # Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedHybridAdaptiveDE", "description": "Enhanced Hybrid Differential Evolution with Self-Adaptive Strategies and Dynamic Local Search for Accelerated Convergence.", "configspace": "", "generation": 91, "fitness": 0.26198766235905563, "feedback": "The algorithm EnhancedHybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.7406681249166711, 0.7316343247103422, 0.7747653981970963, 0.7592605188154673, 0.7559181040170825, 0.7844467644957334, 0.7747104082240373, 0.7568813214166732, 0.7609544423506248, 0.5885559405818716, 0.5704476003105554, 0.5864893025573836, 0.5843011715948522, 0.5647687170393312, 0.6138363199131893, 0.6418425463680544, 0.564147162168019, 0.5766910094219178, 0.10469138473531714, 0.10732241296746492, 0.12646889609346856, 0.08962660630519514, 0.10211627358403907, 0.14202645935140512, 0.10965921928502353, 0.09624956593876466, 0.09922916117561886, 0.1150931745500049, 0.12354971327023045, 0.09004823337065082, 0.1130734127820413, 0.10454198859149366, 0.11673551085593825, 0.10102042873865391, 0.08788492841725459, 0.10230420592697342, 0.9827844626168808, 0.9903526783681218, 0.9814389217043595, 0.981460232959319, 0.9904692966736499, 0.9857134850678958, 0.9808999285985343, 0.9901924035174154, 0.980021432472599, 0.3332464723891201, 0.2927291909366293, 0.3148965091758539, 0.27156380874107144, 0.32658508426228006, 0.3002669831375413, 0.30417927679300283, 0.32443590408097533, 0.3043878388256217, 0.6304163905812772, 0.2012700924785379, 0.5625577918850588, 0.20864373386451884, 0.6686149951245981, 0.21373850119350823, 0.2681448439418729, 0.22730010722160254, 0.47121794317405574, 0.1888643240246094, 0.17567266720735664, 0.17816840241227183, 0.18218460470902553, 0.18253266123836287, 0.1074422627191467, 0.1727727766347814, 0.16190199844626585, 0.11950924965928467, 0.16570401151779757, 0.11948793838103644, 0.11506565754142262, 0.16874915965019333, 0.19552271936833387, 0.124845691007747, 0.09234038431190272, 0.08742332582236034, 0.17341253723327732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01289268211582728, 0.029491093723186035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05207422800210204, 0.04677124059398552, 0.03297395241924095, 0.037688002190635284, 0.021953691600064884, 0.07142577422059881, 0.06102892636588586, 0.06680083278447868, 0.024037153010104007, 0.06816039642916716, 0.025988184132206826, 0.027187826342613186, 0.028524072485121676, 0.06604695239165337, 0.1504514306255944, 0.07730503374822617, 0.07449214752645217, 0.058825575206493674, 0.07831839507182337, 0.2240435011006069, 0.10211386501356867, 0.13189970978870347, 0.08000625021646535, 0.1666235378694748, 0.0672861658468149, 0.05391158750846703, 0.05600651812454338, 0.056340697370227844, 0.44902499354898806, 0.4619398850696128, 0.47777633047167223, 0.5268050244882693, 0.48793261646980357, 0.48391104252691575, 0.45737934506418165, 0.4800466130626454, 0.5066528378148594, 0.08104787733643659, 0.08843661254660506, 0.09493134324994101, 0.09002949265868576, 0.08349696915433069, 0.09127774762115948, 0.1009116642451019, 0.08616680082421135, 0.10784881106487643, 0.1576205481366384, 0.1398492316750568, 0.12510325999524663, 0.18192760010428655, 0.1819806053974583, 0.1430438335487172, 0.15925982989099718, 0.16745072914504366, 0.14629816730089695, 0.2841817542985824, 0.3783977136927543, 0.3726286849978664, 0.34368587790016514, 0.3333181921878363, 0.20697239438117176, 0.3982146077541895, 0.37558160972040455, 0.39343014742263327, 0.21390698492403537, 0.21337924539499076, 0.23056140431034533, 0.19174588492568967, 0.16830076796662075, 0.16079099782933703, 0.29883434303366563, 0.24392573534170603, 0.2679653246899013, 0.19087860908755294, 0.18709564522370215, 0.19346147470245045, 0.18289687142570799, 0.16166304553934674, 0.17070414328591055, 0.1624393139490281, 0.17874004412477262, 0.19365002530956676, 0.3122782638231302, 0.25643675237246955, 0.22676920892303043, 0.2809129661739085, 0.21752894822502522, 0.20914586901146393, 0.20419216211892088, 0.24349386309662713, 0.1918216230719264, 0.1966275130533619, 0.1636426694612857, 0.1533266199799893, 0.35069806807285664, 0.6122365264529039, 0.19555328684887963, 0.19300696117536276, 0.6726950606639234, 0.17752904592257712, 0.36647693252619074, 0.20915326303284532, 0.20229208923540432, 0.12429305615717601, 0.1896762709874934, 0.48849444719329627, 0.21144177123371877, 0.20905122927448305, 0.211637661714703, 0.1828126001081558, 0.20779099807694168, 0.18484530698542945, 0.20635813392440272, 0.18187777038627295, 0.182331405508948, 0.17662848274689535, 0.18777585623884951, 0.1934303945095761, 0.0626773259660478, 0.07099486121460308, 0.06975358217045746, 0.06535207912901442, 0.06701420473024977, 0.0782232024612195, 0.08367308111804284, 0.07597094500639978, 0.07355319510513003]}, "mutation_prompt": null}
{"id": "32cabb0b-3852-44e9-8507-30d40b8b8d15", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "ec87ed41-26db-484a-8287-beb5d8ddff6e", "solution": "import numpy as np\n\nclass EnhancedHybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 50  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.1)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F_min, self.F_max = 0.4, 0.9  # Range for mutation factor\n        self.CR_min, self.CR_max = 0.5, 0.9  # Range for crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = self.F_min + (self.F_max - self.F_min) * np.random.rand()  # Adaptive mutation factor for varied search behavior\n        self.CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()  # Adaptive crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.7:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/current-to-best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a = np.random.choice(indices)\n            return self.population[idx] + self.F * (best - self.population[idx]) + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedHybridAdaptiveDE", "description": "Enhanced Hybrid Differential Evolution with Self-Adaptive Strategies for Dynamic Exploration and Efficient Convergence.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'b' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'b' referenced before assignment\")", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {}, "mutation_prompt": null}
{"id": "e7ad4415-58a3-4100-822b-af1cdf082195", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "f873ac29-4ee2-4baf-83dc-b36e2e7c3d00", "solution": "import numpy as np\n\nclass EnhancedHybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50  # Slightly larger population for better diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Mutation factor fine-tuned for stability\n        self.CR = 0.9  # Higher crossover probability for greater exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def dynamic_levy_flight(self, step_size):\n        beta = 1.3\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta)) * step_size\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.6 * np.random.rand()  # Balanced mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adaptive crossover range\n\n    def enhanced_mutation(self, best, idx):\n        indices = list(range(self.population_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return self.population[a] + self.F * (self.population[b] - self.population[c])\n\n    def opposition_based_learning(self, solution):\n        opposite = self.lower_bound + self.upper_bound - solution\n        return opposite\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n\n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                levy_step = self.dynamic_levy_flight(1.0) * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                opposite = self.opposition_based_learning(trial)\n                opposite_score = evaluate(opposite)\n\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                elif opposite_score is not None and opposite_score < self.scores[i]:\n                    self.population[i] = opposite\n                    self.scores[i] = opposite_score\n\n        return best, best_score", "name": "EnhancedHybridAdaptiveDE", "description": "Modified Hybrid Adaptive DE with Dynamic Levy Flight and Opposition-Based Learning for Accelerated Convergence.", "configspace": "", "generation": 95, "fitness": 0.3358807441307099, "feedback": "The algorithm EnhancedHybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.8295936486360682, 0.8141099080907638, 0.8216484864755986, 0.8331154638665466, 0.8095099747656059, 0.8306752816881988, 0.8119151481167037, 0.830619886202591, 0.8252899580654465, 0.5820690971646731, 0.677175918243919, 0.6557436915848928, 0.6403664017729949, 0.5661583585292811, 0.6561351172287653, 0.6393608754346152, 0.6457631257390231, 0.6267743822262375, 0.12737611847629793, 0.15211224407693502, 0.12903801370522472, 0.11502521768641094, 0.07858687701639722, 0.12918933453986559, 0.08301949027881417, 0.09708879821107252, 0.11250669283981807, 0.08678337420683002, 0.06227395501401056, 0.09728270229705471, 0.08909058014374238, 0.09848166622217869, 0.0759466340781979, 0.10393734625342899, 0.07633076314338594, 0.08571662691052806, 0.9893035268683799, 0.9710729159388002, 0.9835785105426065, 0.9810690836424982, 0.9901281193500907, 0.9858111102092594, 0.9849349802926413, 0.9759225506985826, 0.9925943408023293, 0.4693825707612499, 0.48436713109507046, 0.44663431782347607, 0.3982476562245715, 0.5124579130461713, 0.45589642638410044, 0.4202486274573545, 0.44253805478342034, 0.4578033126393699, 0.36751420746411934, 0.25205932159333444, 0.1666680976919933, 0.8786135481128027, 0.8034534954808019, 0.3651667457739052, 0.33136311131986196, 0.14990065617312176, 0.23224515495490772, 0.33984018558022244, 0.12511937877550194, 0.11379094210642127, 0.12694347268828465, 0.39002907060341097, 0.24695670962492633, 0.32319970626168726, 0.33288205111170144, 0.34877851566217655, 0.425449690795485, 0.28039210071352405, 0.5072230772955839, 0.505925372970669, 0.436981624966169, 0.33265391625281515, 0.13182735690616176, 0.3707173383261396, 0.4195046850658336, 0.1736036869098967, 0.1362524451941698, 0.06094749003337652, 0.025756709134313494, 0.0763482740115462, 0.27781832164623643, 0.2035248570155741, 0.11642180876166008, 0.27691670449210604, 0.4376695988108098, 0.2701122809633928, 0.3723544235599622, 0.32934208158414835, 0.19532058534493724, 0.3366948277801106, 0.29905860992606215, 0.4779660439409078, 0.5489979885682905, 0.04444451782646264, 0.1159795059805998, 0.19230479421966662, 0.3619548820105656, 0.23117579003862887, 0.20241767115436193, 0.12601263897056547, 0.2530944889315131, 0.22002362372538742, 0.3032119904704793, 0.29593939866336927, 0.1986992810290319, 0.25830840969700386, 0.2586315463588046, 0.2440488009481917, 0.2595672973822246, 0.2141924094157064, 0.24188774929184165, 0.6950658651329362, 0.6510753058743897, 0.6433744626051593, 0.6395492346684697, 0.6360349590993644, 0.6964475149780142, 0.6852897998030092, 0.649433567582707, 0.6485964230440397, 0.13333822387881678, 0.0679289950915265, 0.08138437597028969, 0.10609106188375572, 0.09799967749207938, 0.181164334721984, 0.07550039700573274, 0.08865064085390328, 0.07161044287942808, 0.14366349582024018, 0.20254048798875557, 0.16750189501164092, 0.3040710833724459, 0.40335368119666615, 0.22307371025955525, 0.21227465943709023, 0.174065842037742, 0.29959591945012076, 0.2946721931700391, 0.3516434257962342, 0.2860185615250598, 0.3409707371475901, 0.2342488665040694, 0.45755500809430905, 0.38369326031154605, 0.3254842018880415, 0.3730746501309695, 0.35627220460332765, 0.18244971301972424, 0.24412314267083468, 0.2953855137046869, 0.32120672697228214, 0.28973149915363317, 0.32087753797057195, 0.2240540526268272, 0.2624875112296192, 0.19019829677319322, 0.22396726799202293, 0.21713304276670298, 0.22432442692586885, 0.23093708735420237, 0.21177297161345332, 0.23180301814188242, 0.24770041910505458, 0.2162779250778495, 0.17965671748900036, 0.19180428444779918, 0.19437976264595314, 0.19733904267650582, 0.20488812577451, 0.20312541455356437, 0.20796075291677374, 0.19181838220199499, 0.18856266399285604, 0.13337750748549493, 0.12536923318479332, 0.15357171626189847, 0.1710649713314547, 0.19942259405217888, 0.173242332086048, 0.14155928915614935, 0.16086236893121608, 0.8471048831993168, 0.7882822518355956, 0.2105814683749403, 0.11141946293268234, 0.7808478007891869, 0.7363042200495352, 0.738930567843429, 0.21089998243969688, 0.21057448794458833, 0.12697343053262944, 0.1863552754316249, 0.19777134042903577, 0.17944306425544543, 0.1718559708011147, 0.1885044818571483, 0.20861493636716666, 0.18053794905106824, 0.1892408826737968, 0.23033091743490175, 0.0924867563925369, 0.08429529958285475, 0.07590361677378643, 0.08647751455878583, 0.07744322694820238, 0.07701097885828223, 0.08218830954677214, 0.08651062196796011, 0.0786031792080355]}, "mutation_prompt": null}
{"id": "49a37ddc-dd0a-4a0a-97e5-e0fbf65f56d8", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "636c60f1-a849-4920-be18-77b3077d0eec", "solution": "import numpy as np\n\nclass EnhancedHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Reduced initial population for faster adaptation\n        self.population_size = int(self.initial_population_size * 1.5)  # Adjusted population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # More balanced mutation factor\n        self.CR = 0.9  # Higher crossover probability to encourage diversity\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.3  # Adjusted Levy flight parameter for different step size\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.4 + 0.6 * np.random.rand()  # Wider range for mutation factor\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adjusted crossover range\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.5:\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            return best + self.F * (self.population[a] - self.population[b] + self.population[c] - self.population[idx])\n        else:\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return self.population[a] + self.F * (best - self.population[b])\n\n    def opposite_learning(self, indiv):\n        return self.lower_bound + self.upper_bound - indiv\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Opposite Learning Strategy\n                opposite = self.opposite_learning(trial)\n                opposite_score = evaluate(opposite)\n                if opposite_score is not None and opposite_score < self.scores[i]:\n                    trial = opposite\n                    trial_score = opposite_score\n                else:\n                    trial_score = evaluate(trial)\n                \n                # Possible Lévy flight step\n                if trial_score is not None and trial_score < self.scores[i]:\n                    levy_step = self.levy_flight() * (trial - best)\n                    trial = trial + levy_step\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "EnhancedHybridDE", "description": "Enhanced Hybrid Differential Evolution with Adaptive Local Search and Opposite Learning for Faster and Robust Convergence.", "configspace": "", "generation": 97, "fitness": 0.18272546517340285, "feedback": "The algorithm EnhancedHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.44313821353686067, 0.3697876176304369, 0.3536050496346984, 0.4385974180072424, 0.3792927920411221, 0.39044665051095484, 0.3607168835960809, 0.42581870136112776, 0.38093335932194805, 0.10631838281715988, 0.09349477268703521, 0.124430099082119, 0.05168393411003891, 0.03154373608947736, 0.1020609211901814, 0.12057748693207226, 0.13452056715925487, 0.11045538291004886, 0.07678725454676316, 0.0664776674091212, 0.06771296224492185, 0.0905542385208632, 0.07425773896186305, 0.10340781142247835, 0.10209537389792989, 0.07657840184787634, 0.06996241901624722, 0.06393303698312358, 0.06593179191763299, 0.06651499455771448, 0.0533662237881648, 0.06365351150641763, 0.07870755950669339, 0.07335699608319579, 0.07824844031090816, 0.04476384904303288, 0.99231188938899, 0.9928614740011924, 0.9814296181587318, 0.9898733351833428, 0.982888779369044, 0.9824713500812032, 0.9854371318053768, 0.9795235791867254, 0.9870718747547026, 0.15565970685931585, 0.1226873816191223, 0.13512815569794345, 0.15471796110605884, 0.12226469750792313, 0.144850425963729, 0.08233747245355205, 0.11605302197496681, 0.18831315719941755, 0.2109233025204068, 0.23404553250810145, 0.3112830438066083, 0.3289821926196773, 0.29527851752221035, 0.19431303669202138, 0.20463707012206012, 0.23142768791264468, 0.22338831344761034, 0.08377103189154511, 0.09601765366820769, 0.11775371736261264, 0.06474646971924447, 0.11525618782061431, 0.16217643591973485, 0.13229448139154742, 0.09348434710164799, 0.11379700864199038, 0.10430540444447123, 0.11274626096309093, 0.1436325969920712, 0.08741619926298827, 0.05073975163590527, 0.09012516070565235, 0.0872531077945401, 0.09295537026930256, 0.07774047078034785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010675262977599687, 0.05890645528956051, 9.999999999998899e-05, 0.0018569745181231667, 0.043026985700613474, 0.0024926287482128773, 0.06101632392637568, 0.028842780836170423, 0.08433806857702908, 0.10610032000293157, 0.07094596907854378, 0.12874786567892027, 0.12972978363201093, 0.0973051687643045, 0.1636328394691693, 9.999999999998899e-05, 0.00012635536526217628, 0.017558367698452648, 0.02381181877439198, 0.013160549581577308, 0.012894905239938859, 0.03970709957303664, 0.0126909588275268, 0.0044376281763456316, 0.04165555628539064, 0.043102240662765134, 0.06621684304434716, 0.06589175369991662, 0.048177068042549065, 0.10945800955066953, 0.042278807356362136, 0.05244034131085318, 0.050959553162784665, 0.3260321722632997, 0.3570185710613569, 0.34951718989835734, 0.37274068752048384, 0.39442409867257266, 0.38050838727928715, 0.33471486374268244, 0.35087972179583427, 0.2739920519118235, 0.0684882630397633, 0.09467741065000779, 0.07618203144806535, 0.07515193893111605, 0.0575846779587893, 0.06909954883484659, 0.13159073223454365, 0.05994090768417393, 0.06371809968242836, 0.11625515216468707, 0.12474735049926733, 0.12229324665095087, 0.11939845714883746, 0.1333927112301404, 0.13093920621066968, 0.12290880224532608, 0.12319553186989618, 0.1299923255622758, 0.2505183223382622, 0.2103928568093183, 0.22103846944083894, 0.21687883927325036, 0.2356045284075553, 0.24729363221965273, 0.22873765266687685, 0.2582639864432157, 0.26992923556967785, 0.14673942564040554, 0.15225706027558739, 0.1688425470659034, 0.1564334739126776, 0.17147277339070732, 0.16544875282009985, 0.1899104740930655, 0.18819162051337923, 0.1553809985947988, 0.21897526178167837, 0.17485439060307906, 0.1780663720495892, 0.16899887516658674, 0.1660089199603927, 0.17227702760703745, 0.17224264101524644, 0.19801312189889608, 0.16698785185552056, 0.15970319073484407, 0.16925445899730152, 0.15850271554809092, 0.18164456397754358, 0.18109334886475026, 0.18394277881484966, 0.17314089325185578, 0.15708873953365288, 0.17268338130407612, 0.23154870794407523, 0.27379223382764684, 0.15616588272168697, 0.17362956352299352, 0.3746517292753573, 0.17873571208942007, 0.15066591919711736, 0.1550725495684635, 0.5058345762071634, 0.3339943414688551, 0.18187818494741603, 0.15885872843818416, 0.26752658955672537, 0.12710867131437265, 0.2340551106928378, 0.1867512059965578, 0.18226636866547474, 0.1860123595555102, 0.17288182382794004, 0.1898804330244641, 0.17056945376493315, 0.18023468256583985, 0.16928315627900925, 0.17490779192143946, 0.1849563630842913, 0.1805883720799104, 0.17152954533721854, 0.07025385003303597, 0.06270985558758202, 0.059008676052795805, 0.05412564709236778, 0.06844622746848328, 0.06248916019308548, 0.05618608617392873, 0.06807941014237973, 0.055603807989796916]}, "mutation_prompt": null}
{"id": "fb220eac-0124-4acf-badb-6b5de27bdddd", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
{"id": "eeed8625-7afc-4ae0-92ea-1e1ef43c4a83", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 40  # Increased initial population for greater diversity\n        self.population_size = int(self.initial_population_size * 1.25)  # Slightly larger population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.6  # Adjusted mutation factor for improved convergence\n        self.CR = 0.8  # Balanced crossover probability for exploration and exploitation\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma_u)\n        v = np.random.normal(0, 1)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def adapt_parameters(self):\n        self.F = 0.5 + 0.5 * np.random.rand()  # Dynamic mutation factor for varied search behavior\n        self.CR = 0.6 + 0.4 * np.random.rand()  # Flexible crossover range for adaptability\n\n    def enhanced_mutation(self, best, idx):\n        if np.random.rand() < 0.6:\n            # DE/rand/2 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b, c, d, e = np.random.choice(indices, 5, replace=False)\n            return self.population[a] + self.F * (self.population[b] - self.population[c] + self.population[d] - self.population[e])\n        else:\n            # DE/best/1 mutation\n            indices = list(range(self.population_size))\n            indices.remove(idx)\n            a, b = np.random.choice(indices, 2, replace=False)\n            return best + self.F * (self.population[a] - self.population[b])\n\n    def __call__(self, func):\n        best = None\n        best_score = np.inf\n        \n        def evaluate(ind):\n            nonlocal best, best_score\n            if self.func_evals < self.budget:\n                score = func(ind)\n                self.func_evals += 1\n                if score < best_score:\n                    best_score = score\n                    best = ind.copy()\n                return score\n            else:\n                return None\n\n        for i in range(self.population_size):\n            self.scores[i] = evaluate(self.population[i])\n\n        while self.func_evals < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.enhanced_mutation(best, i)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Possible Lévy flight step\n                levy_step = self.levy_flight() * (trial - best)\n                trial = trial + levy_step\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = evaluate(trial)\n                if trial_score is not None and trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n\n        return best, best_score", "name": "HybridAdaptiveDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control and Enhanced Mutation Strategies for Faster Convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153fad17-88ac-405c-affe-dc5598c35486", "metadata": {"aucs": [0.9228319534385696, 0.9262197750348227, 0.9041654359545093, 0.9168364186006519, 0.9203061759497302, 0.9179213153871223, 0.914894530512266, 0.9064304912338591, 0.9059961306346211, 0.8418173069401202, 0.8236971244374364, 0.8197528634058396, 0.7917188132298238, 0.8273482856712586, 0.82578965907899, 0.8314832308780078, 0.801009236455116, 0.8259828882934885, 0.13257443197422925, 0.18400966564905052, 0.09278607130421623, 0.13172947546663494, 0.11695068823779242, 0.14263183521233036, 0.10402457483972061, 0.09464637755449601, 0.12636695612272364, 0.1624642901018971, 0.08621821679083497, 0.08939708281583914, 0.10682690271202078, 0.13109094609674288, 0.08789331755476593, 0.15823089520862665, 0.06964502967540853, 0.08868013337842817, 0.9907649389128362, 0.9933826761008356, 0.990201734837376, 0.9821447045196183, 0.9883428389834407, 0.9874616112311677, 0.9777785126699419, 0.9915018488215295, 0.9918313551468925, 0.7423475419498262, 0.7451675095546146, 0.7453732959885365, 0.7671925496277676, 0.6939768346980495, 0.6968935555550699, 0.7622687928501805, 0.6783523034918325, 0.782363385866851, 0.9006834836021952, 0.24467364777140732, 0.9377032678864514, 0.21525555438012722, 0.2784687412933138, 0.22177874524944163, 0.12615613266531678, 0.8305410790807226, 0.8266135375884394, 0.7622335975533923, 0.46938148289217485, 0.6412787610164472, 0.7120329363738622, 0.7615131866674223, 0.13204360348780497, 0.7289369225470115, 0.13704681994889834, 0.6241982133514945, 0.5462640648180057, 0.6641819875769899, 0.7362428765080504, 0.7184725849232827, 0.12836245793164414, 0.6468689864965095, 0.638719055309021, 0.6196448282036608, 0.5835789398160449, 0.47038507590205947, 0.2976700806503403, 0.37377240135303536, 0.3571085838364072, 0.4377668968560764, 0.5528917721675252, 0.6411368893968923, 0.29739622246440434, 0.6732324753012588, 0.628741161172665, 0.6621110205540113, 0.598394986012228, 0.7592474929530115, 0.6802768545345206, 0.6112243865589305, 0.6820195243057964, 0.604354319100953, 0.6864183670950308, 0.24238051318762655, 0.17769534066910897, 0.46598492148944226, 0.5729956464082364, 0.4685596383006809, 0.5124317676480932, 0.3702864849220243, 0.21539894676872096, 0.20748781758083068, 0.43783927867379313, 0.4418164822843932, 0.2868213094693184, 0.3443643020594742, 0.42058313641509926, 0.4103796216980792, 0.26539298677395895, 0.4192421986744358, 0.2870755507787802, 0.8310713099088914, 0.8253909277301654, 0.7921227527262965, 0.8034211690711084, 0.8102524670518374, 0.7946290134293658, 0.8404238371805861, 0.8215276028910187, 0.812598325168034, 0.13281394201508046, 0.07642366986932825, 0.07764488220228272, 0.09273437807020857, 0.13108404618279623, 0.11453713419153955, 0.0806915215178573, 0.13138300682756632, 0.11796667508962233, 0.2125363012553596, 0.3999520600180766, 0.17779470835911793, 0.28543809918082175, 0.18266829969502119, 0.34036853517974475, 0.40934215927916173, 0.18907351659021376, 0.24148471298879115, 0.22269522745465697, 0.3008032189071762, 0.4978437181982126, 0.3329442124517654, 0.3383619809793488, 0.3215152644735324, 0.2241615707389174, 0.5492791752828101, 0.324911962907276, 0.2323410254439866, 0.1268794587320683, 0.24874113141218435, 0.24239614196954828, 0.22115112426002637, 0.2931023875926899, 0.3134874768003907, 0.3089633669952774, 0.16284387287043522, 0.21113671764312647, 0.1682715900402041, 0.20320803372905982, 0.21398741908045593, 0.18270163847554943, 0.2323774199574805, 0.22922342757802316, 0.2502982826667327, 0.2538591350512124, 0.1788350210060924, 0.20088858168727197, 0.19232395456555118, 0.19020890786371902, 0.24875819570729163, 0.2080011650216801, 0.18003455310990812, 0.18651942264722343, 0.19746214973067155, 0.15420765985931562, 0.1258376305533737, 0.1546156741113598, 0.9317727674103377, 0.20047365346996016, 0.20037183750460852, 0.14291932804560437, 0.907812647040385, 0.21331660613061076, 0.9120265990438384, 0.21351201650294538, 0.12692064238234468, 0.21041357554356888, 0.16904698927073059, 0.15574225574215073, 0.21306822309513196, 0.21274066586472562, 0.8680502625970363, 0.19214070427311358, 0.18713949218703652, 0.19894426581994118, 0.22533908382407375, 0.17337286174594813, 0.2056433788644898, 0.19719505403774285, 0.19797565692162455, 0.1849259352108843, 0.09730918602697003, 0.1263097693701054, 0.10140632485850021, 0.07702279063241535, 0.07507003912513299, 0.10117705133699817, 0.0834200562857732, 0.07789608587344587, 0.08568390450015106]}, "mutation_prompt": null}
