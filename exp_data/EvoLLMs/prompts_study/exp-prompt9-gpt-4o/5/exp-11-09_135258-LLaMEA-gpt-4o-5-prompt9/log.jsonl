{"id": "1fa7f604-45b3-4325-8daa-1fa5aaa29bfe", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.1\n        max_iterations = self.budget // 2  # Split budget into exploration and exploitation\n\n        while evals < self.budget:\n            if exploration_phase:\n                candidates = self._generate_candidates(best_solution, sampling_rate, 30)\n            else:\n                candidates = self._generate_candidates(best_solution, sampling_rate / 2, 10)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= 0.85\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= 1.05\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.uniform(-1, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "ADSO", "description": "Adaptive Dynamic Sampling Optimization (ADSO) uses dynamic exploration and exploitation phases with adaptive sampling rates to efficiently converge to optimum solutions across varying dimensional landscapes.", "configspace": "", "generation": 0, "fitness": 0.03267613359743084, "feedback": "The algorithm ADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.06.", "error": "", "parent_id": null, "metadata": {"aucs": [0.08681326283680613, 0.04400785829214238, 0.07370960980489072, 0.016020469123153802, 0.011529409854518224, 0.03460587160127271, 0.04288393994982165, 0.05779433848426485, 0.039932000796483624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025117156756776504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004850483228031721, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008877720750606, 0.006111786661165519, 9.999999999998899e-05, 0.0024050206617627357, 0.019426481306674237, 0.005532364780989729, 0.001976719210181055, 0.02048645913550684, 0.006126740599503466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01488316628397568, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06520069386728433, 9.999999999998899e-05, 9.999999999998899e-05, 0.13258473647838742, 0.01926958130390266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032269304656399767, 9.999999999998899e-05, 0.13605383931146298, 0.07962777629316153, 9.999999999998899e-05, 9.999999999998899e-05, 0.11408571496683084, 0.07177916230124848, 0.03880894551787151, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021921020097270927, 0.08093793613402755, 0.13431301978859078, 0.03755093144642574, 0.06965174730090928, 0.08257356451568854, 0.03634097364997324, 0.07029957682017396, 0.04840848901560746, 0.11504674394992054, 0.0952335969213638, 0.10586126456913458, 0.1462806540834226, 0.06176573480431202, 0.10741173661552073, 0.1391623577602048, 0.077689239798577, 0.09116772018304287, 0.05236587060452369, 0.036651570231165165, 0.033897963890305416, 0.0832337770483258, 0.002815752415409545, 0.06861191428930491, 0.07083339368973773, 0.010924517385831112, 0.026650007127249964, 0.18391287589062078, 0.028755403232825327, 0.10223266592129365, 0.19048952438266975, 0.02815463149313635, 0.0603793936451692, 0.18136469621621532, 0.043423091736572994, 0.09506424173941774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05133293641158887, 0.03624965896553334, 0.02182861333723307, 0.06539638873889375, 0.01743292470151736, 0.023635074716450766, 0.06188804106515833, 0.08883414038081483, 0.06369301996632493, 0.03212153556144781, 0.08353848817989196, 0.009964044438568243, 0.012891380121563989, 0.012456840287712656, 0.01639643353616671, 0.017415295249455842, 0.014396418227827557, 0.02082492157503779, 0.2095959275874948, 0.22227286817477632, 0.18281347864928743, 0.23569954444203012, 0.2646502553470558, 0.2388719998861114, 0.22956873988997017, 0.306827853921499, 0.2362232605852198, 0.042012909911212426, 0.0010155082845528796, 0.03322363870594258, 0.039904377939452784, 0.001157606214785889, 0.01629649806461353, 0.04508581157339231, 0.009685788069287105, 0.0374794718112027]}, "mutation_prompt": null}
{"id": "712a701a-6a11-4ded-a85c-77a0890f6ea1", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.1\n        max_iterations = self.budget // 2  # Split budget into exploration and exploitation\n        shrink_factor = 0.9  # Introduced shrink factor to dynamically adjust perturbation scale\n\n        while evals < self.budget:\n            if exploration_phase:\n                candidates = self._generate_candidates(best_solution, sampling_rate, 30)\n            else:\n                candidates = self._generate_candidates(best_solution, sampling_rate / 2, 10)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.05 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate  # Changed from uniform to normal distribution\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced ADSO with dynamic perturbation scaling to improve convergence by adapting search radius based on function landscape features.", "configspace": "", "generation": 1, "fitness": 0.04271018427371311, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.06.", "error": "", "parent_id": "1fa7f604-45b3-4325-8daa-1fa5aaa29bfe", "metadata": {"aucs": [0.12563146182703966, 0.06110656025842909, 0.09651583669995067, 0.028776157773613753, 0.02481334310192085, 0.05440767623635401, 0.06169517760577237, 0.07804898222484002, 0.06120900115410821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002509360114927195, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016154479393372112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004842153445247965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0179028268291489, 0.013850233515049104, 0.005784456798722415, 0.009718454722888459, 0.030142335454837688, 0.014285978453935644, 0.009551270368909681, 0.03156310476843771, 0.015290329790083712, 0.05819341452429472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03707311259281887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0543333331142456, 9.999999999998899e-05, 0.006800508731820476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1448709161880033, 9.999999999998899e-05, 9.999999999998899e-05, 0.023910699838782468, 9.999999999998899e-05, 9.999999999998899e-05, 0.09009856387392334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06482665966573131, 9.999999999998899e-05, 0.010989471683501506, 0.14686176283365515, 0.01995014943905249, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792123771876102, 0.016020948739282392, 0.15435526948133815, 0.09238652485641763, 0.03921203413178387, 9.999999999998899e-05, 0.14224815277307212, 0.11411185964303672, 0.08881026309166096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04961240347681306, 0.09700825677077574, 0.16447165902530292, 0.04106138951465377, 0.10505061725361697, 0.09382727709229055, 0.062399861538408374, 0.1194998479239332, 0.09498286655657939, 0.11504737477400828, 0.09812966927241651, 0.10612269506610794, 0.1463215171953849, 0.06422790862815031, 0.10629565794746487, 0.14968785532761142, 0.07817817991050269, 0.09320299331199544, 0.05226200838136008, 0.037730687277224395, 0.03499171292214831, 0.08491150152273608, 0.008742900132900244, 0.08776028468406116, 0.07181798497444869, 0.012982170130354298, 0.026705111087998223, 0.19082497921802255, 0.044552236233679654, 0.10806132467523255, 0.19136431301145151, 0.03677585977599229, 0.07440615877196766, 0.1805321869358364, 0.04780596046603891, 0.09561949304249517, 0.1337388483086921, 9.999999999998899e-05, 9.999999999998899e-05, 0.14748830815998604, 9.999999999998899e-05, 9.999999999998899e-05, 0.1308446696992862, 9.999999999998899e-05, 9.999999999998899e-05, 0.09511293553155897, 0.11554936030356311, 0.047366585524412974, 0.12190536159974252, 0.04129139723369901, 0.04533486560812494, 0.09444337007316894, 0.11456977469342855, 0.1039533958989105, 0.08935391085274824, 0.10467888239163681, 0.014392273752774742, 0.014531785180208812, 0.019087516642230185, 0.030480169392118506, 0.026322391384139388, 0.022411710082492986, 0.03435798634057241, 0.19430117313182194, 0.22029403339942, 0.2399827268078326, 0.17252233066905642, 0.37603365412113865, 0.19641427978319737, 0.22494694817239524, 0.2115176260198155, 0.2785220362657792, 0.05307815034807206, 0.0048886558440446315, 0.03392072153658843, 0.03482511145957634, 0.0036276437014463037, 0.018040670687051397, 0.05247849350961842, 0.009013692690927, 0.036050098165133604]}, "mutation_prompt": null}
{"id": "c2be2912-84ec-4596-bc01-8e79ff7fdec7", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.1\n        max_iterations = self.budget // 2  # Split budget into exploration and exploitation\n        shrink_factor = 0.9  # Introduced shrink factor to dynamically adjust perturbation scale\n\n        while evals < self.budget:\n            if exploration_phase:\n                candidates = self._generate_candidates(best_solution, sampling_rate, 30)\n            else:\n                candidates = self._generate_candidates(best_solution, sampling_rate / 2, 10)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.05 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate  # Changed from uniform to normal distribution\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced ADSO with dynamic perturbation scaling to improve convergence by adapting search radius based on function landscape features.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "712a701a-6a11-4ded-a85c-77a0890f6ea1", "metadata": {"aucs": [0.12563146182703966, 0.06110656025842909, 0.09651583669995067, 0.028776157773613753, 0.02481334310192085, 0.05440767623635401, 0.06169517760577237, 0.07804898222484002, 0.06120900115410821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002509360114927195, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016154479393372112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004842153445247965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0179028268291489, 0.013850233515049104, 0.005784456798722415, 0.009718454722888459, 0.030142335454837688, 0.014285978453935644, 0.009551270368909681, 0.03156310476843771, 0.015290329790083712, 0.05819341452429472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03707311259281887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0543333331142456, 9.999999999998899e-05, 0.006800508731820476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1448709161880033, 9.999999999998899e-05, 9.999999999998899e-05, 0.023910699838782468, 9.999999999998899e-05, 9.999999999998899e-05, 0.09009856387392334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06482665966573131, 9.999999999998899e-05, 0.010989471683501506, 0.14686176283365515, 0.01995014943905249, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792123771876102, 0.016020948739282392, 0.15435526948133815, 0.09238652485641763, 0.03921203413178387, 9.999999999998899e-05, 0.14224815277307212, 0.11411185964303672, 0.08881026309166096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04961240347681306, 0.09700825677077574, 0.16447165902530292, 0.04106138951465377, 0.10505061725361697, 0.09382727709229055, 0.062399861538408374, 0.1194998479239332, 0.09498286655657939, 0.11504737477400828, 0.09812966927241651, 0.10612269506610794, 0.1463215171953849, 0.06422790862815031, 0.10629565794746487, 0.14968785532761142, 0.07817817991050269, 0.09320299331199544, 0.05226200838136008, 0.037730687277224395, 0.03499171292214831, 0.08491150152273608, 0.008742900132900244, 0.08776028468406116, 0.07181798497444869, 0.012982170130354298, 0.026705111087998223, 0.19082497921802255, 0.044552236233679654, 0.10806132467523255, 0.19136431301145151, 0.03677585977599229, 0.07440615877196766, 0.1805321869358364, 0.04780596046603891, 0.09561949304249517, 0.1337388483086921, 9.999999999998899e-05, 9.999999999998899e-05, 0.14748830815998604, 9.999999999998899e-05, 9.999999999998899e-05, 0.1308446696992862, 9.999999999998899e-05, 9.999999999998899e-05, 0.09511293553155897, 0.11554936030356311, 0.047366585524412974, 0.12190536159974252, 0.04129139723369901, 0.04533486560812494, 0.09444337007316894, 0.11456977469342855, 0.1039533958989105, 0.08935391085274824, 0.10467888239163681, 0.014392273752774742, 0.014531785180208812, 0.019087516642230185, 0.030480169392118506, 0.026322391384139388, 0.022411710082492986, 0.03435798634057241, 0.19430117313182194, 0.22029403339942, 0.2399827268078326, 0.17252233066905642, 0.37603365412113865, 0.19641427978319737, 0.22494694817239524, 0.2115176260198155, 0.2785220362657792, 0.05307815034807206, 0.0048886558440446315, 0.03392072153658843, 0.03482511145957634, 0.0036276437014463037, 0.018040670687051397, 0.05247849350961842, 0.009013692690927, 0.036050098165133604]}, "mutation_prompt": null}
{"id": "9d20fa96-8a41-47ad-91de-5ce7cd7dabfa", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.1\n        max_iterations = self.budget // 2  # Split budget into exploration and exploitation\n        shrink_factor = 0.9  # Introduced shrink factor to dynamically adjust perturbation scale\n\n        while evals < self.budget:\n            if exploration_phase:\n                candidates = self._generate_candidates(best_solution, sampling_rate, 30)\n            else:\n                candidates = self._generate_candidates(best_solution, sampling_rate / 2, 10)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.05 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate  # Changed from uniform to normal distribution\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced ADSO with dynamic perturbation scaling to improve convergence by adapting search radius based on function landscape features.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "712a701a-6a11-4ded-a85c-77a0890f6ea1", "metadata": {"aucs": [0.12563146182703966, 0.06110656025842909, 0.09651583669995067, 0.028776157773613753, 0.02481334310192085, 0.05440767623635401, 0.06169517760577237, 0.07804898222484002, 0.06120900115410821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002509360114927195, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016154479393372112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004842153445247965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0179028268291489, 0.013850233515049104, 0.005784456798722415, 0.009718454722888459, 0.030142335454837688, 0.014285978453935644, 0.009551270368909681, 0.03156310476843771, 0.015290329790083712, 0.05819341452429472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03707311259281887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0543333331142456, 9.999999999998899e-05, 0.006800508731820476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1448709161880033, 9.999999999998899e-05, 9.999999999998899e-05, 0.023910699838782468, 9.999999999998899e-05, 9.999999999998899e-05, 0.09009856387392334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06482665966573131, 9.999999999998899e-05, 0.010989471683501506, 0.14686176283365515, 0.01995014943905249, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792123771876102, 0.016020948739282392, 0.15435526948133815, 0.09238652485641763, 0.03921203413178387, 9.999999999998899e-05, 0.14224815277307212, 0.11411185964303672, 0.08881026309166096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04961240347681306, 0.09700825677077574, 0.16447165902530292, 0.04106138951465377, 0.10505061725361697, 0.09382727709229055, 0.062399861538408374, 0.1194998479239332, 0.09498286655657939, 0.11504737477400828, 0.09812966927241651, 0.10612269506610794, 0.1463215171953849, 0.06422790862815031, 0.10629565794746487, 0.14968785532761142, 0.07817817991050269, 0.09320299331199544, 0.05226200838136008, 0.037730687277224395, 0.03499171292214831, 0.08491150152273608, 0.008742900132900244, 0.08776028468406116, 0.07181798497444869, 0.012982170130354298, 0.026705111087998223, 0.19082497921802255, 0.044552236233679654, 0.10806132467523255, 0.19136431301145151, 0.03677585977599229, 0.07440615877196766, 0.1805321869358364, 0.04780596046603891, 0.09561949304249517, 0.1337388483086921, 9.999999999998899e-05, 9.999999999998899e-05, 0.14748830815998604, 9.999999999998899e-05, 9.999999999998899e-05, 0.1308446696992862, 9.999999999998899e-05, 9.999999999998899e-05, 0.09511293553155897, 0.11554936030356311, 0.047366585524412974, 0.12190536159974252, 0.04129139723369901, 0.04533486560812494, 0.09444337007316894, 0.11456977469342855, 0.1039533958989105, 0.08935391085274824, 0.10467888239163681, 0.014392273752774742, 0.014531785180208812, 0.019087516642230185, 0.030480169392118506, 0.026322391384139388, 0.022411710082492986, 0.03435798634057241, 0.19430117313182194, 0.22029403339942, 0.2399827268078326, 0.17252233066905642, 0.37603365412113865, 0.19641427978319737, 0.22494694817239524, 0.2115176260198155, 0.2785220362657792, 0.05307815034807206, 0.0048886558440446315, 0.03392072153658843, 0.03482511145957634, 0.0036276437014463037, 0.018040670687051397, 0.05247849350961842, 0.009013692690927, 0.036050098165133604]}, "mutation_prompt": null}
{"id": "2bb71b17-80bf-4afb-98fa-f7a6c38e1ceb", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.1\n        max_iterations = self.budget // 2  # Split budget into exploration and exploitation\n        shrink_factor = 0.9  # Introduced shrink factor to dynamically adjust perturbation scale\n\n        while evals < self.budget:\n            if exploration_phase:\n                candidates = self._generate_candidates(best_solution, sampling_rate, 30)\n            else:\n                candidates = self._generate_candidates(best_solution, sampling_rate / 2, 10)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.05 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate  # Changed from uniform to normal distribution\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced ADSO with dynamic perturbation scaling to improve convergence by adapting search radius based on function landscape features.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "712a701a-6a11-4ded-a85c-77a0890f6ea1", "metadata": {"aucs": [0.12563146182703966, 0.06110656025842909, 0.09651583669995067, 0.028776157773613753, 0.02481334310192085, 0.05440767623635401, 0.06169517760577237, 0.07804898222484002, 0.06120900115410821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002509360114927195, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016154479393372112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004842153445247965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0179028268291489, 0.013850233515049104, 0.005784456798722415, 0.009718454722888459, 0.030142335454837688, 0.014285978453935644, 0.009551270368909681, 0.03156310476843771, 0.015290329790083712, 0.05819341452429472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03707311259281887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0543333331142456, 9.999999999998899e-05, 0.006800508731820476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1448709161880033, 9.999999999998899e-05, 9.999999999998899e-05, 0.023910699838782468, 9.999999999998899e-05, 9.999999999998899e-05, 0.09009856387392334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06482665966573131, 9.999999999998899e-05, 0.010989471683501506, 0.14686176283365515, 0.01995014943905249, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792123771876102, 0.016020948739282392, 0.15435526948133815, 0.09238652485641763, 0.03921203413178387, 9.999999999998899e-05, 0.14224815277307212, 0.11411185964303672, 0.08881026309166096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04961240347681306, 0.09700825677077574, 0.16447165902530292, 0.04106138951465377, 0.10505061725361697, 0.09382727709229055, 0.062399861538408374, 0.1194998479239332, 0.09498286655657939, 0.11504737477400828, 0.09812966927241651, 0.10612269506610794, 0.1463215171953849, 0.06422790862815031, 0.10629565794746487, 0.14968785532761142, 0.07817817991050269, 0.09320299331199544, 0.05226200838136008, 0.037730687277224395, 0.03499171292214831, 0.08491150152273608, 0.008742900132900244, 0.08776028468406116, 0.07181798497444869, 0.012982170130354298, 0.026705111087998223, 0.19082497921802255, 0.044552236233679654, 0.10806132467523255, 0.19136431301145151, 0.03677585977599229, 0.07440615877196766, 0.1805321869358364, 0.04780596046603891, 0.09561949304249517, 0.1337388483086921, 9.999999999998899e-05, 9.999999999998899e-05, 0.14748830815998604, 9.999999999998899e-05, 9.999999999998899e-05, 0.1308446696992862, 9.999999999998899e-05, 9.999999999998899e-05, 0.09511293553155897, 0.11554936030356311, 0.047366585524412974, 0.12190536159974252, 0.04129139723369901, 0.04533486560812494, 0.09444337007316894, 0.11456977469342855, 0.1039533958989105, 0.08935391085274824, 0.10467888239163681, 0.014392273752774742, 0.014531785180208812, 0.019087516642230185, 0.030480169392118506, 0.026322391384139388, 0.022411710082492986, 0.03435798634057241, 0.19430117313182194, 0.22029403339942, 0.2399827268078326, 0.17252233066905642, 0.37603365412113865, 0.19641427978319737, 0.22494694817239524, 0.2115176260198155, 0.2785220362657792, 0.05307815034807206, 0.0048886558440446315, 0.03392072153658843, 0.03482511145957634, 0.0036276437014463037, 0.018040670687051397, 0.05247849350961842, 0.009013692690927, 0.036050098165133604]}, "mutation_prompt": null}
{"id": "f323ff34-2bba-4939-9628-adc5a0d9d2a9", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.1\n        max_iterations = self.budget // 2  # Split budget into exploration and exploitation\n        shrink_factor = 0.9  # Introduced shrink factor to dynamically adjust perturbation scale\n\n        while evals < self.budget:\n            if exploration_phase:\n                candidates = self._generate_candidates(best_solution, sampling_rate, 30)\n            else:\n                candidates = self._generate_candidates(best_solution, sampling_rate / 2, 10)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.05 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate  # Changed from uniform to normal distribution\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced ADSO with dynamic perturbation scaling to improve convergence by adapting search radius based on function landscape features.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "712a701a-6a11-4ded-a85c-77a0890f6ea1", "metadata": {"aucs": [0.12563146182703966, 0.06110656025842909, 0.09651583669995067, 0.028776157773613753, 0.02481334310192085, 0.05440767623635401, 0.06169517760577237, 0.07804898222484002, 0.06120900115410821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002509360114927195, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016154479393372112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004842153445247965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0179028268291489, 0.013850233515049104, 0.005784456798722415, 0.009718454722888459, 0.030142335454837688, 0.014285978453935644, 0.009551270368909681, 0.03156310476843771, 0.015290329790083712, 0.05819341452429472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03707311259281887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0543333331142456, 9.999999999998899e-05, 0.006800508731820476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1448709161880033, 9.999999999998899e-05, 9.999999999998899e-05, 0.023910699838782468, 9.999999999998899e-05, 9.999999999998899e-05, 0.09009856387392334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06482665966573131, 9.999999999998899e-05, 0.010989471683501506, 0.14686176283365515, 0.01995014943905249, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792123771876102, 0.016020948739282392, 0.15435526948133815, 0.09238652485641763, 0.03921203413178387, 9.999999999998899e-05, 0.14224815277307212, 0.11411185964303672, 0.08881026309166096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04961240347681306, 0.09700825677077574, 0.16447165902530292, 0.04106138951465377, 0.10505061725361697, 0.09382727709229055, 0.062399861538408374, 0.1194998479239332, 0.09498286655657939, 0.11504737477400828, 0.09812966927241651, 0.10612269506610794, 0.1463215171953849, 0.06422790862815031, 0.10629565794746487, 0.14968785532761142, 0.07817817991050269, 0.09320299331199544, 0.05226200838136008, 0.037730687277224395, 0.03499171292214831, 0.08491150152273608, 0.008742900132900244, 0.08776028468406116, 0.07181798497444869, 0.012982170130354298, 0.026705111087998223, 0.19082497921802255, 0.044552236233679654, 0.10806132467523255, 0.19136431301145151, 0.03677585977599229, 0.07440615877196766, 0.1805321869358364, 0.04780596046603891, 0.09561949304249517, 0.1337388483086921, 9.999999999998899e-05, 9.999999999998899e-05, 0.14748830815998604, 9.999999999998899e-05, 9.999999999998899e-05, 0.1308446696992862, 9.999999999998899e-05, 9.999999999998899e-05, 0.09511293553155897, 0.11554936030356311, 0.047366585524412974, 0.12190536159974252, 0.04129139723369901, 0.04533486560812494, 0.09444337007316894, 0.11456977469342855, 0.1039533958989105, 0.08935391085274824, 0.10467888239163681, 0.014392273752774742, 0.014531785180208812, 0.019087516642230185, 0.030480169392118506, 0.026322391384139388, 0.022411710082492986, 0.03435798634057241, 0.19430117313182194, 0.22029403339942, 0.2399827268078326, 0.17252233066905642, 0.37603365412113865, 0.19641427978319737, 0.22494694817239524, 0.2115176260198155, 0.2785220362657792, 0.05307815034807206, 0.0048886558440446315, 0.03392072153658843, 0.03482511145957634, 0.0036276437014463037, 0.018040670687051397, 0.05247849350961842, 0.009013692690927, 0.036050098165133604]}, "mutation_prompt": null}
{"id": "b320e3d3-c5bc-475f-9554-c71fba29a2e8", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.1\n        max_iterations = self.budget // 2  # Split budget into exploration and exploitation\n        shrink_factor = 0.9  # Introduced shrink factor to dynamically adjust perturbation scale\n\n        while evals < self.budget:\n            if exploration_phase:\n                candidates = self._generate_candidates(best_solution, sampling_rate, 30)\n            else:\n                candidates = self._generate_candidates(best_solution, sampling_rate / 2, 10)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.05 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate  # Changed from uniform to normal distribution\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced ADSO with dynamic perturbation scaling to improve convergence by adapting search radius based on function landscape features.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "712a701a-6a11-4ded-a85c-77a0890f6ea1", "metadata": {"aucs": [0.12563146182703966, 0.06110656025842909, 0.09651583669995067, 0.028776157773613753, 0.02481334310192085, 0.05440767623635401, 0.06169517760577237, 0.07804898222484002, 0.06120900115410821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002509360114927195, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016154479393372112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004842153445247965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0179028268291489, 0.013850233515049104, 0.005784456798722415, 0.009718454722888459, 0.030142335454837688, 0.014285978453935644, 0.009551270368909681, 0.03156310476843771, 0.015290329790083712, 0.05819341452429472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03707311259281887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0543333331142456, 9.999999999998899e-05, 0.006800508731820476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1448709161880033, 9.999999999998899e-05, 9.999999999998899e-05, 0.023910699838782468, 9.999999999998899e-05, 9.999999999998899e-05, 0.09009856387392334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06482665966573131, 9.999999999998899e-05, 0.010989471683501506, 0.14686176283365515, 0.01995014943905249, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792123771876102, 0.016020948739282392, 0.15435526948133815, 0.09238652485641763, 0.03921203413178387, 9.999999999998899e-05, 0.14224815277307212, 0.11411185964303672, 0.08881026309166096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04961240347681306, 0.09700825677077574, 0.16447165902530292, 0.04106138951465377, 0.10505061725361697, 0.09382727709229055, 0.062399861538408374, 0.1194998479239332, 0.09498286655657939, 0.11504737477400828, 0.09812966927241651, 0.10612269506610794, 0.1463215171953849, 0.06422790862815031, 0.10629565794746487, 0.14968785532761142, 0.07817817991050269, 0.09320299331199544, 0.05226200838136008, 0.037730687277224395, 0.03499171292214831, 0.08491150152273608, 0.008742900132900244, 0.08776028468406116, 0.07181798497444869, 0.012982170130354298, 0.026705111087998223, 0.19082497921802255, 0.044552236233679654, 0.10806132467523255, 0.19136431301145151, 0.03677585977599229, 0.07440615877196766, 0.1805321869358364, 0.04780596046603891, 0.09561949304249517, 0.1337388483086921, 9.999999999998899e-05, 9.999999999998899e-05, 0.14748830815998604, 9.999999999998899e-05, 9.999999999998899e-05, 0.1308446696992862, 9.999999999998899e-05, 9.999999999998899e-05, 0.09511293553155897, 0.11554936030356311, 0.047366585524412974, 0.12190536159974252, 0.04129139723369901, 0.04533486560812494, 0.09444337007316894, 0.11456977469342855, 0.1039533958989105, 0.08935391085274824, 0.10467888239163681, 0.014392273752774742, 0.014531785180208812, 0.019087516642230185, 0.030480169392118506, 0.026322391384139388, 0.022411710082492986, 0.03435798634057241, 0.19430117313182194, 0.22029403339942, 0.2399827268078326, 0.17252233066905642, 0.37603365412113865, 0.19641427978319737, 0.22494694817239524, 0.2115176260198155, 0.2785220362657792, 0.05307815034807206, 0.0048886558440446315, 0.03392072153658843, 0.03482511145957634, 0.0036276437014463037, 0.018040670687051397, 0.05247849350961842, 0.009013692690927, 0.036050098165133604]}, "mutation_prompt": null}
{"id": "d5901b1a-4293-4fa2-9e90-a2730e35bfa6", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.1\n        max_iterations = self.budget * 0.45  # Adjusted exploration budget to 45%\n        shrink_factor = 0.92  # Slightly modified shrink factor for finer granularity\n\n        while evals < self.budget:\n            if exploration_phase:\n                candidates = self._generate_candidates(best_solution, sampling_rate, 35)  # Increase candidates in exploration\n            else:\n                candidates = self._generate_candidates(best_solution, sampling_rate / 2, 12)  # Increase candidates in exploitation\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Increased exploitation scale adjustment\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced particle interactions with mutative perturbation scaling and phase adaptation for improved convergence.", "configspace": "", "generation": 7, "fitness": 0.048591565988326965, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "712a701a-6a11-4ded-a85c-77a0890f6ea1", "metadata": {"aucs": [0.14681805575646834, 0.07233162442334617, 0.11258744701595702, 0.03581553999061593, 0.031585379890521126, 0.06426297634039635, 0.07419364497104286, 0.09002402763489281, 0.0728882268742882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002477117539332885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001109772267597342, 9.999999999998899e-05, 9.999999999998899e-05, 0.013641875524229352, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022175441868566348, 0.016060501410434025, 0.00958201658562341, 0.013158650233585312, 0.03284073570405488, 0.019312996399180382, 0.013126010762793183, 0.03410190104579092, 0.02030499368962757, 0.06578923071835563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05455984066622677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0543333331142456, 9.999999999998899e-05, 0.0068105486976861584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01224385263755845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17064416298931517, 9.999999999998899e-05, 9.999999999998899e-05, 0.07526720967095313, 9.999999999998899e-05, 9.999999999998899e-05, 0.21450436496827707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16405441797787956, 0.0664279213026795, 0.006151705802559304, 0.013587279970538324, 0.15523038024058589, 0.020288001346579265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.106695646298398, 0.031258591364071386, 0.16551923102619237, 0.10063413666427712, 0.060515566383421926, 0.012197917751586518, 0.15213086177461377, 0.1285888405144644, 0.10806967042765225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04984228416682801, 0.11428215379639639, 0.18422565128562496, 0.04952956637424699, 0.07183301748634385, 0.12313182108449494, 0.06709894423583462, 0.12042840038879843, 0.0999196657526934, 0.11503391789664597, 0.09812843225077073, 0.10611461355328156, 0.14634488607647456, 0.06401266414669804, 0.10607355027533472, 0.15221004350613931, 0.07789046502421193, 0.09324297871090692, 0.052285113269888495, 0.03825428114307883, 0.03413359472409916, 0.0831576052796077, 0.008996435973270711, 0.08646024881185477, 0.06987865911212487, 0.013026169228832263, 0.026680245472432085, 0.18833041648260107, 0.0325503964834406, 0.10825825845310388, 0.19244268274255916, 0.041297863021098946, 0.08554472707744987, 0.18258472591132424, 0.05418312380022183, 0.11377910603197794, 0.15842644086916902, 9.999999999998899e-05, 9.999999999998899e-05, 0.15611091708045366, 9.999999999998899e-05, 9.999999999998899e-05, 0.15726686720564143, 9.999999999998899e-05, 9.999999999998899e-05, 0.1067922338013454, 0.12816634861687548, 0.062082716736195476, 0.15290764427477466, 0.05636010141501324, 0.05420981618464216, 0.10339123699771224, 0.11456826716938284, 0.11233093847694942, 0.09795503153897356, 0.10607822821397417, 0.017677885463220244, 0.014934727881591559, 0.026066232996486915, 0.04414940966013514, 0.030322760830938433, 0.02982488630332847, 0.040114498862588, 0.34652731442715723, 0.25693393924157826, 0.2147082914808196, 0.31339627108874835, 0.2126260803853699, 0.34457673682285483, 0.27991356059572603, 0.2164193585784444, 0.19925794947982967, 0.044246251420414384, 0.006384442596744866, 0.035096444431214846, 0.034847218576110395, 0.0020350273894650384, 0.017963449289400524, 0.05230024806512523, 0.007868854827195348, 0.03615126693588078]}, "mutation_prompt": null}
{"id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 8, "fitness": 0.0513195676768146, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.08.", "error": "", "parent_id": "d5901b1a-4293-4fa2-9e90-a2730e35bfa6", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "ce99003e-e51e-4fc7-afc2-25585bf0b606", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "bde246a5-48d2-4b19-9144-ab1149e1d35d", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "954e0ba6-e750-49df-b3d3-9b5c41f85172", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "90d9d200-06a3-4bce-998c-cabcc6a5027e", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "13431e23-70e2-40ef-886e-7a982c005d47", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "30cec025-662b-4216-9c2c-3a13c3013162", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.1  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.38  # Adjusted exploration budget to 38%\n        shrink_factor = 0.89  # Slightly modified shrink factor\n        scale_variation = [0.5, 1.0]  # Multi-scale perturbations\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 14  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates, scale_variation)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.03 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples, scales):\n        candidates = []\n        for _ in range(num_samples):\n            scale = np.random.choice(scales)  # Introduce scale variation\n            perturbation = np.random.normal(0, scale, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Introducing multi-scale perturbations for adaptive candidate diversity and strategic sampling adjustment.", "configspace": "", "generation": 14, "fitness": 0.0391887044153207, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.06.", "error": "", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.11147939000370755, 0.05481184390498506, 0.09794942116666427, 0.02733191682213254, 0.019316577439741356, 0.045931803013920414, 0.0560625280694691, 0.07421243649995579, 0.04883272146676498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002494713389663228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004848450893251366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01431820515132054, 0.01113112398659799, 0.005163970186584432, 0.006272754766538102, 0.026439438378675018, 0.012269324522141356, 0.005690978140221126, 0.027142161748132665, 0.012780138215732095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031184488843493674, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07663571693371518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006892592338516024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05939144466024149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044253764518251804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06736387649684727, 9.999999999998899e-05, 0.011028675534835553, 0.1395693334981506, 0.01983904734310149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06702993206396735, 0.01315215385853663, 0.1477568996632752, 0.09062464216860244, 0.027773374340054002, 9.999999999998899e-05, 0.13690321849588583, 0.10549628940336375, 0.06936229599232846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04241689959449091, 0.1493745489182995, 0.12886912676415485, 0.0531371878580561, 0.11547860258454834, 0.08162411513552692, 0.03973305223203283, 0.07437746450763516, 0.09828995366557336, 0.11502337007081065, 0.09718318548103055, 0.107363932304682, 0.14630805221579335, 0.07077006509689343, 0.11324648493373657, 0.1391277724480373, 0.07757700401244005, 0.09324489770084932, 0.05235990645047628, 0.03670089008962929, 0.03416349280727138, 0.08318396905437553, 0.0028949583484927377, 0.07914416359256171, 0.0716523526106162, 0.011398058810015432, 0.024501345453025736, 0.19014133844547088, 0.04065259926157827, 0.10376685125573892, 0.2076937506848947, 0.03396540524719727, 0.05876795729306372, 0.1846147745205723, 0.04160694062784642, 0.09680597667226343, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13486502257144817, 9.999999999998899e-05, 9.999999999998899e-05, 0.023437818361776608, 9.999999999998899e-05, 9.999999999998899e-05, 0.10411645408431758, 0.09196274544696881, 0.0363441436079418, 0.07509177342322215, 0.02782606079834915, 0.03351440919363868, 0.08778321594161753, 0.11315263179406687, 0.09864500999246106, 0.0858843197303939, 0.10065760193982842, 0.01375783436567668, 0.014249518114257453, 0.01721712979141743, 0.021761751643533556, 0.023617474275329786, 0.018485142853726932, 0.029743827789413424, 0.20360178384433236, 0.17378053946718952, 0.24122850728219514, 0.23179920148427158, 0.26739545039635837, 0.24671657440723027, 0.26735249321838706, 0.2899790984934121, 0.2807739237912422, 0.04716217267595835, 0.004621816961038694, 0.03240798521103183, 0.035376131541605904, 9.999999999998899e-05, 0.01618359931356539, 0.04418991805155836, 0.0077934172513342, 0.03578556393012855]}, "mutation_prompt": null}
{"id": "1190516c-78af-4f73-a4ac-b59d1d276fc5", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "955f9434-f52f-467a-95ca-8efdc4fe8faf", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "f05aac18-c88f-4a42-83a9-65d1ca5de332", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "283a2c0d-fd23-481d-83c0-7c5312dd9807", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.38  # Adjusted exploration budget to 38%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n        learning_rate_adjustment = 1.02  # New adaptive learning rate adjustment\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 14  # Slight adjustment in candidate number\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (learning_rate_adjustment * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "EnhancedADSO with stochastic candidate selection and adaptive learning rate for improved convergence.", "configspace": "", "generation": 18, "fitness": 0.05112080915040522, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.08.", "error": "", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.15514394592473113, 0.07302745120597409, 0.11418219927350892, 0.03702867309759317, 0.03340337742603716, 0.06700436296149259, 0.07661626416864942, 0.09269586097810167, 0.0746372645098492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010892092346335036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001131433298599549, 9.999999999998899e-05, 9.999999999998899e-05, 0.004793990069206999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023370480635879765, 0.01687540203601734, 0.010331330125395888, 0.014576743477893395, 0.03466465377149308, 0.019710060986699918, 0.014560371638109415, 0.0353878062114672, 0.02091059436358378, 0.0845724894190707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058016456288036866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.023930227659349157, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012395319817517292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17184392479145338, 9.999999999998899e-05, 9.999999999998899e-05, 0.09783008429196582, 9.999999999998899e-05, 9.999999999998899e-05, 0.20425452052791837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14868575583146681, 0.06987695271813832, 0.0089548208490412, 0.013583567917472283, 0.14995581779274092, 0.018557975029332874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11372499111412582, 0.032391683636245006, 0.16724143819301285, 0.10142186141863219, 0.06630750473809277, 0.014695380952757131, 0.15472062831697297, 0.13056483625430426, 0.11470536900014228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04675245378999038, 0.16655200727411923, 0.2720203904163656, 0.049051950127238175, 0.11029830090971338, 0.0852362939254816, 0.038108480218910334, 0.09929652891220908, 0.09884927799785725, 0.11502183988865067, 0.09816551999833223, 0.10613089179838131, 0.1463594259611215, 0.06453084495544081, 0.10452725905860372, 0.14946593243703188, 0.07823832314529611, 0.09326215292874951, 0.052289056010898616, 0.040032244009937656, 0.03424306024502044, 0.08484556738077687, 0.009004976294425204, 0.06692166939236721, 0.07073244102276677, 0.012800552183413472, 0.02666010508904071, 0.17138332016656566, 0.048026722093160945, 0.09691558999544814, 0.19172889468898024, 0.04492794453952553, 0.08643093341706176, 0.18975112703303043, 0.0642235650419245, 0.09956169526475855, 0.15667401260995029, 9.999999999998899e-05, 9.999999999998899e-05, 0.161919979658685, 9.999999999998899e-05, 9.999999999998899e-05, 0.1493564557155148, 9.999999999998899e-05, 9.999999999998899e-05, 0.10903666290448999, 0.1308765885458184, 0.06673207177336993, 0.16061783535746432, 0.05860614460910529, 0.055874166660566105, 0.1041112765667116, 0.11477303969179609, 0.11251946111127598, 0.09945087393042829, 0.10710569176804074, 0.018261003040873414, 0.015004115606634172, 0.02875129817990074, 0.04203827923389669, 0.03137355318214541, 0.03133169738311514, 0.10627157952742472, 0.20159045888348748, 0.480165781082614, 0.20925652429988895, 0.2973164936559294, 0.17386603620427377, 0.4280214289203478, 0.38047784133188056, 0.23375397441698154, 0.26548658539627845, 0.053224858197321034, 0.0011494309642834377, 0.034497869299350725, 0.04230501007971088, 0.003972348984561669, 0.012883714456405682, 0.05050463090938828, 0.00821666954116973, 0.03912903151542324]}, "mutation_prompt": null}
{"id": "13b0c959-46a9-48a7-b152-beda85e1659b", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize parameters\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        # Adaptive sampling parameters\n        exploration_phase = True\n        sampling_rate = 0.12  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.40  # Adjusted exploration budget to 40%\n        shrink_factor = 0.91  # Slightly modified shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            # Update exploration-exploitation balance\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.std([func(c) for c in candidates])  # Adaptive convergence threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Modified exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance with dynamic candidate scaling and adaptive convergence threshold.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.1552522899323452, 0.07309230240717557, 0.11333308301194389, 0.036729278947397304, 0.03296129425109939, 0.06628640152394893, 0.07417997399469989, 0.09206835524184842, 0.07419420433318624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010905747599257998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016075813523480642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011233407888443514, 9.999999999998899e-05, 9.999999999998899e-05, 0.013612326087700466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023385616269148368, 0.017081268800937854, 0.00981674835412727, 0.01423534756159095, 0.03476722466118265, 0.01952653620590228, 0.014130629916697224, 0.03579963875167136, 0.020709121185166213, 0.07360270964984394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05591607109800989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018920720834948557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012397216014417789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17995433858510168, 9.999999999998899e-05, 9.999999999998899e-05, 0.11303475562415843, 9.999999999998899e-05, 9.999999999998899e-05, 0.2231216572781194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16288682286363165, 0.06959547821629408, 0.006700634182617238, 0.014925765953244796, 0.14408138258817327, 0.0187172685127569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11198947091256273, 0.03180382268623638, 0.16404348393734092, 0.09970409365169364, 0.06682987441999189, 0.015732332866231657, 0.15642050545172692, 0.1272585114061099, 0.11727503445075904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04520669271773481, 0.11650105000954414, 0.37778933411920823, 0.049567570904289426, 0.1195568753127556, 0.07499756971243043, 0.03520662064314617, 0.10174221388250992, 0.10042842265253837, 0.11501928553153806, 0.09816841338019366, 0.10618773554129934, 0.14636497721287578, 0.06391960476950675, 0.10271707396637886, 0.14956332549406393, 0.07820488020047545, 0.09329564124005207, 0.05229099828134498, 0.037524279868625166, 0.03347673105880622, 0.08487422875245343, 0.008146966759557284, 0.06693171761995476, 0.07071844227920887, 0.012931657320009227, 0.02669163354574544, 0.1705839019266303, 0.053115650628108746, 0.09653112369168304, 0.18693399182898218, 0.05752583782346832, 0.0950603969291447, 0.19012831724376988, 0.06564195526453243, 0.10460201558891769, 0.15805691629748853, 9.999999999998899e-05, 9.999999999998899e-05, 0.1587908208467197, 9.999999999998899e-05, 9.999999999998899e-05, 0.15145353896147895, 9.999999999998899e-05, 9.999999999998899e-05, 0.11061648544323543, 0.1296860554121968, 0.06545191411120854, 0.15940647552208997, 0.07416646407801764, 0.05433034404971915, 0.10410187584937025, 0.11480730274316897, 0.11597019078399695, 0.09988077976208642, 0.10824436097132473, 0.017834940215609274, 0.015230388030904707, 0.02911813073981906, 0.045679688832328424, 0.02961326506346973, 0.03287755356866495, 0.11132423419927495, 0.23413606710744794, 0.18867729373130415, 0.17863285585833966, 0.6862273560071084, 0.2901974301929281, 0.1969431685722004, 0.2792909533960134, 0.26739386372699314, 0.2589556122477997, 0.050774134429380724, 0.002493748309633559, 0.03456907365344486, 0.03972784235391846, 0.0049785696277427904, 0.013503022408367538, 0.0505397774219809, 0.010374395635595057, 0.03914533335188475]}, "mutation_prompt": null}
{"id": "3a16b7a3-07ca-48d6-bc24-acd90bbe9c83", "solution": "# Description: Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.\n# Code:\nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.12\n        max_iterations = self.budget * 0.38  # 5% reduced exploration budget\n        shrink_factor = 0.93  # Slightly increased shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 35 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.mean([abs(func(c) - best_value) for c in candidates])  # Refined threshold\n            else:\n                sampling_rate *= (1.07 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.", "configspace": "", "generation": 20, "fitness": 0.05765510212071356, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.08.", "error": "", "parent_id": "8dfdba06-08ee-4f65-80af-c9c38b589bd7", "metadata": {"aucs": [0.2085950324724718, 0.09356975624643094, 0.1453041322082116, 0.04855489804754254, 0.04451800293060204, 0.08345852279182564, 0.09659589496906507, 0.11468073068957363, 0.09553693380974404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010888933395639788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032866774837729817, 9.999999999998899e-05, 9.999999999998899e-05, 0.01361605477828709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0309202432361233, 0.020146436045733185, 0.016240006073132474, 0.020230632494293244, 0.03824248849382583, 0.028242677312851128, 0.02035238794148686, 0.0391327138808758, 0.029441246835523294, 0.1046001603280019, 9.999999999998899e-05, 9.999999999998899e-05, 0.022429580335567745, 0.08291743627473791, 0.007692508998903946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05952688186782329, 9.999999999998899e-05, 0.020291274785878888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018326491295045932, 0.19535170526182277, 9.999999999998899e-05, 0.08934324997297738, 0.18064256695941894, 9.999999999998899e-05, 9.999999999998899e-05, 0.22412837976138067, 9.999999999998899e-05, 0.0003079484088497342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044388812022921886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16878772798766783, 0.07116253542492501, 0.009431917641499199, 0.018101236470473125, 0.13416463693311076, 0.02022886649714528, 9.999999999998899e-05, 9.999999999998899e-05, 0.04228289724286438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014523218397206938, 0.15380990720588028, 0.0521414322463053, 0.18790779453362838, 0.11333068340474273, 0.0948615172489915, 0.04151064136386107, 0.17505813529211722, 0.13836356097578806, 0.1505803764481023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04501801675507444, 0.12307123821447785, 0.1951053351398334, 0.063316152743356, 0.12245337626258301, 0.0823066140665425, 0.0584046785577893, 0.09787877738980988, 0.09732966636308427, 0.11502262748218839, 0.0981920392560891, 0.10613140230344087, 0.14635541913409655, 0.07062540248641891, 0.10932776395579313, 0.15206545437654095, 0.07778538227291687, 0.0932427433109917, 0.05225311770091523, 0.0378807197396962, 0.03262159757842076, 0.07945820687037708, 0.008993836777196007, 0.07564416142457542, 0.07454686401778088, 0.01130056473775698, 0.02665317445214188, 0.20128041368105765, 0.04913511569269491, 0.0934652961355823, 0.19965804912811713, 0.048417645742781845, 0.09159576242311018, 0.189853438602822, 0.06632326175606995, 0.10807308845402008, 0.1634471340732987, 9.999999999998899e-05, 9.999999999998899e-05, 0.15840239832614667, 0.18065832452945974, 0.008044678544945616, 0.16099434221599151, 9.999999999998899e-05, 9.999999999998899e-05, 0.11959228249161136, 0.13475998711892623, 0.10342777244595092, 0.1683920056858087, 0.06410267609497311, 0.05981502357599999, 0.10730228945462827, 0.11477265870560882, 0.14354553539714776, 0.10258562571155072, 0.1104666999655537, 0.031133014604566744, 0.015412465083113003, 0.05243389585189584, 0.06339750816717482, 0.034565174337322424, 0.04578492338367757, 0.13563839080801432, 0.4154953417938284, 0.2293921584445383, 0.30092892543702887, 0.25985671811241373, 0.2595459275225527, 0.3038880794807376, 0.3801820916586306, 0.3511036581848753, 0.29853774238468844, 0.06154679111873851, 9.999999999998899e-05, 0.03848600014942438, 0.04082862466862591, 0.0098081961714368, 0.017073885594964477, 0.05231689539950257, 0.010296288473507054, 0.04092477924509508]}, "mutation_prompt": null}
{"id": "fa27ffac-13e3-416a-8f53-876f499dd310", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.12\n        max_iterations = self.budget * 0.35  # Reduced exploration budget\n        shrink_factor = 0.92  # Slightly reduced shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 40 if exploration_phase else 8  # Enhanced candidate diversity\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.mean([abs(func(c) - best_value) for c in candidates])\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Fine-tuned exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced convergence through adaptive sampling rate and candidate diversity management.", "configspace": "", "generation": 21, "fitness": 0.05323593574775855, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "3a16b7a3-07ca-48d6-bc24-acd90bbe9c83", "metadata": {"aucs": [0.17949334500427194, 0.08389555837327711, 0.13033621123595984, 0.043579352155733275, 0.040500859742389705, 0.0745597878328883, 0.08438279913484859, 0.10547203724847498, 0.08583024548578888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01088932019109723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011089164529337614, 9.999999999998899e-05, 9.999999999998899e-05, 0.013604529944559518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027883537451847018, 0.019087005579180527, 0.01353118957280619, 0.017777692433919356, 0.03752443993953836, 0.023710168746827742, 0.017738477337479353, 0.037745844134500106, 0.024814822960889993, 0.0872180584258162, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06425066727555717, 0.002737081769398131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07836879694916643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19846283393169573, 9.999999999998899e-05, 0.02300348478980907, 0.15727644484533065, 9.999999999998899e-05, 9.999999999998899e-05, 0.21994528096067922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17986918915091288, 0.07070123298607667, 0.00826793348248045, 0.015656236454175132, 0.12956322393722508, 0.02022456694741026, 9.999999999998899e-05, 9.999999999998899e-05, 0.04061543287146707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14007152142174784, 0.04274195207118758, 0.17623035944559173, 0.10738076455612378, 0.08444462641050299, 0.029430168743160734, 0.16386076795784033, 0.13715030716066123, 0.1427497482996487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12637216016076314, 0.12093519582409573, 0.2951828608411854, 0.04938315448164432, 0.114138764823555, 0.1557168780186643, 0.041330570771965225, 0.09651274529485687, 0.1217576083940094, 0.11500751776462059, 0.09819185372963313, 0.10759733938426908, 0.14635840721587812, 0.07962984686349295, 0.10304372536479456, 0.1520101140949004, 0.07831479026104204, 0.09332952086511037, 0.05225683868269948, 0.04207787321002432, 0.03432348423062781, 0.07945939218329934, 0.00898563866010993, 0.07215687204957288, 0.07149411219196022, 0.01116820075047631, 0.026661556607925352, 0.19174590445732853, 0.05190830958593484, 0.10291125551884939, 0.1877507614202587, 0.04049407208165945, 0.09099962949083162, 0.19034634335547862, 0.06303214456437267, 0.10198296603282475, 0.16247674393199885, 9.999999999998899e-05, 9.999999999998899e-05, 0.16200233308085987, 0.15163064735923293, 9.999999999998899e-05, 0.14880990281464146, 9.999999999998899e-05, 9.999999999998899e-05, 0.114192979746777, 0.133702394055649, 0.08381124625691916, 0.16757082906492637, 0.06355503572892596, 0.058264501406248614, 0.10567963538204261, 0.11464735481040422, 0.12402702428795565, 0.10092343022973216, 0.10871912320542831, 0.025975805661369256, 0.015328126480548265, 0.041919566581953616, 0.057111426560618406, 0.03338118712344318, 0.04101868522314944, 0.04427899325699203, 0.25391191178059, 0.21457858579767108, 0.26204657714641855, 0.26210000103076103, 0.252717645553171, 0.21323149226299087, 0.2655043900173709, 0.25184199263339746, 0.28735190953476897, 0.051004393387815816, 0.0012446101337720838, 0.034187502385076174, 0.04088105533737019, 0.006120416021922037, 0.02384795763782821, 0.05043325513207253, 0.010878526267511957, 0.03917251332185967]}, "mutation_prompt": null}
{"id": "42737a12-13e3-416a-b6e5-603458e583fc", "solution": "# Description: Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.\n# Code:\nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.12\n        max_iterations = self.budget * 0.38  # 5% reduced exploration budget\n        shrink_factor = 0.93  # Slightly increased shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 35 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.mean([abs(func(c) - best_value) for c in candidates])  # Refined threshold\n            else:\n                sampling_rate *= (1.07 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a16b7a3-07ca-48d6-bc24-acd90bbe9c83", "metadata": {"aucs": [0.2085950324724718, 0.09356975624643094, 0.1453041322082116, 0.04855489804754254, 0.04451800293060204, 0.08345852279182564, 0.09659589496906507, 0.11468073068957363, 0.09553693380974404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010888933395639788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032866774837729817, 9.999999999998899e-05, 9.999999999998899e-05, 0.01361605477828709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0309202432361233, 0.020146436045733185, 0.016240006073132474, 0.020230632494293244, 0.03824248849382583, 0.028242677312851128, 0.02035238794148686, 0.0391327138808758, 0.029441246835523294, 0.1046001603280019, 9.999999999998899e-05, 9.999999999998899e-05, 0.022429580335567745, 0.08291743627473791, 0.007692508998903946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05952688186782329, 9.999999999998899e-05, 0.020291274785878888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018326491295045932, 0.19535170526182277, 9.999999999998899e-05, 0.08934324997297738, 0.18064256695941894, 9.999999999998899e-05, 9.999999999998899e-05, 0.22412837976138067, 9.999999999998899e-05, 0.0003079484088497342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044388812022921886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16878772798766783, 0.07116253542492501, 0.009431917641499199, 0.018101236470473125, 0.13416463693311076, 0.02022886649714528, 9.999999999998899e-05, 9.999999999998899e-05, 0.04228289724286438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014523218397206938, 0.15380990720588028, 0.0521414322463053, 0.18790779453362838, 0.11333068340474273, 0.0948615172489915, 0.04151064136386107, 0.17505813529211722, 0.13836356097578806, 0.1505803764481023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04501801675507444, 0.12307123821447785, 0.1951053351398334, 0.063316152743356, 0.12245337626258301, 0.0823066140665425, 0.0584046785577893, 0.09787877738980988, 0.09732966636308427, 0.11502262748218839, 0.0981920392560891, 0.10613140230344087, 0.14635541913409655, 0.07062540248641891, 0.10932776395579313, 0.15206545437654095, 0.07778538227291687, 0.0932427433109917, 0.05225311770091523, 0.0378807197396962, 0.03262159757842076, 0.07945820687037708, 0.008993836777196007, 0.07564416142457542, 0.07454686401778088, 0.01130056473775698, 0.02665317445214188, 0.20128041368105765, 0.04913511569269491, 0.0934652961355823, 0.19965804912811713, 0.048417645742781845, 0.09159576242311018, 0.189853438602822, 0.06632326175606995, 0.10807308845402008, 0.1634471340732987, 9.999999999998899e-05, 9.999999999998899e-05, 0.15840239832614667, 0.18065832452945974, 0.008044678544945616, 0.16099434221599151, 9.999999999998899e-05, 9.999999999998899e-05, 0.11959228249161136, 0.13475998711892623, 0.10342777244595092, 0.1683920056858087, 0.06410267609497311, 0.05981502357599999, 0.10730228945462827, 0.11477265870560882, 0.14354553539714776, 0.10258562571155072, 0.1104666999655537, 0.031133014604566744, 0.015412465083113003, 0.05243389585189584, 0.06339750816717482, 0.034565174337322424, 0.04578492338367757, 0.13563839080801432, 0.4154953417938284, 0.2293921584445383, 0.30092892543702887, 0.25985671811241373, 0.2595459275225527, 0.3038880794807376, 0.3801820916586306, 0.3511036581848753, 0.29853774238468844, 0.06154679111873851, 9.999999999998899e-05, 0.03848600014942438, 0.04082862466862591, 0.0098081961714368, 0.017073885594964477, 0.05231689539950257, 0.010296288473507054, 0.04092477924509508]}, "mutation_prompt": null}
{"id": "666e46a9-d46d-45b2-bf47-2bca5201b2fb", "solution": "# Description: Enhanced exploration-exploitation balance using dynamic perturbation scaling and adaptive candidate selection for improved convergence speed.\n# Code:\nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.1  # Slightly decreased initial sampling rate\n        max_iterations = self.budget * 0.35  # Increased exploration budget percentage\n        shrink_factor = 0.92  # Reduced shrink factor for more exploration\n\n        while evals < self.budget:\n            dynamic_candidates = 37 if exploration_phase else 12  # Adjusted candidate numbers slightly\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.mean([abs(func(c) - best_value) for c in candidates])  # Refined threshold\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Less aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced exploration-exploitation balance using dynamic perturbation scaling and adaptive candidate selection for improved convergence speed.", "configspace": "", "generation": 23, "fitness": 0.05079769498292089, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.08.", "error": "", "parent_id": "3a16b7a3-07ca-48d6-bc24-acd90bbe9c83", "metadata": {"aucs": [0.14569660184064526, 0.07272855218758145, 0.11368518720191312, 0.03501394856239637, 0.03369112747361469, 0.06474231166858935, 0.07432647095241862, 0.09025285736581501, 0.072598617969175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002480343369881899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010843518877442504, 9.999999999998899e-05, 9.999999999998899e-05, 0.004804612575930345, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023537844372853778, 0.016120433886623875, 0.009845780587582564, 0.01378181824581226, 0.03263322656191958, 0.018784807882956778, 0.013598593491027766, 0.0346381088672002, 0.020043458349666254, 0.0746529419687113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05313893481966081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0543333331142456, 9.999999999998899e-05, 0.01700482441970741, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01224385263755845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19337901271357383, 9.999999999998899e-05, 9.999999999998899e-05, 0.11029477901675477, 9.999999999998899e-05, 9.999999999998899e-05, 0.20495890173820674, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1656497615900644, 0.06677952811959253, 0.00806073606865032, 0.013251289947242784, 0.15919903341939645, 0.01886738410248978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11078656311044255, 0.031246414838659642, 0.16449234107623267, 0.10044341874525853, 0.060739587327411027, 0.012319194695483593, 0.1537812292381554, 0.12858774079726687, 0.11308701661205012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04968245092913326, 0.12300024989043357, 0.18247366436091828, 0.04678025928596474, 0.12055123330689743, 0.09507928176793612, 0.07180756725715887, 0.22863595365658795, 0.09866615336348783, 0.11503309766170078, 0.09816149415781439, 0.10892453084615938, 0.14633573633359953, 0.06454293254905641, 0.10780592112405263, 0.15220728812892081, 0.07804960588100707, 0.09321493540933568, 0.052238500568766555, 0.03702244072345895, 0.0350971776212029, 0.08215003993519254, 0.008934302532544236, 0.08654351508911218, 0.06987633729738096, 0.012994245386803382, 0.02667982544150349, 0.19097577954090372, 0.04254007284489858, 0.11345436593955105, 0.19386079841506776, 0.039828629477426714, 0.090831316714168, 0.18264751445490646, 0.05952131011734074, 0.12115789221373074, 0.15272834198701257, 9.999999999998899e-05, 9.999999999998899e-05, 0.15651331378881606, 9.999999999998899e-05, 9.999999999998899e-05, 0.15086408204155, 9.999999999998899e-05, 9.999999999998899e-05, 0.10599698474509478, 0.12639610365631337, 0.062122526480103635, 0.15307696609409505, 0.057269659020855235, 0.0532324913911576, 0.10244141802266482, 0.11455657190066837, 0.11100734104487275, 0.0971184624476007, 0.1062415492322425, 0.018103017673646304, 0.0150052769069694, 0.026656375090889695, 0.0439678961262584, 0.030848320683123154, 0.03087785477511984, 0.04044178138954413, 0.4154456301422781, 0.2561028348915996, 0.4208173851163829, 0.2367012026166745, 0.27380152914529676, 0.2612215195166214, 0.2036922766250281, 0.30856100872675774, 0.24139861733395118, 0.04805983781150458, 0.006380211989882034, 0.03520557973065985, 0.033726059685533105, 0.0020438943346513527, 0.01798363482386378, 0.05234357325182171, 0.007823340758248531, 0.03713434966927198]}, "mutation_prompt": null}
{"id": "5eb4b443-b4e4-4ed2-9b69-591122bffbbc", "solution": "# Description: Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.\n# Code:\nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.12\n        max_iterations = self.budget * 0.38  # 5% reduced exploration budget\n        shrink_factor = 0.93  # Slightly increased shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 35 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.mean([abs(func(c) - best_value) for c in candidates])  # Refined threshold\n            else:\n                sampling_rate *= (1.07 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a16b7a3-07ca-48d6-bc24-acd90bbe9c83", "metadata": {"aucs": [0.2085950324724718, 0.09356975624643094, 0.1453041322082116, 0.04855489804754254, 0.04451800293060204, 0.08345852279182564, 0.09659589496906507, 0.11468073068957363, 0.09553693380974404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010888933395639788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032866774837729817, 9.999999999998899e-05, 9.999999999998899e-05, 0.01361605477828709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0309202432361233, 0.020146436045733185, 0.016240006073132474, 0.020230632494293244, 0.03824248849382583, 0.028242677312851128, 0.02035238794148686, 0.0391327138808758, 0.029441246835523294, 0.1046001603280019, 9.999999999998899e-05, 9.999999999998899e-05, 0.022429580335567745, 0.08291743627473791, 0.007692508998903946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05952688186782329, 9.999999999998899e-05, 0.020291274785878888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018326491295045932, 0.19535170526182277, 9.999999999998899e-05, 0.08934324997297738, 0.18064256695941894, 9.999999999998899e-05, 9.999999999998899e-05, 0.22412837976138067, 9.999999999998899e-05, 0.0003079484088497342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044388812022921886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16878772798766783, 0.07116253542492501, 0.009431917641499199, 0.018101236470473125, 0.13416463693311076, 0.02022886649714528, 9.999999999998899e-05, 9.999999999998899e-05, 0.04228289724286438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014523218397206938, 0.15380990720588028, 0.0521414322463053, 0.18790779453362838, 0.11333068340474273, 0.0948615172489915, 0.04151064136386107, 0.17505813529211722, 0.13836356097578806, 0.1505803764481023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04501801675507444, 0.12307123821447785, 0.1951053351398334, 0.063316152743356, 0.12245337626258301, 0.0823066140665425, 0.0584046785577893, 0.09787877738980988, 0.09732966636308427, 0.11502262748218839, 0.0981920392560891, 0.10613140230344087, 0.14635541913409655, 0.07062540248641891, 0.10932776395579313, 0.15206545437654095, 0.07778538227291687, 0.0932427433109917, 0.05225311770091523, 0.0378807197396962, 0.03262159757842076, 0.07945820687037708, 0.008993836777196007, 0.07564416142457542, 0.07454686401778088, 0.01130056473775698, 0.02665317445214188, 0.20128041368105765, 0.04913511569269491, 0.0934652961355823, 0.19965804912811713, 0.048417645742781845, 0.09159576242311018, 0.189853438602822, 0.06632326175606995, 0.10807308845402008, 0.1634471340732987, 9.999999999998899e-05, 9.999999999998899e-05, 0.15840239832614667, 0.18065832452945974, 0.008044678544945616, 0.16099434221599151, 9.999999999998899e-05, 9.999999999998899e-05, 0.11959228249161136, 0.13475998711892623, 0.10342777244595092, 0.1683920056858087, 0.06410267609497311, 0.05981502357599999, 0.10730228945462827, 0.11477265870560882, 0.14354553539714776, 0.10258562571155072, 0.1104666999655537, 0.031133014604566744, 0.015412465083113003, 0.05243389585189584, 0.06339750816717482, 0.034565174337322424, 0.04578492338367757, 0.13563839080801432, 0.4154953417938284, 0.2293921584445383, 0.30092892543702887, 0.25985671811241373, 0.2595459275225527, 0.3038880794807376, 0.3801820916586306, 0.3511036581848753, 0.29853774238468844, 0.06154679111873851, 9.999999999998899e-05, 0.03848600014942438, 0.04082862466862591, 0.0098081961714368, 0.017073885594964477, 0.05231689539950257, 0.010296288473507054, 0.04092477924509508]}, "mutation_prompt": null}
{"id": "47006693-77e2-4acd-a93c-05b89ad4f774", "solution": "# Description: Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.\n# Code:\nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.12\n        max_iterations = self.budget * 0.38  # 5% reduced exploration budget\n        shrink_factor = 0.93  # Slightly increased shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 35 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.mean([abs(func(c) - best_value) for c in candidates])  # Refined threshold\n            else:\n                sampling_rate *= (1.07 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a16b7a3-07ca-48d6-bc24-acd90bbe9c83", "metadata": {"aucs": [0.2085950324724718, 0.09356975624643094, 0.1453041322082116, 0.04855489804754254, 0.04451800293060204, 0.08345852279182564, 0.09659589496906507, 0.11468073068957363, 0.09553693380974404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010888933395639788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032866774837729817, 9.999999999998899e-05, 9.999999999998899e-05, 0.01361605477828709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0309202432361233, 0.020146436045733185, 0.016240006073132474, 0.020230632494293244, 0.03824248849382583, 0.028242677312851128, 0.02035238794148686, 0.0391327138808758, 0.029441246835523294, 0.1046001603280019, 9.999999999998899e-05, 9.999999999998899e-05, 0.022429580335567745, 0.08291743627473791, 0.007692508998903946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05952688186782329, 9.999999999998899e-05, 0.020291274785878888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018326491295045932, 0.19535170526182277, 9.999999999998899e-05, 0.08934324997297738, 0.18064256695941894, 9.999999999998899e-05, 9.999999999998899e-05, 0.22412837976138067, 9.999999999998899e-05, 0.0003079484088497342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044388812022921886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16878772798766783, 0.07116253542492501, 0.009431917641499199, 0.018101236470473125, 0.13416463693311076, 0.02022886649714528, 9.999999999998899e-05, 9.999999999998899e-05, 0.04228289724286438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014523218397206938, 0.15380990720588028, 0.0521414322463053, 0.18790779453362838, 0.11333068340474273, 0.0948615172489915, 0.04151064136386107, 0.17505813529211722, 0.13836356097578806, 0.1505803764481023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04501801675507444, 0.12307123821447785, 0.1951053351398334, 0.063316152743356, 0.12245337626258301, 0.0823066140665425, 0.0584046785577893, 0.09787877738980988, 0.09732966636308427, 0.11502262748218839, 0.0981920392560891, 0.10613140230344087, 0.14635541913409655, 0.07062540248641891, 0.10932776395579313, 0.15206545437654095, 0.07778538227291687, 0.0932427433109917, 0.05225311770091523, 0.0378807197396962, 0.03262159757842076, 0.07945820687037708, 0.008993836777196007, 0.07564416142457542, 0.07454686401778088, 0.01130056473775698, 0.02665317445214188, 0.20128041368105765, 0.04913511569269491, 0.0934652961355823, 0.19965804912811713, 0.048417645742781845, 0.09159576242311018, 0.189853438602822, 0.06632326175606995, 0.10807308845402008, 0.1634471340732987, 9.999999999998899e-05, 9.999999999998899e-05, 0.15840239832614667, 0.18065832452945974, 0.008044678544945616, 0.16099434221599151, 9.999999999998899e-05, 9.999999999998899e-05, 0.11959228249161136, 0.13475998711892623, 0.10342777244595092, 0.1683920056858087, 0.06410267609497311, 0.05981502357599999, 0.10730228945462827, 0.11477265870560882, 0.14354553539714776, 0.10258562571155072, 0.1104666999655537, 0.031133014604566744, 0.015412465083113003, 0.05243389585189584, 0.06339750816717482, 0.034565174337322424, 0.04578492338367757, 0.13563839080801432, 0.4154953417938284, 0.2293921584445383, 0.30092892543702887, 0.25985671811241373, 0.2595459275225527, 0.3038880794807376, 0.3801820916586306, 0.3511036581848753, 0.29853774238468844, 0.06154679111873851, 9.999999999998899e-05, 0.03848600014942438, 0.04082862466862591, 0.0098081961714368, 0.017073885594964477, 0.05231689539950257, 0.010296288473507054, 0.04092477924509508]}, "mutation_prompt": null}
{"id": "092ce71e-2fa5-46c9-a96b-2b37649119c0", "solution": "# Description: Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.\n# Code:\nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.12\n        max_iterations = self.budget * 0.38  # 5% reduced exploration budget\n        shrink_factor = 0.93  # Slightly increased shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 35 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n                    convergence_threshold = np.mean([abs(func(c) - best_value) for c in candidates])  # Refined threshold\n            else:\n                sampling_rate *= (1.07 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Improved exploration-exploitation balance using adaptive perturbation scaling and dynamic candidate selection.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a16b7a3-07ca-48d6-bc24-acd90bbe9c83", "metadata": {"aucs": [0.2085950324724718, 0.09356975624643094, 0.1453041322082116, 0.04855489804754254, 0.04451800293060204, 0.08345852279182564, 0.09659589496906507, 0.11468073068957363, 0.09553693380974404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010888933395639788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032866774837729817, 9.999999999998899e-05, 9.999999999998899e-05, 0.01361605477828709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0309202432361233, 0.020146436045733185, 0.016240006073132474, 0.020230632494293244, 0.03824248849382583, 0.028242677312851128, 0.02035238794148686, 0.0391327138808758, 0.029441246835523294, 0.1046001603280019, 9.999999999998899e-05, 9.999999999998899e-05, 0.022429580335567745, 0.08291743627473791, 0.007692508998903946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05952688186782329, 9.999999999998899e-05, 0.020291274785878888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012251828520711827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018326491295045932, 0.19535170526182277, 9.999999999998899e-05, 0.08934324997297738, 0.18064256695941894, 9.999999999998899e-05, 9.999999999998899e-05, 0.22412837976138067, 9.999999999998899e-05, 0.0003079484088497342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044388812022921886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16878772798766783, 0.07116253542492501, 0.009431917641499199, 0.018101236470473125, 0.13416463693311076, 0.02022886649714528, 9.999999999998899e-05, 9.999999999998899e-05, 0.04228289724286438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014523218397206938, 0.15380990720588028, 0.0521414322463053, 0.18790779453362838, 0.11333068340474273, 0.0948615172489915, 0.04151064136386107, 0.17505813529211722, 0.13836356097578806, 0.1505803764481023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04501801675507444, 0.12307123821447785, 0.1951053351398334, 0.063316152743356, 0.12245337626258301, 0.0823066140665425, 0.0584046785577893, 0.09787877738980988, 0.09732966636308427, 0.11502262748218839, 0.0981920392560891, 0.10613140230344087, 0.14635541913409655, 0.07062540248641891, 0.10932776395579313, 0.15206545437654095, 0.07778538227291687, 0.0932427433109917, 0.05225311770091523, 0.0378807197396962, 0.03262159757842076, 0.07945820687037708, 0.008993836777196007, 0.07564416142457542, 0.07454686401778088, 0.01130056473775698, 0.02665317445214188, 0.20128041368105765, 0.04913511569269491, 0.0934652961355823, 0.19965804912811713, 0.048417645742781845, 0.09159576242311018, 0.189853438602822, 0.06632326175606995, 0.10807308845402008, 0.1634471340732987, 9.999999999998899e-05, 9.999999999998899e-05, 0.15840239832614667, 0.18065832452945974, 0.008044678544945616, 0.16099434221599151, 9.999999999998899e-05, 9.999999999998899e-05, 0.11959228249161136, 0.13475998711892623, 0.10342777244595092, 0.1683920056858087, 0.06410267609497311, 0.05981502357599999, 0.10730228945462827, 0.11477265870560882, 0.14354553539714776, 0.10258562571155072, 0.1104666999655537, 0.031133014604566744, 0.015412465083113003, 0.05243389585189584, 0.06339750816717482, 0.034565174337322424, 0.04578492338367757, 0.13563839080801432, 0.4154953417938284, 0.2293921584445383, 0.30092892543702887, 0.25985671811241373, 0.2595459275225527, 0.3038880794807376, 0.3801820916586306, 0.3511036581848753, 0.29853774238468844, 0.06154679111873851, 9.999999999998899e-05, 0.03848600014942438, 0.04082862466862591, 0.0098081961714368, 0.017073885594964477, 0.05231689539950257, 0.010296288473507054, 0.04092477924509508]}, "mutation_prompt": null}
{"id": "02e77dff-cda3-4da2-bd9b-7988c2d48b51", "solution": "# Description: Enhanced adaptive sampling with stochastic acceptance and fine-tuned exploitation.\n# Code: \nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n\n        exploration_phase = True\n        sampling_rate = 0.12\n        max_iterations = self.budget * 0.36  # Adjusted exploration budget\n        shrink_factor = 0.92  # Slightly altered shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                acceptance_probability = np.exp((best_value - candidate_value) / (abs(best_value) + 1e-9))\n                if candidate_value < best_value or np.random.rand() < acceptance_probability:  # Stochastic acceptance\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Fine-tuned exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced adaptive sampling with stochastic acceptance and fine-tuned exploitation.", "configspace": "", "generation": 27, "fitness": 0.02916436434415277, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "3a16b7a3-07ca-48d6-bc24-acd90bbe9c83", "metadata": {"aucs": [0.08383988974902734, 0.037804489206063385, 0.0667257168913542, 0.016216096606638697, 0.006500216418399929, 0.030166384596108542, 0.038177992342902645, 0.051739305119344325, 0.03400796805810746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005704935183610593, 0.0035689916903264285, 9.999999999998899e-05, 9.999999999998899e-05, 0.01733397932790337, 0.0023838422651107916, 9.999999999998899e-05, 0.01658269594155337, 0.003103958096094761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006169599158866501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07790042308839562, 9.999999999998899e-05, 0.005253114797365566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027557278899341675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07032841990323635, 9.999999999998899e-05, 9.999999999998899e-05, 0.13767315305894312, 0.02162616151633079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04247799127510099, 9.999999999998899e-05, 0.12879275192090645, 0.07759455916594693, 9.999999999998899e-05, 9.999999999998899e-05, 0.11114898921024274, 0.060092150689161294, 0.03833306155219218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0424029065886683, 0.07154736866128242, 0.10312668000689151, 0.02113168363502138, 0.060824547674677376, 0.069775999524323, 0.043031895255577934, 0.061793695887306654, 0.04776753453945859, 0.11420415654317151, 0.09754149762469788, 0.10030123272158231, 0.14859876832997965, 0.06906874637845706, 0.1012083677040384, 0.13638081962624615, 0.07986603557377225, 0.06925817907654197, 0.04303444548497515, 0.0379129750977063, 0.02854446336040417, 0.08799886253893752, 0.004159213054414801, 0.06452184873198474, 0.06453786738447431, 0.015638453692878973, 0.023773295735166955, 0.17744486407517057, 0.03578493921425596, 0.11328064203626542, 0.19181032549568222, 0.03249162890965818, 0.06983006360276689, 0.1869991201746356, 0.05088475717775387, 0.09784201678502524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05209935695882817, 0.015391148348957495, 0.017176700358962793, 0.05433564667814461, 0.016684948983115788, 0.019386859293821557, 0.05141299689406098, 0.07056070123985958, 0.03959538568277754, 0.01793304315047395, 0.06937626128274554, 0.008509425042477092, 0.011858666820905417, 0.011407921907512497, 0.014156199462304953, 0.014450119364641578, 0.012879704467314679, 0.01945333817312056, 0.16888606266889405, 0.17269230572378946, 0.20375595275549918, 0.19110545721252514, 0.21394794341357215, 0.17017247063738594, 0.15222824991645212, 0.17878427107202133, 0.1675320812272264, 0.045814893249717326, 0.0008051424986411648, 0.031567625873029304, 0.028527681344334255, 9.999999999998899e-05, 0.015169158031400731, 0.03966513873103672, 0.004428410199792454, 0.02772896704863781]}, "mutation_prompt": null}
{"id": "67158f00-91cd-445d-9851-5f8db804e1d8", "solution": "# Description: Enhanced exploitation with adaptive candidate size and strategic rate adjustment for improved convergence.\n# Code:\n# ```python\nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.35  # Adjusted exploration budget\n        shrink_factor = 0.92  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n# ```", "name": "EnhancedADSO", "description": "Enhanced exploitation with adaptive candidate size and strategic rate adjustment for improved convergence.", "configspace": "", "generation": 28, "fitness": 0.05897203136817827, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.07.", "error": "", "parent_id": "3a16b7a3-07ca-48d6-bc24-acd90bbe9c83", "metadata": {"aucs": [0.25118276124568506, 0.09711529286700749, 0.1516495474758618, 0.051384259519551834, 0.048111167031574587, 0.0898256058413206, 0.09935485123275067, 0.12044940759121692, 0.10005291781611791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022189706179555513, 9.999999999998899e-05, 9.999999999998899e-05, 0.009235621696420782, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020281490618601072, 9.999999999998899e-05, 9.999999999998899e-05, 0.015654056356338875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034116252720326146, 0.02189133889795014, 0.01732857770490759, 0.022749424031397014, 0.04119884760556447, 0.029680988255930574, 0.022769206366542893, 0.042268985528949976, 0.03127393219608221, 0.08610047017551659, 9.999999999998899e-05, 9.999999999998899e-05, 0.030143486378517492, 0.08667290965762353, 0.01163455417724002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10412608325932782, 0.016892619416416732, 0.02614120494418204, 0.0007387319967711026, 9.999999999998899e-05, 9.999999999998899e-05, 0.03435815670953357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02738980276209546, 0.2019113651877089, 9.999999999998899e-05, 0.1205016601709622, 0.19319936398968096, 9.999999999998899e-05, 9.999999999998899e-05, 0.2447304054051831, 9.999999999998899e-05, 0.006932837877311027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.158177204578013, 0.06553095916695872, 0.010574582423734658, 0.01618739299782246, 0.15173437553994695, 0.021751943926182515, 9.999999999998899e-05, 9.999999999998899e-05, 0.04390049062179546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017688647913954303, 0.16269383093489576, 0.054113887063857, 0.19243089603718821, 0.11402985404802768, 0.1010364087380955, 0.049289479903937394, 0.1818279478886068, 0.14086990482704564, 0.16466252442778573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08066809878675618, 0.1684225232680323, 0.17822777967205783, 0.10715040891902117, 0.11745699225556905, 0.1404719918371602, 0.08161260350929422, 0.24730176913898017, 0.11619614312118576, 0.1150206479985112, 0.09972723990006271, 0.10615838629232044, 0.14629524575131803, 0.0720251868678502, 0.11763831561580407, 0.13439932306947444, 0.0775738005725558, 0.0921779363261428, 0.05225722203149885, 0.04232470643564645, 0.034208451633734316, 0.08041558318200948, 0.008939872947718475, 0.07666254851428655, 0.0716845725453783, 0.015421618469883103, 0.022887097987912552, 0.1804565764433138, 0.07039258640712431, 0.11618625240908098, 0.16058419818083092, 0.05619933413225209, 0.10140245427574268, 0.20251734171305202, 0.07724441027200213, 0.09543645362978881, 0.158070263620964, 9.999999999998899e-05, 9.999999999998899e-05, 0.15338026155469142, 0.19331495050413017, 0.04683370402599707, 0.16164082227277943, 9.999999999998899e-05, 9.999999999998899e-05, 0.12184184812485621, 0.1358884950498368, 0.1044168600499632, 0.17158356317025536, 0.09142708877239913, 0.06063157035928546, 0.10790028410639174, 0.12405653022423924, 0.1442612324349568, 0.10359006154034744, 0.11169749244250993, 0.03386627629362593, 0.01568681349894463, 0.06239633256961408, 0.071200890887817, 0.03469315656418459, 0.05161748450774428, 0.15175624384560216, 0.2597160581982676, 0.2275844606804741, 0.21614352424233596, 0.2957919752648862, 0.190565827810258, 0.2179834481337647, 0.2832269229090375, 0.22721920066505585, 0.33912162958746894, 0.03247810974235965, 0.0023727289609081215, 0.0442353217749476, 0.03681710255334236, 0.008364986258878937, 0.016945140890142096, 0.04257928004471434, 0.012404067362556281, 0.04092620954378967]}, "mutation_prompt": null}
{"id": "174e0932-b890-4d3d-99c3-f135f4d32d87", "solution": "# Description: Enhanced exploitation with adaptive candidate size and strategic rate adjustment for improved convergence.\n# Code:\n# ```python\nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.35  # Adjusted exploration budget\n        shrink_factor = 0.92  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n# ```", "name": "EnhancedADSO", "description": "Enhanced exploitation with adaptive candidate size and strategic rate adjustment for improved convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67158f00-91cd-445d-9851-5f8db804e1d8", "metadata": {"aucs": [0.25118276124568506, 0.09711529286700749, 0.1516495474758618, 0.051384259519551834, 0.048111167031574587, 0.0898256058413206, 0.09935485123275067, 0.12044940759121692, 0.10005291781611791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022189706179555513, 9.999999999998899e-05, 9.999999999998899e-05, 0.009235621696420782, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020281490618601072, 9.999999999998899e-05, 9.999999999998899e-05, 0.015654056356338875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034116252720326146, 0.02189133889795014, 0.01732857770490759, 0.022749424031397014, 0.04119884760556447, 0.029680988255930574, 0.022769206366542893, 0.042268985528949976, 0.03127393219608221, 0.08610047017551659, 9.999999999998899e-05, 9.999999999998899e-05, 0.030143486378517492, 0.08667290965762353, 0.01163455417724002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10412608325932782, 0.016892619416416732, 0.02614120494418204, 0.0007387319967711026, 9.999999999998899e-05, 9.999999999998899e-05, 0.03435815670953357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02738980276209546, 0.2019113651877089, 9.999999999998899e-05, 0.1205016601709622, 0.19319936398968096, 9.999999999998899e-05, 9.999999999998899e-05, 0.2447304054051831, 9.999999999998899e-05, 0.006932837877311027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.158177204578013, 0.06553095916695872, 0.010574582423734658, 0.01618739299782246, 0.15173437553994695, 0.021751943926182515, 9.999999999998899e-05, 9.999999999998899e-05, 0.04390049062179546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017688647913954303, 0.16269383093489576, 0.054113887063857, 0.19243089603718821, 0.11402985404802768, 0.1010364087380955, 0.049289479903937394, 0.1818279478886068, 0.14086990482704564, 0.16466252442778573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08066809878675618, 0.1684225232680323, 0.17822777967205783, 0.10715040891902117, 0.11745699225556905, 0.1404719918371602, 0.08161260350929422, 0.24730176913898017, 0.11619614312118576, 0.1150206479985112, 0.09972723990006271, 0.10615838629232044, 0.14629524575131803, 0.0720251868678502, 0.11763831561580407, 0.13439932306947444, 0.0775738005725558, 0.0921779363261428, 0.05225722203149885, 0.04232470643564645, 0.034208451633734316, 0.08041558318200948, 0.008939872947718475, 0.07666254851428655, 0.0716845725453783, 0.015421618469883103, 0.022887097987912552, 0.1804565764433138, 0.07039258640712431, 0.11618625240908098, 0.16058419818083092, 0.05619933413225209, 0.10140245427574268, 0.20251734171305202, 0.07724441027200213, 0.09543645362978881, 0.158070263620964, 9.999999999998899e-05, 9.999999999998899e-05, 0.15338026155469142, 0.19331495050413017, 0.04683370402599707, 0.16164082227277943, 9.999999999998899e-05, 9.999999999998899e-05, 0.12184184812485621, 0.1358884950498368, 0.1044168600499632, 0.17158356317025536, 0.09142708877239913, 0.06063157035928546, 0.10790028410639174, 0.12405653022423924, 0.1442612324349568, 0.10359006154034744, 0.11169749244250993, 0.03386627629362593, 0.01568681349894463, 0.06239633256961408, 0.071200890887817, 0.03469315656418459, 0.05161748450774428, 0.15175624384560216, 0.2597160581982676, 0.2275844606804741, 0.21614352424233596, 0.2957919752648862, 0.190565827810258, 0.2179834481337647, 0.2832269229090375, 0.22721920066505585, 0.33912162958746894, 0.03247810974235965, 0.0023727289609081215, 0.0442353217749476, 0.03681710255334236, 0.008364986258878937, 0.016945140890142096, 0.04257928004471434, 0.012404067362556281, 0.04092620954378967]}, "mutation_prompt": null}
{"id": "be483ddc-a1da-4463-b92a-e8a673478af1", "solution": "# Description: Adaptive exploitation with optimized perturbation and dynamic exploration-exploitation balance.\n# Code: \nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.14  # Adjusted initial sampling rate slightly\n        max_iterations = self.budget * 0.33  # Adjusted exploration budget slightly\n        shrink_factor = 0.91  # Adjusted shrink factor slightly\n\n        while evals < self.budget:\n            dynamic_candidates = 25 if exploration_phase else 15  # Adjusted candidate numbers slightly\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.06 * shrink_factor)  # Slightly adjusted exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive exploitation with optimized perturbation and dynamic exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": 0.05158088729879452, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "67158f00-91cd-445d-9851-5f8db804e1d8", "metadata": {"aucs": [0.17865187352063172, 0.08044223087071245, 0.12318102544091547, 0.042103999420709304, 0.03837129748663737, 0.07542618083455821, 0.08158654530845055, 0.09906615856659662, 0.08210015909383506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01097410806937893, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016002849131571129, 9.999999999998899e-05, 9.999999999998899e-05, 0.002026256438188434, 9.999999999998899e-05, 9.999999999998899e-05, 0.004824098983117642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027568822954781136, 0.017093393464710616, 0.012241013489839525, 0.017783139049699304, 0.03450587362797619, 0.022427695077907095, 0.017797936763999656, 0.036014804021584856, 0.024385734388105762, 0.08523091037699182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061664322834267704, 0.0011222793154840316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10133691530790889, 9.999999999998899e-05, 0.011975838583742182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022646121390846763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18373593128973753, 9.999999999998899e-05, 9.999999999998899e-05, 0.12709616159471915, 9.999999999998899e-05, 9.999999999998899e-05, 0.21711408646299213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15646189763137153, 0.06233662828881548, 0.010342962748367435, 0.016923454035209895, 0.15493729625712116, 0.01944399448741041, 9.999999999998899e-05, 9.999999999998899e-05, 0.042791342116883624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12695237343157628, 0.03720258305222046, 0.1766737164700165, 0.10445685137361704, 0.0780822308311162, 0.023804878020730613, 0.16313961972918, 0.1352668791688869, 0.13118014889183183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08320470232068966, 0.11297640088852645, 0.1818126112051187, 0.11165758342166032, 0.1232587471644856, 0.06910009554410868, 0.07520841574662573, 0.12773344245005847, 0.11174862143448516, 0.11507078644363578, 0.09824289955476251, 0.10614797978115453, 0.14634345648740432, 0.06445185013474841, 0.12167649727336738, 0.14007386370339914, 0.07801770039626676, 0.092153914386508, 0.05227398499315983, 0.04266859296452674, 0.0318058018537396, 0.08040383574226528, 0.009016931046151644, 0.06741035687139596, 0.0689679266166493, 0.01536479734660734, 0.026705049643622858, 0.2356728032330383, 0.05180620075386322, 0.11082641685699468, 0.2186448083677971, 0.04920369783637801, 0.08454118429969426, 0.2065928213979813, 0.06161688227132023, 0.10298466584298516, 0.1557738614737958, 9.999999999998899e-05, 9.999999999998899e-05, 0.16316800875310689, 9.999999999998899e-05, 9.999999999998899e-05, 0.15649948042384454, 9.999999999998899e-05, 9.999999999998899e-05, 0.1176285278882353, 0.13480714010406258, 0.07305675981763271, 0.16724946810761554, 0.08128742150150414, 0.05723816814410709, 0.10455550402696279, 0.1150035410112683, 0.12070349145180459, 0.1013359190955685, 0.10701249707293814, 0.019980201281409204, 0.01530189745917232, 0.03319188420232255, 0.05612787773448269, 0.030198005927939975, 0.03876053608390062, 0.11890160748982581, 0.20323743750035084, 0.2430330879613577, 0.19325183766015697, 0.24486798915027297, 0.2702917072347981, 0.20747372159213928, 0.2889875459735042, 0.23892409528693637, 0.27032750662406546, 0.03109952864788179, 0.004228978819896256, 0.03477504953942301, 0.038350839083410526, 0.0028799314447667257, 0.020312000391689233, 0.06484847627267032, 0.010500592447310164, 0.03942115010577385]}, "mutation_prompt": null}
{"id": "01f15133-bb26-4970-b02a-30f4d193616a", "solution": "# Description: SwiftADSO: Improved rate of exploration and exploitation with adaptive dynamic candidates for faster convergence.\n# Code:\nimport numpy as np\n\nclass SwiftADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.12  # Slightly reduced initial sampling rate\n        max_iterations = self.budget * 0.30  # Reduced exploration budget\n        shrink_factor = 0.90  # Slightly reduced shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 14  # Adjust candidate numbers for better exploration\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "SwiftADSO", "description": "SwiftADSO: Improved rate of exploration and exploitation with adaptive dynamic candidates for faster convergence.", "configspace": "", "generation": 31, "fitness": 0.05255993804873819, "feedback": "The algorithm SwiftADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.09.", "error": "", "parent_id": "67158f00-91cd-445d-9851-5f8db804e1d8", "metadata": {"aucs": [0.14126512497106158, 0.06652983180194172, 0.10546021632526736, 0.03357507711655494, 0.028999121933419025, 0.06158102178782954, 0.06839760093230562, 0.08536817354314519, 0.06859413115120294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010980906651359645, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016072256873259638, 9.999999999998899e-05, 9.999999999998899e-05, 0.001136824636589484, 9.999999999998899e-05, 9.999999999998899e-05, 0.004796633777145343, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020856665178238698, 0.015816191573864158, 0.007897696596704584, 0.012484764550544591, 0.03283698330342433, 0.017491263693347525, 0.012275913813618367, 0.034027059019620554, 0.018927130755754473, 0.06817636559100682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04380647355066636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 0.018921127442287577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012418790289778214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16621464459945, 9.999999999998899e-05, 9.999999999998899e-05, 0.07269144404994254, 9.999999999998899e-05, 9.999999999998899e-05, 0.21265944979050044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15203501287742804, 0.06911152327990844, 9.999999999998899e-05, 0.016912899780623936, 0.140321769387743, 0.018701413537555167, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09522294099338635, 0.024741002989437932, 0.1626311699284061, 0.09693320879927814, 0.0525432485229852, 0.006272250148657288, 0.15148081042503603, 0.12214552573765247, 0.10201257167203803, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04741739054296701, 0.11299105963879197, 0.17992903161975116, 0.047387932885105344, 0.10823232932769355, 0.09533120225258862, 0.0864460176859122, 0.09911085293957844, 0.1048296079946649, 0.1150247602871679, 0.09819815897334461, 0.10619480826769845, 0.14634816481745205, 0.06386918027651423, 0.107523670275252, 0.1497583669984528, 0.0776275563971005, 0.09328696800117742, 0.05226944567038205, 0.03851241108506942, 0.03263962383490504, 0.08486304404162714, 0.008155690266889226, 0.0658137805580229, 0.07276932247122547, 0.012846935582417451, 0.026728769764203353, 0.19919451893457019, 0.04275496658088307, 0.10300666529784086, 0.18720687475195363, 0.039282391919628346, 0.08377077547477751, 0.20624123378730785, 0.05902237227732965, 0.10875718561771597, 0.15232304814495312, 9.999999999998899e-05, 9.999999999998899e-05, 0.15403785552273586, 9.999999999998899e-05, 9.999999999998899e-05, 0.14641205583157935, 9.999999999998899e-05, 9.999999999998899e-05, 0.10522669180736322, 0.1253225876309163, 0.056998829714164145, 0.15215747860761708, 0.068948573784815, 0.05169433027492765, 0.09985873224348052, 0.1148235219055116, 0.11038441583424208, 0.09607386634295512, 0.10686551031940594, 0.01671599975628557, 0.0150111243948855, 0.02393393861174642, 0.03844123760908491, 0.026898761126155857, 0.02638889421355639, 0.09703024473229649, 0.5742520921645555, 0.3716692173999412, 0.2587531759721253, 0.5860264319755121, 0.41303818685265425, 0.38626279850058365, 0.26690244041667577, 0.24344965802416052, 0.2240356810442944, 0.045466542404305255, 0.007550671590028424, 0.03603618825711341, 0.046042079247807455, 0.0053973465418728495, 0.014328742313210574, 0.052073067078487134, 0.01142295143399985, 0.04042238099542372]}, "mutation_prompt": null}
{"id": "b0374c6c-3ca0-42b3-9cf5-0647d68974b8", "solution": "# Description: Enhanced exploitation with adaptive candidate size and strategic rate adjustment for improved convergence.\n# Code:\n# ```python\nimport numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.35  # Adjusted exploration budget\n        shrink_factor = 0.92  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n# ```", "name": "EnhancedADSO", "description": "Enhanced exploitation with adaptive candidate size and strategic rate adjustment for improved convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67158f00-91cd-445d-9851-5f8db804e1d8", "metadata": {"aucs": [0.25118276124568506, 0.09711529286700749, 0.1516495474758618, 0.051384259519551834, 0.048111167031574587, 0.0898256058413206, 0.09935485123275067, 0.12044940759121692, 0.10005291781611791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022189706179555513, 9.999999999998899e-05, 9.999999999998899e-05, 0.009235621696420782, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020281490618601072, 9.999999999998899e-05, 9.999999999998899e-05, 0.015654056356338875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034116252720326146, 0.02189133889795014, 0.01732857770490759, 0.022749424031397014, 0.04119884760556447, 0.029680988255930574, 0.022769206366542893, 0.042268985528949976, 0.03127393219608221, 0.08610047017551659, 9.999999999998899e-05, 9.999999999998899e-05, 0.030143486378517492, 0.08667290965762353, 0.01163455417724002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10412608325932782, 0.016892619416416732, 0.02614120494418204, 0.0007387319967711026, 9.999999999998899e-05, 9.999999999998899e-05, 0.03435815670953357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02738980276209546, 0.2019113651877089, 9.999999999998899e-05, 0.1205016601709622, 0.19319936398968096, 9.999999999998899e-05, 9.999999999998899e-05, 0.2447304054051831, 9.999999999998899e-05, 0.006932837877311027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.158177204578013, 0.06553095916695872, 0.010574582423734658, 0.01618739299782246, 0.15173437553994695, 0.021751943926182515, 9.999999999998899e-05, 9.999999999998899e-05, 0.04390049062179546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017688647913954303, 0.16269383093489576, 0.054113887063857, 0.19243089603718821, 0.11402985404802768, 0.1010364087380955, 0.049289479903937394, 0.1818279478886068, 0.14086990482704564, 0.16466252442778573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08066809878675618, 0.1684225232680323, 0.17822777967205783, 0.10715040891902117, 0.11745699225556905, 0.1404719918371602, 0.08161260350929422, 0.24730176913898017, 0.11619614312118576, 0.1150206479985112, 0.09972723990006271, 0.10615838629232044, 0.14629524575131803, 0.0720251868678502, 0.11763831561580407, 0.13439932306947444, 0.0775738005725558, 0.0921779363261428, 0.05225722203149885, 0.04232470643564645, 0.034208451633734316, 0.08041558318200948, 0.008939872947718475, 0.07666254851428655, 0.0716845725453783, 0.015421618469883103, 0.022887097987912552, 0.1804565764433138, 0.07039258640712431, 0.11618625240908098, 0.16058419818083092, 0.05619933413225209, 0.10140245427574268, 0.20251734171305202, 0.07724441027200213, 0.09543645362978881, 0.158070263620964, 9.999999999998899e-05, 9.999999999998899e-05, 0.15338026155469142, 0.19331495050413017, 0.04683370402599707, 0.16164082227277943, 9.999999999998899e-05, 9.999999999998899e-05, 0.12184184812485621, 0.1358884950498368, 0.1044168600499632, 0.17158356317025536, 0.09142708877239913, 0.06063157035928546, 0.10790028410639174, 0.12405653022423924, 0.1442612324349568, 0.10359006154034744, 0.11169749244250993, 0.03386627629362593, 0.01568681349894463, 0.06239633256961408, 0.071200890887817, 0.03469315656418459, 0.05161748450774428, 0.15175624384560216, 0.2597160581982676, 0.2275844606804741, 0.21614352424233596, 0.2957919752648862, 0.190565827810258, 0.2179834481337647, 0.2832269229090375, 0.22721920066505585, 0.33912162958746894, 0.03247810974235965, 0.0023727289609081215, 0.0442353217749476, 0.03681710255334236, 0.008364986258878937, 0.016945140890142096, 0.04257928004471434, 0.012404067362556281, 0.04092620954378967]}, "mutation_prompt": null}
{"id": "2672050a-0117-440e-98d4-a7b1332b2846", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.32  # Slightly reduced exploration budget\n        shrink_factor = 0.93  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced candidate diversity through dynamic sampling and improved scaling for faster convergence.", "configspace": "", "generation": 33, "fitness": 0.11677795532403537, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.12.", "error": "", "parent_id": "67158f00-91cd-445d-9851-5f8db804e1d8", "metadata": {"aucs": [0.8826514460737, 0.2682799954638806, 0.36203899380782645, 0.19869435451844142, 0.20686013183597252, 0.24893435422478716, 0.2868210321067126, 0.30153379484974563, 0.26886233177626295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03692835856706811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034715676314905575, 0.01098554707625421, 0.014331216452937556, 0.022538939707648753, 0.014650490598650867, 0.016445888925054497, 0.026651981831400717, 0.013916964761849338, 0.018751205093788692, 0.0419424294980808, 0.011468243243208942, 0.009486109045419466, 0.017246010506164366, 0.01588153251109381, 0.017125537641303312, 0.013970036340715142, 0.014453214712793705, 0.014350175942865251, 0.3312564231303612, 0.2938512443960384, 0.2982939206813804, 0.31014664006798975, 0.32204664069806854, 0.3084973560740053, 0.3072106739074614, 0.330164418466277, 0.3288807387433933, 0.25264675921194935, 0.08141512889261726, 0.07596756106118407, 0.14462080853052306, 0.23212255228746004, 0.09397119587512914, 0.12046655905793346, 0.08639372705457937, 0.13103016009627555, 0.13271590457868532, 0.06419628116697662, 0.08070466674883414, 0.06551902646236507, 0.05042298233035636, 0.05632432923086217, 0.10271589180042062, 0.04775920465166872, 0.05161882053110001, 0.07013757486656236, 0.0610706808952044, 0.062191948803023145, 0.19716436225003975, 0.0620024641544209, 0.05389088715188062, 0.0813634823598739, 0.0578673970889515, 0.1624853960336885, 0.22691679498099904, 0.05624279910424501, 0.12617972624224127, 0.19756512456537334, 0.1299748396197643, 0.0713272870065601, 0.259888520545035, 0.09706281444911669, 0.09602722125223973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004798070145498046, 9.999999999998899e-05, 9.999999999998899e-05, 0.00053404622943376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05707635058705651, 0.030755288096945832, 0.15510809713310825, 0.06726956831908193, 0.012504489009335318, 0.026187383270600884, 0.18724708740168283, 0.024887396949691554, 0.021175919537074872, 0.06981742603986663, 0.04480380435541209, 9.999999999998899e-05, 0.12850164327055458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052200469744424494, 0.03958519976100816, 0.020826415484708205, 0.0305472033042965, 0.03449484103658307, 0.031894427747860554, 0.05249065976347389, 0.030026034781544864, 0.040844007971916674, 0.023714842773828626, 0.0804490854726706, 0.3299097525353136, 0.185386672726215, 0.3539977941866673, 0.24417660362176752, 0.20976103308028593, 0.1782493957429575, 0.3304662489808027, 0.25152063780684764, 0.28602758510028603, 0.01818819690799378, 0.020040250128411374, 0.021510539403776785, 0.021093159197013822, 0.017363944783070462, 0.022924785522358104, 0.01333311022871253, 0.019804750421369643, 0.01159100788202172, 0.09962541932187452, 0.17162833117606002, 0.208328831755349, 0.1061981044442295, 0.11470487688496922, 0.22468944107950584, 0.10026605948284228, 0.2287998556955676, 0.12957340959810681, 0.13597518819092858, 0.10861892384987981, 0.11459643279202414, 0.1669343650648929, 0.1192093961910683, 0.1251049939556318, 0.14500772782526605, 0.10469087597409221, 0.10063713615027303, 0.07059632548664563, 0.05688037781511579, 0.051407579228596845, 0.0991884610835283, 0.05163766277220694, 0.07455081295714228, 0.1012256227657854, 0.048436460935633696, 0.0469843453215113, 0.21575319405962734, 0.08379592840888639, 0.13068681092304468, 0.2001186958206832, 0.09616160990164646, 0.12214716469017894, 0.19313348336335556, 0.09429943986915845, 0.13786695325367782, 0.15221663110851458, 0.07402944890846286, 0.1496615948656932, 0.15838152566292685, 0.19645366719081858, 0.1590893691783435, 0.1565535453930128, 0.06117883640894761, 0.07644418775347983, 0.124734359799618, 0.13633190955419905, 0.37446194955327916, 0.17211834936686277, 0.09988882065939375, 0.07945125466847713, 0.10807816355122446, 0.12508520363603437, 0.16468221635323765, 0.45604296144282297, 0.11286362566000752, 0.06838977812351021, 0.036812115119650324, 0.14091768609569877, 0.14317327695347526, 0.057100798263590824, 0.08329166308431013, 0.21778050193872445, 0.25809498776567785, 0.38833351993938736, 0.17692524618823846, 0.38912753785941046, 0.36364708025035974, 0.2613347709837156, 0.2818233065496697, 0.32270718487215067, 0.2527588418009681, 0.031565180375741186, 0.03836731620915412, 0.04092949295509685, 0.03824997719968792, 0.01986479020896914, 0.027338305331376822, 0.04051104955457374, 0.022565643622585396, 0.03940022296639878]}, "mutation_prompt": null}
{"id": "eb4b8650-e783-4383-8d68-3dcfc0bb42dd", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.30  # Adjusted exploration budget\n        shrink_factor = 0.925  # Adjusted shrink factor\n        adapt_factor = 0.5  # New adaptive factor for better transition\n\n        while evals < self.budget:\n            if exploration_phase:\n                dynamic_candidates = int(30 - 20 * (evals / max_iterations))  # Adaptive candidates\n            else:\n                dynamic_candidates = int(8 + adapt_factor * (self.budget - evals) / self.budget * 12)  # Adaptive candidates\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Adjusted exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "EnhancedADSO with adaptive dynamic sampling and optimized exploration-exploitation transition for improved convergence speed.", "configspace": "", "generation": 34, "fitness": 0.062242659131937134, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.08.", "error": "", "parent_id": "2672050a-0117-440e-98d4-a7b1332b2846", "metadata": {"aucs": [0.2687508739045731, 0.09914337238530146, 0.159707158295196, 0.05562194274433063, 0.050552459861232246, 0.09729611219163203, 0.10403380234677528, 0.12897939795081037, 0.10543119939260992, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02222980796576035, 9.999999999998899e-05, 9.999999999998899e-05, 0.009300047525978128, 9.999999999998899e-05, 9.999999999998899e-05, 0.002016934009693938, 9.999999999998899e-05, 9.999999999998899e-05, 0.01564866449338842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035770252549560566, 0.0226841691746007, 0.01835471748468831, 0.024970760361600508, 0.04180575989825375, 0.03207290275544328, 0.025303700325233103, 0.04265586160519674, 0.034143335589684076, 0.08797115077081474, 9.999999999998899e-05, 9.999999999998899e-05, 0.031843734445770266, 0.09285253480030065, 0.01286428235750825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10412662891951663, 0.01689905793261004, 0.0261483143218445, 0.0007387319967711026, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440533407786128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01843007523189011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05769844320799933, 0.20326408372658344, 9.999999999998899e-05, 0.12291265149215047, 0.1868114061248286, 9.999999999998899e-05, 9.999999999998899e-05, 0.24034740218570216, 9.999999999998899e-05, 0.020152516246949248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005388455061842601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05176025910584103, 9.999999999998899e-05, 0.15467273821267424, 0.06584028728885205, 0.012765119321468066, 0.01638507857766558, 0.14529547541564147, 0.021535898202695303, 9.999999999998899e-05, 9.999999999998899e-05, 0.04004527253934087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031205308792520703, 0.16585252345571588, 0.059169707428230134, 0.20145513745858856, 0.11963343801562965, 0.10341463865682676, 0.05702175388706532, 0.1848074275712328, 0.14581959717292758, 0.16298496176034238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09578022984722301, 0.1746692217215997, 0.182752334968869, 0.08620357653547905, 0.12027447032452454, 0.1398150232245442, 0.10858163870663962, 0.24340318092506263, 0.12525773961480624, 0.11502316332046447, 0.09972455279375358, 0.10614841832980582, 0.14630905164579855, 0.07078548716760213, 0.1190635005674543, 0.1343939022755305, 0.07763562154369086, 0.09217960501038747, 0.05225518436600307, 0.040485193283272936, 0.034189766912767316, 0.08041610329806204, 0.008935227498912846, 0.077806124956736, 0.07715660204185026, 0.016537875299635352, 0.0228924861626163, 0.19006883501481953, 0.05478794244299612, 0.10728278644778688, 0.1688319500506672, 0.05588202802232589, 0.10165200123126394, 0.1938276878507631, 0.07400902706515644, 0.11192945089007023, 0.15947818704742878, 9.999999999998899e-05, 9.999999999998899e-05, 0.15866799679914, 0.19509128563677602, 0.12693359953830063, 0.15158076587016767, 9.999999999998899e-05, 9.999999999998899e-05, 0.12204759699051504, 0.13611664208768925, 0.10863683424776027, 0.1717356037599882, 0.08943351927968213, 0.0609397365856823, 0.10788112782283765, 0.1241898881542649, 0.1485104294879528, 0.10376748735020969, 0.11193340206844038, 0.04043339370485932, 0.01570875480341527, 0.0694326307873927, 0.07920435424202499, 0.03426307551393237, 0.0537793884714014, 0.14747495864676896, 0.22814797271044607, 0.22116377080988758, 0.27204804832083707, 0.25877917146710516, 0.48369358190003, 0.31484126008076796, 0.2863527874219238, 0.25724238460938975, 0.2677657998489389, 0.03248982598331873, 0.0025508027421845547, 0.03480800577471599, 0.032061526475846036, 0.0076137220064566025, 0.018271996256561063, 0.04161030720107606, 0.011135754200638948, 0.04245734585698213]}, "mutation_prompt": null}
{"id": "23284d02-579c-428d-9117-34ab0b410ad4", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.32  # Slightly reduced exploration budget\n        shrink_factor = 0.93  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced candidate diversity through dynamic sampling and improved scaling for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2672050a-0117-440e-98d4-a7b1332b2846", "metadata": {"aucs": [0.8826514460737, 0.2682799954638806, 0.36203899380782645, 0.19869435451844142, 0.20686013183597252, 0.24893435422478716, 0.2868210321067126, 0.30153379484974563, 0.26886233177626295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03692835856706811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034715676314905575, 0.01098554707625421, 0.014331216452937556, 0.022538939707648753, 0.014650490598650867, 0.016445888925054497, 0.026651981831400717, 0.013916964761849338, 0.018751205093788692, 0.0419424294980808, 0.011468243243208942, 0.009486109045419466, 0.017246010506164366, 0.01588153251109381, 0.017125537641303312, 0.013970036340715142, 0.014453214712793705, 0.014350175942865251, 0.3312564231303612, 0.2938512443960384, 0.2982939206813804, 0.31014664006798975, 0.32204664069806854, 0.3084973560740053, 0.3072106739074614, 0.330164418466277, 0.3288807387433933, 0.25264675921194935, 0.08141512889261726, 0.07596756106118407, 0.14462080853052306, 0.23212255228746004, 0.09397119587512914, 0.12046655905793346, 0.08639372705457937, 0.13103016009627555, 0.13271590457868532, 0.06419628116697662, 0.08070466674883414, 0.06551902646236507, 0.05042298233035636, 0.05632432923086217, 0.10271589180042062, 0.04775920465166872, 0.05161882053110001, 0.07013757486656236, 0.0610706808952044, 0.062191948803023145, 0.19716436225003975, 0.0620024641544209, 0.05389088715188062, 0.0813634823598739, 0.0578673970889515, 0.1624853960336885, 0.22691679498099904, 0.05624279910424501, 0.12617972624224127, 0.19756512456537334, 0.1299748396197643, 0.0713272870065601, 0.259888520545035, 0.09706281444911669, 0.09602722125223973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004798070145498046, 9.999999999998899e-05, 9.999999999998899e-05, 0.00053404622943376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05707635058705651, 0.030755288096945832, 0.15510809713310825, 0.06726956831908193, 0.012504489009335318, 0.026187383270600884, 0.18724708740168283, 0.024887396949691554, 0.021175919537074872, 0.06981742603986663, 0.04480380435541209, 9.999999999998899e-05, 0.12850164327055458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052200469744424494, 0.03958519976100816, 0.020826415484708205, 0.0305472033042965, 0.03449484103658307, 0.031894427747860554, 0.05249065976347389, 0.030026034781544864, 0.040844007971916674, 0.023714842773828626, 0.0804490854726706, 0.3299097525353136, 0.185386672726215, 0.3539977941866673, 0.24417660362176752, 0.20976103308028593, 0.1782493957429575, 0.3304662489808027, 0.25152063780684764, 0.28602758510028603, 0.01818819690799378, 0.020040250128411374, 0.021510539403776785, 0.021093159197013822, 0.017363944783070462, 0.022924785522358104, 0.01333311022871253, 0.019804750421369643, 0.01159100788202172, 0.09962541932187452, 0.17162833117606002, 0.208328831755349, 0.1061981044442295, 0.11470487688496922, 0.22468944107950584, 0.10026605948284228, 0.2287998556955676, 0.12957340959810681, 0.13597518819092858, 0.10861892384987981, 0.11459643279202414, 0.1669343650648929, 0.1192093961910683, 0.1251049939556318, 0.14500772782526605, 0.10469087597409221, 0.10063713615027303, 0.07059632548664563, 0.05688037781511579, 0.051407579228596845, 0.0991884610835283, 0.05163766277220694, 0.07455081295714228, 0.1012256227657854, 0.048436460935633696, 0.0469843453215113, 0.21575319405962734, 0.08379592840888639, 0.13068681092304468, 0.2001186958206832, 0.09616160990164646, 0.12214716469017894, 0.19313348336335556, 0.09429943986915845, 0.13786695325367782, 0.15221663110851458, 0.07402944890846286, 0.1496615948656932, 0.15838152566292685, 0.19645366719081858, 0.1590893691783435, 0.1565535453930128, 0.06117883640894761, 0.07644418775347983, 0.124734359799618, 0.13633190955419905, 0.37446194955327916, 0.17211834936686277, 0.09988882065939375, 0.07945125466847713, 0.10807816355122446, 0.12508520363603437, 0.16468221635323765, 0.45604296144282297, 0.11286362566000752, 0.06838977812351021, 0.036812115119650324, 0.14091768609569877, 0.14317327695347526, 0.057100798263590824, 0.08329166308431013, 0.21778050193872445, 0.25809498776567785, 0.38833351993938736, 0.17692524618823846, 0.38912753785941046, 0.36364708025035974, 0.2613347709837156, 0.2818233065496697, 0.32270718487215067, 0.2527588418009681, 0.031565180375741186, 0.03836731620915412, 0.04092949295509685, 0.03824997719968792, 0.01986479020896914, 0.027338305331376822, 0.04051104955457374, 0.022565643622585396, 0.03940022296639878]}, "mutation_prompt": null}
{"id": "c659e79d-e7c7-4d7e-977a-a075cecc7625", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.32  # Slightly reduced exploration budget\n        shrink_factor = 0.93  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced candidate diversity through dynamic sampling and improved scaling for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2672050a-0117-440e-98d4-a7b1332b2846", "metadata": {"aucs": [0.8826514460737, 0.2682799954638806, 0.36203899380782645, 0.19869435451844142, 0.20686013183597252, 0.24893435422478716, 0.2868210321067126, 0.30153379484974563, 0.26886233177626295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03692835856706811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034715676314905575, 0.01098554707625421, 0.014331216452937556, 0.022538939707648753, 0.014650490598650867, 0.016445888925054497, 0.026651981831400717, 0.013916964761849338, 0.018751205093788692, 0.0419424294980808, 0.011468243243208942, 0.009486109045419466, 0.017246010506164366, 0.01588153251109381, 0.017125537641303312, 0.013970036340715142, 0.014453214712793705, 0.014350175942865251, 0.3312564231303612, 0.2938512443960384, 0.2982939206813804, 0.31014664006798975, 0.32204664069806854, 0.3084973560740053, 0.3072106739074614, 0.330164418466277, 0.3288807387433933, 0.25264675921194935, 0.08141512889261726, 0.07596756106118407, 0.14462080853052306, 0.23212255228746004, 0.09397119587512914, 0.12046655905793346, 0.08639372705457937, 0.13103016009627555, 0.13271590457868532, 0.06419628116697662, 0.08070466674883414, 0.06551902646236507, 0.05042298233035636, 0.05632432923086217, 0.10271589180042062, 0.04775920465166872, 0.05161882053110001, 0.07013757486656236, 0.0610706808952044, 0.062191948803023145, 0.19716436225003975, 0.0620024641544209, 0.05389088715188062, 0.0813634823598739, 0.0578673970889515, 0.1624853960336885, 0.22691679498099904, 0.05624279910424501, 0.12617972624224127, 0.19756512456537334, 0.1299748396197643, 0.0713272870065601, 0.259888520545035, 0.09706281444911669, 0.09602722125223973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004798070145498046, 9.999999999998899e-05, 9.999999999998899e-05, 0.00053404622943376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05707635058705651, 0.030755288096945832, 0.15510809713310825, 0.06726956831908193, 0.012504489009335318, 0.026187383270600884, 0.18724708740168283, 0.024887396949691554, 0.021175919537074872, 0.06981742603986663, 0.04480380435541209, 9.999999999998899e-05, 0.12850164327055458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052200469744424494, 0.03958519976100816, 0.020826415484708205, 0.0305472033042965, 0.03449484103658307, 0.031894427747860554, 0.05249065976347389, 0.030026034781544864, 0.040844007971916674, 0.023714842773828626, 0.0804490854726706, 0.3299097525353136, 0.185386672726215, 0.3539977941866673, 0.24417660362176752, 0.20976103308028593, 0.1782493957429575, 0.3304662489808027, 0.25152063780684764, 0.28602758510028603, 0.01818819690799378, 0.020040250128411374, 0.021510539403776785, 0.021093159197013822, 0.017363944783070462, 0.022924785522358104, 0.01333311022871253, 0.019804750421369643, 0.01159100788202172, 0.09962541932187452, 0.17162833117606002, 0.208328831755349, 0.1061981044442295, 0.11470487688496922, 0.22468944107950584, 0.10026605948284228, 0.2287998556955676, 0.12957340959810681, 0.13597518819092858, 0.10861892384987981, 0.11459643279202414, 0.1669343650648929, 0.1192093961910683, 0.1251049939556318, 0.14500772782526605, 0.10469087597409221, 0.10063713615027303, 0.07059632548664563, 0.05688037781511579, 0.051407579228596845, 0.0991884610835283, 0.05163766277220694, 0.07455081295714228, 0.1012256227657854, 0.048436460935633696, 0.0469843453215113, 0.21575319405962734, 0.08379592840888639, 0.13068681092304468, 0.2001186958206832, 0.09616160990164646, 0.12214716469017894, 0.19313348336335556, 0.09429943986915845, 0.13786695325367782, 0.15221663110851458, 0.07402944890846286, 0.1496615948656932, 0.15838152566292685, 0.19645366719081858, 0.1590893691783435, 0.1565535453930128, 0.06117883640894761, 0.07644418775347983, 0.124734359799618, 0.13633190955419905, 0.37446194955327916, 0.17211834936686277, 0.09988882065939375, 0.07945125466847713, 0.10807816355122446, 0.12508520363603437, 0.16468221635323765, 0.45604296144282297, 0.11286362566000752, 0.06838977812351021, 0.036812115119650324, 0.14091768609569877, 0.14317327695347526, 0.057100798263590824, 0.08329166308431013, 0.21778050193872445, 0.25809498776567785, 0.38833351993938736, 0.17692524618823846, 0.38912753785941046, 0.36364708025035974, 0.2613347709837156, 0.2818233065496697, 0.32270718487215067, 0.2527588418009681, 0.031565180375741186, 0.03836731620915412, 0.04092949295509685, 0.03824997719968792, 0.01986479020896914, 0.027338305331376822, 0.04051104955457374, 0.022565643622585396, 0.03940022296639878]}, "mutation_prompt": null}
{"id": "4bc40e95-4328-48c0-988e-6cd8112cc2a2", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.32  # Slightly reduced exploration budget\n        shrink_factor = 0.93  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced candidate diversity through dynamic sampling and improved scaling for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2672050a-0117-440e-98d4-a7b1332b2846", "metadata": {"aucs": [0.8826514460737, 0.2682799954638806, 0.36203899380782645, 0.19869435451844142, 0.20686013183597252, 0.24893435422478716, 0.2868210321067126, 0.30153379484974563, 0.26886233177626295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03692835856706811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034715676314905575, 0.01098554707625421, 0.014331216452937556, 0.022538939707648753, 0.014650490598650867, 0.016445888925054497, 0.026651981831400717, 0.013916964761849338, 0.018751205093788692, 0.0419424294980808, 0.011468243243208942, 0.009486109045419466, 0.017246010506164366, 0.01588153251109381, 0.017125537641303312, 0.013970036340715142, 0.014453214712793705, 0.014350175942865251, 0.3312564231303612, 0.2938512443960384, 0.2982939206813804, 0.31014664006798975, 0.32204664069806854, 0.3084973560740053, 0.3072106739074614, 0.330164418466277, 0.3288807387433933, 0.25264675921194935, 0.08141512889261726, 0.07596756106118407, 0.14462080853052306, 0.23212255228746004, 0.09397119587512914, 0.12046655905793346, 0.08639372705457937, 0.13103016009627555, 0.13271590457868532, 0.06419628116697662, 0.08070466674883414, 0.06551902646236507, 0.05042298233035636, 0.05632432923086217, 0.10271589180042062, 0.04775920465166872, 0.05161882053110001, 0.07013757486656236, 0.0610706808952044, 0.062191948803023145, 0.19716436225003975, 0.0620024641544209, 0.05389088715188062, 0.0813634823598739, 0.0578673970889515, 0.1624853960336885, 0.22691679498099904, 0.05624279910424501, 0.12617972624224127, 0.19756512456537334, 0.1299748396197643, 0.0713272870065601, 0.259888520545035, 0.09706281444911669, 0.09602722125223973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004798070145498046, 9.999999999998899e-05, 9.999999999998899e-05, 0.00053404622943376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05707635058705651, 0.030755288096945832, 0.15510809713310825, 0.06726956831908193, 0.012504489009335318, 0.026187383270600884, 0.18724708740168283, 0.024887396949691554, 0.021175919537074872, 0.06981742603986663, 0.04480380435541209, 9.999999999998899e-05, 0.12850164327055458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052200469744424494, 0.03958519976100816, 0.020826415484708205, 0.0305472033042965, 0.03449484103658307, 0.031894427747860554, 0.05249065976347389, 0.030026034781544864, 0.040844007971916674, 0.023714842773828626, 0.0804490854726706, 0.3299097525353136, 0.185386672726215, 0.3539977941866673, 0.24417660362176752, 0.20976103308028593, 0.1782493957429575, 0.3304662489808027, 0.25152063780684764, 0.28602758510028603, 0.01818819690799378, 0.020040250128411374, 0.021510539403776785, 0.021093159197013822, 0.017363944783070462, 0.022924785522358104, 0.01333311022871253, 0.019804750421369643, 0.01159100788202172, 0.09962541932187452, 0.17162833117606002, 0.208328831755349, 0.1061981044442295, 0.11470487688496922, 0.22468944107950584, 0.10026605948284228, 0.2287998556955676, 0.12957340959810681, 0.13597518819092858, 0.10861892384987981, 0.11459643279202414, 0.1669343650648929, 0.1192093961910683, 0.1251049939556318, 0.14500772782526605, 0.10469087597409221, 0.10063713615027303, 0.07059632548664563, 0.05688037781511579, 0.051407579228596845, 0.0991884610835283, 0.05163766277220694, 0.07455081295714228, 0.1012256227657854, 0.048436460935633696, 0.0469843453215113, 0.21575319405962734, 0.08379592840888639, 0.13068681092304468, 0.2001186958206832, 0.09616160990164646, 0.12214716469017894, 0.19313348336335556, 0.09429943986915845, 0.13786695325367782, 0.15221663110851458, 0.07402944890846286, 0.1496615948656932, 0.15838152566292685, 0.19645366719081858, 0.1590893691783435, 0.1565535453930128, 0.06117883640894761, 0.07644418775347983, 0.124734359799618, 0.13633190955419905, 0.37446194955327916, 0.17211834936686277, 0.09988882065939375, 0.07945125466847713, 0.10807816355122446, 0.12508520363603437, 0.16468221635323765, 0.45604296144282297, 0.11286362566000752, 0.06838977812351021, 0.036812115119650324, 0.14091768609569877, 0.14317327695347526, 0.057100798263590824, 0.08329166308431013, 0.21778050193872445, 0.25809498776567785, 0.38833351993938736, 0.17692524618823846, 0.38912753785941046, 0.36364708025035974, 0.2613347709837156, 0.2818233065496697, 0.32270718487215067, 0.2527588418009681, 0.031565180375741186, 0.03836731620915412, 0.04092949295509685, 0.03824997719968792, 0.01986479020896914, 0.027338305331376822, 0.04051104955457374, 0.022565643622585396, 0.03940022296639878]}, "mutation_prompt": null}
{"id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Slightly adjusted initial sampling rate\n        max_iterations = self.budget * 0.30  # More aggressive exploration budget\n        shrink_factor = 0.92  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.15 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive perturbation scaling enhances exploration-exploitation balance for improved convergence speed.", "configspace": "", "generation": 38, "fitness": 0.11693185548898023, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.12.", "error": "", "parent_id": "2672050a-0117-440e-98d4-a7b1332b2846", "metadata": {"aucs": [0.410396601202877, 0.26414089324885304, 0.32598807679262987, 0.19977847600960463, 0.20388328807121892, 0.2727560397172232, 0.2576970306641513, 0.26882537659432726, 0.24184426618259314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05656851674173358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043020445206916724, 0.029518454665432015, 0.028079974481793446, 0.03928931349737452, 0.040083309572142234, 0.017079989088610414, 0.0232869268790431, 0.028822222324799585, 0.031193716174070296, 0.041946353352705024, 0.02409658548256144, 0.018743153853287176, 0.027176602271696382, 0.039403882841159255, 0.004860613514355627, 0.034419749257879495, 0.01647384866124124, 0.02075896919150777, 0.49366919474318094, 0.472544713240324, 0.47709731581535875, 0.48567570027203577, 0.4947895123463045, 0.47938040287899897, 0.4913735498299334, 0.5029423200668965, 0.4986499837078062, 0.19243560328037423, 0.049320531418940994, 0.06836346128982351, 0.1439085438360722, 0.18830918905931027, 0.14307612163291672, 0.11459942787624955, 0.0797382112547288, 0.11210104424568867, 0.12091099037158859, 0.0710958587409477, 0.08263220994579001, 0.10305011712823997, 0.09956005215761599, 0.08520936522752276, 0.08603864300221431, 0.061904580499030804, 0.08657560493686456, 0.08476080727133106, 0.08060414359987589, 0.06859881899113429, 0.12276341368910926, 0.07789893145686388, 0.054951212625522605, 0.07631848309742106, 0.06807600475992204, 0.09570476700165342, 0.20733540522586003, 0.07210880125115093, 0.11492093119151614, 0.19007409844970424, 0.08987982896491464, 0.07137814236257778, 0.2452358906948331, 0.040780112275424885, 0.07965998807284191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022088179431348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342258904078477, 0.02800769276829762, 0.15464125264825324, 0.06662658604531713, 0.010527287202402702, 0.018477275095613033, 0.1423878834104304, 0.022001871550260343, 0.025700903101653405, 9.999999999998899e-05, 0.042999971180979646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012909422970224349, 0.022068262276008, 0.04198299249968007, 0.034231696128286804, 0.03469647531319864, 0.022136882358368748, 0.019014971509500045, 0.017790665960751517, 0.05069713817525112, 0.2722807251884467, 0.19279225191172578, 0.3102106743425511, 0.23616170471827613, 0.20820596598252206, 0.1821486328799805, 0.2914774859006163, 0.2528759618026276, 0.2603794863300599, 0.032464611971875446, 0.023298749453823264, 0.029317269513996824, 0.023384580123026577, 0.0292207658120216, 0.029721088772678428, 0.02056833258478108, 0.025062101695377037, 0.03191379357577939, 0.0978393627408024, 0.17062000725535276, 0.18649699054684898, 0.08176462799087258, 0.11809130256057032, 0.13207437176450965, 0.10943020925165203, 0.19955051941103497, 0.11896985740004007, 0.16419829212852033, 0.11639568124754118, 0.11697451963167116, 0.16743253658337875, 0.1333843946945883, 0.12116830758895636, 0.14538700283213024, 0.11189175343122137, 0.12209534484228857, 0.08479375598827688, 0.05251288635199469, 0.07293447302790534, 0.10202733483402315, 0.06665751434177658, 0.0859959044809957, 0.09997263779902166, 0.048617490289765586, 0.05413953309681141, 0.1813034726021172, 0.11403927676666026, 0.13904450714241523, 0.1642577237113032, 0.10566153849875703, 0.10749894261198112, 0.20109112919946714, 0.10618942668342912, 0.13469619237633745, 0.1569938722808416, 0.09583093051256197, 0.09010558611927877, 0.15601174528860462, 0.1928980338866162, 0.111085902525627, 0.1575189491985911, 0.09624611134189931, 0.08309701879065157, 0.12196678669670913, 0.13609990293993068, 0.3388482708138081, 0.17142422382199018, 0.09920093754225667, 0.07810489522110997, 0.12136020382676072, 0.1398015080774505, 0.1576902437494364, 0.2870889919172892, 0.11220764151540474, 0.06161657322788838, 0.04719775423526784, 0.1396268306999362, 0.14095378031595118, 0.09627134160869977, 0.10072391750415555, 0.19106287986227433, 0.2830609262917806, 0.42110213002872177, 0.22112514859941046, 0.41047895750299745, 0.19129367072292502, 0.217822333659083, 0.29496374264970193, 0.17887295602918307, 0.2823328451593501, 0.03565427982434066, 0.03669755271787323, 0.03817362938308322, 0.034003155151254405, 0.033132582877100525, 0.03217778956416062, 0.04346373232436285, 0.03155819916073599, 0.04270461219267474]}, "mutation_prompt": null}
{"id": "03b82cdb-9e56-4af0-9035-016214728651", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Slightly adjusted initial sampling rate\n        max_iterations = self.budget * 0.30  # More aggressive exploration budget\n        shrink_factor = 0.92  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.15 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive perturbation scaling enhances exploration-exploitation balance for improved convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "metadata": {"aucs": [0.410396601202877, 0.26414089324885304, 0.32598807679262987, 0.19977847600960463, 0.20388328807121892, 0.2727560397172232, 0.2576970306641513, 0.26882537659432726, 0.24184426618259314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05656851674173358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043020445206916724, 0.029518454665432015, 0.028079974481793446, 0.03928931349737452, 0.040083309572142234, 0.017079989088610414, 0.0232869268790431, 0.028822222324799585, 0.031193716174070296, 0.041946353352705024, 0.02409658548256144, 0.018743153853287176, 0.027176602271696382, 0.039403882841159255, 0.004860613514355627, 0.034419749257879495, 0.01647384866124124, 0.02075896919150777, 0.49366919474318094, 0.472544713240324, 0.47709731581535875, 0.48567570027203577, 0.4947895123463045, 0.47938040287899897, 0.4913735498299334, 0.5029423200668965, 0.4986499837078062, 0.19243560328037423, 0.049320531418940994, 0.06836346128982351, 0.1439085438360722, 0.18830918905931027, 0.14307612163291672, 0.11459942787624955, 0.0797382112547288, 0.11210104424568867, 0.12091099037158859, 0.0710958587409477, 0.08263220994579001, 0.10305011712823997, 0.09956005215761599, 0.08520936522752276, 0.08603864300221431, 0.061904580499030804, 0.08657560493686456, 0.08476080727133106, 0.08060414359987589, 0.06859881899113429, 0.12276341368910926, 0.07789893145686388, 0.054951212625522605, 0.07631848309742106, 0.06807600475992204, 0.09570476700165342, 0.20733540522586003, 0.07210880125115093, 0.11492093119151614, 0.19007409844970424, 0.08987982896491464, 0.07137814236257778, 0.2452358906948331, 0.040780112275424885, 0.07965998807284191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022088179431348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342258904078477, 0.02800769276829762, 0.15464125264825324, 0.06662658604531713, 0.010527287202402702, 0.018477275095613033, 0.1423878834104304, 0.022001871550260343, 0.025700903101653405, 9.999999999998899e-05, 0.042999971180979646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012909422970224349, 0.022068262276008, 0.04198299249968007, 0.034231696128286804, 0.03469647531319864, 0.022136882358368748, 0.019014971509500045, 0.017790665960751517, 0.05069713817525112, 0.2722807251884467, 0.19279225191172578, 0.3102106743425511, 0.23616170471827613, 0.20820596598252206, 0.1821486328799805, 0.2914774859006163, 0.2528759618026276, 0.2603794863300599, 0.032464611971875446, 0.023298749453823264, 0.029317269513996824, 0.023384580123026577, 0.0292207658120216, 0.029721088772678428, 0.02056833258478108, 0.025062101695377037, 0.03191379357577939, 0.0978393627408024, 0.17062000725535276, 0.18649699054684898, 0.08176462799087258, 0.11809130256057032, 0.13207437176450965, 0.10943020925165203, 0.19955051941103497, 0.11896985740004007, 0.16419829212852033, 0.11639568124754118, 0.11697451963167116, 0.16743253658337875, 0.1333843946945883, 0.12116830758895636, 0.14538700283213024, 0.11189175343122137, 0.12209534484228857, 0.08479375598827688, 0.05251288635199469, 0.07293447302790534, 0.10202733483402315, 0.06665751434177658, 0.0859959044809957, 0.09997263779902166, 0.048617490289765586, 0.05413953309681141, 0.1813034726021172, 0.11403927676666026, 0.13904450714241523, 0.1642577237113032, 0.10566153849875703, 0.10749894261198112, 0.20109112919946714, 0.10618942668342912, 0.13469619237633745, 0.1569938722808416, 0.09583093051256197, 0.09010558611927877, 0.15601174528860462, 0.1928980338866162, 0.111085902525627, 0.1575189491985911, 0.09624611134189931, 0.08309701879065157, 0.12196678669670913, 0.13609990293993068, 0.3388482708138081, 0.17142422382199018, 0.09920093754225667, 0.07810489522110997, 0.12136020382676072, 0.1398015080774505, 0.1576902437494364, 0.2870889919172892, 0.11220764151540474, 0.06161657322788838, 0.04719775423526784, 0.1396268306999362, 0.14095378031595118, 0.09627134160869977, 0.10072391750415555, 0.19106287986227433, 0.2830609262917806, 0.42110213002872177, 0.22112514859941046, 0.41047895750299745, 0.19129367072292502, 0.217822333659083, 0.29496374264970193, 0.17887295602918307, 0.2823328451593501, 0.03565427982434066, 0.03669755271787323, 0.03817362938308322, 0.034003155151254405, 0.033132582877100525, 0.03217778956416062, 0.04346373232436285, 0.03155819916073599, 0.04270461219267474]}, "mutation_prompt": null}
{"id": "b5c43c77-bfa5-4696-88a5-2302a64a9441", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.13  # Slightly adjusted sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.90  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 10  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.18 * shrink_factor)  # Adjusted exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Improved perturbation dynamics and adaptive candidate selection enhance efficiency for faster convergence.", "configspace": "", "generation": 40, "fitness": 0.11254251583268256, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.12.", "error": "", "parent_id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "metadata": {"aucs": [0.3206191935095659, 0.22937219130911757, 0.25420330587421025, 0.18840186955079508, 0.17799063888341338, 0.2476889998914127, 0.2180862420096461, 0.25639884412032665, 0.21913652996054467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028815161399823985, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03324099468933073, 0.028170022616162527, 0.02328056238473042, 0.03218515725890647, 0.02987507924185484, 0.017480073856131595, 0.023868368278651575, 0.03167494801992887, 0.022215962874466477, 0.04041418711033673, 0.02480685836313823, 0.01223006257673731, 0.029014837840092844, 0.015128275657996904, 0.00940086287905506, 0.022145245078029396, 0.02700976711465486, 0.0159475073114822, 0.5420284174688812, 0.5277689420485316, 0.5209017136031271, 0.5302337850646728, 0.5359379656263136, 0.5244391969797577, 0.5311923733303822, 0.5431957724243652, 0.5329355110069653, 0.16072497396760266, 0.0668726221344561, 0.06295788776634181, 0.10185299589064034, 0.1559575228419362, 0.07400229576222794, 0.10174366186335704, 0.060502907732409184, 0.10675574852218706, 0.10621890322363758, 0.06223187592952817, 0.08724220335737443, 0.12384594250351788, 0.08020783803906528, 0.08146509155522541, 0.08941480077297126, 0.09087275655459581, 0.09412492311676157, 0.07857564767232783, 0.07589758609466535, 0.06548164731129835, 0.09181813245156334, 0.0575535146765076, 0.06629358251818207, 0.0911786918196027, 0.04491479612769378, 0.07948137665054367, 0.1900610144744984, 0.07221955993174034, 0.07610740494581592, 0.14075813876792254, 0.07738343847452744, 0.0731782957134155, 0.230547595186249, 0.06732676512989744, 0.08332236244602809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03518790556871643, 0.019575033834642985, 0.16131731962061335, 0.07180500922970079, 0.00828258874927068, 0.014088891331602849, 0.1510948535547283, 0.02231195490400173, 0.033074955708133014, 9.999999999998899e-05, 0.015561773374683563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01882394933640641, 0.01531689973800554, 0.02837419011401021, 0.033032511150535515, 0.03130062498046027, 0.022377509542966467, 0.022160990895872423, 0.0256270685533746, 0.04003845200769429, 0.23866752098587374, 0.18550436568802364, 0.3022097421230958, 0.21296899371648303, 0.2165721512842098, 0.1759630728371343, 0.28604258179448505, 0.22180905384511806, 0.2526702495389058, 0.04686051428460747, 0.02174170505478612, 0.029478503397518452, 0.02333770216015596, 0.02152091897929076, 0.03235138725796094, 0.02926967663509572, 0.03158558978284731, 0.021932988495813488, 0.11951579800838541, 0.12271095433917889, 0.24023577271702456, 0.08008692822270402, 0.11948744355842222, 0.10314936444654355, 0.10985645347379269, 0.10610883477528421, 0.12421044494734756, 0.15149384947712385, 0.12478602172080722, 0.11576194248492544, 0.16367953759402698, 0.11340579403346673, 0.12024613111860638, 0.15382166061990488, 0.11251486131874167, 0.11615813445517309, 0.07607515450366586, 0.0672759070609864, 0.06420555457492005, 0.08987993795135585, 0.06753777066394873, 0.07710464926574279, 0.10509959518672296, 0.05514498719762928, 0.0587606319264985, 0.21035682840366643, 0.09287185291356925, 0.12412337659289152, 0.21257410774655816, 0.11525415531229666, 0.11565624397056495, 0.20741823765194345, 0.10073360601411863, 0.12771862079720409, 0.15874238596429646, 0.09368779316388587, 0.09992306561591979, 0.1568917025982739, 0.11979399825483195, 0.09203639677255238, 0.1521673873099476, 0.09217347567642586, 0.08584290261940186, 0.11686880101152097, 0.13295177210285714, 0.30697104017954824, 0.1671738427927164, 0.09414346937946738, 0.07844515257228923, 0.16317208548465045, 0.11483363470842323, 0.1447720860140882, 0.28358123761685683, 0.11107167729673861, 0.0544054073546264, 0.04915345983739694, 0.1297857613359158, 0.11874991616978825, 0.0722443066350732, 0.09117756741976568, 0.16480258871471565, 0.2635921731680113, 0.2592424039566973, 0.24284536562367287, 0.20939636605403789, 0.24514558188719904, 0.36834482618614517, 0.29946956047284046, 0.2587220202537609, 0.2629114649509896, 0.04781235128086081, 0.02124367770361446, 0.042478279989211165, 0.041181849629332246, 0.02914420048503763, 0.03259861959631638, 0.05246799549778003, 0.018218828914244978, 0.04491466536528477]}, "mutation_prompt": null}
{"id": "393cff2b-b063-4a3d-b268-48ba5a164fd5", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Slightly adjusted initial sampling rate\n        max_iterations = self.budget * 0.30  # More aggressive exploration budget\n        shrink_factor = 0.92  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.15 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive perturbation scaling enhances exploration-exploitation balance for improved convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "metadata": {"aucs": [0.410396601202877, 0.26414089324885304, 0.32598807679262987, 0.19977847600960463, 0.20388328807121892, 0.2727560397172232, 0.2576970306641513, 0.26882537659432726, 0.24184426618259314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05656851674173358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043020445206916724, 0.029518454665432015, 0.028079974481793446, 0.03928931349737452, 0.040083309572142234, 0.017079989088610414, 0.0232869268790431, 0.028822222324799585, 0.031193716174070296, 0.041946353352705024, 0.02409658548256144, 0.018743153853287176, 0.027176602271696382, 0.039403882841159255, 0.004860613514355627, 0.034419749257879495, 0.01647384866124124, 0.02075896919150777, 0.49366919474318094, 0.472544713240324, 0.47709731581535875, 0.48567570027203577, 0.4947895123463045, 0.47938040287899897, 0.4913735498299334, 0.5029423200668965, 0.4986499837078062, 0.19243560328037423, 0.049320531418940994, 0.06836346128982351, 0.1439085438360722, 0.18830918905931027, 0.14307612163291672, 0.11459942787624955, 0.0797382112547288, 0.11210104424568867, 0.12091099037158859, 0.0710958587409477, 0.08263220994579001, 0.10305011712823997, 0.09956005215761599, 0.08520936522752276, 0.08603864300221431, 0.061904580499030804, 0.08657560493686456, 0.08476080727133106, 0.08060414359987589, 0.06859881899113429, 0.12276341368910926, 0.07789893145686388, 0.054951212625522605, 0.07631848309742106, 0.06807600475992204, 0.09570476700165342, 0.20733540522586003, 0.07210880125115093, 0.11492093119151614, 0.19007409844970424, 0.08987982896491464, 0.07137814236257778, 0.2452358906948331, 0.040780112275424885, 0.07965998807284191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022088179431348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342258904078477, 0.02800769276829762, 0.15464125264825324, 0.06662658604531713, 0.010527287202402702, 0.018477275095613033, 0.1423878834104304, 0.022001871550260343, 0.025700903101653405, 9.999999999998899e-05, 0.042999971180979646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012909422970224349, 0.022068262276008, 0.04198299249968007, 0.034231696128286804, 0.03469647531319864, 0.022136882358368748, 0.019014971509500045, 0.017790665960751517, 0.05069713817525112, 0.2722807251884467, 0.19279225191172578, 0.3102106743425511, 0.23616170471827613, 0.20820596598252206, 0.1821486328799805, 0.2914774859006163, 0.2528759618026276, 0.2603794863300599, 0.032464611971875446, 0.023298749453823264, 0.029317269513996824, 0.023384580123026577, 0.0292207658120216, 0.029721088772678428, 0.02056833258478108, 0.025062101695377037, 0.03191379357577939, 0.0978393627408024, 0.17062000725535276, 0.18649699054684898, 0.08176462799087258, 0.11809130256057032, 0.13207437176450965, 0.10943020925165203, 0.19955051941103497, 0.11896985740004007, 0.16419829212852033, 0.11639568124754118, 0.11697451963167116, 0.16743253658337875, 0.1333843946945883, 0.12116830758895636, 0.14538700283213024, 0.11189175343122137, 0.12209534484228857, 0.08479375598827688, 0.05251288635199469, 0.07293447302790534, 0.10202733483402315, 0.06665751434177658, 0.0859959044809957, 0.09997263779902166, 0.048617490289765586, 0.05413953309681141, 0.1813034726021172, 0.11403927676666026, 0.13904450714241523, 0.1642577237113032, 0.10566153849875703, 0.10749894261198112, 0.20109112919946714, 0.10618942668342912, 0.13469619237633745, 0.1569938722808416, 0.09583093051256197, 0.09010558611927877, 0.15601174528860462, 0.1928980338866162, 0.111085902525627, 0.1575189491985911, 0.09624611134189931, 0.08309701879065157, 0.12196678669670913, 0.13609990293993068, 0.3388482708138081, 0.17142422382199018, 0.09920093754225667, 0.07810489522110997, 0.12136020382676072, 0.1398015080774505, 0.1576902437494364, 0.2870889919172892, 0.11220764151540474, 0.06161657322788838, 0.04719775423526784, 0.1396268306999362, 0.14095378031595118, 0.09627134160869977, 0.10072391750415555, 0.19106287986227433, 0.2830609262917806, 0.42110213002872177, 0.22112514859941046, 0.41047895750299745, 0.19129367072292502, 0.217822333659083, 0.29496374264970193, 0.17887295602918307, 0.2823328451593501, 0.03565427982434066, 0.03669755271787323, 0.03817362938308322, 0.034003155151254405, 0.033132582877100525, 0.03217778956416062, 0.04346373232436285, 0.03155819916073599, 0.04270461219267474]}, "mutation_prompt": null}
{"id": "c54f5451-58aa-4731-9042-e586259f40b7", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Slightly adjusted initial sampling rate\n        max_iterations = self.budget * 0.30  # More aggressive exploration budget\n        shrink_factor = 0.92  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.15 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive perturbation scaling enhances exploration-exploitation balance for improved convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "metadata": {"aucs": [0.410396601202877, 0.26414089324885304, 0.32598807679262987, 0.19977847600960463, 0.20388328807121892, 0.2727560397172232, 0.2576970306641513, 0.26882537659432726, 0.24184426618259314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05656851674173358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043020445206916724, 0.029518454665432015, 0.028079974481793446, 0.03928931349737452, 0.040083309572142234, 0.017079989088610414, 0.0232869268790431, 0.028822222324799585, 0.031193716174070296, 0.041946353352705024, 0.02409658548256144, 0.018743153853287176, 0.027176602271696382, 0.039403882841159255, 0.004860613514355627, 0.034419749257879495, 0.01647384866124124, 0.02075896919150777, 0.49366919474318094, 0.472544713240324, 0.47709731581535875, 0.48567570027203577, 0.4947895123463045, 0.47938040287899897, 0.4913735498299334, 0.5029423200668965, 0.4986499837078062, 0.19243560328037423, 0.049320531418940994, 0.06836346128982351, 0.1439085438360722, 0.18830918905931027, 0.14307612163291672, 0.11459942787624955, 0.0797382112547288, 0.11210104424568867, 0.12091099037158859, 0.0710958587409477, 0.08263220994579001, 0.10305011712823997, 0.09956005215761599, 0.08520936522752276, 0.08603864300221431, 0.061904580499030804, 0.08657560493686456, 0.08476080727133106, 0.08060414359987589, 0.06859881899113429, 0.12276341368910926, 0.07789893145686388, 0.054951212625522605, 0.07631848309742106, 0.06807600475992204, 0.09570476700165342, 0.20733540522586003, 0.07210880125115093, 0.11492093119151614, 0.19007409844970424, 0.08987982896491464, 0.07137814236257778, 0.2452358906948331, 0.040780112275424885, 0.07965998807284191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022088179431348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342258904078477, 0.02800769276829762, 0.15464125264825324, 0.06662658604531713, 0.010527287202402702, 0.018477275095613033, 0.1423878834104304, 0.022001871550260343, 0.025700903101653405, 9.999999999998899e-05, 0.042999971180979646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012909422970224349, 0.022068262276008, 0.04198299249968007, 0.034231696128286804, 0.03469647531319864, 0.022136882358368748, 0.019014971509500045, 0.017790665960751517, 0.05069713817525112, 0.2722807251884467, 0.19279225191172578, 0.3102106743425511, 0.23616170471827613, 0.20820596598252206, 0.1821486328799805, 0.2914774859006163, 0.2528759618026276, 0.2603794863300599, 0.032464611971875446, 0.023298749453823264, 0.029317269513996824, 0.023384580123026577, 0.0292207658120216, 0.029721088772678428, 0.02056833258478108, 0.025062101695377037, 0.03191379357577939, 0.0978393627408024, 0.17062000725535276, 0.18649699054684898, 0.08176462799087258, 0.11809130256057032, 0.13207437176450965, 0.10943020925165203, 0.19955051941103497, 0.11896985740004007, 0.16419829212852033, 0.11639568124754118, 0.11697451963167116, 0.16743253658337875, 0.1333843946945883, 0.12116830758895636, 0.14538700283213024, 0.11189175343122137, 0.12209534484228857, 0.08479375598827688, 0.05251288635199469, 0.07293447302790534, 0.10202733483402315, 0.06665751434177658, 0.0859959044809957, 0.09997263779902166, 0.048617490289765586, 0.05413953309681141, 0.1813034726021172, 0.11403927676666026, 0.13904450714241523, 0.1642577237113032, 0.10566153849875703, 0.10749894261198112, 0.20109112919946714, 0.10618942668342912, 0.13469619237633745, 0.1569938722808416, 0.09583093051256197, 0.09010558611927877, 0.15601174528860462, 0.1928980338866162, 0.111085902525627, 0.1575189491985911, 0.09624611134189931, 0.08309701879065157, 0.12196678669670913, 0.13609990293993068, 0.3388482708138081, 0.17142422382199018, 0.09920093754225667, 0.07810489522110997, 0.12136020382676072, 0.1398015080774505, 0.1576902437494364, 0.2870889919172892, 0.11220764151540474, 0.06161657322788838, 0.04719775423526784, 0.1396268306999362, 0.14095378031595118, 0.09627134160869977, 0.10072391750415555, 0.19106287986227433, 0.2830609262917806, 0.42110213002872177, 0.22112514859941046, 0.41047895750299745, 0.19129367072292502, 0.217822333659083, 0.29496374264970193, 0.17887295602918307, 0.2823328451593501, 0.03565427982434066, 0.03669755271787323, 0.03817362938308322, 0.034003155151254405, 0.033132582877100525, 0.03217778956416062, 0.04346373232436285, 0.03155819916073599, 0.04270461219267474]}, "mutation_prompt": null}
{"id": "17abc445-0171-40ed-925e-08dd45fc4d6d", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Slightly adjusted initial sampling rate\n        max_iterations = self.budget * 0.30  # More aggressive exploration budget\n        shrink_factor = 0.92  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.15 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive perturbation scaling enhances exploration-exploitation balance for improved convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "metadata": {"aucs": [0.410396601202877, 0.26414089324885304, 0.32598807679262987, 0.19977847600960463, 0.20388328807121892, 0.2727560397172232, 0.2576970306641513, 0.26882537659432726, 0.24184426618259314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05656851674173358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043020445206916724, 0.029518454665432015, 0.028079974481793446, 0.03928931349737452, 0.040083309572142234, 0.017079989088610414, 0.0232869268790431, 0.028822222324799585, 0.031193716174070296, 0.041946353352705024, 0.02409658548256144, 0.018743153853287176, 0.027176602271696382, 0.039403882841159255, 0.004860613514355627, 0.034419749257879495, 0.01647384866124124, 0.02075896919150777, 0.49366919474318094, 0.472544713240324, 0.47709731581535875, 0.48567570027203577, 0.4947895123463045, 0.47938040287899897, 0.4913735498299334, 0.5029423200668965, 0.4986499837078062, 0.19243560328037423, 0.049320531418940994, 0.06836346128982351, 0.1439085438360722, 0.18830918905931027, 0.14307612163291672, 0.11459942787624955, 0.0797382112547288, 0.11210104424568867, 0.12091099037158859, 0.0710958587409477, 0.08263220994579001, 0.10305011712823997, 0.09956005215761599, 0.08520936522752276, 0.08603864300221431, 0.061904580499030804, 0.08657560493686456, 0.08476080727133106, 0.08060414359987589, 0.06859881899113429, 0.12276341368910926, 0.07789893145686388, 0.054951212625522605, 0.07631848309742106, 0.06807600475992204, 0.09570476700165342, 0.20733540522586003, 0.07210880125115093, 0.11492093119151614, 0.19007409844970424, 0.08987982896491464, 0.07137814236257778, 0.2452358906948331, 0.040780112275424885, 0.07965998807284191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022088179431348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342258904078477, 0.02800769276829762, 0.15464125264825324, 0.06662658604531713, 0.010527287202402702, 0.018477275095613033, 0.1423878834104304, 0.022001871550260343, 0.025700903101653405, 9.999999999998899e-05, 0.042999971180979646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012909422970224349, 0.022068262276008, 0.04198299249968007, 0.034231696128286804, 0.03469647531319864, 0.022136882358368748, 0.019014971509500045, 0.017790665960751517, 0.05069713817525112, 0.2722807251884467, 0.19279225191172578, 0.3102106743425511, 0.23616170471827613, 0.20820596598252206, 0.1821486328799805, 0.2914774859006163, 0.2528759618026276, 0.2603794863300599, 0.032464611971875446, 0.023298749453823264, 0.029317269513996824, 0.023384580123026577, 0.0292207658120216, 0.029721088772678428, 0.02056833258478108, 0.025062101695377037, 0.03191379357577939, 0.0978393627408024, 0.17062000725535276, 0.18649699054684898, 0.08176462799087258, 0.11809130256057032, 0.13207437176450965, 0.10943020925165203, 0.19955051941103497, 0.11896985740004007, 0.16419829212852033, 0.11639568124754118, 0.11697451963167116, 0.16743253658337875, 0.1333843946945883, 0.12116830758895636, 0.14538700283213024, 0.11189175343122137, 0.12209534484228857, 0.08479375598827688, 0.05251288635199469, 0.07293447302790534, 0.10202733483402315, 0.06665751434177658, 0.0859959044809957, 0.09997263779902166, 0.048617490289765586, 0.05413953309681141, 0.1813034726021172, 0.11403927676666026, 0.13904450714241523, 0.1642577237113032, 0.10566153849875703, 0.10749894261198112, 0.20109112919946714, 0.10618942668342912, 0.13469619237633745, 0.1569938722808416, 0.09583093051256197, 0.09010558611927877, 0.15601174528860462, 0.1928980338866162, 0.111085902525627, 0.1575189491985911, 0.09624611134189931, 0.08309701879065157, 0.12196678669670913, 0.13609990293993068, 0.3388482708138081, 0.17142422382199018, 0.09920093754225667, 0.07810489522110997, 0.12136020382676072, 0.1398015080774505, 0.1576902437494364, 0.2870889919172892, 0.11220764151540474, 0.06161657322788838, 0.04719775423526784, 0.1396268306999362, 0.14095378031595118, 0.09627134160869977, 0.10072391750415555, 0.19106287986227433, 0.2830609262917806, 0.42110213002872177, 0.22112514859941046, 0.41047895750299745, 0.19129367072292502, 0.217822333659083, 0.29496374264970193, 0.17887295602918307, 0.2823328451593501, 0.03565427982434066, 0.03669755271787323, 0.03817362938308322, 0.034003155151254405, 0.033132582877100525, 0.03217778956416062, 0.04346373232436285, 0.03155819916073599, 0.04270461219267474]}, "mutation_prompt": null}
{"id": "fec38789-8dc3-469f-ac6f-4eca0dbb54c0", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Slightly adjusted initial sampling rate\n        max_iterations = self.budget * 0.30  # More aggressive exploration budget\n        shrink_factor = 0.92  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.15 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive perturbation scaling enhances exploration-exploitation balance for improved convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "metadata": {"aucs": [0.410396601202877, 0.26414089324885304, 0.32598807679262987, 0.19977847600960463, 0.20388328807121892, 0.2727560397172232, 0.2576970306641513, 0.26882537659432726, 0.24184426618259314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05656851674173358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043020445206916724, 0.029518454665432015, 0.028079974481793446, 0.03928931349737452, 0.040083309572142234, 0.017079989088610414, 0.0232869268790431, 0.028822222324799585, 0.031193716174070296, 0.041946353352705024, 0.02409658548256144, 0.018743153853287176, 0.027176602271696382, 0.039403882841159255, 0.004860613514355627, 0.034419749257879495, 0.01647384866124124, 0.02075896919150777, 0.49366919474318094, 0.472544713240324, 0.47709731581535875, 0.48567570027203577, 0.4947895123463045, 0.47938040287899897, 0.4913735498299334, 0.5029423200668965, 0.4986499837078062, 0.19243560328037423, 0.049320531418940994, 0.06836346128982351, 0.1439085438360722, 0.18830918905931027, 0.14307612163291672, 0.11459942787624955, 0.0797382112547288, 0.11210104424568867, 0.12091099037158859, 0.0710958587409477, 0.08263220994579001, 0.10305011712823997, 0.09956005215761599, 0.08520936522752276, 0.08603864300221431, 0.061904580499030804, 0.08657560493686456, 0.08476080727133106, 0.08060414359987589, 0.06859881899113429, 0.12276341368910926, 0.07789893145686388, 0.054951212625522605, 0.07631848309742106, 0.06807600475992204, 0.09570476700165342, 0.20733540522586003, 0.07210880125115093, 0.11492093119151614, 0.19007409844970424, 0.08987982896491464, 0.07137814236257778, 0.2452358906948331, 0.040780112275424885, 0.07965998807284191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022088179431348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342258904078477, 0.02800769276829762, 0.15464125264825324, 0.06662658604531713, 0.010527287202402702, 0.018477275095613033, 0.1423878834104304, 0.022001871550260343, 0.025700903101653405, 9.999999999998899e-05, 0.042999971180979646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012909422970224349, 0.022068262276008, 0.04198299249968007, 0.034231696128286804, 0.03469647531319864, 0.022136882358368748, 0.019014971509500045, 0.017790665960751517, 0.05069713817525112, 0.2722807251884467, 0.19279225191172578, 0.3102106743425511, 0.23616170471827613, 0.20820596598252206, 0.1821486328799805, 0.2914774859006163, 0.2528759618026276, 0.2603794863300599, 0.032464611971875446, 0.023298749453823264, 0.029317269513996824, 0.023384580123026577, 0.0292207658120216, 0.029721088772678428, 0.02056833258478108, 0.025062101695377037, 0.03191379357577939, 0.0978393627408024, 0.17062000725535276, 0.18649699054684898, 0.08176462799087258, 0.11809130256057032, 0.13207437176450965, 0.10943020925165203, 0.19955051941103497, 0.11896985740004007, 0.16419829212852033, 0.11639568124754118, 0.11697451963167116, 0.16743253658337875, 0.1333843946945883, 0.12116830758895636, 0.14538700283213024, 0.11189175343122137, 0.12209534484228857, 0.08479375598827688, 0.05251288635199469, 0.07293447302790534, 0.10202733483402315, 0.06665751434177658, 0.0859959044809957, 0.09997263779902166, 0.048617490289765586, 0.05413953309681141, 0.1813034726021172, 0.11403927676666026, 0.13904450714241523, 0.1642577237113032, 0.10566153849875703, 0.10749894261198112, 0.20109112919946714, 0.10618942668342912, 0.13469619237633745, 0.1569938722808416, 0.09583093051256197, 0.09010558611927877, 0.15601174528860462, 0.1928980338866162, 0.111085902525627, 0.1575189491985911, 0.09624611134189931, 0.08309701879065157, 0.12196678669670913, 0.13609990293993068, 0.3388482708138081, 0.17142422382199018, 0.09920093754225667, 0.07810489522110997, 0.12136020382676072, 0.1398015080774505, 0.1576902437494364, 0.2870889919172892, 0.11220764151540474, 0.06161657322788838, 0.04719775423526784, 0.1396268306999362, 0.14095378031595118, 0.09627134160869977, 0.10072391750415555, 0.19106287986227433, 0.2830609262917806, 0.42110213002872177, 0.22112514859941046, 0.41047895750299745, 0.19129367072292502, 0.217822333659083, 0.29496374264970193, 0.17887295602918307, 0.2823328451593501, 0.03565427982434066, 0.03669755271787323, 0.03817362938308322, 0.034003155151254405, 0.033132582877100525, 0.03217778956416062, 0.04346373232436285, 0.03155819916073599, 0.04270461219267474]}, "mutation_prompt": null}
{"id": "c842e135-7ef6-4961-a6cc-badc549b3742", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Slightly adjusted initial sampling rate\n        max_iterations = self.budget * 0.30  # More aggressive exploration budget\n        shrink_factor = 0.92  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.15 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive perturbation scaling enhances exploration-exploitation balance for improved convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "metadata": {"aucs": [0.410396601202877, 0.26414089324885304, 0.32598807679262987, 0.19977847600960463, 0.20388328807121892, 0.2727560397172232, 0.2576970306641513, 0.26882537659432726, 0.24184426618259314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05656851674173358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043020445206916724, 0.029518454665432015, 0.028079974481793446, 0.03928931349737452, 0.040083309572142234, 0.017079989088610414, 0.0232869268790431, 0.028822222324799585, 0.031193716174070296, 0.041946353352705024, 0.02409658548256144, 0.018743153853287176, 0.027176602271696382, 0.039403882841159255, 0.004860613514355627, 0.034419749257879495, 0.01647384866124124, 0.02075896919150777, 0.49366919474318094, 0.472544713240324, 0.47709731581535875, 0.48567570027203577, 0.4947895123463045, 0.47938040287899897, 0.4913735498299334, 0.5029423200668965, 0.4986499837078062, 0.19243560328037423, 0.049320531418940994, 0.06836346128982351, 0.1439085438360722, 0.18830918905931027, 0.14307612163291672, 0.11459942787624955, 0.0797382112547288, 0.11210104424568867, 0.12091099037158859, 0.0710958587409477, 0.08263220994579001, 0.10305011712823997, 0.09956005215761599, 0.08520936522752276, 0.08603864300221431, 0.061904580499030804, 0.08657560493686456, 0.08476080727133106, 0.08060414359987589, 0.06859881899113429, 0.12276341368910926, 0.07789893145686388, 0.054951212625522605, 0.07631848309742106, 0.06807600475992204, 0.09570476700165342, 0.20733540522586003, 0.07210880125115093, 0.11492093119151614, 0.19007409844970424, 0.08987982896491464, 0.07137814236257778, 0.2452358906948331, 0.040780112275424885, 0.07965998807284191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022088179431348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342258904078477, 0.02800769276829762, 0.15464125264825324, 0.06662658604531713, 0.010527287202402702, 0.018477275095613033, 0.1423878834104304, 0.022001871550260343, 0.025700903101653405, 9.999999999998899e-05, 0.042999971180979646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012909422970224349, 0.022068262276008, 0.04198299249968007, 0.034231696128286804, 0.03469647531319864, 0.022136882358368748, 0.019014971509500045, 0.017790665960751517, 0.05069713817525112, 0.2722807251884467, 0.19279225191172578, 0.3102106743425511, 0.23616170471827613, 0.20820596598252206, 0.1821486328799805, 0.2914774859006163, 0.2528759618026276, 0.2603794863300599, 0.032464611971875446, 0.023298749453823264, 0.029317269513996824, 0.023384580123026577, 0.0292207658120216, 0.029721088772678428, 0.02056833258478108, 0.025062101695377037, 0.03191379357577939, 0.0978393627408024, 0.17062000725535276, 0.18649699054684898, 0.08176462799087258, 0.11809130256057032, 0.13207437176450965, 0.10943020925165203, 0.19955051941103497, 0.11896985740004007, 0.16419829212852033, 0.11639568124754118, 0.11697451963167116, 0.16743253658337875, 0.1333843946945883, 0.12116830758895636, 0.14538700283213024, 0.11189175343122137, 0.12209534484228857, 0.08479375598827688, 0.05251288635199469, 0.07293447302790534, 0.10202733483402315, 0.06665751434177658, 0.0859959044809957, 0.09997263779902166, 0.048617490289765586, 0.05413953309681141, 0.1813034726021172, 0.11403927676666026, 0.13904450714241523, 0.1642577237113032, 0.10566153849875703, 0.10749894261198112, 0.20109112919946714, 0.10618942668342912, 0.13469619237633745, 0.1569938722808416, 0.09583093051256197, 0.09010558611927877, 0.15601174528860462, 0.1928980338866162, 0.111085902525627, 0.1575189491985911, 0.09624611134189931, 0.08309701879065157, 0.12196678669670913, 0.13609990293993068, 0.3388482708138081, 0.17142422382199018, 0.09920093754225667, 0.07810489522110997, 0.12136020382676072, 0.1398015080774505, 0.1576902437494364, 0.2870889919172892, 0.11220764151540474, 0.06161657322788838, 0.04719775423526784, 0.1396268306999362, 0.14095378031595118, 0.09627134160869977, 0.10072391750415555, 0.19106287986227433, 0.2830609262917806, 0.42110213002872177, 0.22112514859941046, 0.41047895750299745, 0.19129367072292502, 0.217822333659083, 0.29496374264970193, 0.17887295602918307, 0.2823328451593501, 0.03565427982434066, 0.03669755271787323, 0.03817362938308322, 0.034003155151254405, 0.033132582877100525, 0.03217778956416062, 0.04346373232436285, 0.03155819916073599, 0.04270461219267474]}, "mutation_prompt": null}
{"id": "c31ee129-b021-49fa-b853-87a0ca3bf39b", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Slightly adjusted initial sampling rate\n        max_iterations = self.budget * 0.30  # More aggressive exploration budget\n        shrink_factor = 0.92  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 12  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.15 * shrink_factor)  # More aggressive exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive perturbation scaling enhances exploration-exploitation balance for improved convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "metadata": {"aucs": [0.410396601202877, 0.26414089324885304, 0.32598807679262987, 0.19977847600960463, 0.20388328807121892, 0.2727560397172232, 0.2576970306641513, 0.26882537659432726, 0.24184426618259314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05656851674173358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043020445206916724, 0.029518454665432015, 0.028079974481793446, 0.03928931349737452, 0.040083309572142234, 0.017079989088610414, 0.0232869268790431, 0.028822222324799585, 0.031193716174070296, 0.041946353352705024, 0.02409658548256144, 0.018743153853287176, 0.027176602271696382, 0.039403882841159255, 0.004860613514355627, 0.034419749257879495, 0.01647384866124124, 0.02075896919150777, 0.49366919474318094, 0.472544713240324, 0.47709731581535875, 0.48567570027203577, 0.4947895123463045, 0.47938040287899897, 0.4913735498299334, 0.5029423200668965, 0.4986499837078062, 0.19243560328037423, 0.049320531418940994, 0.06836346128982351, 0.1439085438360722, 0.18830918905931027, 0.14307612163291672, 0.11459942787624955, 0.0797382112547288, 0.11210104424568867, 0.12091099037158859, 0.0710958587409477, 0.08263220994579001, 0.10305011712823997, 0.09956005215761599, 0.08520936522752276, 0.08603864300221431, 0.061904580499030804, 0.08657560493686456, 0.08476080727133106, 0.08060414359987589, 0.06859881899113429, 0.12276341368910926, 0.07789893145686388, 0.054951212625522605, 0.07631848309742106, 0.06807600475992204, 0.09570476700165342, 0.20733540522586003, 0.07210880125115093, 0.11492093119151614, 0.19007409844970424, 0.08987982896491464, 0.07137814236257778, 0.2452358906948331, 0.040780112275424885, 0.07965998807284191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022088179431348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342258904078477, 0.02800769276829762, 0.15464125264825324, 0.06662658604531713, 0.010527287202402702, 0.018477275095613033, 0.1423878834104304, 0.022001871550260343, 0.025700903101653405, 9.999999999998899e-05, 0.042999971180979646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012909422970224349, 0.022068262276008, 0.04198299249968007, 0.034231696128286804, 0.03469647531319864, 0.022136882358368748, 0.019014971509500045, 0.017790665960751517, 0.05069713817525112, 0.2722807251884467, 0.19279225191172578, 0.3102106743425511, 0.23616170471827613, 0.20820596598252206, 0.1821486328799805, 0.2914774859006163, 0.2528759618026276, 0.2603794863300599, 0.032464611971875446, 0.023298749453823264, 0.029317269513996824, 0.023384580123026577, 0.0292207658120216, 0.029721088772678428, 0.02056833258478108, 0.025062101695377037, 0.03191379357577939, 0.0978393627408024, 0.17062000725535276, 0.18649699054684898, 0.08176462799087258, 0.11809130256057032, 0.13207437176450965, 0.10943020925165203, 0.19955051941103497, 0.11896985740004007, 0.16419829212852033, 0.11639568124754118, 0.11697451963167116, 0.16743253658337875, 0.1333843946945883, 0.12116830758895636, 0.14538700283213024, 0.11189175343122137, 0.12209534484228857, 0.08479375598827688, 0.05251288635199469, 0.07293447302790534, 0.10202733483402315, 0.06665751434177658, 0.0859959044809957, 0.09997263779902166, 0.048617490289765586, 0.05413953309681141, 0.1813034726021172, 0.11403927676666026, 0.13904450714241523, 0.1642577237113032, 0.10566153849875703, 0.10749894261198112, 0.20109112919946714, 0.10618942668342912, 0.13469619237633745, 0.1569938722808416, 0.09583093051256197, 0.09010558611927877, 0.15601174528860462, 0.1928980338866162, 0.111085902525627, 0.1575189491985911, 0.09624611134189931, 0.08309701879065157, 0.12196678669670913, 0.13609990293993068, 0.3388482708138081, 0.17142422382199018, 0.09920093754225667, 0.07810489522110997, 0.12136020382676072, 0.1398015080774505, 0.1576902437494364, 0.2870889919172892, 0.11220764151540474, 0.06161657322788838, 0.04719775423526784, 0.1396268306999362, 0.14095378031595118, 0.09627134160869977, 0.10072391750415555, 0.19106287986227433, 0.2830609262917806, 0.42110213002872177, 0.22112514859941046, 0.41047895750299745, 0.19129367072292502, 0.217822333659083, 0.29496374264970193, 0.17887295602918307, 0.2823328451593501, 0.03565427982434066, 0.03669755271787323, 0.03817362938308322, 0.034003155151254405, 0.033132582877100525, 0.03217778956416062, 0.04346373232436285, 0.03155819916073599, 0.04270461219267474]}, "mutation_prompt": null}
{"id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 47, "fitness": 0.1544577904484269, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "0cff7aea-449a-40c2-b75b-be4c9a95f458", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "305935d5-d5d3-45a0-ae04-ccc0c2f5a7b5", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "291630b1-8f07-44dc-81e4-12ffad6bcb86", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "842afc35-6b21-4b72-a8d1-bf3f81a23ed7", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "6dd39af9-e887-46dd-af82-868907d15c07", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "4ccbaf7e-0d71-45bf-9946-b4ef2c0ca0fa", "solution": "import numpy as np\n\nclass EnhancedADSO_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate\n        max_iterations = self.budget * 0.25  # Modified exploration budget\n        shrink_factor = 0.92  # Altered shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 16  # Slightly increased candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.12 * shrink_factor)  # Altered exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO_V2", "description": "Enhanced dynamic sampling with adaptive exploration-exploitation balance accelerates convergence.", "configspace": "", "generation": 52, "fitness": 0.12442944037724926, "feedback": "The algorithm EnhancedADSO_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.12.", "error": "", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.6851364548068875, 0.28974553745707776, 0.39482334516370143, 0.2263688054636105, 0.24401995888626982, 0.2865674785673915, 0.31380858117525845, 0.3221837733101959, 0.29488424914582734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08958995992168728, 0.011455635175897094, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044099766296545884, 9.999999999998899e-05, 0.03484588965460356, 0.020793095171791953, 0.01910631647887162, 0.04069581674361633, 0.02226400712249832, 0.021575049581193717, 0.037518634006811546, 0.02963544193432921, 0.019922052046547067, 0.037832720738413816, 0.01364786429267717, 0.021701981108507296, 0.02133950860271072, 0.021585163703927157, 0.01593575396516822, 0.015792009337448842, 0.0209043681124107, 0.024776553832841275, 0.3929162431988392, 0.37570159147187376, 0.37624302746882377, 0.38253877261905267, 0.408852405327922, 0.3980626635476745, 0.3770859602378158, 0.40639762784883837, 0.39766222850615685, 0.23864477577579146, 0.08313051581662911, 0.09435111301395105, 0.1695339694325848, 0.25817947036485545, 0.13138359375742092, 0.11901237946696253, 0.08836364588718848, 0.15859840635461186, 0.13325561282389753, 0.09368054756977762, 0.0743314528335659, 0.10105807099532116, 0.06897490409030738, 0.06851105717428851, 0.15177553196343363, 0.07811275537350282, 0.08143479108313711, 0.09225176871300989, 0.08129767598805882, 0.07493096439438285, 0.19901198292042277, 0.07258159068010905, 0.06974307981460948, 0.09829324777142812, 0.07019640905073143, 0.14468789079384037, 0.22619560024153484, 0.07259655616523253, 0.12525110265555273, 0.21215657585141856, 0.13691433364029604, 0.0788132264093312, 0.23210509165258286, 0.06193527791656539, 0.12343754570873733, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002709795114511637, 0.03691575393302049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032543131803618452, 9.999999999998899e-05, 0.03078303734426968, 0.06405266712851188, 0.03267445348007203, 0.1794763975375201, 0.0649610657993911, 0.01395835947087909, 0.02074576478776602, 0.1621285499529158, 0.03256992266752423, 0.03337049681871862, 0.011274905669559354, 0.037096722716099095, 9.999999999998899e-05, 0.10637717510818623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012131694392213843, 0.024833674612226075, 0.045291088903750776, 0.04386800941432634, 0.04640160905400936, 0.04464167071723968, 0.018891545893510386, 0.04738459395247652, 0.026706820061944914, 0.08066452481503095, 0.32775014960483584, 0.21023614098052745, 0.3602900257352999, 0.2838167489128076, 0.21359811990106825, 0.20958833915643305, 0.3404569639873053, 0.27311408315566843, 0.30739246361347994, 0.023686033724761524, 0.02003694774927789, 0.026022835693566226, 0.03409718649560656, 0.032003773471853125, 0.023746287949946265, 0.0184550143970188, 0.026910431735112095, 0.02012750794168494, 0.11214580148386444, 0.14612914554553447, 0.3540166221970078, 0.11107994095460072, 0.12189856367266494, 0.11756237567106964, 0.09279574693480741, 0.11368560310678588, 0.11391098125053578, 0.1464145767886248, 0.12709944553686214, 0.11639523971996202, 0.1632201537536312, 0.12043458425908316, 0.1268808507705126, 0.15421476561459402, 0.10983430853411813, 0.10768959889142993, 0.08718538562319866, 0.06523934372155615, 0.04922266181802315, 0.09997073925818512, 0.049077306659863096, 0.07839889538935352, 0.1021757504931966, 0.04387522045709269, 0.043747788601076754, 0.195697892130422, 0.10393372784486188, 0.15654213533735406, 0.2091820468418789, 0.10093853797043117, 0.13244746544224728, 0.17304549053063567, 0.09862845828606082, 0.12646717280958675, 0.17104195720053939, 0.08726204592580211, 0.1270585953148895, 0.16022091020777207, 0.17502056337829786, 0.17086449600358045, 0.15410127656808925, 0.07574235518821848, 0.08580266249608415, 0.12351986528082648, 0.13616384987480357, 0.4052517635691232, 0.19135797212498773, 0.1140420869970481, 0.07600723958460054, 0.1079213999596843, 0.12630888298996956, 0.16200776545645712, 0.5621371881264448, 0.11239268682458736, 0.06880830514461289, 0.03719641236448046, 0.1419797268642491, 0.14717252650769752, 0.3881215969756632, 0.09589022090471666, 0.26570902056572976, 0.2522360481964532, 0.35124816843967643, 0.2598788559070805, 0.251929214040417, 0.20781996346293308, 0.23318061953201874, 0.299023778929593, 0.17902027980769275, 0.23236419443898682, 0.04780966282376209, 0.02303609760838321, 0.04177854714209461, 0.03638172303942777, 0.01826513212127101, 0.02787814468854899, 0.053702881324705465, 0.024657032403940904, 0.043516192606751436]}, "mutation_prompt": null}
{"id": "7c719429-2e81-4657-a9ab-b50017c8a080", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "0c6fcf2a-35d1-4451-88a2-e5012977d98f", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "14f42233-ce6b-49ac-a727-3397ffd8c696", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "7140652f-cecc-4ea7-b008-ba9b7c874496", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "be488c69-e834-4cac-abef-8756e007a1d2", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.2  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.3  # Adjusted exploration budget\n        shrink_factor = 0.93  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 15  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.12 * shrink_factor)  # Slightly refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation * np.random.uniform(0.9, 1.1), self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced stochastic sampling with dynamic perturbation and candidate selection for improved convergence.", "configspace": "", "generation": 57, "fitness": 0.14746813692115557, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.850519145690887, 0.4060826498012864, 0.8622046166090638, 0.25836371358822074, 0.27064023382495483, 0.3164951150341645, 0.3933580921576575, 0.4835395402064132, 0.4017735549966729, 0.004386534397191055, 9.999999999998899e-05, 9.999999999998899e-05, 0.038485889848143606, 9.999999999998899e-05, 9.999999999998899e-05, 0.03311438528909716, 0.006634954520450265, 9.999999999998899e-05, 0.04598882153881745, 0.032954384450018415, 0.023259685306999178, 0.025685914583627012, 0.034697067568569606, 0.023563679606400045, 0.02918939288625111, 0.029136617890613725, 0.024683339464260268, 0.036338547352037454, 0.01609382504482204, 0.02321776405909004, 0.023857703005017883, 0.02396338568616685, 0.022524028985208444, 0.03347170249593712, 0.023500733189042555, 0.034102714546691115, 0.46124098918598233, 0.44279884924275625, 0.42982868321764955, 0.4430900239762413, 0.46230504875871103, 0.4570437425852296, 0.4443986279206309, 0.4481579412261537, 0.46557835000550807, 0.2686619929966547, 0.0990842699397354, 0.09737977744990134, 0.1985999519192886, 0.2989345292646074, 0.14075904966019825, 0.125068367928718, 0.10017191784392376, 0.20873638260941785, 0.1639620014460137, 0.08136366505699355, 0.08051675626973287, 0.14552349143266197, 0.07500340001227357, 0.09249403401614709, 0.13790711665231015, 0.062369522078804085, 0.08477547582749534, 0.2455204174329405, 0.11364065698139891, 0.07805210737762613, 0.19151879252765036, 0.08731194355527128, 0.08296193688887943, 0.26227225766483975, 0.07797592690324451, 0.1849937563612295, 0.23868421996722256, 0.11886995632531694, 0.12830444435149835, 0.2171868415957705, 0.18964031926754155, 0.1336706070661301, 0.22621333280980072, 0.1840274882784746, 0.16893209996400183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010274411155906327, 0.00983174091431116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07752976385959531, 0.05289788558058239, 0.1529401675138331, 0.07478865396862233, 0.02446542997455259, 0.023919258309389235, 0.14315418425733917, 0.023382316163192418, 0.04080502628073279, 0.217033865285019, 0.05550507430045781, 9.999999999998899e-05, 0.11265261640423974, 0.023731858271593964, 9.999999999998899e-05, 9.999999999998899e-05, 0.031310604015561516, 0.07293973127316289, 0.035160891724554166, 0.03554318204839624, 0.04669900434481766, 0.0534988828052374, 0.08271226435990231, 0.030636628382085473, 0.04985299594108661, 0.03499752527857036, 0.08475012158200057, 0.5316925736426612, 0.24365333797444522, 0.5346111613714257, 0.34430746277953317, 0.22736285630163677, 0.20468541721559352, 0.407183202350504, 0.34927420786496166, 0.3885138213813426, 0.028736430539096913, 0.032013851454429476, 0.027322469499750146, 0.029102569864213557, 0.029488330617900793, 0.04317412763544126, 0.02086257942949543, 0.046177286026979014, 0.030799351536928588, 0.10932839807899508, 0.16298578569530364, 0.5875505280758241, 0.11697231764711791, 0.15866555939381632, 0.1424521485966288, 0.11842631071824561, 0.24267358871122868, 0.1755416160607861, 0.1454806821694976, 0.11933415841172845, 0.12381899335827706, 0.1894460688580859, 0.11635978302290584, 0.13997789252119364, 0.1473109932194695, 0.10329210185600846, 0.12100345785678268, 0.08855272549891413, 0.05455123159212305, 0.06299102672243373, 0.13673608797161685, 0.07171216975272887, 0.08485292716857751, 0.09789514407052502, 0.05046782808932371, 0.047274682472408625, 0.18171611777704288, 0.10928966294142306, 0.14044289619377703, 0.18540576060205372, 0.10824222986114396, 0.12551309114996545, 0.2018064133672206, 0.1111945736456269, 0.1582507822097845, 0.18910446648768098, 0.09854813818760755, 0.16829510740254117, 0.16565422063383428, 0.1828201196090088, 0.15197186236021865, 0.16531993485901453, 0.08775570597847526, 0.16132071985566654, 0.12288025608323949, 0.13668424879963992, 0.12983081140035102, 0.1944667019728612, 0.10745938402768529, 0.0815347081038108, 0.108310580141181, 0.13381952205622216, 0.16684278820906018, 0.7934066212811719, 0.11313017493820499, 0.078387506342119, 0.0562732013230125, 0.18097737256742608, 0.18793946482222035, 0.5479801355625447, 0.10329495147610301, 0.2176298443586846, 0.20133599393155377, 0.23010210949066479, 0.25910740728169734, 0.2574079120895554, 0.16774734616257736, 0.3159067178939585, 0.21557712957136732, 0.2507300461448094, 0.3011526559491976, 0.051200199969755, 0.03130192621893513, 0.04895133190741641, 0.0496282868794673, 0.01745781346534836, 0.047286605593147235, 0.06653102557020374, 0.03034064191789443, 0.043364221806451275]}, "mutation_prompt": null}
{"id": "1c84b74a-9664-49a9-a980-68f673cdcd50", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Slightly modified initial sampling rate\n        max_iterations = self.budget * 0.3  # Adjusted exploration budget\n        shrink_factor = 0.92  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 15  # Slightly adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.15 * shrink_factor)  # Further refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced candidate generation through dynamic scaling and adaptive exploration-exploitation balance for improved convergence speed.", "configspace": "", "generation": 58, "fitness": 0.11734068532620226, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.4104760491684073, 0.24985782006605473, 0.33294974100813457, 0.20814793116806518, 0.20307016474372996, 0.24457541547005512, 0.25527475331373883, 0.2913555583452465, 0.2564721185133165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10173019177022902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035381720968263974, 0.03172517709269884, 0.01917794956904506, 0.025390065054327393, 0.033266381832827374, 0.026926382805542604, 0.02366181674326784, 0.028832204609099965, 0.031597207199745014, 0.03651606612987712, 0.026588356707747174, 0.012640481608593324, 0.032817237527021814, 0.023948597769845037, 0.034558011294023916, 0.025591414668453938, 0.026478139887553875, 0.029509542439829284, 0.46919510913408746, 0.44188749663760274, 0.4532078025010884, 0.46778982851990647, 0.47636860745821563, 0.47089434863794855, 0.46887292995042384, 0.48318184525505337, 0.4837773810158601, 0.2137387792312363, 0.08715930357376056, 0.08372623255780998, 0.1326641199657379, 0.1913310021806317, 0.08440854190471203, 0.106750724145524, 0.06890092779624957, 0.1277161165802596, 0.14254990014985847, 0.057904482148391834, 0.07542874223851526, 0.08748883963408038, 0.09453250242142708, 0.0841276410501055, 0.09454106213433733, 0.06786831342634303, 0.05963447162085489, 0.08513625780152634, 0.07822812646010846, 0.06556513762837257, 0.14245083726369645, 0.07197189564765938, 0.06459333211130469, 0.09232917909429184, 0.05019629371672729, 0.09447131375339812, 0.19480736275992705, 0.06733230095437925, 0.12222866940701693, 0.18167772314471242, 0.1113641903079361, 0.07171133243741556, 0.20700729224293268, 0.062066317181182606, 0.08371056811783761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0069738581931253485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05969501184665882, 0.030681992343690956, 0.16261450943310318, 0.06664358799965353, 0.011661337600102684, 0.016300987596341687, 0.15556933805499118, 0.024626353159548087, 0.03354059410506249, 0.019930797543248446, 0.041169371251648545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030096525092740523, 0.03515865445406541, 0.03709105282066272, 0.037620544784488064, 0.045695728349387954, 0.023601677246828823, 0.04401487425862649, 0.01734341346210566, 0.05730175679531635, 0.30612284938878065, 0.18074240509089612, 0.3211785431339549, 0.2509710770578184, 0.1998505767126859, 0.18999374981398365, 0.31060065197531284, 0.2556637080614883, 0.2824039678306266, 0.03429111798728279, 0.02429883791476717, 0.033141989241622816, 0.024984827265186915, 0.03321400931446028, 0.03305184107899406, 0.02016325990125789, 0.03299102667211573, 0.03991799138501506, 0.09226101929623476, 0.173308502701904, 0.19678079107622692, 0.1295428474271384, 0.1284537517784029, 0.14803807014169157, 0.09777233397616658, 0.2090487604369533, 0.1331721676114377, 0.15204204071966798, 0.12711784932109182, 0.11665253862213465, 0.1570175193858664, 0.13751632598144004, 0.1192042788488541, 0.15459439969985433, 0.10521423172645994, 0.13271697204157662, 0.08619097770001005, 0.06341714178279545, 0.05481995114637517, 0.11446766534280306, 0.0647844955791459, 0.07987063101332992, 0.10789685348970868, 0.05221848296922671, 0.06416639651282074, 0.19564049345773749, 0.10644608665959399, 0.11947361613476792, 0.18315469567103304, 0.10345404241579215, 0.1292019133080906, 0.2024143838078437, 0.1407013228494043, 0.1319172220144048, 0.1606799594103171, 0.08012785228603314, 0.09126078443295904, 0.16763754172570866, 0.172356225849015, 0.1332017571066001, 0.15028038086578055, 0.08447274908920299, 0.08668935453977133, 0.12178510159347022, 0.13574010577281592, 0.33952668317856827, 0.1716730737733123, 0.099817470646961, 0.07937156039367288, 0.10773103340021717, 0.1257136267820108, 0.15622394142015406, 0.2680046302256326, 0.11201933201713565, 0.1192270665168671, 0.04525210755838538, 0.13858603771651723, 0.14114573700378807, 0.08862741729228474, 0.09536868541732324, 0.18521178475016953, 0.2634638590220094, 0.21717337986746577, 0.2578394380647555, 0.2888501797153227, 0.1884208164961083, 0.2547211017502924, 0.26265479712002293, 0.20444428970842154, 0.37959224840859773, 0.04076981146698022, 0.03611602032595873, 0.036205623184470626, 0.055224807746191096, 0.022720426993142584, 0.03263058173115729, 0.047057026642326805, 0.02594890256472282, 0.04910587064624872]}, "mutation_prompt": null}
{"id": "662607b8-19f6-43a7-8e6b-33d9f82a8a1e", "solution": "import numpy as np\n\nclass EnhancedADSO_Fusion:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n\n        exploration_phase = True\n        sampling_rate = 0.20  # Slight increase in initial sampling rate for wider exploration\n        max_iterations = self.budget * 0.26  # Slight reduction in exploration budget\n        shrink_factor = 0.92  # Slight increase to accelerate convergence\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 15  # Adjusted candidate numbers slightly\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.12 * shrink_factor)  # Refined exploitation scaling slightly\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO_Fusion", "description": "EnhancedADSO-Fusion introduces an adaptive dual-phase strategy by merging stochastic sampling with differential exploitation for improved convergence.", "configspace": "", "generation": 59, "fitness": 0.13714905354688348, "feedback": "The algorithm EnhancedADSO_Fusion got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.13.", "error": "", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.8486366378278063, 0.31608461562740986, 0.43492472402309146, 0.2301604446039469, 0.23687702573846015, 0.3643732110595247, 0.3701508500710553, 0.3679462642825976, 0.363399872038466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16351261501212466, 9.999999999998899e-05, 9.999999999998899e-05, 0.00711446893719625, 9.999999999998899e-05, 9.999999999998899e-05, 0.038444805928638415, 0.01498778791647215, 0.021381307286830964, 0.022913852449950367, 0.031234113796932972, 0.02597328221248063, 0.02963079383575773, 0.0257084838536914, 0.019529705375619377, 0.03967104461865634, 0.01581895908724562, 0.015897309251536318, 0.02208881808608587, 0.01699347770866877, 0.026191757743714517, 0.021807044057610803, 0.016334091766158187, 0.028607638488605147, 0.4194235719340753, 0.39471582738092814, 0.38201598818566995, 0.3951255626360629, 0.4277229301072347, 0.4104206996050196, 0.39997902728576595, 0.4165438319404745, 0.4258483665627707, 0.3233325685007403, 0.08628204550279062, 0.09711264446922285, 0.17911700598897073, 0.29090305211841816, 0.12470320705126958, 0.14530388676207617, 0.10239748279301708, 0.23063722659416142, 0.13801187831395034, 0.084977474929535, 0.07028158855204825, 0.1545215577930017, 0.08212093013509947, 0.07764268998258173, 0.09725887999779659, 0.07335654739071562, 0.08676963679176919, 0.09226993585214294, 0.08418787601764033, 0.07199195514494672, 0.22426594505614983, 0.0804127705835368, 0.07555046612551342, 0.12303692645098907, 0.06490304319048845, 0.16444826282851988, 0.22079412438163748, 0.08303748710504244, 0.12346067595183541, 0.22113374298138344, 0.16265610396852248, 0.10636807276950655, 0.24984361779179576, 0.06994815284389966, 0.16073721949315134, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029851345313596234, 0.040676037025046075, 0.002630360629387929, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026719796392232875, 0.06920166817895768, 0.05269647592256477, 0.16446222028756452, 0.06439287543053906, 0.016871605865107275, 0.02636801210007944, 0.1471103946584713, 0.023678999339762807, 0.036254720336305946, 0.30702665368347815, 0.041756474224093454, 9.999999999998899e-05, 0.17812175091685822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117339357734238, 0.08622606399927302, 0.02659922756501054, 0.047331082615108766, 0.05474358158967496, 0.05162605682193311, 0.06105486245183511, 0.025403665925498364, 0.05738890624891568, 0.030907458479804695, 0.08767066797423395, 0.41149473980184825, 0.22657573268155484, 0.45199506770480125, 0.2755001925813494, 0.2307636591514125, 0.21885590823841816, 0.38202462064398757, 0.3021439727789268, 0.3802802582289361, 0.02558637443192968, 0.02731044303583785, 0.027697475950711814, 0.020270423371920865, 0.021692207812122666, 0.040063296904557344, 0.025740508642007276, 0.03806178638396995, 0.025574820192479475, 0.23784321040851908, 0.1627539578446926, 0.2423890217298127, 0.14531319932407782, 0.12618562910998388, 0.24377553285694797, 0.13182023933700493, 0.2185620881096496, 0.11577727800088344, 0.15447163218201, 0.12305365826230741, 0.13091711412132223, 0.17098114141292697, 0.12699293556501312, 0.11666100884396347, 0.15461399944484788, 0.11663914456591862, 0.11658984422614538, 0.07772529514772142, 0.05969878371099635, 0.05181180942357533, 0.11202426386098263, 0.046478367159385914, 0.09528185406562917, 0.09424235961391147, 0.051773826280118396, 0.04436135663261298, 0.16896278132480147, 0.10127494545897808, 0.13819467017128917, 0.17949067874488478, 0.10946357689465458, 0.1251368876652348, 0.19666468560790817, 0.136968291384853, 0.15073789751119715, 0.17175715615609932, 0.09296984311293566, 0.16185781417400869, 0.15794436047919425, 0.17720386697529955, 0.16481200199253054, 0.16524525101609489, 0.08160418905296807, 0.1325877691139905, 0.12259493924190468, 0.13647643468784676, 0.4720074811527395, 0.1725600743436715, 0.12535300342640598, 0.07363871277492762, 0.10809814417159791, 0.1263123605319224, 0.16472026818538255, 0.6097178985900555, 0.11265584140449048, 0.07572224843974706, 0.044139973161837265, 0.16180787567971167, 0.15638073879728542, 0.39518565427178487, 0.09693188925406993, 0.2343074389118478, 0.3320776004645679, 0.32136331343841673, 0.20503348072335525, 0.2582768330473787, 0.2081893465249154, 0.23085921819116428, 0.2144911919352558, 0.2673636114109228, 0.24909231046338565, 0.05417088370263978, 0.03176665546955282, 0.04180329358365564, 0.046343009415192093, 0.031067223998684113, 0.03904038969479173, 0.03808739649441828, 0.029662328122414316, 0.039004158505592024]}, "mutation_prompt": null}
{"id": "d1f45d2f-706b-418a-a088-1adbf6415373", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.19  # Slightly tweaked sampling rate\n        max_iterations = self.budget * 0.25  # Adjusted exploration budget\n        shrink_factor = 0.93  # Tweaked shrink factor\n        transition_threshold = 0.15  # New dynamic phase transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 16  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if (evals >= max_iterations) or (best_value < transition_threshold):\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.12 * shrink_factor)  # Enhanced exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Enhanced adaptive sampling with dynamic phase transition for improved convergence balance.", "configspace": "", "generation": 60, "fitness": 0.14279403508987804, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.14.", "error": "", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7983345782542165, 0.361528880129529, 0.5664428786260802, 0.28064416274351156, 0.26365846719849984, 0.33862318182178464, 0.34162440551772033, 0.3105546962361291, 0.32624206697185687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04289643554822564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06709430696574747, 0.07578236681057537, 0.04701699243766744, 0.04038374058909244, 0.03572364018680252, 0.019445157265413182, 0.025150466580740938, 0.031136289309172005, 0.033024017800102, 0.0613047940838658, 0.03148365791646923, 0.026239803045764343, 0.030458744576457697, 0.01445416649938358, 0.028209034228119156, 0.025510844722583137, 0.0311210309285741, 0.029725130423353896, 0.5310855861912905, 0.5102151290445932, 0.492252607187722, 0.502426942122369, 0.5291755320809476, 0.5147160068677805, 0.5105457541934348, 0.5370016233036587, 0.5366487116678825, 0.3261260205112466, 0.11350585171729144, 0.10775983691238233, 0.2018159244730966, 0.3174532227925523, 0.14995549512499529, 0.248774517961184, 0.09130815421150762, 0.20571141770453794, 0.1494848132621993, 0.06987175836175719, 0.08884435502748422, 0.1582268616600181, 0.08460141791308817, 0.09978789683689537, 0.1385758939511903, 0.08357994990301831, 0.09328479817930746, 0.12774360250931982, 0.09922892397063621, 0.08980991352475975, 0.2061582600127303, 0.13545201386325956, 0.13073798175415163, 0.17483256756344667, 0.09352184575007394, 0.17412858838592005, 0.23432809527231369, 0.11172310224076187, 0.12460101320003536, 0.20986721454162216, 0.19789367368627353, 0.12248354951897744, 0.2356154399735101, 0.08404785614617627, 0.15498125571154864, 9.999999999998899e-05, 9.999999999998899e-05, 0.010085896071202805, 0.039410882173350315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008494530371430664, 0.06042660444288572, 0.05581080316998521, 0.1725527252617094, 0.06485543545572037, 0.019700154950968995, 0.019158400828979905, 0.14264269901673465, 0.026469641271367084, 0.04061082600923127, 0.007558943254370787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007397654070900539, 0.08252994191099838, 0.035359247544277106, 0.04678531220844484, 0.06191539134864377, 0.061280826314885406, 0.061557085502902176, 0.030060073003796428, 0.04694732195474227, 0.026850458973599278, 0.055379181641392994, 0.2943016682659231, 0.29259613839471743, 0.35172365007289197, 0.3268013509561495, 0.28481215693061923, 0.29814289582150877, 0.43589646318475084, 0.33088810671194846, 0.41861974239150845, 0.029239529252083396, 0.03359786849253665, 0.03317879566963433, 0.03715690316283449, 0.04318495780707998, 0.03351641410089745, 0.02958930290589412, 0.03223325215433048, 0.054076103298825395, 0.23357950905483826, 0.17191864708093196, 0.21995283632835905, 0.13506370803427525, 0.17270829011786815, 0.129777972691986, 0.10395197864640537, 0.21727585576124397, 0.12865294075254607, 0.20181399663637734, 0.15146463574938773, 0.1323240952184016, 0.1784693503806588, 0.13411396699362288, 0.11889649244733314, 0.16403077910969133, 0.1217988489490277, 0.11520836143365776, 0.12116906424696205, 0.05303754539851402, 0.06801440372473211, 0.1024010570909879, 0.05863571253769784, 0.08653923452411405, 0.10023427168660803, 0.06584671000923159, 0.04079951853930308, 0.1642419808669523, 0.1474316134068555, 0.1395284621863988, 0.20727561996745547, 0.1232447303754245, 0.13026591459280756, 0.20143541019448452, 0.13898025226250643, 0.14918372391153212, 0.1656101729680719, 0.1103011585324295, 0.156642470088865, 0.17988641503267866, 0.1771390201082057, 0.16982419529666626, 0.16125514632298332, 0.09630281758427373, 0.13516626694993228, 0.12255225900610478, 0.14705975656586667, 0.5110449824622493, 0.17251029713900135, 0.10885070023408239, 0.08280943523812745, 0.10804913266089133, 0.12263831159785188, 0.16680465246727216, 0.3843711076808589, 0.11235956681233861, 0.08320134185442818, 0.047429950927590614, 0.17653577185785907, 0.16981184792763793, 0.356383755835027, 0.15551878408248454, 0.18912199828436183, 0.2205596047551297, 0.283693464127894, 0.28855206577799053, 0.2509240288959401, 0.25776661135754475, 0.20592781926027326, 0.1733641355172173, 0.17288457746607455, 0.17838138839835538, 0.0517402047748905, 0.02952534322268019, 0.04790203453185782, 0.03921280568270924, 0.03519453516627058, 0.03865615890456198, 0.058915929761719554, 0.022930571073311645, 0.05983124377887983]}, "mutation_prompt": null}
{"id": "a3e88261-da79-4385-8f7a-bdf913401b07", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18\n        max_iterations = self.budget * 0.28\n        shrink_factor = 0.93  # Adjusted shrink factor for faster convergence\n        perturbation_scale = 1.2  # Introduced dynamic perturbation scaling\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 15  # Slightly adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates, perturbation_scale)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                perturbation_scale *= 0.99  # Dynamic adaptation of perturbation scale\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples, scale):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate * scale\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement and dynamic perturbation enhances convergence speed.", "configspace": "", "generation": 61, "fitness": 0.12860309050379573, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.8966477545602339, 0.3373458897672228, 0.5299019675625452, 0.2248501861145431, 0.2343497677473344, 0.31617954863085584, 0.35935138977371117, 0.3924407392387186, 0.352680516545661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08175550804940923, 0.0032359154097392206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033975822805268785, 0.008304378696190717, 0.013271438477864606, 0.018019206416235667, 0.01300680393977205, 0.013671809792150769, 0.015467045293589998, 0.014442155223335806, 0.00946649732476812, 0.03548174214432054, 0.011616218814357815, 0.004769493349089715, 0.010711817311829686, 0.011137323075502525, 0.011780354430451223, 0.013291741762249898, 0.011965938362191841, 0.015119356583642718, 0.30422267968508376, 0.2625104399858028, 0.24587754694034625, 0.27262044699088994, 0.2941416638204176, 0.26634375235520424, 0.2523587998272585, 0.29698705350113674, 0.29192452466594954, 0.34164746117337164, 0.07708256811709469, 0.07632242508219256, 0.19248227729127854, 0.3129913625331625, 0.11510296373835749, 0.15301159077141913, 0.06537197892516489, 0.2426109281444223, 0.1298145128487277, 0.06291135113630886, 0.06687462553849077, 0.10867897555687411, 0.040604056002177646, 0.044068662001053416, 0.1127392745275092, 0.04710452538753451, 0.049730845022586956, 0.14637895364118303, 0.07396129642757243, 0.0692566474720987, 0.238582946616836, 0.07011933338547349, 0.0636563109199253, 0.17105275225557437, 0.06285824774693283, 0.18370352451158867, 0.22162914639805198, 0.09419581228964158, 0.12459782541625264, 0.16392208807043984, 0.15531343624705973, 0.1421439181173766, 0.26225891476617025, 0.05275762774846604, 0.1639571599335794, 0.00460910940582393, 9.999999999998899e-05, 0.003717939983804208, 0.05256157171963893, 0.02143506556845809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015085628135444895, 0.06811295499175107, 0.05498725187546938, 0.18855925595304746, 0.06568713168834561, 0.020846891725457284, 0.01441697078116555, 0.16366785347977075, 0.0245876125132507, 0.031429748321154194, 0.3151199065175607, 0.053209449022353694, 9.999999999998899e-05, 0.1648825373369076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05154001896066929, 0.08360067141146177, 0.024850289791535363, 0.03808039554893783, 0.05187871420030099, 0.040544859696705515, 0.04700686308773783, 0.023852867318723603, 0.04449481933308763, 0.023734599948296298, 0.08471831558375087, 0.508814722807484, 0.21878727528838138, 0.5469708096284244, 0.25941495723080676, 0.21893968930210206, 0.2144358271636101, 0.43472069821971193, 0.3068374367841691, 0.38793901945346654, 0.014453058812661457, 0.011662025432229495, 0.015464696964960223, 0.010112348913601688, 0.015251371217248955, 0.015466004913707754, 0.011293524852419967, 0.01927505230418647, 0.015450438994738969, 0.1390779330222327, 0.1781366796974977, 0.24260963908325894, 0.0832012939147273, 0.11992887098651595, 0.14009975327522783, 0.08632595697236534, 0.2250492610167123, 0.11192976134761012, 0.1261117441343671, 0.11576783561383619, 0.11216019594378357, 0.15736511223777983, 0.10433177823003115, 0.10890980271105, 0.1562962210954476, 0.1016638275380718, 0.10506929405302157, 0.07511563067748162, 0.05419444030442899, 0.045898163633679157, 0.09632140978718728, 0.029431867443330706, 0.0959963739776507, 0.07730133346697199, 0.029537163284382273, 0.033107862913551944, 0.18819968027524336, 0.09422953409905188, 0.14603276762656792, 0.19571981353932733, 0.09924581673409794, 0.1220340847844642, 0.23818467132913823, 0.11178926575713, 0.1396950423597253, 0.17326786993518528, 0.08128524404033599, 0.1572666674935399, 0.1687703516027772, 0.1735308842646267, 0.16868641520886363, 0.15541981802822047, 0.060592134188804825, 0.14535459826439123, 0.12323796412621668, 0.13660396934508712, 0.4730861854564371, 0.17270873310415513, 0.11142905123764835, 0.06683608078135972, 0.11345645617446465, 0.12590494025989285, 0.16569955127747926, 0.6977241928062557, 0.11293347776442675, 0.09444278729756539, 0.02679111893369812, 0.1652492186008354, 0.16118559923111409, 0.4241684646214642, 0.0755141119394841, 0.24890913161929806, 0.2599417973992818, 0.2635485167893823, 0.26074132845460307, 0.20597700804762964, 0.22837595197192262, 0.21618085956471644, 0.25227190706622094, 0.22295907072873156, 0.3025113153564948, 0.047483917695398836, 0.02104462255544226, 0.03302577325366585, 0.039515718794902566, 0.018593282135783706, 0.037618524898904826, 0.06290767990469992, 0.021190601436960388, 0.03352495937320943]}, "mutation_prompt": null}
{"id": "1d20ed4e-114b-4771-8a96-6a5bebd2c6b0", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Slightly increased initial sampling rate\n        max_iterations = self.budget * 0.28  # Adjusted exploration budget\n        shrink_factor = 0.94  # Adjusted shrink factor\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.10 * shrink_factor)  # Refined exploitation scaling\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Hybrid stochastic sampling with adaptive refinement balances exploration and precision for improved convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7945199239138122, 0.38658429050307397, 0.8003868532788357, 0.30192961682425223, 0.2974413994843985, 0.3682987377209781, 0.4044842904125585, 0.4790797505973937, 0.4482666812894861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10108523082778209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015481900720952901, 9.999999999998899e-05, 0.04572629889170765, 0.03284574528327777, 0.01882135522973949, 0.04581137622845888, 0.028599129365798892, 0.031951718959956854, 0.02967112204763378, 0.024462342196799214, 0.034771572211184876, 0.04804489623955255, 0.027806584266460432, 0.02736518487682893, 0.031224376530734066, 0.038547219921856946, 0.024385588541914527, 0.04176498478945834, 0.024093481885024248, 0.022135592415662764, 0.493567278484599, 0.4471276051602735, 0.45786330960130994, 0.4723953823024528, 0.4850594021309709, 0.4789366208139474, 0.47165287271396705, 0.4939432589127011, 0.49874061547513915, 0.44118053819890757, 0.10473969052952092, 0.1322500276059223, 0.19522264517564114, 0.344950017557327, 0.14980348557034173, 0.15991428037096744, 0.0956688876907168, 0.26361799182134515, 0.17040816035346285, 0.07764524724259536, 0.09286727553221386, 0.1807656350784389, 0.07464826076312714, 0.12299674463901045, 0.11815016022385771, 0.058176377857823036, 0.08053448873617275, 0.2026064069623772, 0.12169485973965444, 0.08812754880661922, 0.2370327422605707, 0.11416076361709526, 0.0758620991440846, 0.1815181966221664, 0.08858439347966873, 0.1937435709157369, 0.2425745193962875, 0.12330341084378305, 0.12869220489361322, 0.21374534683157165, 0.23600818913571642, 0.1260563515801698, 0.2631902909222472, 0.16983614679987258, 0.1588377854398415, 9.999999999998899e-05, 9.999999999998899e-05, 0.01577254685850915, 0.010058296940778977, 0.011376300689033503, 9.999999999998899e-05, 0.0006248598190117249, 9.999999999998899e-05, 0.03852662036612198, 0.07165886069184091, 0.046132351320227416, 0.1921772789540943, 0.06550257261756853, 0.01600490126736054, 0.029389424180731316, 0.16758315257842715, 0.024491993392214084, 0.03532210010537673, 0.2051598121033571, 0.03818961903141138, 9.999999999998899e-05, 0.15064394048964425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08542027371102667, 0.07311095240857213, 0.03497785492542804, 0.04171103309542745, 0.06688673896589847, 0.06263714295158274, 0.058777246170621966, 0.035636313822640875, 0.050509799943513456, 0.030514259318685122, 0.09240362871495345, 0.5218549518704829, 0.2833253978533308, 0.5234890889111028, 0.3128458156140921, 0.24284524899728466, 0.2620251772870589, 0.5177511471880802, 0.3277806260243147, 0.5230033733576217, 0.037844934718514245, 0.027122932564271673, 0.04120084744953034, 0.03455319977411797, 0.029801503951494723, 0.0357370459042502, 0.026799673638867927, 0.047074580813664224, 0.03479191404910542, 0.11537605337493129, 0.17069391729466077, 0.6089957244271971, 0.11772802559911089, 0.1248066672895729, 0.19230181396658586, 0.12344993991707254, 0.11621876816328258, 0.11255102324693689, 0.14794279048736103, 0.10806760490285561, 0.11502155870727815, 0.17859105735401004, 0.12611890724619335, 0.1184273627865643, 0.15678809326830323, 0.12116626363199534, 0.11537657760724418, 0.09544246112682975, 0.0630683489277315, 0.06734478664240617, 0.11047595248605813, 0.06803991009809707, 0.08728835640020682, 0.08943689176759217, 0.05717340452371189, 0.06956809420845567, 0.1649414725288556, 0.1214191870823601, 0.15510185664543497, 0.20522579234384075, 0.1341228151621484, 0.14242120032791694, 0.19291519916132083, 0.12150416324704916, 0.12662730282361068, 0.1601132176377068, 0.1268149328188929, 0.15720050517113082, 0.17467039895547665, 0.1984188888696664, 0.1621200216679517, 0.15744203407326696, 0.09468676859372749, 0.15813833225728213, 0.13564700006497643, 0.13646777217472428, 0.5637393678310743, 0.17238709586819545, 0.10947565325251796, 0.08089102852928842, 0.12739243319561133, 0.12690641938839087, 0.18419920355854036, 0.6812658119377646, 0.1150057626706279, 0.07863916670199955, 0.05068517397136907, 0.18478561316034625, 0.1821970935250573, 0.4700207768849495, 0.10409160417715613, 0.26750898149421765, 0.2370717175406014, 0.21546077253266827, 0.19227612982566533, 0.2969749031380665, 0.21984389085471256, 0.25276634082667426, 0.30851271418680704, 0.2547957670440414, 0.22587092743257708, 0.07022589571447535, 0.02622983201445006, 0.03778309297425153, 0.04637906437214845, 0.02533617719312864, 0.04006714459675931, 0.05638231994760046, 0.023514162119084525, 0.04420581254915612]}, "mutation_prompt": null}
{"id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 63, "fitness": 0.1684041548926768, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "e2e9c91a-1d0e-42ac-8fea-cb3354533932", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "2be4783a-5114-4b18-a59d-590fce468f9f", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "69df08f6-0083-4f40-914a-866be56f0a79", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "26504936-80d0-46cc-b6f6-cfdf08605612", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "8f4b742f-3daf-4e16-93f4-ec9d8c98dd84", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "382e6fb6-ef36-4198-a8cb-a3fed36513ec", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "6cdbd183-987b-4d0b-af0e-fdeb969e93bf", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "ac0ac2ae-8c27-444b-b021-b042da36d435", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "84e5fa1b-e5ac-4e71-8066-b975d914f04e", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17\n        max_iterations = self.budget * 0.26\n        shrink_factor = 0.95\n        adaptation_factor = 0.1  # New parameter for dynamic adaptation\n        \n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12\n            dynamic_candidates += int(adaptation_factor * evals / self.budget)  # New adaptation logic\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Introduced adaptive dynamic candidate adjustment based on evaluation feedback to enhance convergence speed.", "configspace": "", "generation": 71, "fitness": 0.1684041548926768, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "4af667c4-5b18-4f60-bcce-19eceac9ecb5", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17\n        max_iterations = self.budget * 0.26\n        shrink_factor = 0.95\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 16  # Adjust candidate numbers dynamically\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                sampling_rate = max(sampling_rate, 0.01)  # Ensure minimum perturbation scale\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Introduce a dynamic perturbation scale and adaptive candidate count to balance exploration and exploitation.", "configspace": "", "generation": 72, "fitness": 0.168179632345268, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.6340585825307137, 0.5354539298426981, 0.6102484501672373, 0.37610289525318485, 0.36802913278355276, 0.5039993380051615, 0.5840023436823351, 0.585738343829471, 0.5594137564974646, 0.0031209895957212686, 9.999999999998899e-05, 9.999999999998899e-05, 0.0920015786692776, 0.016351115058339527, 9.999999999998899e-05, 9.999999999998899e-05, 0.024142783794451117, 9.999999999998899e-05, 0.0583885544811239, 0.0418907832886487, 0.03601404579025491, 0.058474776337750334, 0.04158902776373197, 0.02374801850233177, 0.0392523344152782, 0.028713026083854842, 0.03198487235593672, 0.061184031241144465, 0.024959495738366644, 0.028882714734506987, 0.026413610271049714, 0.03581994852113879, 0.025638351819181837, 0.03059113758096632, 0.028983334306975084, 0.023986336369354433, 0.583749179068945, 0.5664089454716346, 0.5333151564343732, 0.5677001594490928, 0.5844213235476485, 0.5807400937226614, 0.564845329674539, 0.5931591805491214, 0.6048018932043056, 0.4391938708686254, 0.149845670113407, 0.17945816666066605, 0.271754866711327, 0.4023917050526339, 0.19280976497630764, 0.21703515433161036, 0.15046188381894587, 0.31243322011500063, 0.1537796299264752, 0.09318532022788606, 0.12121784903102684, 0.15522764927996013, 0.09223398075890876, 0.10953398651035151, 0.11448464326323826, 0.09551284450967645, 0.11796975951690603, 0.1727511685921661, 0.13713211334691733, 0.13333615322917436, 0.22175581482222428, 0.15808419925952133, 0.11783720503679962, 0.20200808626726507, 0.10485460977418881, 0.2164303668278772, 0.22580978668041585, 0.1545443877507351, 0.12355275701275881, 0.20437789730468525, 0.358703108572475, 0.1658520635586367, 0.23135608401722252, 0.27477781584704164, 0.18534127977409032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011336863048458823, 0.0044432423382996244, 9.999999999998899e-05, 0.0031732342545801595, 9.999999999998899e-05, 0.03620966506629686, 0.06149423297500711, 0.056604218540111106, 0.17949541297953708, 0.06671428512330424, 0.01573361618530178, 0.02734305295091144, 0.1594920469858414, 0.028614782561058538, 0.042720648926611426, 0.09812115852738967, 0.02754768625997317, 9.999999999998899e-05, 0.08319653896389079, 0.04743082970146084, 9.999999999998899e-05, 9.999999999998899e-05, 0.08818461938808664, 0.05169525449167012, 0.04317871553372954, 0.08042490300962812, 0.1132572007653474, 0.07479823719479706, 0.10024668891471389, 0.04550640106682913, 0.07202783941891922, 0.0411803994272717, 0.0852576045962804, 0.5072029295675338, 0.3278566285375738, 0.5419779037567358, 0.4046917384753064, 0.29455169960959415, 0.31920234998222563, 0.5122703771717145, 0.40005176203445236, 0.4850637250886459, 0.03601853334082061, 0.04026016973706936, 0.04610422014166238, 0.03363101164068272, 0.030040712587054097, 0.044649546523356176, 0.01961948916082079, 0.05114715007325599, 0.03524195619725157, 0.11615094598159126, 0.1253892671580541, 0.2593879184432508, 0.1379023392367824, 0.13296516227908228, 0.12648088185243067, 0.1063603132613733, 0.21476237212369864, 0.12710298044546575, 0.16335370830991103, 0.13620905946118933, 0.13843770997321247, 0.18655350747422628, 0.1345247793934452, 0.13620557848866133, 0.16739826249119982, 0.1264304383747321, 0.11959391390504992, 0.10419914852872258, 0.059937007289021516, 0.07075281135874867, 0.12032800387927656, 0.08781409209599389, 0.09759319915528653, 0.10196664181722659, 0.0740420830887375, 0.06890049492712857, 0.18398356193675802, 0.1239848156501403, 0.1345847585068506, 0.1969625478590319, 0.13056660679179677, 0.1427037626112435, 0.17740730665441062, 0.1121250712434827, 0.1398209076814042, 0.163277394529332, 0.16668119579887664, 0.1571903755622932, 0.16963846269465488, 0.18178833673788053, 0.1672270168841311, 0.165964505647208, 0.12155817886309905, 0.15576147447575572, 0.12251414216776357, 0.1364853438503797, 0.7449669104092395, 0.20260368782313298, 0.1327220050385164, 0.08427812256353684, 0.12930963677881868, 0.12693961877453586, 0.16680758015041663, 0.8457809120143976, 0.11301975797725283, 0.0798280550441226, 0.05622020584038001, 0.1959771599692698, 0.19442538085628425, 0.5996604524723788, 0.11263942528254689, 0.3615102919862374, 0.21616615751158474, 0.22711628611191936, 0.2457095963565511, 0.1816264315325521, 0.21639743045286286, 0.17790069992975277, 0.22032199631673544, 0.2192626991505896, 0.2176609234660708, 0.056867057688540945, 0.042838440616742135, 0.04925654827991144, 0.03826659493494722, 0.0340547254537612, 0.03615664422626341, 0.06613800939738845, 0.03587433696593689, 0.055863371662985606]}, "mutation_prompt": null}
{"id": "fd66a3ff-539b-4c97-b60b-d3d7218d6d55", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16  # Adjusted initial sampling rate for optimized exploration\n        max_iterations = self.budget * 0.24  # Rebalanced exploration budget\n        shrink_factor = 0.93  # Fine-tuned shrink factor for enhanced transition\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Dynamic candidate adjustment for improved phase transition\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.1 * shrink_factor)  # Slightly refined exploitation scaling for improved local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Dual-Phase Adaptive Sampling refines exploration and exploitation using dynamic scaling and adaptive candidate adjustments.", "configspace": "", "generation": 73, "fitness": 0.13013189564349947, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.8178522447450745, 0.3211735868771265, 0.42102400485315084, 0.24171964632220722, 0.253628633774841, 0.32371648031532385, 0.3243098350713838, 0.36730542898983254, 0.3368930700698868, 0.004715883617595007, 9.999999999998899e-05, 9.999999999998899e-05, 0.05120852136104981, 0.0035033738240261014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03920512664943365, 0.02326466844378061, 0.015153825389493614, 0.03530659455934515, 0.01977862003409081, 0.016806157177284176, 0.021243625110355602, 0.022237501920846836, 0.025725876010698978, 0.052134443580492906, 0.01621573763937867, 0.006342406959513158, 0.017917190340736355, 0.017816907746978194, 0.013711340869135724, 0.019250293685611486, 0.015321514988685392, 0.02600560316214473, 0.3968565756730923, 0.3687804086702169, 0.35096585578789197, 0.37857722968092067, 0.4083540142725971, 0.3759128970500949, 0.37543967627053076, 0.40012847190272627, 0.3985298382193889, 0.2715624129276595, 0.11170967828806133, 0.10437062006219144, 0.16794093918705255, 0.27837500042794683, 0.143845779678496, 0.13577995245208074, 0.10070978751828918, 0.20913305785040692, 0.1323594352973958, 0.05720435494856213, 0.09314170046045234, 0.1143136812974842, 0.06324941464780043, 0.07286356478123757, 0.10678091795617017, 0.06263607172366592, 0.0622561224622441, 0.10906669683055714, 0.09018816161620258, 0.08692571773669155, 0.21889881415265577, 0.08022776227487738, 0.07146923246521564, 0.09907056670308956, 0.07358575214244722, 0.16724573580750568, 0.22791399582397676, 0.09646297336527254, 0.12724444916880662, 0.21725780235858405, 0.15366466371568877, 0.11301175279343678, 0.24174966456240432, 0.13361155921182521, 0.15158595552246534, 9.999999999998899e-05, 9.999999999998899e-05, 0.012648887841432255, 0.00968971232563176, 0.006787098669970182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036365349445170225, 0.06759747061137367, 0.038759279506172195, 0.18875112489874668, 0.06881429789921945, 0.013918152495640213, 0.020329886570741862, 0.19717445583277315, 0.029161900066764446, 0.03148277148164946, 0.06078766299842786, 0.03927168732003028, 9.999999999998899e-05, 0.1576357667235465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043251850854421736, 0.02863358224036472, 0.04543602495969712, 0.04988851706851716, 0.05259164819371198, 0.053520051076131, 0.018476196247896093, 0.05572482411155377, 0.03116248604597427, 0.0815535350323282, 0.3699386883534549, 0.21785609446161347, 0.3726126841983801, 0.27171295806050033, 0.22865121989525306, 0.2298769388463986, 0.3602599877207564, 0.28629377869454886, 0.36935966265995257, 0.019287396505960896, 0.019502119471152435, 0.027111251585003604, 0.021815713229206057, 0.019064385348415036, 0.02678250136800764, 0.01755122016770383, 0.02738109090733709, 0.024701023643002418, 0.10892177833223327, 0.18640446524964893, 0.2252492989210355, 0.11454351896782322, 0.11939734192444085, 0.16562094523949566, 0.0891943083927157, 0.23300239435826398, 0.12851785359479306, 0.14429199416443061, 0.11840792858520488, 0.12480497179179584, 0.16938523470620293, 0.11786900145454016, 0.12507689070712313, 0.1532666917792036, 0.11004196058126581, 0.1064233484185575, 0.08812607867410638, 0.058832638233575874, 0.050789181007787065, 0.10455283281822791, 0.051968110419742364, 0.08772668001515116, 0.11497698894445763, 0.04786212133567802, 0.041876217787479963, 0.17589830801267015, 0.09603146317344069, 0.14371410946114316, 0.2145778645320363, 0.10554670604758198, 0.1185389364941164, 0.19166202109521413, 0.10865288011791363, 0.12632909640513568, 0.16099949169003158, 0.09247864630111602, 0.14455629272207038, 0.15600191448228617, 0.1796755562451865, 0.15739988486877488, 0.15666941258653355, 0.07978944487518236, 0.1072064256597749, 0.12769639011644318, 0.13622828537663934, 0.46299207069620896, 0.17201464529189636, 0.11818944051724334, 0.07471640537533908, 0.1084237009286726, 0.1264693538342666, 0.16439183129952506, 0.5795437780446574, 0.11257584771111995, 0.06951379848745731, 0.03547534356569393, 0.15645011795938135, 0.15460491149198208, 0.3957878820193772, 0.09236286068074473, 0.2750864137239377, 0.32747803380696605, 0.18372388233280057, 0.18500275932960542, 0.3005978253325057, 0.24039387042395322, 0.26922515878973496, 0.29414279040540037, 0.2335949581798673, 0.2581284747752566, 0.040192085028308844, 0.037257636452864284, 0.048997891252437364, 0.03785946648893734, 0.0203939697387866, 0.03641925554820302, 0.04306654895558548, 0.022763463768328274, 0.04164928462017048]}, "mutation_prompt": null}
{"id": "7460e5ba-fa36-4071-aea0-603b939ca240", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "5ceccfbd-8cf6-4110-b97d-7e1bd7ac2215", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.18  # Adjusted initial sampling rate for better exploration\n        max_iterations = self.budget * 0.25  # Slightly adjusted exploration budget\n        shrink_factor = 0.93  # Fine-tuned shrink factor for smoother transition\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 14  # Adjusted candidate numbers for exploration-exploitation balance\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Refined exploitation scaling for improved local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Dynamic perturbation scaling with adaptive sampling enhances convergence by refining exploration-exploitation balance.", "configspace": "", "generation": 75, "fitness": 0.08486540232150326, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.11.", "error": "", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.886883263586352, 0.14426161063589227, 0.27278173845611764, 0.07517786943719074, 0.07278031775218019, 0.13420357767088664, 0.14879791941741838, 0.17747782823723623, 0.14920848806036136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049438663291815454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020662980466056635, 9.999999999998899e-05, 9.999999999998899e-05, 0.026487463437849912, 9.999999999998899e-05, 0.0019451271564663308, 0.0019989128984996274, 9.999999999998899e-05, 0.005689028419522235, 0.034401488825672843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050497244210822134, 0.029376823469410063, 0.029691044484027374, 0.036103610447386414, 0.05239515878501755, 0.04615815865401707, 0.03638295369594069, 0.052650171786922884, 0.0504570472741821, 0.17457922350365895, 9.999999999998899e-05, 9.999999999998899e-05, 0.053918589321264476, 0.14877282761062927, 0.025197457214238383, 0.019509479798405116, 9.999999999998899e-05, 0.12296666632209163, 0.10847626386422327, 0.030018184877236287, 0.024055349413368954, 0.04799721680141533, 9.999999999998899e-05, 9.999999999998899e-05, 0.04189389214517847, 9.999999999998899e-05, 9.999999999998899e-05, 0.15186787332057172, 9.999999999998899e-05, 9.999999999998899e-05, 0.2238893264030004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14647102546726964, 0.22232179518259576, 9.999999999998899e-05, 0.12783315935149053, 0.18598908715689733, 9.999999999998899e-05, 0.11837370513782475, 0.25558310844343535, 9.999999999998899e-05, 0.12970000381553204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05828715379437921, 0.04544088105144872, 0.17979477527934107, 0.062113018111735974, 0.012306342650380775, 0.021078726639345957, 0.15108198625710478, 0.02212902272431183, 9.999999999998899e-05, 0.24338758373351377, 0.038305942061774845, 9.999999999998899e-05, 0.15228802165425148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07273063777026323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484027172584208, 0.2633582328599917, 0.08049162521660869, 0.31310377014773716, 0.14416731027005159, 0.1145514110914101, 0.08245009414642424, 0.2705699591257399, 0.15515326594278156, 0.2722526499894299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11606427938188413, 0.16897486165068276, 0.3695055133058822, 0.10377996710855963, 0.12230410569270267, 0.1299565467739061, 0.06015659743691759, 0.0994498722927174, 0.09770470808621645, 0.11497759808081487, 0.09804892030617429, 0.10610893738183891, 0.14625925287601094, 0.07973266245537158, 0.11699771204313292, 0.1566338998518244, 0.07828859632677632, 0.09215340485555412, 0.05434408752779962, 0.04600839767417386, 0.033376382990105924, 0.08036644035189311, 0.01442322468619428, 0.08763203403966868, 0.07574852766403406, 0.0175310028151332, 0.024466047908596522, 0.2059702308756992, 0.07656967678307536, 0.13563094856227764, 0.2047711163537107, 0.07182175831104798, 0.12277508269027926, 0.22227149619762865, 0.07673703630757212, 0.1152899515038529, 0.1713745775642157, 9.999999999998899e-05, 0.15358092528709544, 0.17375907862481854, 0.19808912746816054, 0.16101025565933869, 0.14956496384454276, 9.999999999998899e-05, 0.14775676683764383, 0.12247751406125085, 0.13646847265424877, 0.19322393080583455, 0.17230213836432962, 0.10409634264251, 0.06138717917489811, 0.10813491017503452, 0.12582822894942414, 0.1661087911939414, 0.4897714724766047, 0.11258053941101187, 0.06584561624667185, 0.015838962254373645, 0.11631083398325259, 0.11243569079785176, 0.2943076933798112, 0.05779896823671693, 0.16838659111040666, 0.2538911795183523, 0.33115217009090836, 0.2568207247536174, 0.3301315636754526, 0.22936773057722115, 0.3002499833232003, 0.27210883261759633, 0.27932308965461816, 0.3204223295349048, 0.06251329473282463, 9.999999999998899e-05, 0.03549553316144283, 0.038470190557331585, 0.002429133497435232, 0.02203903950502628, 0.052644920370314874, 0.005357342326452796, 0.04493398524286607]}, "mutation_prompt": null}
{"id": "b0802f26-d30c-400c-b52d-bb0b32d2bd1d", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "617c2723-378a-4f44-99a7-e0f6cc43413c", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.17  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.26  # Refined exploration budget\n        shrink_factor = 0.95  # Fine-tuned shrink factor for smooth transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 12  # Altered candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.08 * shrink_factor)  # Slightly refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive sampling with strategic phase transition optimizes convergence by fine-tuning exploration-exploitation dynamics.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.7009994853150338, 0.5610306009982156, 0.6782093925189482, 0.33481254327468113, 0.3325287769354556, 0.5027277661303617, 0.676073860718524, 0.6556402847502891, 0.6271319745628369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1287014512757807, 0.041602626842299095, 9.999999999998899e-05, 0.021949243180300115, 0.020772085276671848, 9.999999999998899e-05, 0.049750534800812374, 0.03283285844022066, 0.023657757347740338, 0.040311619731649984, 0.03607918137386601, 0.027526516982336546, 0.032194546977244554, 0.02746258856332584, 0.029721480744428264, 0.04341142560133027, 0.015445834646218515, 0.021055214479442808, 0.03542847324988985, 0.0286548156039087, 0.02182539854008425, 0.03626275804457124, 0.026808949373456237, 0.029352991834951325, 0.5513698869695745, 0.5417282306767384, 0.5195862694606592, 0.5462617069364619, 0.5526463745657748, 0.5449508148300184, 0.5319180568864711, 0.5587064696179387, 0.5736464206165642, 0.5100809213480275, 0.15740168250228248, 0.12745913097164063, 0.255718108384307, 0.5147071486752013, 0.1761093666244904, 0.21636872814975527, 0.14026026066931585, 0.3085918118666451, 0.133941524551228, 0.08811100543337869, 0.09926349195098794, 0.15554594674184385, 0.09948876848574584, 0.10605586041226656, 0.12567612536077633, 0.11183765266582135, 0.11763721181578002, 0.1666850198133396, 0.14101318214274283, 0.11194429575917075, 0.2094052451264211, 0.1283010526868582, 0.11555001783961383, 0.22139531325162787, 0.10384613296999357, 0.20630884124952142, 0.2304957302677808, 0.15478477605932295, 0.12650972731388554, 0.22128341170573584, 0.4104762816612182, 0.12594992889446854, 0.2313534765417392, 0.09994735764222917, 0.19251045430917824, 9.999999999998899e-05, 9.999999999998899e-05, 0.029723528746614658, 0.047277939736333985, 0.007282538325856458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014530930370685535, 0.06598606382680972, 0.05990275262787914, 0.19504863526938676, 0.06782539547783728, 0.021571205648377112, 0.023700811757462525, 0.13521126113279047, 0.025913288127994982, 0.05912562705258806, 0.14065765190280677, 0.032871930553708295, 9.999999999998899e-05, 0.1273025251249419, 0.080516601754825, 9.999999999998899e-05, 9.999999999998899e-05, 0.12143720020927007, 0.07899629634195393, 0.04051142717257317, 0.07517516485737474, 0.10776558662126967, 0.09958007279288794, 0.08737203184322861, 0.03600827517115379, 0.06830315890180083, 0.04053274291468367, 0.09305524094215145, 0.5275617610415299, 0.30078963105846834, 0.5500234589308006, 0.36381449572320745, 0.28360526248600204, 0.28648221597946133, 0.5289926074438129, 0.4023275320638513, 0.507966525477907, 0.030263165124223446, 0.033877386665237874, 0.039044073058070894, 0.027489535825224287, 0.026327641501626697, 0.036937509937708946, 0.024540968099897364, 0.03730581782840914, 0.03231948587668376, 0.12320439327109833, 0.14582605865967913, 0.46394115930445257, 0.12151870151976052, 0.12720132373974358, 0.12047284142553161, 0.10987879376212417, 0.22148800967629434, 0.12052871109114172, 0.16101876264051007, 0.12103608207401462, 0.12405583885792038, 0.16675876368195608, 0.14311108575083964, 0.13703896971778873, 0.16038304107840573, 0.11726135971878993, 0.11851454474406342, 0.09625604901387508, 0.06976673479249895, 0.060708462757095405, 0.121528814648586, 0.0697365728200875, 0.08681108555424744, 0.13197157323665665, 0.06516816109821266, 0.0643867502343608, 0.19985611188641528, 0.12391354619662909, 0.13403515691136558, 0.19800701927675823, 0.12384953296689072, 0.15590051206353495, 0.1762892805105668, 0.108543298958923, 0.1394670983950258, 0.17135982732449373, 0.160072366174564, 0.15589282869671317, 0.1733648689952565, 0.16707031887625345, 0.17007147324710548, 0.15964032830579433, 0.11085407767271849, 0.16235223576185143, 0.12244668173198459, 0.1363774268513056, 0.7093042761216491, 0.17224762047778552, 0.11868007277051862, 0.08629248166330183, 0.13268979008555581, 0.1266627445912587, 0.16640631908909587, 0.7940335201479432, 0.11307269242471774, 0.08665190676902079, 0.05977929745357036, 0.19261338133061012, 0.18769797860141868, 0.5093243254298109, 0.11013097096155611, 0.29312366952433644, 0.25294193137774157, 0.18929452568903138, 0.20483405969134338, 0.22914485758491288, 0.24202125881899283, 0.19704044001385235, 0.26870837787279356, 0.25779527388568335, 0.23998410544358317, 0.062468103606448167, 0.0355802414400298, 0.051768001583316625, 0.05032737382592278, 0.03019392531762699, 0.03522897056220187, 0.05357943280050714, 0.0280105237902859, 0.041781150551093216]}, "mutation_prompt": null}
{"id": "7bb4dad2-4219-49f3-9375-96c12a385399", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16  # Slightly reduced initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.25  # Slightly reduced exploration budget\n        shrink_factor = 0.96  # Adjusted shrink factor for slightly faster transition\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15  # Adjusted candidate numbers to fine-tune exploration-exploitation\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.07 * shrink_factor)  # Refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Fine-tuned dynamic adaptation of candidate evaluations and sampling strategy enhances convergence efficiency.", "configspace": "", "generation": 78, "fitness": 0.17498403781715569, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "50e7f3a6-662f-46c9-9076-e261bfc82ca7", "metadata": {"aucs": [0.6261380521978385, 0.6127371080680051, 0.6772068414225965, 0.39661127166330945, 0.49468334337688147, 0.6041107060033196, 0.6391293598703514, 0.6092098097572239, 0.6786498673254762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029908574427413792, 0.023997089768583058, 9.999999999998899e-05, 9.999999999998899e-05, 0.041909147007233694, 9.999999999998899e-05, 0.05562120059096465, 0.0210881780390777, 0.020600844003070606, 0.03637595936815219, 0.0302798373890919, 0.027854970586530192, 0.031012106809440776, 0.03566863408047938, 0.037194325720736776, 0.06897177146920841, 0.023893508240699468, 0.021447733599105234, 0.03568548105836977, 0.019177340139552634, 0.02496590910048413, 0.03049992239361854, 0.020997843819923756, 0.03196925028274633, 0.576177137591741, 0.5653343962805621, 0.5346950422687827, 0.5594874774105564, 0.5826833196452276, 0.5742265480910314, 0.5641757081922467, 0.5790879471309252, 0.5954227902554572, 0.4757070002929521, 0.16431621432362897, 0.16439579220525213, 0.2771419979084596, 0.4830116117937957, 0.20283624743230821, 0.24126561440575878, 0.15325756228917542, 0.34583976217336065, 0.16949098060228884, 0.1182641789086325, 0.12561221829224722, 0.1411630883270586, 0.1175187630518365, 0.11391403033572223, 0.15003699947549742, 0.13661522075947763, 0.10643051416919846, 0.21413242298543345, 0.1950768712733465, 0.15431257932092413, 0.23070637362015378, 0.1757471385910112, 0.11666673061058186, 0.2070873909977209, 0.11208204574441827, 0.19405625519996894, 0.2342255159033777, 0.15638754004328004, 0.12745652183346468, 0.21559136695003522, 0.3241736885914802, 0.12869772348755648, 0.23926012019002962, 0.30583743170785094, 0.19845689201395744, 0.00415899426099986, 9.999999999998899e-05, 0.042186924515031365, 0.010456309716421641, 0.01340112328503762, 9.999999999998899e-05, 0.002973007238414316, 9.999999999998899e-05, 0.0413012236216076, 0.07091510006851276, 0.04867351610104764, 0.18759779246849095, 0.0721835772172742, 0.021048498295648477, 0.028503221823029556, 0.19650495663833134, 0.02787669618646471, 0.055640768563029686, 0.08475030413783913, 0.027711380362197446, 0.004819700039129238, 0.10062732866903101, 0.06791077048856409, 9.999999999998899e-05, 0.013451973203590373, 0.09275339274324657, 0.06349003293329802, 0.06265034391835467, 0.07566263336598422, 0.11323088448883667, 0.09597811401451928, 0.09100797916562298, 0.043907574297291974, 0.08504655165385788, 0.043131262707757245, 0.08642786126775337, 0.5529055460284384, 0.3175998231176561, 0.5299980153900724, 0.43162128880472206, 0.3000181771596868, 0.3175440880190816, 0.5430916511798844, 0.4129944229982738, 0.5356548717788854, 0.03033219183500846, 0.03338410542019643, 0.04079106108963804, 0.03508875413973034, 0.04494196311663523, 0.04166128458032092, 0.036170444170787075, 0.04389848198544655, 0.03995404939131808, 0.13700259341507937, 0.16674119306146562, 0.22978786183682132, 0.12441004996749983, 0.23896058533991205, 0.17940736289296744, 0.12616520517492424, 0.2216128146310069, 0.13180688744502222, 0.16109577446970014, 0.13416304112068478, 0.13820812771901692, 0.18702980411508752, 0.1318607125994733, 0.13295714441454387, 0.16427054753846804, 0.13401026462086718, 0.13045873982766387, 0.12222166791361411, 0.06257156958052024, 0.06054428887596841, 0.12425385366717878, 0.07896762004001101, 0.08588305332414914, 0.1131938765993662, 0.07543600720402244, 0.058379650417862416, 0.19249153308748268, 0.11669936273370585, 0.13897094222914474, 0.18338362588857404, 0.12622959661107802, 0.14636500128777408, 0.161701512090773, 0.13482325440746412, 0.15088023432495778, 0.15996513549877123, 0.19063389752652482, 0.16353112482767806, 0.16429838025654664, 0.19823238039932733, 0.1625731968754479, 0.1590238031840001, 0.1453885253611299, 0.15488016925759296, 0.12245456884243522, 0.13637927867694066, 0.8629509160930943, 0.17224608216847792, 0.1319467298946343, 0.0835810240614645, 0.1097692526278442, 0.1268367546517044, 0.1665374158254288, 0.734469523736287, 0.11290250599822793, 0.07949000230022008, 0.04875774579941172, 0.2004082617020162, 0.1958941522452451, 0.4988656554220482, 0.11272926035558961, 0.33162852116890085, 0.24002729714519544, 0.23316879991256811, 0.22915537770108263, 0.22970672745998322, 0.22481691003859683, 0.1940666252296609, 0.2469132818177039, 0.2359475474545346, 0.2242282489826093, 0.05093474405110787, 0.044729482251920305, 0.040278206886158796, 0.04475694544399067, 0.025904768488612895, 0.04289814903812861, 0.05671872141970147, 0.03772919376554551, 0.04496273826843189]}, "mutation_prompt": null}
{"id": "56877533-5eab-48c2-9441-0dab649633ef", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n        adapt_factor = 0.1  # New adaptive factor for perturbation scaling\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n                    sampling_rate *= (1 + adapt_factor)  # Adapt based on improvement\n                else:\n                    sampling_rate *= (1 - adapt_factor)  # Decrease when no improvement\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.07 * shrink_factor)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Introduced adaptive perturbation scale based on fitness improvement to enhance convergence.", "configspace": "", "generation": 79, "fitness": 0.026355811813674048, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.04.", "error": "", "parent_id": "7bb4dad2-4219-49f3-9375-96c12a385399", "metadata": {"aucs": [0.0771372379628007, 0.03793137278275516, 0.06590672815849996, 0.011320240427827644, 0.006983540596753324, 0.03206846751889714, 0.0357484380664147, 0.05085429952001708, 0.035909719438441456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003119346185316285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006211638678301656, 0.0034457104842354758, 9.999999999998899e-05, 9.999999999998899e-05, 0.01594518848319182, 0.002864208556447201, 9.999999999998899e-05, 0.017229849421780297, 0.0036470707392516344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008992027235646627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05436699861402372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06232526142504413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01872535180673529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01528615777516551, 9.999999999998899e-05, 0.1290849254650127, 0.07269318076284659, 9.999999999998899e-05, 9.999999999998899e-05, 0.10520355249883617, 0.05693683412035078, 0.03402217412719366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05154486202494135, 0.0814632195128906, 0.0974059539431118, 0.03642664853407318, 0.05756356611830937, 0.04990971541877187, 0.03788965079696449, 0.05364972196736051, 0.03542547956446229, 0.1119132773294339, 0.08387012002736682, 0.09552923630667887, 0.14597612525922288, 0.06339441249746014, 0.09956696652450425, 0.13675110047617522, 0.06739471257492191, 0.08789881342898276, 0.04356715800942079, 0.039361972449107774, 0.024312766635161798, 0.07357030020453625, 0.0017550002088312366, 0.055117545972622195, 0.06790328127051981, 0.015426738104329485, 0.022261369804106312, 0.13417445058131017, 0.026418406021026186, 0.10637894758664734, 0.16377551021410364, 0.030159928684123538, 0.0606570686472796, 0.18644230627028913, 0.040547930928571785, 0.08973139739710312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04381738726149509, 0.015425062902846731, 0.01672984525798238, 0.05665985215314917, 0.015946022058405784, 0.01903070553620745, 0.047381994859340915, 0.06698025651732986, 0.05169078323314791, 0.018971023493918104, 0.07271027732470248, 0.008528321733415778, 0.011694336851195697, 0.01114788337043593, 0.014758590087892154, 0.014181888488458916, 0.012836202567871435, 0.017299757911082625, 0.15045146377484575, 0.14671474841947074, 0.16645200204726096, 0.17013946785954936, 0.13739760799803602, 0.16945967375491833, 0.21784906464000775, 0.15104416700214074, 0.14849828436455537, 0.031237988387163185, 9.999999999998899e-05, 0.02674751615658366, 0.023828664613922634, 9.999999999998899e-05, 0.011033639034316756, 0.030473574447902663, 0.006937111982829425, 0.037705003514704516]}, "mutation_prompt": null}
{"id": "5aa734df-93ab-43f5-85c4-09e8cb87fac3", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.15  # Adjusted initial sampling rate for refined exploration\n        max_iterations = self.budget * 0.3  # Increased exploration budget for better global search\n        shrink_factor = 0.95  # Adjusted shrink factor for smoother transition\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 14  # Slightly more diverse candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate *= (1.05 * shrink_factor)  # Refined exploitation scaling for better local search\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Adaptive rate adjustment and candidate diversity enhancement for improved convergence.", "configspace": "", "generation": 80, "fitness": 0.10592051784090521, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "7bb4dad2-4219-49f3-9375-96c12a385399", "metadata": {"aucs": [0.8072255887909793, 0.2367623417629825, 0.7736363456207634, 0.09868190809224175, 0.09874384988877227, 0.19389168884826435, 0.3507166486731339, 0.6373294613403941, 0.2532125088061662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15871496873263846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01998182452901076, 9.999999999998899e-05, 9.999999999998899e-05, 0.01587954396086555, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019986946387662297, 9.999999999998899e-05, 9.999999999998899e-05, 0.023507204476555854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060018868085161325, 0.03451100135631857, 0.03693136802886254, 0.04099121700333652, 0.05912985102396673, 0.05201177119748157, 0.03918557517379451, 0.05951823300432246, 0.059976511253647335, 0.5418926786852509, 9.999999999998899e-05, 0.0013826516429824576, 0.07466482208782743, 0.5506905065880237, 0.03599921729416822, 0.04683873644256842, 9.999999999998899e-05, 0.17523327978069303, 0.12332806342395541, 9.999999999998899e-05, 0.040291627545746445, 0.0007387319967711026, 9.999999999998899e-05, 9.999999999998899e-05, 0.04611591794149261, 9.999999999998899e-05, 9.999999999998899e-05, 0.12275777929790255, 0.03233698904032134, 0.019540485347715575, 0.22048043141357787, 0.044032772326987435, 0.010479055364740253, 0.23051647225439187, 9.999999999998899e-05, 0.18651121797524317, 0.23411150530943614, 0.11888279205669261, 0.1269590924447206, 0.23564155441262924, 0.2685463077249862, 0.12467802109977422, 0.2429641835112547, 0.007107160481660713, 0.15616694505014894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01224134654642095, 0.014443471121920792, 9.999999999998899e-05, 0.003853278084917977, 9.999999999998899e-05, 9.999999999998899e-05, 0.06318624077746537, 0.05414892431194218, 0.1748544972169862, 0.06792558973850915, 0.017313895580060135, 0.016422288612595315, 0.1634940144427346, 0.023776561745511016, 0.034741061598921985, 0.2718711627117233, 0.037402573397019134, 9.999999999998899e-05, 0.16704030937156766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1396211261347764, 0.0767038980762762, 9.999999999998899e-05, 9.999999999998899e-05, 0.009444387783279162, 0.014390390347082893, 0.010973239690490466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08553381818056627, 0.5484638410434071, 0.11028555691714848, 0.5486069279709254, 0.18418731821070455, 0.12732771405859078, 0.1148078604838505, 0.5528049738549499, 0.20307371957544196, 0.4748158145209326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10664119591311827, 0.16899257641204768, 0.2184359501096379, 0.11370238291086066, 0.11075245117972077, 0.15150652919211804, 0.07231388539889705, 0.2216503589692045, 0.1323140016551253, 0.11500271902332737, 0.09785257444356599, 0.10606140872154379, 0.14622755605086146, 0.0795139877258898, 0.11698551336497598, 0.15170069385467455, 0.07843079676993825, 0.09217021140547077, 0.052223163398355754, 0.04265116249583334, 0.03581834448876975, 0.08204433988042459, 0.008957848753270992, 0.08691167053936533, 0.07979374315105703, 0.0199000015312919, 0.022871131548332424, 0.20231873031531755, 0.0636869042832896, 0.10924505306963261, 0.17815008944755395, 0.05882981345319349, 0.11605714697848057, 0.19755633108193216, 0.10302527542194151, 0.13587695334299366, 0.16401097347334148, 0.10060994035610038, 0.14870205006556902, 0.16793396474350997, 0.1761444609444457, 0.17491868524456877, 0.15322615574508158, 9.999999999998899e-05, 0.14886730616739352, 0.12217929503436975, 0.13607476955372455, 0.33353484963522795, 0.17198965818473932, 0.10519951911810677, 0.061258722880247474, 0.1078574100081311, 0.1266970081289155, 0.16518178643219994, 0.7501617843387476, 0.11280538989427513, 0.07775609543090722, 0.01581223256812314, 0.16056440049320753, 0.14746025519768213, 0.04618028631331039, 0.057453043164950035, 0.17026584103166753, 0.20207668334636975, 0.22354567267850012, 0.20487918723296483, 0.18527521559768645, 0.3000374640580188, 0.28000569395887565, 0.24455172146360116, 0.3147950905329394, 0.2661499914570977, 0.03477513309285274, 0.002052059531904682, 0.03279661781690102, 0.03617097776803857, 0.001895746519353092, 0.01678044000251744, 0.0419444759492561, 0.012545329638028346, 0.03883419762325502]}, "mutation_prompt": null}
{"id": "a29d3444-f758-4a53-9136-6f4407161971", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15  # New adaptive rate for perturbation control\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)  # Adaptive control\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Introduction of adaptive perturbation control to balance exploration and exploitation more effectively.", "configspace": "", "generation": 81, "fitness": 0.17703795606217956, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "7bb4dad2-4219-49f3-9375-96c12a385399", "metadata": {"aucs": [0.6261380521978385, 0.6127371080680051, 0.6772068414225965, 0.32969046778148015, 0.30241654331680723, 0.5987457433430885, 0.6160568218163354, 0.6092098097572239, 0.6045166348099534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020838115629306597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06856453259983097, 0.04002086470335531, 0.057678551599736005, 0.05530903984042457, 0.04208641748470732, 0.0441226439232949, 0.037740005313818825, 0.0549312045040915, 0.043795739460293914, 0.06457034479065171, 0.03941681102070416, 0.03541003112232044, 0.060893777611539135, 0.039423155458333525, 0.03936187703247829, 0.05722025209697568, 0.0347864661050209, 0.03916607338663147, 0.7101453768356356, 0.7004175736184076, 0.6988369546307907, 0.7125464651061562, 0.7122551819992746, 0.7075220224604417, 0.7087518501171718, 0.7290935373942464, 0.7272605661109319, 0.45497469387368605, 0.14206930422755937, 0.1496174799537604, 0.2152728139805824, 0.4569258190757718, 0.1501746706708189, 0.17990223974218422, 0.15366690447837061, 0.22959331769490932, 0.18802413624731384, 0.12426789362853019, 0.1312412356814493, 0.21282713716376833, 0.12947418652368892, 0.17910605087600784, 0.16744231283210043, 0.12402133069221255, 0.12427337285837181, 0.19478157763986625, 0.17379816256015934, 0.11836187900511319, 0.23070637362015378, 0.15436856682385658, 0.11064583092824198, 0.19364506925321234, 0.09971934059883392, 0.17535333798924457, 0.2234042815464109, 0.12708471635056262, 0.12741983246820543, 0.20860154010905163, 0.3241736885914802, 0.12825067703105308, 0.2274090366550663, 0.30583743170785094, 0.17563060137543218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009862585426495984, 0.010633933839285792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405272088309977, 0.04859586719257991, 0.18339642700308767, 0.07689886097551879, 0.022874640583976924, 0.029344126304230334, 0.1930809281312862, 0.02884010880903498, 0.05498795752178398, 0.08475030413783913, 0.02447876729934617, 9.999999999998899e-05, 0.10062732866903101, 0.058902546115205734, 9.999999999998899e-05, 9.999999999998899e-05, 0.06963125287155558, 0.06349003293329802, 0.06265034391835467, 0.06587703715285265, 0.11323088448883667, 0.09597811401451928, 0.09100797916562298, 0.05101296580851611, 0.04940251327792122, 0.029316138349385956, 0.0862069287362065, 0.5157321044643707, 0.3011347804130221, 0.5299085389181735, 0.39216364502932577, 0.2649038913444005, 0.27449735416908927, 0.5029622864974421, 0.3367035860451044, 0.4968586437785232, 0.05477484577024028, 0.040085503823577895, 0.05034441745330165, 0.035453090390016206, 0.060926378765104316, 0.052612647094631426, 0.05688621510871539, 0.049115786751643964, 0.06613831572331419, 0.12827233306519825, 0.16674119306146562, 0.22978786183682132, 0.12519723615976885, 0.23896058533991205, 0.17940736289296744, 0.1093789145280889, 0.2193825274683987, 0.12790763898705915, 0.18223908460051919, 0.15023859032425535, 0.1543411583120785, 0.1853236484005013, 0.15743272284217869, 0.14859159124429355, 0.14619417721571004, 0.12404155179821175, 0.12182945541399937, 0.11540568273721763, 0.0919475018766931, 0.07549036878342408, 0.11925315727512242, 0.08480060573035753, 0.09058539395716447, 0.14319212021964178, 0.07378564112645547, 0.0809860138379721, 0.19735656024972326, 0.13367050032395822, 0.1513987729799272, 0.17587660540788674, 0.1303160860617254, 0.17194708624595023, 0.1837313384165643, 0.13211281082603565, 0.1633688030043089, 0.15995033343186993, 0.18010052681738709, 0.16353112482767806, 0.16422934875004191, 0.19823238039932733, 0.1625303909936474, 0.1632030526888597, 0.14335165646692516, 0.1538730729796296, 0.15081300100098283, 0.13637927867694066, 0.8629509160930943, 0.1769119015637325, 0.13154937924825483, 0.08702540460204577, 0.1090013206745496, 0.12683625879674965, 0.16653737248814993, 0.7124255893329468, 0.11290213910754432, 0.08531808943306618, 0.06756864563603848, 0.2004033135397224, 0.1937772908042401, 0.39098591738125643, 0.12349071438192827, 0.2829410273601839, 0.24002729714519544, 0.23316879991256811, 0.22915537770108263, 0.22970672745998322, 0.22063450131769846, 0.19101788260181574, 0.2371080953142678, 0.23455809653667725, 0.2242282489826093, 0.05390558287205749, 0.05134050459244788, 0.05629916288032166, 0.04074850452753542, 0.04038640768450519, 0.04696092617108971, 0.06241746556838135, 0.04403781838556187, 0.06410135567498365]}, "mutation_prompt": null}
{"id": "d3d9d578-ad03-46c0-81da-edab8f2b646d", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15\n        max_iterations = self.budget * 0.3  # Extended exploration phase\n        shrink_factor = 0.95  # Slightly adjusted shrink factor\n\n        while evals < self.budget:\n            if exploration_phase:\n                dynamic_candidates = int(40 - 25 * (evals / max_iterations))  # Dynamic adjustment\n            else:\n                dynamic_candidates = 20\n            \n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Introducing dynamic candidate adjustment and slight exploration phase extension for improved convergence.", "configspace": "", "generation": 82, "fitness": 0.1679187773573473, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "a29d3444-f758-4a53-9136-6f4407161971", "metadata": {"aucs": [0.78737190068138, 0.3284764899134247, 0.8172955295368142, 0.28650782839234856, 0.28748107758955044, 0.36497511475498634, 0.34395438572356973, 0.7715695151402333, 0.34465923650222774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08587151029549711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049632100168336746, 0.03956279512554994, 0.03839315701108714, 0.033660760074407325, 0.04489179266869525, 0.043125984868399025, 0.040817706587434666, 0.053924928878455125, 0.08354353619830124, 0.055621640113408644, 0.039289042123640816, 0.022968907832849217, 0.04606855654954711, 0.03554484550263637, 0.02078554059320925, 0.04274526704534842, 0.0425091320110319, 0.03236344205191488, 0.6675723560732738, 0.6279551478165927, 0.6160312051371315, 0.6332825438653807, 0.6337369450678032, 0.6372636978336046, 0.6366269349848299, 0.6470389883247425, 0.6669600767417195, 0.6317920691294715, 0.15912741914605688, 0.1482158976552137, 0.209484600326297, 0.5906224121580856, 0.18579162942144978, 0.19681645607940512, 0.15276280188680558, 0.19072697446510023, 0.15703852750962544, 0.12657334989190272, 0.11799509505255956, 0.20322726886869036, 0.10995200429213381, 0.13263007467274168, 0.1587439957003708, 0.14107642439893275, 0.17700316083158596, 0.1488565223047199, 0.11145509282552934, 0.09989295056736447, 0.21144027485421846, 0.10847227776675195, 0.09059335033277871, 0.20698964442291545, 0.10395280318443367, 0.17214668763148877, 0.20997132384798545, 0.12010159369670514, 0.12564050366027746, 0.21321169327259082, 0.2531117251297289, 0.1244399718040955, 0.2362960146386558, 0.1153966328086351, 0.14338983216750079, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028288408342243, 0.013755973993348602, 9.999999999998899e-05, 9.999999999998899e-05, 0.0050427691983248035, 9.999999999998899e-05, 9.999999999998899e-05, 0.05898167433859269, 0.06414265515781659, 0.16583138758595994, 0.07723354284105677, 0.03780171393476972, 0.022137740009579243, 0.20865530266707888, 0.03274125601189948, 0.05632252527737236, 0.2757484848274978, 0.04439809133667694, 9.999999999998899e-05, 0.15030882189315176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15728323682567247, 0.06964842538225113, 0.0354632066810473, 0.05298949907600925, 0.05713454501624349, 0.05904287011638876, 0.04866918568759515, 0.04349351542061941, 0.048858864336384755, 0.03624065994780579, 0.08227833944613072, 0.4873130025908481, 0.293423541507433, 0.5288402702367507, 0.30576445391470697, 0.31026104450754677, 0.32104751420424504, 0.4991718281748089, 0.3361622222769751, 0.5238011083539833, 0.06482619408199475, 0.03685466998982634, 0.05508315381439466, 0.03525884900847942, 0.0391436460322484, 0.054801171796656445, 0.04567243052133785, 0.04444772981963219, 0.049016234267618475, 0.11543937669919246, 0.16633936564304708, 0.24169532217884193, 0.21464602233552288, 0.17477983892715787, 0.14617116394422935, 0.12813789857159918, 0.22682937165955153, 0.12150927607962658, 0.18315016237066584, 0.16010806045769133, 0.14472796484606043, 0.20436997684666602, 0.15954126054989115, 0.12867264006338897, 0.16668530173044438, 0.11874310517967002, 0.12608826104150628, 0.12767862862093649, 0.07009712844193694, 0.07049622165401126, 0.12348681328961753, 0.09705263402587205, 0.0885294112439362, 0.11639033656469, 0.06340564214148303, 0.07884328949677488, 0.19196059118879238, 0.1515236072971209, 0.1572040128622233, 0.2058845086043638, 0.13937646324668818, 0.16457661785486466, 0.20855525606760106, 0.13315847875804687, 0.15743729194166756, 0.16143428960103334, 0.15126699222861173, 0.17314034769958053, 0.16792903230315792, 0.1642433787248614, 0.16793730172193277, 0.17970360952111675, 0.11731741020500064, 0.15055541141443995, 0.13720616957693854, 0.13604741926956831, 0.5338194439349093, 0.1995108780311864, 0.11199458239616311, 0.08896515077732459, 0.10923388390676314, 0.13327916497065784, 0.16804242812082626, 0.5521721558639551, 0.11279772812484756, 0.1130114848450241, 0.08075406458861656, 0.18559834042714984, 0.18593908698128425, 0.10539071580490822, 0.12097853685293081, 0.296143492926231, 0.30337845059446733, 0.20004761248797198, 0.23119437408654364, 0.24619556655830943, 0.20337220009631707, 0.21887916582278544, 0.2332327510494333, 0.2625598421034272, 0.32511735264985253, 0.06137370706540246, 0.042968785203061244, 0.048163445445407516, 0.05476657465748791, 0.05036683455325952, 0.08315335093137988, 0.05761160081386729, 0.04198167668538022, 0.05364794601311629]}, "mutation_prompt": null}
{"id": "3957deae-c293-4d50-961c-475045e0a3b8", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15  # New adaptive rate for perturbation control\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)  # Adaptive control\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Introduction of adaptive perturbation control to balance exploration and exploitation more effectively.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a29d3444-f758-4a53-9136-6f4407161971", "metadata": {"aucs": [0.6261380521978385, 0.6127371080680051, 0.6772068414225965, 0.32969046778148015, 0.30241654331680723, 0.5987457433430885, 0.6160568218163354, 0.6092098097572239, 0.6045166348099534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020838115629306597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06856453259983097, 0.04002086470335531, 0.057678551599736005, 0.05530903984042457, 0.04208641748470732, 0.0441226439232949, 0.037740005313818825, 0.0549312045040915, 0.043795739460293914, 0.06457034479065171, 0.03941681102070416, 0.03541003112232044, 0.060893777611539135, 0.039423155458333525, 0.03936187703247829, 0.05722025209697568, 0.0347864661050209, 0.03916607338663147, 0.7101453768356356, 0.7004175736184076, 0.6988369546307907, 0.7125464651061562, 0.7122551819992746, 0.7075220224604417, 0.7087518501171718, 0.7290935373942464, 0.7272605661109319, 0.45497469387368605, 0.14206930422755937, 0.1496174799537604, 0.2152728139805824, 0.4569258190757718, 0.1501746706708189, 0.17990223974218422, 0.15366690447837061, 0.22959331769490932, 0.18802413624731384, 0.12426789362853019, 0.1312412356814493, 0.21282713716376833, 0.12947418652368892, 0.17910605087600784, 0.16744231283210043, 0.12402133069221255, 0.12427337285837181, 0.19478157763986625, 0.17379816256015934, 0.11836187900511319, 0.23070637362015378, 0.15436856682385658, 0.11064583092824198, 0.19364506925321234, 0.09971934059883392, 0.17535333798924457, 0.2234042815464109, 0.12708471635056262, 0.12741983246820543, 0.20860154010905163, 0.3241736885914802, 0.12825067703105308, 0.2274090366550663, 0.30583743170785094, 0.17563060137543218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009862585426495984, 0.010633933839285792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405272088309977, 0.04859586719257991, 0.18339642700308767, 0.07689886097551879, 0.022874640583976924, 0.029344126304230334, 0.1930809281312862, 0.02884010880903498, 0.05498795752178398, 0.08475030413783913, 0.02447876729934617, 9.999999999998899e-05, 0.10062732866903101, 0.058902546115205734, 9.999999999998899e-05, 9.999999999998899e-05, 0.06963125287155558, 0.06349003293329802, 0.06265034391835467, 0.06587703715285265, 0.11323088448883667, 0.09597811401451928, 0.09100797916562298, 0.05101296580851611, 0.04940251327792122, 0.029316138349385956, 0.0862069287362065, 0.5157321044643707, 0.3011347804130221, 0.5299085389181735, 0.39216364502932577, 0.2649038913444005, 0.27449735416908927, 0.5029622864974421, 0.3367035860451044, 0.4968586437785232, 0.05477484577024028, 0.040085503823577895, 0.05034441745330165, 0.035453090390016206, 0.060926378765104316, 0.052612647094631426, 0.05688621510871539, 0.049115786751643964, 0.06613831572331419, 0.12827233306519825, 0.16674119306146562, 0.22978786183682132, 0.12519723615976885, 0.23896058533991205, 0.17940736289296744, 0.1093789145280889, 0.2193825274683987, 0.12790763898705915, 0.18223908460051919, 0.15023859032425535, 0.1543411583120785, 0.1853236484005013, 0.15743272284217869, 0.14859159124429355, 0.14619417721571004, 0.12404155179821175, 0.12182945541399937, 0.11540568273721763, 0.0919475018766931, 0.07549036878342408, 0.11925315727512242, 0.08480060573035753, 0.09058539395716447, 0.14319212021964178, 0.07378564112645547, 0.0809860138379721, 0.19735656024972326, 0.13367050032395822, 0.1513987729799272, 0.17587660540788674, 0.1303160860617254, 0.17194708624595023, 0.1837313384165643, 0.13211281082603565, 0.1633688030043089, 0.15995033343186993, 0.18010052681738709, 0.16353112482767806, 0.16422934875004191, 0.19823238039932733, 0.1625303909936474, 0.1632030526888597, 0.14335165646692516, 0.1538730729796296, 0.15081300100098283, 0.13637927867694066, 0.8629509160930943, 0.1769119015637325, 0.13154937924825483, 0.08702540460204577, 0.1090013206745496, 0.12683625879674965, 0.16653737248814993, 0.7124255893329468, 0.11290213910754432, 0.08531808943306618, 0.06756864563603848, 0.2004033135397224, 0.1937772908042401, 0.39098591738125643, 0.12349071438192827, 0.2829410273601839, 0.24002729714519544, 0.23316879991256811, 0.22915537770108263, 0.22970672745998322, 0.22063450131769846, 0.19101788260181574, 0.2371080953142678, 0.23455809653667725, 0.2242282489826093, 0.05390558287205749, 0.05134050459244788, 0.05629916288032166, 0.04074850452753542, 0.04038640768450519, 0.04696092617108971, 0.06241746556838135, 0.04403781838556187, 0.06410135567498365]}, "mutation_prompt": null}
{"id": "8d179978-35e4-4921-81ae-bb6a5b45477a", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15  # New adaptive rate for perturbation control\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)  # Adaptive control\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates", "name": "EnhancedADSO", "description": "Introduction of adaptive perturbation control to balance exploration and exploitation more effectively.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a29d3444-f758-4a53-9136-6f4407161971", "metadata": {"aucs": [0.6261380521978385, 0.6127371080680051, 0.6772068414225965, 0.32969046778148015, 0.30241654331680723, 0.5987457433430885, 0.6160568218163354, 0.6092098097572239, 0.6045166348099534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020838115629306597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06856453259983097, 0.04002086470335531, 0.057678551599736005, 0.05530903984042457, 0.04208641748470732, 0.0441226439232949, 0.037740005313818825, 0.0549312045040915, 0.043795739460293914, 0.06457034479065171, 0.03941681102070416, 0.03541003112232044, 0.060893777611539135, 0.039423155458333525, 0.03936187703247829, 0.05722025209697568, 0.0347864661050209, 0.03916607338663147, 0.7101453768356356, 0.7004175736184076, 0.6988369546307907, 0.7125464651061562, 0.7122551819992746, 0.7075220224604417, 0.7087518501171718, 0.7290935373942464, 0.7272605661109319, 0.45497469387368605, 0.14206930422755937, 0.1496174799537604, 0.2152728139805824, 0.4569258190757718, 0.1501746706708189, 0.17990223974218422, 0.15366690447837061, 0.22959331769490932, 0.18802413624731384, 0.12426789362853019, 0.1312412356814493, 0.21282713716376833, 0.12947418652368892, 0.17910605087600784, 0.16744231283210043, 0.12402133069221255, 0.12427337285837181, 0.19478157763986625, 0.17379816256015934, 0.11836187900511319, 0.23070637362015378, 0.15436856682385658, 0.11064583092824198, 0.19364506925321234, 0.09971934059883392, 0.17535333798924457, 0.2234042815464109, 0.12708471635056262, 0.12741983246820543, 0.20860154010905163, 0.3241736885914802, 0.12825067703105308, 0.2274090366550663, 0.30583743170785094, 0.17563060137543218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009862585426495984, 0.010633933839285792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405272088309977, 0.04859586719257991, 0.18339642700308767, 0.07689886097551879, 0.022874640583976924, 0.029344126304230334, 0.1930809281312862, 0.02884010880903498, 0.05498795752178398, 0.08475030413783913, 0.02447876729934617, 9.999999999998899e-05, 0.10062732866903101, 0.058902546115205734, 9.999999999998899e-05, 9.999999999998899e-05, 0.06963125287155558, 0.06349003293329802, 0.06265034391835467, 0.06587703715285265, 0.11323088448883667, 0.09597811401451928, 0.09100797916562298, 0.05101296580851611, 0.04940251327792122, 0.029316138349385956, 0.0862069287362065, 0.5157321044643707, 0.3011347804130221, 0.5299085389181735, 0.39216364502932577, 0.2649038913444005, 0.27449735416908927, 0.5029622864974421, 0.3367035860451044, 0.4968586437785232, 0.05477484577024028, 0.040085503823577895, 0.05034441745330165, 0.035453090390016206, 0.060926378765104316, 0.052612647094631426, 0.05688621510871539, 0.049115786751643964, 0.06613831572331419, 0.12827233306519825, 0.16674119306146562, 0.22978786183682132, 0.12519723615976885, 0.23896058533991205, 0.17940736289296744, 0.1093789145280889, 0.2193825274683987, 0.12790763898705915, 0.18223908460051919, 0.15023859032425535, 0.1543411583120785, 0.1853236484005013, 0.15743272284217869, 0.14859159124429355, 0.14619417721571004, 0.12404155179821175, 0.12182945541399937, 0.11540568273721763, 0.0919475018766931, 0.07549036878342408, 0.11925315727512242, 0.08480060573035753, 0.09058539395716447, 0.14319212021964178, 0.07378564112645547, 0.0809860138379721, 0.19735656024972326, 0.13367050032395822, 0.1513987729799272, 0.17587660540788674, 0.1303160860617254, 0.17194708624595023, 0.1837313384165643, 0.13211281082603565, 0.1633688030043089, 0.15995033343186993, 0.18010052681738709, 0.16353112482767806, 0.16422934875004191, 0.19823238039932733, 0.1625303909936474, 0.1632030526888597, 0.14335165646692516, 0.1538730729796296, 0.15081300100098283, 0.13637927867694066, 0.8629509160930943, 0.1769119015637325, 0.13154937924825483, 0.08702540460204577, 0.1090013206745496, 0.12683625879674965, 0.16653737248814993, 0.7124255893329468, 0.11290213910754432, 0.08531808943306618, 0.06756864563603848, 0.2004033135397224, 0.1937772908042401, 0.39098591738125643, 0.12349071438192827, 0.2829410273601839, 0.24002729714519544, 0.23316879991256811, 0.22915537770108263, 0.22970672745998322, 0.22063450131769846, 0.19101788260181574, 0.2371080953142678, 0.23455809653667725, 0.2242282489826093, 0.05390558287205749, 0.05134050459244788, 0.05629916288032166, 0.04074850452753542, 0.04038640768450519, 0.04696092617108971, 0.06241746556838135, 0.04403781838556187, 0.06410135567498365]}, "mutation_prompt": null}
{"id": "998fe9f8-1835-43cc-a9a7-b48c7923c8ef", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15  # New adaptive rate for perturbation control\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)  \n\n            # Introducing chaotic adaptation\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n    \n    def _generate_chaotic_sequence(self, length):\n        # Logistic map to generate chaotic sequence\n        sequence = np.zeros(length)\n        sequence[0] = 0.7  # Initial value (could be tuned)\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence", "name": "EnhancedADSO", "description": "Introduction of chaotic map-based sampling rate adaptation to improve convergence speed.", "configspace": "", "generation": 85, "fitness": 0.1801869645244079, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "a29d3444-f758-4a53-9136-6f4407161971", "metadata": {"aucs": [0.6001908951578911, 0.5909131170148251, 0.66955196171655, 0.3034564924175799, 0.31613215809233564, 0.6105023770926609, 0.6074344187419268, 0.6047881263163415, 0.58150023995614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011552386343945953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057129841920875, 0.04670528159370246, 0.03904377291821037, 0.07118405597254607, 0.041291450638855864, 0.04067169532509629, 0.045396179185758445, 0.05097511251601994, 0.05348941970206156, 0.05862823590970112, 0.022245473415371864, 0.05396846028597446, 0.052314555613122704, 0.033934491933678146, 0.035494498095211435, 0.03508892511659001, 0.03762420849893755, 0.031560947877425916, 0.71967954885036, 0.706659965757997, 0.7023122697516085, 0.7141771457793802, 0.716125510029666, 0.7092687635402258, 0.7102597416927703, 0.7347549110265486, 0.7288416671906967, 0.4958594809242931, 0.15559448568853929, 0.1577213056428013, 0.1847166143541219, 0.44858838264380396, 0.16908620373394367, 0.2006935798794791, 0.16903387994988972, 0.4514576826049459, 0.15949032190651158, 0.12194171841602452, 0.13251676743322716, 0.1607958384769641, 0.12316747336506906, 0.15126945579944207, 0.19047311892188223, 0.15770315431731108, 0.12792050957266032, 0.2060878727320017, 0.1882839095994726, 0.12461660609961545, 0.23453925666715236, 0.16602745990683165, 0.10100087815441816, 0.19354057798016888, 0.0977190566143612, 0.1877919338609927, 0.22997249595821356, 0.14011415907812175, 0.12796117269513685, 0.20423967592901648, 0.34003758354691715, 0.1279255602786803, 0.22066652480781912, 0.2785089163815051, 0.18004034890933485, 9.999999999998899e-05, 9.999999999998899e-05, 0.0392513000970246, 0.011978244992305043, 0.00964904374174147, 9.999999999998899e-05, 0.004971249348617812, 9.999999999998899e-05, 0.022022531430554992, 0.06757058915267411, 0.05352869399615778, 0.1936402730567628, 0.07505097436999475, 0.03312016105405868, 0.02364780148480672, 0.19082171744318532, 0.02877956971264506, 0.059439858435191284, 0.07297062460282777, 0.02309595140626497, 9.999999999998899e-05, 0.09045551772112426, 0.054356911316785994, 9.999999999998899e-05, 0.064576992156825, 0.0790165054287909, 0.03875108293839402, 0.0643266071358024, 0.0509395769960056, 0.11325297852228655, 0.10745310801933561, 0.0896911741520382, 0.03335942033937023, 0.11209873091395528, 0.032887405004750514, 0.08463768177986108, 0.5395837722922867, 0.29248699180844007, 0.5222195335693738, 0.4724527199239853, 0.27268878483111514, 0.3079951594753777, 0.5117023437027239, 0.4185291560920247, 0.5069864519071762, 0.06209337495834444, 0.06724890754572421, 0.05723679330608433, 0.04090691382296774, 0.04854945700552393, 0.04249588557577044, 0.04623003632888634, 0.04506650605557838, 0.05009103831795092, 0.11446975714343766, 0.17513548633203102, 0.1722682913989222, 0.13973394810719786, 0.2772433172119737, 0.1972749274104031, 0.13460254314951348, 0.20857692906900882, 0.14759465318319198, 0.16298750361784864, 0.14234595706052133, 0.15560105267978852, 0.19264811887166833, 0.1486426215829919, 0.1432181881416622, 0.15162010348089427, 0.1357296754298759, 0.13931743282024522, 0.1219973197950519, 0.06902470909966418, 0.08961236076777512, 0.1376173212826921, 0.10239404984799272, 0.08766227211999522, 0.1034047668035053, 0.07811940699344833, 0.08227939354922453, 0.18334923703327377, 0.14697483043081627, 0.1479852097846528, 0.18994240258585793, 0.13977690048574365, 0.1449807690711592, 0.21568337533416648, 0.14094154091871536, 0.14165861578942696, 0.157850958136305, 0.18093497031646588, 0.16403594504659047, 0.17021259472680272, 0.19818664788190832, 0.16721075073859337, 0.1612577472324851, 0.1513519797790266, 0.16020030722219203, 0.12245851519544027, 0.13642905372986192, 0.8794565110315731, 0.17227079686168723, 0.11718866734528877, 0.10757265662663884, 0.10812333993466894, 0.1431720376658071, 0.16657676472158434, 0.7100709372418115, 0.11391591589831551, 0.13087959019748396, 0.09188454691020886, 0.20135794900318926, 0.19922357791446998, 0.4602877099457251, 0.13170514100602926, 0.3117194750524559, 0.204475239585168, 0.21883016955730195, 0.20001465124683504, 0.2299347724715174, 0.19757429360231527, 0.20627590807403318, 0.23207529052464448, 0.22225229497745613, 0.18577119032233813, 0.05655138794825709, 0.05623519004225275, 0.046728621391812, 0.056293328315251134, 0.03987873544269638, 0.06491006702779412, 0.057238161118480235, 0.04008100602643594, 0.044055584761835576]}, "mutation_prompt": null}
{"id": "dcc0c561-7a7a-44d1-8350-3c2baeeee3b5", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n\n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)\n\n            # Introducing chaotic adaptation\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight() * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, beta=1.5):\n        sigma = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        return u / np.abs(v)**(1 / beta)", "name": "EnhancedADSO", "description": "Introduce Lévy flight perturbation for dynamic exploration-exploitation balance in EnhancedADSO.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"module 'numpy' has no attribute 'gamma'\").", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")", "parent_id": "998fe9f8-1835-43cc-a9a7-b48c7923c8ef", "metadata": {}, "mutation_prompt": null}
{"id": "ee2facee-f0a5-4231-bab2-30d68562dae5", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15  # New adaptive rate for perturbation control\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)  \n\n            # Introducing chaotic adaptation\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n    \n    def _generate_chaotic_sequence(self, length):\n        # Logistic map to generate chaotic sequence\n        sequence = np.zeros(length)\n        sequence[0] = 0.7  # Initial value (could be tuned)\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence", "name": "EnhancedADSO", "description": "Introduction of chaotic map-based sampling rate adaptation to improve convergence speed.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "998fe9f8-1835-43cc-a9a7-b48c7923c8ef", "metadata": {"aucs": [0.6001908951578911, 0.5909131170148251, 0.66955196171655, 0.3034564924175799, 0.31613215809233564, 0.6105023770926609, 0.6074344187419268, 0.6047881263163415, 0.58150023995614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011552386343945953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057129841920875, 0.04670528159370246, 0.03904377291821037, 0.07118405597254607, 0.041291450638855864, 0.04067169532509629, 0.045396179185758445, 0.05097511251601994, 0.05348941970206156, 0.05862823590970112, 0.022245473415371864, 0.05396846028597446, 0.052314555613122704, 0.033934491933678146, 0.035494498095211435, 0.03508892511659001, 0.03762420849893755, 0.031560947877425916, 0.71967954885036, 0.706659965757997, 0.7023122697516085, 0.7141771457793802, 0.716125510029666, 0.7092687635402258, 0.7102597416927703, 0.7347549110265486, 0.7288416671906967, 0.4958594809242931, 0.15559448568853929, 0.1577213056428013, 0.1847166143541219, 0.44858838264380396, 0.16908620373394367, 0.2006935798794791, 0.16903387994988972, 0.4514576826049459, 0.15949032190651158, 0.12194171841602452, 0.13251676743322716, 0.1607958384769641, 0.12316747336506906, 0.15126945579944207, 0.19047311892188223, 0.15770315431731108, 0.12792050957266032, 0.2060878727320017, 0.1882839095994726, 0.12461660609961545, 0.23453925666715236, 0.16602745990683165, 0.10100087815441816, 0.19354057798016888, 0.0977190566143612, 0.1877919338609927, 0.22997249595821356, 0.14011415907812175, 0.12796117269513685, 0.20423967592901648, 0.34003758354691715, 0.1279255602786803, 0.22066652480781912, 0.2785089163815051, 0.18004034890933485, 9.999999999998899e-05, 9.999999999998899e-05, 0.0392513000970246, 0.011978244992305043, 0.00964904374174147, 9.999999999998899e-05, 0.004971249348617812, 9.999999999998899e-05, 0.022022531430554992, 0.06757058915267411, 0.05352869399615778, 0.1936402730567628, 0.07505097436999475, 0.03312016105405868, 0.02364780148480672, 0.19082171744318532, 0.02877956971264506, 0.059439858435191284, 0.07297062460282777, 0.02309595140626497, 9.999999999998899e-05, 0.09045551772112426, 0.054356911316785994, 9.999999999998899e-05, 0.064576992156825, 0.0790165054287909, 0.03875108293839402, 0.0643266071358024, 0.0509395769960056, 0.11325297852228655, 0.10745310801933561, 0.0896911741520382, 0.03335942033937023, 0.11209873091395528, 0.032887405004750514, 0.08463768177986108, 0.5395837722922867, 0.29248699180844007, 0.5222195335693738, 0.4724527199239853, 0.27268878483111514, 0.3079951594753777, 0.5117023437027239, 0.4185291560920247, 0.5069864519071762, 0.06209337495834444, 0.06724890754572421, 0.05723679330608433, 0.04090691382296774, 0.04854945700552393, 0.04249588557577044, 0.04623003632888634, 0.04506650605557838, 0.05009103831795092, 0.11446975714343766, 0.17513548633203102, 0.1722682913989222, 0.13973394810719786, 0.2772433172119737, 0.1972749274104031, 0.13460254314951348, 0.20857692906900882, 0.14759465318319198, 0.16298750361784864, 0.14234595706052133, 0.15560105267978852, 0.19264811887166833, 0.1486426215829919, 0.1432181881416622, 0.15162010348089427, 0.1357296754298759, 0.13931743282024522, 0.1219973197950519, 0.06902470909966418, 0.08961236076777512, 0.1376173212826921, 0.10239404984799272, 0.08766227211999522, 0.1034047668035053, 0.07811940699344833, 0.08227939354922453, 0.18334923703327377, 0.14697483043081627, 0.1479852097846528, 0.18994240258585793, 0.13977690048574365, 0.1449807690711592, 0.21568337533416648, 0.14094154091871536, 0.14165861578942696, 0.157850958136305, 0.18093497031646588, 0.16403594504659047, 0.17021259472680272, 0.19818664788190832, 0.16721075073859337, 0.1612577472324851, 0.1513519797790266, 0.16020030722219203, 0.12245851519544027, 0.13642905372986192, 0.8794565110315731, 0.17227079686168723, 0.11718866734528877, 0.10757265662663884, 0.10812333993466894, 0.1431720376658071, 0.16657676472158434, 0.7100709372418115, 0.11391591589831551, 0.13087959019748396, 0.09188454691020886, 0.20135794900318926, 0.19922357791446998, 0.4602877099457251, 0.13170514100602926, 0.3117194750524559, 0.204475239585168, 0.21883016955730195, 0.20001465124683504, 0.2299347724715174, 0.19757429360231527, 0.20627590807403318, 0.23207529052464448, 0.22225229497745613, 0.18577119032233813, 0.05655138794825709, 0.05623519004225275, 0.046728621391812, 0.056293328315251134, 0.03987873544269638, 0.06491006702779412, 0.057238161118480235, 0.04008100602643594, 0.044055584761835576]}, "mutation_prompt": null}
{"id": "82ff08e9-44ef-459c-9940-39d0e5c05c32", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15  # New adaptive rate for perturbation control\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)  \n\n            # Introducing chaotic adaptation\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n    \n    def _generate_chaotic_sequence(self, length):\n        # Logistic map to generate chaotic sequence\n        sequence = np.zeros(length)\n        sequence[0] = 0.7  # Initial value (could be tuned)\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence", "name": "EnhancedADSO", "description": "Introduction of chaotic map-based sampling rate adaptation to improve convergence speed.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "998fe9f8-1835-43cc-a9a7-b48c7923c8ef", "metadata": {"aucs": [0.6001908951578911, 0.5909131170148251, 0.66955196171655, 0.3034564924175799, 0.31613215809233564, 0.6105023770926609, 0.6074344187419268, 0.6047881263163415, 0.58150023995614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011552386343945953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057129841920875, 0.04670528159370246, 0.03904377291821037, 0.07118405597254607, 0.041291450638855864, 0.04067169532509629, 0.045396179185758445, 0.05097511251601994, 0.05348941970206156, 0.05862823590970112, 0.022245473415371864, 0.05396846028597446, 0.052314555613122704, 0.033934491933678146, 0.035494498095211435, 0.03508892511659001, 0.03762420849893755, 0.031560947877425916, 0.71967954885036, 0.706659965757997, 0.7023122697516085, 0.7141771457793802, 0.716125510029666, 0.7092687635402258, 0.7102597416927703, 0.7347549110265486, 0.7288416671906967, 0.4958594809242931, 0.15559448568853929, 0.1577213056428013, 0.1847166143541219, 0.44858838264380396, 0.16908620373394367, 0.2006935798794791, 0.16903387994988972, 0.4514576826049459, 0.15949032190651158, 0.12194171841602452, 0.13251676743322716, 0.1607958384769641, 0.12316747336506906, 0.15126945579944207, 0.19047311892188223, 0.15770315431731108, 0.12792050957266032, 0.2060878727320017, 0.1882839095994726, 0.12461660609961545, 0.23453925666715236, 0.16602745990683165, 0.10100087815441816, 0.19354057798016888, 0.0977190566143612, 0.1877919338609927, 0.22997249595821356, 0.14011415907812175, 0.12796117269513685, 0.20423967592901648, 0.34003758354691715, 0.1279255602786803, 0.22066652480781912, 0.2785089163815051, 0.18004034890933485, 9.999999999998899e-05, 9.999999999998899e-05, 0.0392513000970246, 0.011978244992305043, 0.00964904374174147, 9.999999999998899e-05, 0.004971249348617812, 9.999999999998899e-05, 0.022022531430554992, 0.06757058915267411, 0.05352869399615778, 0.1936402730567628, 0.07505097436999475, 0.03312016105405868, 0.02364780148480672, 0.19082171744318532, 0.02877956971264506, 0.059439858435191284, 0.07297062460282777, 0.02309595140626497, 9.999999999998899e-05, 0.09045551772112426, 0.054356911316785994, 9.999999999998899e-05, 0.064576992156825, 0.0790165054287909, 0.03875108293839402, 0.0643266071358024, 0.0509395769960056, 0.11325297852228655, 0.10745310801933561, 0.0896911741520382, 0.03335942033937023, 0.11209873091395528, 0.032887405004750514, 0.08463768177986108, 0.5395837722922867, 0.29248699180844007, 0.5222195335693738, 0.4724527199239853, 0.27268878483111514, 0.3079951594753777, 0.5117023437027239, 0.4185291560920247, 0.5069864519071762, 0.06209337495834444, 0.06724890754572421, 0.05723679330608433, 0.04090691382296774, 0.04854945700552393, 0.04249588557577044, 0.04623003632888634, 0.04506650605557838, 0.05009103831795092, 0.11446975714343766, 0.17513548633203102, 0.1722682913989222, 0.13973394810719786, 0.2772433172119737, 0.1972749274104031, 0.13460254314951348, 0.20857692906900882, 0.14759465318319198, 0.16298750361784864, 0.14234595706052133, 0.15560105267978852, 0.19264811887166833, 0.1486426215829919, 0.1432181881416622, 0.15162010348089427, 0.1357296754298759, 0.13931743282024522, 0.1219973197950519, 0.06902470909966418, 0.08961236076777512, 0.1376173212826921, 0.10239404984799272, 0.08766227211999522, 0.1034047668035053, 0.07811940699344833, 0.08227939354922453, 0.18334923703327377, 0.14697483043081627, 0.1479852097846528, 0.18994240258585793, 0.13977690048574365, 0.1449807690711592, 0.21568337533416648, 0.14094154091871536, 0.14165861578942696, 0.157850958136305, 0.18093497031646588, 0.16403594504659047, 0.17021259472680272, 0.19818664788190832, 0.16721075073859337, 0.1612577472324851, 0.1513519797790266, 0.16020030722219203, 0.12245851519544027, 0.13642905372986192, 0.8794565110315731, 0.17227079686168723, 0.11718866734528877, 0.10757265662663884, 0.10812333993466894, 0.1431720376658071, 0.16657676472158434, 0.7100709372418115, 0.11391591589831551, 0.13087959019748396, 0.09188454691020886, 0.20135794900318926, 0.19922357791446998, 0.4602877099457251, 0.13170514100602926, 0.3117194750524559, 0.204475239585168, 0.21883016955730195, 0.20001465124683504, 0.2299347724715174, 0.19757429360231527, 0.20627590807403318, 0.23207529052464448, 0.22225229497745613, 0.18577119032233813, 0.05655138794825709, 0.05623519004225275, 0.046728621391812, 0.056293328315251134, 0.03987873544269638, 0.06491006702779412, 0.057238161118480235, 0.04008100602643594, 0.044055584761835576]}, "mutation_prompt": null}
{"id": "6e83d65c-0a8e-4aa5-b912-51ab950cc000", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15  # New adaptive rate for perturbation control\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)  \n\n            # Introducing chaotic adaptation\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = np.random.normal(0, 1, self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n    \n    def _generate_chaotic_sequence(self, length):\n        # Logistic map to generate chaotic sequence\n        sequence = np.zeros(length)\n        sequence[0] = 0.7  # Initial value (could be tuned)\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence", "name": "EnhancedADSO", "description": "Introduction of chaotic map-based sampling rate adaptation to improve convergence speed.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "998fe9f8-1835-43cc-a9a7-b48c7923c8ef", "metadata": {"aucs": [0.6001908951578911, 0.5909131170148251, 0.66955196171655, 0.3034564924175799, 0.31613215809233564, 0.6105023770926609, 0.6074344187419268, 0.6047881263163415, 0.58150023995614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011552386343945953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057129841920875, 0.04670528159370246, 0.03904377291821037, 0.07118405597254607, 0.041291450638855864, 0.04067169532509629, 0.045396179185758445, 0.05097511251601994, 0.05348941970206156, 0.05862823590970112, 0.022245473415371864, 0.05396846028597446, 0.052314555613122704, 0.033934491933678146, 0.035494498095211435, 0.03508892511659001, 0.03762420849893755, 0.031560947877425916, 0.71967954885036, 0.706659965757997, 0.7023122697516085, 0.7141771457793802, 0.716125510029666, 0.7092687635402258, 0.7102597416927703, 0.7347549110265486, 0.7288416671906967, 0.4958594809242931, 0.15559448568853929, 0.1577213056428013, 0.1847166143541219, 0.44858838264380396, 0.16908620373394367, 0.2006935798794791, 0.16903387994988972, 0.4514576826049459, 0.15949032190651158, 0.12194171841602452, 0.13251676743322716, 0.1607958384769641, 0.12316747336506906, 0.15126945579944207, 0.19047311892188223, 0.15770315431731108, 0.12792050957266032, 0.2060878727320017, 0.1882839095994726, 0.12461660609961545, 0.23453925666715236, 0.16602745990683165, 0.10100087815441816, 0.19354057798016888, 0.0977190566143612, 0.1877919338609927, 0.22997249595821356, 0.14011415907812175, 0.12796117269513685, 0.20423967592901648, 0.34003758354691715, 0.1279255602786803, 0.22066652480781912, 0.2785089163815051, 0.18004034890933485, 9.999999999998899e-05, 9.999999999998899e-05, 0.0392513000970246, 0.011978244992305043, 0.00964904374174147, 9.999999999998899e-05, 0.004971249348617812, 9.999999999998899e-05, 0.022022531430554992, 0.06757058915267411, 0.05352869399615778, 0.1936402730567628, 0.07505097436999475, 0.03312016105405868, 0.02364780148480672, 0.19082171744318532, 0.02877956971264506, 0.059439858435191284, 0.07297062460282777, 0.02309595140626497, 9.999999999998899e-05, 0.09045551772112426, 0.054356911316785994, 9.999999999998899e-05, 0.064576992156825, 0.0790165054287909, 0.03875108293839402, 0.0643266071358024, 0.0509395769960056, 0.11325297852228655, 0.10745310801933561, 0.0896911741520382, 0.03335942033937023, 0.11209873091395528, 0.032887405004750514, 0.08463768177986108, 0.5395837722922867, 0.29248699180844007, 0.5222195335693738, 0.4724527199239853, 0.27268878483111514, 0.3079951594753777, 0.5117023437027239, 0.4185291560920247, 0.5069864519071762, 0.06209337495834444, 0.06724890754572421, 0.05723679330608433, 0.04090691382296774, 0.04854945700552393, 0.04249588557577044, 0.04623003632888634, 0.04506650605557838, 0.05009103831795092, 0.11446975714343766, 0.17513548633203102, 0.1722682913989222, 0.13973394810719786, 0.2772433172119737, 0.1972749274104031, 0.13460254314951348, 0.20857692906900882, 0.14759465318319198, 0.16298750361784864, 0.14234595706052133, 0.15560105267978852, 0.19264811887166833, 0.1486426215829919, 0.1432181881416622, 0.15162010348089427, 0.1357296754298759, 0.13931743282024522, 0.1219973197950519, 0.06902470909966418, 0.08961236076777512, 0.1376173212826921, 0.10239404984799272, 0.08766227211999522, 0.1034047668035053, 0.07811940699344833, 0.08227939354922453, 0.18334923703327377, 0.14697483043081627, 0.1479852097846528, 0.18994240258585793, 0.13977690048574365, 0.1449807690711592, 0.21568337533416648, 0.14094154091871536, 0.14165861578942696, 0.157850958136305, 0.18093497031646588, 0.16403594504659047, 0.17021259472680272, 0.19818664788190832, 0.16721075073859337, 0.1612577472324851, 0.1513519797790266, 0.16020030722219203, 0.12245851519544027, 0.13642905372986192, 0.8794565110315731, 0.17227079686168723, 0.11718866734528877, 0.10757265662663884, 0.10812333993466894, 0.1431720376658071, 0.16657676472158434, 0.7100709372418115, 0.11391591589831551, 0.13087959019748396, 0.09188454691020886, 0.20135794900318926, 0.19922357791446998, 0.4602877099457251, 0.13170514100602926, 0.3117194750524559, 0.204475239585168, 0.21883016955730195, 0.20001465124683504, 0.2299347724715174, 0.19757429360231527, 0.20627590807403318, 0.23207529052464448, 0.22225229497745613, 0.18577119032233813, 0.05655138794825709, 0.05623519004225275, 0.046728621391812, 0.056293328315251134, 0.03987873544269638, 0.06491006702779412, 0.057238161118480235, 0.04008100602643594, 0.044055584761835576]}, "mutation_prompt": null}
{"id": "3c23cc97-bfe7-4e2b-8de6-73c4c5f4ba56", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)\n\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "Introduction of Levy flight perturbation for candidate generation to enhance exploration.", "configspace": "", "generation": 90, "fitness": 0.2126302027410717, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "998fe9f8-1835-43cc-a9a7-b48c7923c8ef", "metadata": {"aucs": [0.6268917624894699, 0.6194678084914254, 0.6163221455801267, 0.5961497674233062, 0.6139412469370165, 0.6529040100232104, 0.6177525328209841, 0.619074291837721, 0.6700126758684104, 0.016416407641587805, 0.09460546241649825, 9.999999999998899e-05, 0.09144005837590485, 0.12465785906640703, 9.999999999998899e-05, 0.1257256974159342, 0.12856719464601662, 9.999999999998899e-05, 0.08364913920377315, 0.13902765283717777, 0.08924236560300247, 0.09778391637741135, 0.11464782522085493, 0.08848614360670437, 0.06942842625814427, 0.07530870745624052, 0.0936697111323832, 0.11229333496335381, 0.10788001441341188, 0.06586311957205437, 0.057053948124510145, 0.05191099683116118, 0.06441429309390556, 0.08960950968907178, 0.06703034203691172, 0.05723349659039545, 0.9117910267244578, 0.9245831940477718, 0.8632937491373903, 0.9135427296257133, 0.9061433178071903, 0.9100872038380109, 0.875463480980211, 0.9155872655007344, 0.9196231614300889, 0.486257936547957, 0.415321880285185, 0.1720288557489824, 0.47839303458964755, 0.4762465632738354, 0.4441187387351595, 0.47994246701450805, 0.4107412506035043, 0.44679987335089444, 0.13640192758307312, 0.15510981819904424, 0.12152635403473544, 0.38781914948806195, 0.16313051463426587, 0.14887384816134996, 0.16574578836223663, 0.10682676990163653, 0.16576314413704496, 0.20920566964770104, 0.1856077680323378, 0.17163468594484843, 0.2539088640556624, 0.1838913841908194, 0.2737410005532951, 0.18901650125928693, 0.21091544011405117, 0.13922648200348653, 0.23426111038395736, 0.2037570894408942, 0.12969682165571306, 0.1931832558381159, 0.3082002409210327, 0.17575782056183598, 0.24895739152301122, 0.18473819466161312, 0.2042247092985614, 9.999999999998899e-05, 9.999999999998899e-05, 0.039349803634776026, 9.999999999998899e-05, 0.06987840854403382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06822464689885022, 0.03616028140365757, 0.09195594781378602, 0.07303399841016667, 0.024011730773702777, 0.03434205144091762, 0.15708253039148745, 0.03483734383437098, 0.011105271638651382, 0.07593402596946486, 0.04545509317414176, 0.08531063491459079, 0.08384959401864345, 0.06994612540262701, 0.05162337986135934, 0.09296198507139997, 0.09597069280602866, 0.04851671914462663, 0.08708984852144896, 0.06815892499964682, 0.08924384507665595, 0.14952780080646622, 0.18437494366259166, 0.057452095617271715, 0.08749999888385152, 0.11889824446656694, 0.0849709296552621, 0.49352878514500675, 0.4941979826141023, 0.4967761731159903, 0.4994554016502232, 0.5194176540759281, 0.4771605146479434, 0.5127504429950305, 0.5166161027599998, 0.49900700124082575, 0.06019880384803056, 0.042602109319086034, 0.04972030703770014, 0.09767675011628052, 0.06774899900609632, 0.06927649399728364, 0.06424375028599938, 0.08962124668635474, 0.07092769574530466, 0.16359390729801637, 0.1658423069501388, 0.19738540796728055, 0.4616701567318433, 0.22592484331168394, 0.1953843261367082, 0.14590230737940546, 0.2265028929223527, 0.21003696540079964, 0.1751132477476931, 0.1278548033019835, 0.11825974011787654, 0.19397800775592566, 0.1905187159409263, 0.19019151409243085, 0.16092018412261222, 0.13975748129229582, 0.15784483130168614, 0.16382207555441997, 0.068800645154242, 0.09099152823777001, 0.12325735998047727, 0.10104232726010509, 0.09342229861825868, 0.0996692953618078, 0.09290830572353603, 0.14366705802497692, 0.19773119576790898, 0.15568963593477714, 0.25148992983187446, 0.2233815563054462, 0.1454272785173022, 0.16759536538901798, 0.18233544446855554, 0.15282218326451824, 0.17787263127350128, 0.18737151019149456, 0.19582066678416687, 0.17794993479098142, 0.1811860689932544, 0.2554130183759682, 0.19611684958596898, 0.18023133218947351, 0.18751834049170224, 0.2041131056418488, 0.18797516485169885, 0.1373388745924482, 0.1242489246510009, 0.3113471556411118, 0.1282151620801003, 0.09925032863894923, 0.10832245422378817, 0.12692142928551564, 0.16563894109672106, 0.614410782057572, 0.11330851079873683, 0.10394196077645212, 0.1682699606608441, 0.21084933686347362, 0.16025557738686236, 0.16708437710641955, 0.1293585057368375, 0.30862360026513525, 0.19385991524998958, 0.19571696997204113, 0.20309362883613058, 0.2257472318964444, 0.21161560277217373, 0.1974233402616401, 0.21720379159910863, 0.19870418043534277, 0.21930274755566526, 0.05966882709832766, 0.0758586857703678, 0.039088789878480745, 0.08098709612523602, 0.054411931330989094, 0.08309222521833304, 0.08380397476491219, 0.0481532905388623, 0.052459485571132114]}, "mutation_prompt": null}
{"id": "f583a0c6-6aeb-4631-a10a-558eaf02cb57", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.14  # Decreased for finer exploration\n        adaptive_rate = 0.13  # Modified for stability\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.97  # Slightly modified for better refinement\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 32 if exploration_phase else 14  # Adjusted candidate numbers\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.08 * shrink_factor), adaptive_rate)\n\n            sampling_rate *= (1 + 0.02 * chaotic_sequence[evals % len(chaotic_sequence)])  # Increased chaotic effect\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "Adaptive strategy with chaotic sequence enhancement for improved exploration and convergence.", "configspace": "", "generation": 91, "fitness": 0.20402531286459963, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "3c23cc97-bfe7-4e2b-8de6-73c4c5f4ba56", "metadata": {"aucs": [0.5552224982310575, 0.5358865100359911, 0.5302890848363295, 0.5382940407071374, 0.5298517942365738, 0.5002639493234726, 0.5423731869982775, 0.5135333340063344, 0.5317519072040688, 0.07292016369922771, 0.06921120005291381, 9.999999999998899e-05, 0.1823076076089708, 0.08812997687775936, 9.999999999998899e-05, 0.11163312996011776, 0.0753799278445616, 9.999999999998899e-05, 0.08031344499629722, 0.14527376671841752, 0.05815053289589578, 0.12077269202851892, 0.0834603531049859, 0.12369722825171592, 0.07065819880272661, 0.13948794916442642, 0.06972058231183909, 0.14101053274222797, 0.08700076941495682, 0.0868608825232654, 0.09088372749289142, 0.0645833786378962, 0.10465396804100824, 0.10410586062485783, 0.10358000064134776, 0.09769922386677554, 0.9358780461031224, 0.9118617930292303, 0.884238397575692, 0.9268477411591437, 0.9046210574402007, 0.9240460972299485, 0.937695382391118, 0.8896981241380811, 0.94387360817909, 0.4041376562461122, 0.37387998842144243, 0.3287635558333345, 0.375780822859887, 0.42917333621933784, 0.3855594769226024, 0.3894043129785475, 0.23531201337477503, 0.41297180241664744, 0.1493172308027424, 0.12150363365021988, 0.1379621979124731, 0.3860427690651158, 0.15494623333822144, 0.13664071469274675, 0.14906813435948074, 0.1263251290170576, 0.1706619832563674, 0.19874429218167078, 0.18027746948686818, 0.12635164157051582, 0.12532537844779967, 0.27258996658260226, 0.19766595929972797, 0.18455007961069436, 0.18875042690508137, 0.13984545041632324, 0.22257464501803848, 0.18624108721133747, 0.1103867150083937, 0.19685834160741356, 0.241847266730975, 0.17540729331029592, 0.22759902357725126, 0.20293568159083863, 0.203667783029864, 9.999999999998899e-05, 9.999999999998899e-05, 0.120107524544526, 9.999999999998899e-05, 0.11988808374383264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06079397749267823, 0.04158462032695842, 0.10940645584546804, 0.07600712290205758, 0.01303751094241179, 0.01532650821172643, 0.19731236029371413, 0.035113325144082386, 0.030738958837261632, 9.999999999998899e-05, 0.021045675333373204, 0.05255035274738473, 9.999999999998899e-05, 0.029017646913453987, 0.07144265941796435, 0.015273762649538947, 0.012911564334230796, 9.999999999998899e-05, 0.04239678471344355, 0.1582503435684115, 0.1312731142808039, 0.09638569218626669, 0.13783505304038557, 0.0764297263417264, 0.08119193241253886, 0.1498709929344313, 0.08451450753701317, 0.523299721645778, 0.5188440506548058, 0.4552904565419241, 0.5122390089876077, 0.4390088099378999, 0.4847054529592578, 0.4704594477356, 0.4478384654705496, 0.4629447658880951, 0.03170125739301877, 0.052378254191367546, 0.06446554497118517, 0.061136460681489924, 0.07703780267576588, 0.11396264597290995, 0.07905132929679859, 0.07866185423053762, 0.04951408912366295, 0.14507015453029704, 0.16157197810741986, 0.1993542675868616, 0.2627493439568739, 0.12885802449368255, 0.19979762825749525, 0.16957277474395327, 0.16392722949437144, 0.16635311104049522, 0.18687775164930853, 0.1265160268715988, 0.13202110073765383, 0.3427572831907395, 0.18472187828793374, 0.2048293902763456, 0.15692989338318586, 0.1327708869265074, 0.14889146336888337, 0.12890844559804193, 0.07509925459534517, 0.07230889299139576, 0.2729684126186389, 0.22410421765606103, 0.09341547156466423, 0.11572343419415698, 0.09827234130797746, 0.05806306139662065, 0.18949599453683674, 0.18939137797552874, 0.1944377791786458, 0.229508309217343, 0.13883859644978624, 0.14628176162313522, 0.19139966213650106, 0.13185657683425667, 0.1562939724154525, 0.20388732508003982, 0.20978594154253216, 0.19712666364707443, 0.17892604661715272, 0.21163069748548846, 0.17252301041818519, 0.18779552661376597, 0.2055852141174903, 0.19447324668116972, 0.31925169372624573, 0.13711265844919218, 0.1183187356635701, 0.25481279505800525, 0.15599845973794912, 0.13097070860256954, 0.10821576465335292, 0.12677961654987213, 0.16537777238189721, 0.6659142131478003, 0.11328220403931777, 0.12432110977131228, 0.16809322003501548, 0.21044197068971493, 0.19305522593613955, 0.16696024274728738, 0.10257303955417574, 0.3479944506450906, 0.17514625377612592, 0.1742040980050188, 0.17232679306593346, 0.21747327757971302, 0.17970362853209065, 0.18447742949180324, 0.18820793293200544, 0.18824227283804063, 0.18747909709488908, 0.10032399175711049, 0.055332430284410816, 0.054720410806372244, 0.05894942656282087, 0.03803017731876934, 0.05426182448598715, 0.10139382959715115, 0.0332254866055981, 0.05448709609906166]}, "mutation_prompt": null}
{"id": "1ad03b6d-a68a-4110-9cf7-729abad9b1da", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.16\n        adaptive_rate = 0.15\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.96\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 30 if exploration_phase else 15\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)\n\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "Introduction of Levy flight perturbation for candidate generation to enhance exploration.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3c23cc97-bfe7-4e2b-8de6-73c4c5f4ba56", "metadata": {"aucs": [0.6268917624894699, 0.6194678084914254, 0.6163221455801267, 0.5961497674233062, 0.6139412469370165, 0.6529040100232104, 0.6177525328209841, 0.619074291837721, 0.6700126758684104, 0.016416407641587805, 0.09460546241649825, 9.999999999998899e-05, 0.09144005837590485, 0.12465785906640703, 9.999999999998899e-05, 0.1257256974159342, 0.12856719464601662, 9.999999999998899e-05, 0.08364913920377315, 0.13902765283717777, 0.08924236560300247, 0.09778391637741135, 0.11464782522085493, 0.08848614360670437, 0.06942842625814427, 0.07530870745624052, 0.0936697111323832, 0.11229333496335381, 0.10788001441341188, 0.06586311957205437, 0.057053948124510145, 0.05191099683116118, 0.06441429309390556, 0.08960950968907178, 0.06703034203691172, 0.05723349659039545, 0.9117910267244578, 0.9245831940477718, 0.8632937491373903, 0.9135427296257133, 0.9061433178071903, 0.9100872038380109, 0.875463480980211, 0.9155872655007344, 0.9196231614300889, 0.486257936547957, 0.415321880285185, 0.1720288557489824, 0.47839303458964755, 0.4762465632738354, 0.4441187387351595, 0.47994246701450805, 0.4107412506035043, 0.44679987335089444, 0.13640192758307312, 0.15510981819904424, 0.12152635403473544, 0.38781914948806195, 0.16313051463426587, 0.14887384816134996, 0.16574578836223663, 0.10682676990163653, 0.16576314413704496, 0.20920566964770104, 0.1856077680323378, 0.17163468594484843, 0.2539088640556624, 0.1838913841908194, 0.2737410005532951, 0.18901650125928693, 0.21091544011405117, 0.13922648200348653, 0.23426111038395736, 0.2037570894408942, 0.12969682165571306, 0.1931832558381159, 0.3082002409210327, 0.17575782056183598, 0.24895739152301122, 0.18473819466161312, 0.2042247092985614, 9.999999999998899e-05, 9.999999999998899e-05, 0.039349803634776026, 9.999999999998899e-05, 0.06987840854403382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06822464689885022, 0.03616028140365757, 0.09195594781378602, 0.07303399841016667, 0.024011730773702777, 0.03434205144091762, 0.15708253039148745, 0.03483734383437098, 0.011105271638651382, 0.07593402596946486, 0.04545509317414176, 0.08531063491459079, 0.08384959401864345, 0.06994612540262701, 0.05162337986135934, 0.09296198507139997, 0.09597069280602866, 0.04851671914462663, 0.08708984852144896, 0.06815892499964682, 0.08924384507665595, 0.14952780080646622, 0.18437494366259166, 0.057452095617271715, 0.08749999888385152, 0.11889824446656694, 0.0849709296552621, 0.49352878514500675, 0.4941979826141023, 0.4967761731159903, 0.4994554016502232, 0.5194176540759281, 0.4771605146479434, 0.5127504429950305, 0.5166161027599998, 0.49900700124082575, 0.06019880384803056, 0.042602109319086034, 0.04972030703770014, 0.09767675011628052, 0.06774899900609632, 0.06927649399728364, 0.06424375028599938, 0.08962124668635474, 0.07092769574530466, 0.16359390729801637, 0.1658423069501388, 0.19738540796728055, 0.4616701567318433, 0.22592484331168394, 0.1953843261367082, 0.14590230737940546, 0.2265028929223527, 0.21003696540079964, 0.1751132477476931, 0.1278548033019835, 0.11825974011787654, 0.19397800775592566, 0.1905187159409263, 0.19019151409243085, 0.16092018412261222, 0.13975748129229582, 0.15784483130168614, 0.16382207555441997, 0.068800645154242, 0.09099152823777001, 0.12325735998047727, 0.10104232726010509, 0.09342229861825868, 0.0996692953618078, 0.09290830572353603, 0.14366705802497692, 0.19773119576790898, 0.15568963593477714, 0.25148992983187446, 0.2233815563054462, 0.1454272785173022, 0.16759536538901798, 0.18233544446855554, 0.15282218326451824, 0.17787263127350128, 0.18737151019149456, 0.19582066678416687, 0.17794993479098142, 0.1811860689932544, 0.2554130183759682, 0.19611684958596898, 0.18023133218947351, 0.18751834049170224, 0.2041131056418488, 0.18797516485169885, 0.1373388745924482, 0.1242489246510009, 0.3113471556411118, 0.1282151620801003, 0.09925032863894923, 0.10832245422378817, 0.12692142928551564, 0.16563894109672106, 0.614410782057572, 0.11330851079873683, 0.10394196077645212, 0.1682699606608441, 0.21084933686347362, 0.16025557738686236, 0.16708437710641955, 0.1293585057368375, 0.30862360026513525, 0.19385991524998958, 0.19571696997204113, 0.20309362883613058, 0.2257472318964444, 0.21161560277217373, 0.1974233402616401, 0.21720379159910863, 0.19870418043534277, 0.21930274755566526, 0.05966882709832766, 0.0758586857703678, 0.039088789878480745, 0.08098709612523602, 0.054411931330989094, 0.08309222521833304, 0.08380397476491219, 0.0481532905388623, 0.052459485571132114]}, "mutation_prompt": null}
{"id": "f714e39a-2bd7-4066-b1ef-f47cae48ac84", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.14  # Adjusted for initial exploration\n        adaptive_rate = 0.15\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.95  # Slightly adjusted shrink factor\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 25 if exploration_phase else 18  # Adjusted candidate size\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)\n\n            # Introduce a random walk effect for diversification\n            if evals % 20 == 0:  # Every 20 evaluations\n                random_walk = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                candidates.append(np.clip(random_walk, self.lower_bound, self.upper_bound))\n\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "EnhancedADSO with Random Walk Strategy for adaptive exploration-exploitation balance.", "configspace": "", "generation": 93, "fitness": 0.21918438189002656, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "3c23cc97-bfe7-4e2b-8de6-73c4c5f4ba56", "metadata": {"aucs": [0.7438144339519239, 0.7309938419644793, 0.7250193162478196, 0.7359837411232566, 0.774156874906736, 0.7357997259392386, 0.7703901597848768, 0.7448071817666998, 0.7236516131102464, 0.038108681527614485, 0.09120545220133136, 9.999999999998899e-05, 0.266150604424116, 0.08727562782564235, 9.999999999998899e-05, 0.1154193049811143, 0.09588797125693016, 9.999999999998899e-05, 0.08103585170497807, 0.07882335783521977, 0.07722780185583011, 0.095222641453659, 0.0949529458753694, 0.07763214648786998, 0.07028741989026077, 0.10890912236404016, 0.08020605313691287, 0.09682905884912629, 0.09176494525384837, 0.049482531688555764, 0.13232907055011167, 0.06445888915364018, 0.0765523214979974, 0.052567406456915156, 0.0906044638946949, 0.07013057896974806, 0.895601766008026, 0.8838934085067622, 0.7554818168227915, 0.8952619001329565, 0.8898459485744319, 0.8710837495722995, 0.7848023867422659, 0.7713320764735252, 0.9013762332149272, 0.5863148039928967, 0.1909993302239137, 0.21722341420262292, 0.5633269959312175, 0.5764249768485666, 0.23004089342012635, 0.2699753915938051, 0.20442083674210576, 0.19287535297664837, 0.18680250222881523, 0.1402545312896578, 0.15522297794976003, 0.3683376569513116, 0.18195253000755884, 0.15149667087891916, 0.1772793238888325, 0.14176660142474962, 0.21511304603908443, 0.12904410508286634, 0.17231088346734635, 0.1640324296461727, 0.25210096851543495, 0.23620077974140552, 0.14312420385842506, 0.18494541814532728, 0.41851421023534574, 0.11405478921164935, 0.21622009450637703, 0.15250865602429187, 0.12175482775010915, 0.13822652411524217, 0.31841224109327637, 0.1329053870173923, 0.21732867882359164, 0.20992645721086822, 0.15175781805103472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010878109372378097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05434535556248232, 0.05144458879091385, 0.08685524973656411, 0.07381133738967527, 0.028575265994454258, 0.02031604609224269, 0.1763771589153228, 0.045396037509854104, 0.034345026772412024, 0.18165294682891797, 0.06416913871958041, 0.14600234162181203, 0.11996362975743291, 0.1048364114823982, 0.08961887853201023, 0.131627313156349, 0.10359560262509182, 0.0719598729290547, 0.07793692980824818, 0.12795381824040064, 0.1273794237801148, 0.15690422773487733, 0.2559120826191187, 0.01898506221683216, 0.0816028409246845, 0.2696655556181381, 0.08526092421433018, 0.5419625305561129, 0.5320458064821344, 0.5367770873770676, 0.5174112639068977, 0.5497176426356594, 0.5380428107142328, 0.5784910164306329, 0.541462033071876, 0.5523182300847119, 0.058629450061612576, 0.06993423847662417, 0.0644608940331427, 0.07184300089359752, 0.05244631108708675, 0.06356751432579366, 0.08481232490504953, 0.06608163245627041, 0.06351267647646586, 0.11898694397204312, 0.16972890513720917, 0.2362189094027206, 0.168166791568243, 0.2215341023809716, 0.15530392467422738, 0.2699922192853036, 0.22473248066318197, 0.208021288109133, 0.19111734784146273, 0.15537546950087144, 0.12939645644265751, 0.2149007213070938, 0.21679382212214893, 0.13515251208620083, 0.17011455468611925, 0.15807997731974643, 0.13887397957535563, 0.1408147761563665, 0.07314362555303744, 0.09044302965396489, 0.12623942724647663, 0.17640932130443687, 0.09623409784770609, 0.13946962049541967, 0.0892279808991785, 0.10356225926196116, 0.1870322036392118, 0.15593865971536547, 0.187555888310715, 0.19069137590791674, 0.18332787582718124, 0.15258029424925224, 0.20748168178226856, 0.14335056766537113, 0.22253077276207944, 0.17886850606053373, 0.19937743001575792, 0.20711046797472932, 0.1685716095353138, 0.20217574784608205, 0.18717580914169574, 0.1757819221710042, 0.19490534967773887, 0.2070472035584905, 0.1888910755350981, 0.13738391232030878, 0.2590782658133055, 0.23614947819843624, 0.14420643538233613, 0.088517865082818, 0.1483577378146136, 0.1257999004781255, 0.16495893358016767, 0.7192690752176589, 0.11331799748690807, 0.1440293355022495, 0.16805865314318158, 0.21028613849713085, 0.1240586044778571, 0.6136181594752177, 0.13463398762006795, 0.33410671465118125, 0.18891376704218377, 0.2591127567136664, 0.21472636983704085, 0.20778961501419313, 0.24908561646151894, 0.23343961337627284, 0.2388487449018195, 0.2599337164318043, 0.213632089382786, 0.051364419157855834, 0.062277686663189114, 0.06902690937171452, 0.06264292054321907, 0.0494210280890498, 0.06680036041152304, 0.06350088745933391, 0.043232130718706685, 0.06427330207305926]}, "mutation_prompt": null}
{"id": "60ac04d1-2f4f-41b7-b13e-3edbd4488f91", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.14  # Adjusted for initial exploration\n        adaptive_rate = 0.15\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.95  # Slightly adjusted shrink factor\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 25 if exploration_phase else 18  # Adjusted candidate size\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)\n\n            # Introduce a random walk effect for diversification\n            if evals % 20 == 0:  # Every 20 evaluations\n                random_walk = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                candidates.append(np.clip(random_walk, self.lower_bound, self.upper_bound))\n\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "EnhancedADSO with Random Walk Strategy for adaptive exploration-exploitation balance.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f714e39a-2bd7-4066-b1ef-f47cae48ac84", "metadata": {"aucs": [0.7438144339519239, 0.7309938419644793, 0.7250193162478196, 0.7359837411232566, 0.774156874906736, 0.7357997259392386, 0.7703901597848768, 0.7448071817666998, 0.7236516131102464, 0.038108681527614485, 0.09120545220133136, 9.999999999998899e-05, 0.266150604424116, 0.08727562782564235, 9.999999999998899e-05, 0.1154193049811143, 0.09588797125693016, 9.999999999998899e-05, 0.08103585170497807, 0.07882335783521977, 0.07722780185583011, 0.095222641453659, 0.0949529458753694, 0.07763214648786998, 0.07028741989026077, 0.10890912236404016, 0.08020605313691287, 0.09682905884912629, 0.09176494525384837, 0.049482531688555764, 0.13232907055011167, 0.06445888915364018, 0.0765523214979974, 0.052567406456915156, 0.0906044638946949, 0.07013057896974806, 0.895601766008026, 0.8838934085067622, 0.7554818168227915, 0.8952619001329565, 0.8898459485744319, 0.8710837495722995, 0.7848023867422659, 0.7713320764735252, 0.9013762332149272, 0.5863148039928967, 0.1909993302239137, 0.21722341420262292, 0.5633269959312175, 0.5764249768485666, 0.23004089342012635, 0.2699753915938051, 0.20442083674210576, 0.19287535297664837, 0.18680250222881523, 0.1402545312896578, 0.15522297794976003, 0.3683376569513116, 0.18195253000755884, 0.15149667087891916, 0.1772793238888325, 0.14176660142474962, 0.21511304603908443, 0.12904410508286634, 0.17231088346734635, 0.1640324296461727, 0.25210096851543495, 0.23620077974140552, 0.14312420385842506, 0.18494541814532728, 0.41851421023534574, 0.11405478921164935, 0.21622009450637703, 0.15250865602429187, 0.12175482775010915, 0.13822652411524217, 0.31841224109327637, 0.1329053870173923, 0.21732867882359164, 0.20992645721086822, 0.15175781805103472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010878109372378097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05434535556248232, 0.05144458879091385, 0.08685524973656411, 0.07381133738967527, 0.028575265994454258, 0.02031604609224269, 0.1763771589153228, 0.045396037509854104, 0.034345026772412024, 0.18165294682891797, 0.06416913871958041, 0.14600234162181203, 0.11996362975743291, 0.1048364114823982, 0.08961887853201023, 0.131627313156349, 0.10359560262509182, 0.0719598729290547, 0.07793692980824818, 0.12795381824040064, 0.1273794237801148, 0.15690422773487733, 0.2559120826191187, 0.01898506221683216, 0.0816028409246845, 0.2696655556181381, 0.08526092421433018, 0.5419625305561129, 0.5320458064821344, 0.5367770873770676, 0.5174112639068977, 0.5497176426356594, 0.5380428107142328, 0.5784910164306329, 0.541462033071876, 0.5523182300847119, 0.058629450061612576, 0.06993423847662417, 0.0644608940331427, 0.07184300089359752, 0.05244631108708675, 0.06356751432579366, 0.08481232490504953, 0.06608163245627041, 0.06351267647646586, 0.11898694397204312, 0.16972890513720917, 0.2362189094027206, 0.168166791568243, 0.2215341023809716, 0.15530392467422738, 0.2699922192853036, 0.22473248066318197, 0.208021288109133, 0.19111734784146273, 0.15537546950087144, 0.12939645644265751, 0.2149007213070938, 0.21679382212214893, 0.13515251208620083, 0.17011455468611925, 0.15807997731974643, 0.13887397957535563, 0.1408147761563665, 0.07314362555303744, 0.09044302965396489, 0.12623942724647663, 0.17640932130443687, 0.09623409784770609, 0.13946962049541967, 0.0892279808991785, 0.10356225926196116, 0.1870322036392118, 0.15593865971536547, 0.187555888310715, 0.19069137590791674, 0.18332787582718124, 0.15258029424925224, 0.20748168178226856, 0.14335056766537113, 0.22253077276207944, 0.17886850606053373, 0.19937743001575792, 0.20711046797472932, 0.1685716095353138, 0.20217574784608205, 0.18717580914169574, 0.1757819221710042, 0.19490534967773887, 0.2070472035584905, 0.1888910755350981, 0.13738391232030878, 0.2590782658133055, 0.23614947819843624, 0.14420643538233613, 0.088517865082818, 0.1483577378146136, 0.1257999004781255, 0.16495893358016767, 0.7192690752176589, 0.11331799748690807, 0.1440293355022495, 0.16805865314318158, 0.21028613849713085, 0.1240586044778571, 0.6136181594752177, 0.13463398762006795, 0.33410671465118125, 0.18891376704218377, 0.2591127567136664, 0.21472636983704085, 0.20778961501419313, 0.24908561646151894, 0.23343961337627284, 0.2388487449018195, 0.2599337164318043, 0.213632089382786, 0.051364419157855834, 0.062277686663189114, 0.06902690937171452, 0.06264292054321907, 0.0494210280890498, 0.06680036041152304, 0.06350088745933391, 0.043232130718706685, 0.06427330207305926]}, "mutation_prompt": null}
{"id": "a8a2da59-49d2-4af6-b269-9cfc1b3239d7", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.14  # Adjusted for initial exploration\n        adaptive_rate = 0.15\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.95  # Slightly adjusted shrink factor\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 25 if exploration_phase else 18  # Adjusted candidate size\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)\n\n            # Introduce a random walk effect for diversification\n            if evals % 20 == 0:  # Every 20 evaluations\n                random_walk = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                candidates.append(np.clip(random_walk, self.lower_bound, self.upper_bound))\n\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "EnhancedADSO with Random Walk Strategy for adaptive exploration-exploitation balance.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f714e39a-2bd7-4066-b1ef-f47cae48ac84", "metadata": {"aucs": [0.7438144339519239, 0.7309938419644793, 0.7250193162478196, 0.7359837411232566, 0.774156874906736, 0.7357997259392386, 0.7703901597848768, 0.7448071817666998, 0.7236516131102464, 0.038108681527614485, 0.09120545220133136, 9.999999999998899e-05, 0.266150604424116, 0.08727562782564235, 9.999999999998899e-05, 0.1154193049811143, 0.09588797125693016, 9.999999999998899e-05, 0.08103585170497807, 0.07882335783521977, 0.07722780185583011, 0.095222641453659, 0.0949529458753694, 0.07763214648786998, 0.07028741989026077, 0.10890912236404016, 0.08020605313691287, 0.09682905884912629, 0.09176494525384837, 0.049482531688555764, 0.13232907055011167, 0.06445888915364018, 0.0765523214979974, 0.052567406456915156, 0.0906044638946949, 0.07013057896974806, 0.895601766008026, 0.8838934085067622, 0.7554818168227915, 0.8952619001329565, 0.8898459485744319, 0.8710837495722995, 0.7848023867422659, 0.7713320764735252, 0.9013762332149272, 0.5863148039928967, 0.1909993302239137, 0.21722341420262292, 0.5633269959312175, 0.5764249768485666, 0.23004089342012635, 0.2699753915938051, 0.20442083674210576, 0.19287535297664837, 0.18680250222881523, 0.1402545312896578, 0.15522297794976003, 0.3683376569513116, 0.18195253000755884, 0.15149667087891916, 0.1772793238888325, 0.14176660142474962, 0.21511304603908443, 0.12904410508286634, 0.17231088346734635, 0.1640324296461727, 0.25210096851543495, 0.23620077974140552, 0.14312420385842506, 0.18494541814532728, 0.41851421023534574, 0.11405478921164935, 0.21622009450637703, 0.15250865602429187, 0.12175482775010915, 0.13822652411524217, 0.31841224109327637, 0.1329053870173923, 0.21732867882359164, 0.20992645721086822, 0.15175781805103472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010878109372378097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05434535556248232, 0.05144458879091385, 0.08685524973656411, 0.07381133738967527, 0.028575265994454258, 0.02031604609224269, 0.1763771589153228, 0.045396037509854104, 0.034345026772412024, 0.18165294682891797, 0.06416913871958041, 0.14600234162181203, 0.11996362975743291, 0.1048364114823982, 0.08961887853201023, 0.131627313156349, 0.10359560262509182, 0.0719598729290547, 0.07793692980824818, 0.12795381824040064, 0.1273794237801148, 0.15690422773487733, 0.2559120826191187, 0.01898506221683216, 0.0816028409246845, 0.2696655556181381, 0.08526092421433018, 0.5419625305561129, 0.5320458064821344, 0.5367770873770676, 0.5174112639068977, 0.5497176426356594, 0.5380428107142328, 0.5784910164306329, 0.541462033071876, 0.5523182300847119, 0.058629450061612576, 0.06993423847662417, 0.0644608940331427, 0.07184300089359752, 0.05244631108708675, 0.06356751432579366, 0.08481232490504953, 0.06608163245627041, 0.06351267647646586, 0.11898694397204312, 0.16972890513720917, 0.2362189094027206, 0.168166791568243, 0.2215341023809716, 0.15530392467422738, 0.2699922192853036, 0.22473248066318197, 0.208021288109133, 0.19111734784146273, 0.15537546950087144, 0.12939645644265751, 0.2149007213070938, 0.21679382212214893, 0.13515251208620083, 0.17011455468611925, 0.15807997731974643, 0.13887397957535563, 0.1408147761563665, 0.07314362555303744, 0.09044302965396489, 0.12623942724647663, 0.17640932130443687, 0.09623409784770609, 0.13946962049541967, 0.0892279808991785, 0.10356225926196116, 0.1870322036392118, 0.15593865971536547, 0.187555888310715, 0.19069137590791674, 0.18332787582718124, 0.15258029424925224, 0.20748168178226856, 0.14335056766537113, 0.22253077276207944, 0.17886850606053373, 0.19937743001575792, 0.20711046797472932, 0.1685716095353138, 0.20217574784608205, 0.18717580914169574, 0.1757819221710042, 0.19490534967773887, 0.2070472035584905, 0.1888910755350981, 0.13738391232030878, 0.2590782658133055, 0.23614947819843624, 0.14420643538233613, 0.088517865082818, 0.1483577378146136, 0.1257999004781255, 0.16495893358016767, 0.7192690752176589, 0.11331799748690807, 0.1440293355022495, 0.16805865314318158, 0.21028613849713085, 0.1240586044778571, 0.6136181594752177, 0.13463398762006795, 0.33410671465118125, 0.18891376704218377, 0.2591127567136664, 0.21472636983704085, 0.20778961501419313, 0.24908561646151894, 0.23343961337627284, 0.2388487449018195, 0.2599337164318043, 0.213632089382786, 0.051364419157855834, 0.062277686663189114, 0.06902690937171452, 0.06264292054321907, 0.0494210280890498, 0.06680036041152304, 0.06350088745933391, 0.043232130718706685, 0.06427330207305926]}, "mutation_prompt": null}
{"id": "553b78d2-dfab-4bf3-b465-7b1bb4aea3c6", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n        \n        exploration_phase = True\n        sampling_rate = 0.12  # Slightly adjusted for enhanced initial exploration\n        adaptive_rate = 0.16  # Increased for more dynamic adaptation\n        max_iterations = self.budget * 0.2  # Adjusted to speed up phase transition\n        shrink_factor = 0.93  # Modified shrink factor for faster convergence\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 22 if exploration_phase else 17  # Adjusted candidate size\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.1 * shrink_factor), adaptive_rate)\n\n            # Introduce a random walk effect for diversification\n            if evals % 18 == 0:  # Adjusted interval for random walk\n                random_walk = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                candidates.append(np.clip(random_walk, self.lower_bound, self.upper_bound))\n\n            sampling_rate *= (1 + 0.015 * chaotic_sequence[evals % len(chaotic_sequence)])  # Increased chaotic influence\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.65  # Changed initial value for chaotic sequence\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "EnhancedADSO with Adaptive Perturbation and Chaotic Influence for improved convergence speed.", "configspace": "", "generation": 96, "fitness": 0.2055692831284198, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "f714e39a-2bd7-4066-b1ef-f47cae48ac84", "metadata": {"aucs": [0.8649453911265139, 0.8254449557014161, 0.8458621824465723, 0.848491413183449, 0.8415239787440462, 0.8625195420883753, 0.8385569656411351, 0.8657313167113128, 0.8367036320544913, 0.024135882502784645, 9.999999999998899e-05, 9.999999999998899e-05, 0.25281228169785097, 0.11762524908654304, 9.999999999998899e-05, 0.0009941714487111675, 0.07151923545973826, 9.999999999998899e-05, 0.11895752940731741, 0.09151071541903844, 0.06713011148903703, 0.08303152435864303, 0.0754800473772711, 0.039868899088466025, 0.07692962783025636, 0.1081394278781409, 0.056307545276802595, 0.07187288177336304, 0.06808212888381382, 0.053930349692239865, 0.06777844160457025, 0.039125628452224004, 0.06916402376648834, 0.05316451661507848, 0.04485592725617882, 0.03777726145895777, 0.8150422387580731, 0.7900172326574485, 0.7815042034652487, 0.8095187829713524, 0.7991799952533569, 0.7918372752815029, 0.8076810252315023, 0.8027860233212988, 0.8082021101921716, 0.3047974794938373, 0.2061226235921152, 0.13427657716047958, 0.3171378000632188, 0.576116816175714, 0.19776590172092523, 0.24932878904222666, 0.17417150858056862, 0.208524165501479, 0.15544209021593047, 0.09720702020127991, 0.12165784444076222, 0.24210634413049925, 0.18456099062555087, 0.12675597802591743, 0.18472327432319247, 0.14755748650295497, 0.18862345334254582, 0.23235059570100325, 0.1286165926735997, 0.10795565762337844, 0.2539088766447697, 0.25487118397421726, 0.1113729319861888, 0.2197791130739789, 0.18917550910177006, 0.11241325879948105, 0.2037208798602882, 0.15265044009937556, 0.12055639845127175, 0.42724148888491054, 0.16042115859606165, 0.14412398752753253, 0.20034528775500082, 0.15648954718207075, 0.116943656203357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035574634726812104, 0.0518696527557988, 0.0929325747734141, 0.06623877233881559, 0.0015555459620407719, 0.007253593565144212, 0.14861223135419477, 0.060658628234746326, 0.02623747633398965, 0.24262332941477305, 0.07220695640043706, 9.999999999998899e-05, 0.11548677685845399, 0.10532794348767516, 9.999999999998899e-05, 0.14928152395746164, 0.12610519004067133, 0.07715511447143131, 0.04498047713888942, 0.10783675173576868, 0.07878145567710726, 0.09008514997547301, 0.15654086552744262, 0.030861649134233282, 0.07858042478119709, 0.05485010658442968, 0.09779543626542708, 0.5645852307691752, 0.3775627256913432, 0.5277369294479732, 0.5060109193018647, 0.48653816085882395, 0.3037367587091533, 0.5278047568426727, 0.6129820914978735, 0.5779636700376285, 0.05445490408281606, 0.04494185854975363, 0.06383129826439893, 0.07203732942925123, 0.0637489917325531, 0.07474010885283111, 0.048205351283036046, 0.06397112450568221, 0.06763607589748333, 0.18100168738215494, 0.17069891125797165, 0.27715762452664716, 0.1686586099218239, 0.17293895147555627, 0.12166005902199428, 0.12219427838166519, 0.23470518042765942, 0.23981700551637475, 0.22243846824575264, 0.1672612532048131, 0.15490462266764737, 0.2170115371143877, 0.15508160039748653, 0.15773918210502236, 0.17120716953315518, 0.1688076336892005, 0.14535691724522004, 0.11131062347517706, 0.06790631044931272, 0.08642887133921673, 0.12349052717435482, 0.12183292634501663, 0.10171802892800641, 0.1354734014780643, 0.09553162465596576, 0.11219249816627563, 0.19676957764595138, 0.15315673082811787, 0.14419511886875502, 0.18032262447539327, 0.13289495997048506, 0.1570052521577614, 0.21857099666831403, 0.1405672199264103, 0.16703083330998292, 0.2004052379970418, 0.18040456016071982, 0.17092382604149348, 0.16141904204031576, 0.1800123712208226, 0.1690658153996586, 0.1686800767851433, 0.1817168164439329, 0.18101198905433247, 0.18866005637387506, 0.13716872993928864, 0.3495156152502724, 0.2748154527040346, 0.11176641644543561, 0.14305798671497927, 0.1414135728146737, 0.12518744244169133, 0.16491804324852333, 0.5693164089535026, 0.11309734611879574, 0.08962398417389794, 0.16750738000942111, 0.20758456580038454, 0.1669028688249633, 0.43144176965559977, 0.14424823546130805, 0.21521640252838603, 0.2535086311491669, 0.178554167552609, 0.18304613101847111, 0.21178377810684534, 0.25841745940953564, 0.1826437618478821, 0.2594937782960913, 0.2827766624688792, 0.2574671673380159, 0.08557472578184422, 0.049849858013392256, 0.04082158993218654, 0.0519657013339514, 0.03644025677211449, 0.0627432602276009, 0.06652632776570389, 0.07640133070167521, 0.03985481026274407]}, "mutation_prompt": null}
{"id": "8d716702-a9e2-459f-a8c3-2b9c2f3f9e57", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n\n        exploration_phase = True\n        sampling_rate = 0.14\n        adaptive_rate = 0.15\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.95\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 25 if exploration_phase else 18\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)\n\n            if evals % 20 == 0:\n                random_walk = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                candidates.append(np.clip(random_walk, self.lower_bound, self.upper_bound))\n\n            sampling_rate *= (1 + 0.01 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n            # Introduce adaptive mutation to maintain diversity\n            if evals % 30 == 0:  # Every 30 evaluations\n                mutation_strength = 0.1 * np.std(candidates)\n                mutation = np.random.normal(0, mutation_strength, self.dim)\n                mutation_candidate = np.clip(best_solution + mutation, self.lower_bound, self.upper_bound)\n                candidates.append(mutation_candidate)\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "EnhancedADSO with Adaptive Mutation Strategy for improved convergence.", "configspace": "", "generation": 97, "fitness": 0.21918438189002656, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "f714e39a-2bd7-4066-b1ef-f47cae48ac84", "metadata": {"aucs": [0.7438144339519239, 0.7309938419644793, 0.7250193162478196, 0.7359837411232566, 0.774156874906736, 0.7357997259392386, 0.7703901597848768, 0.7448071817666998, 0.7236516131102464, 0.038108681527614485, 0.09120545220133136, 9.999999999998899e-05, 0.266150604424116, 0.08727562782564235, 9.999999999998899e-05, 0.1154193049811143, 0.09588797125693016, 9.999999999998899e-05, 0.08103585170497807, 0.07882335783521977, 0.07722780185583011, 0.095222641453659, 0.0949529458753694, 0.07763214648786998, 0.07028741989026077, 0.10890912236404016, 0.08020605313691287, 0.09682905884912629, 0.09176494525384837, 0.049482531688555764, 0.13232907055011167, 0.06445888915364018, 0.0765523214979974, 0.052567406456915156, 0.0906044638946949, 0.07013057896974806, 0.895601766008026, 0.8838934085067622, 0.7554818168227915, 0.8952619001329565, 0.8898459485744319, 0.8710837495722995, 0.7848023867422659, 0.7713320764735252, 0.9013762332149272, 0.5863148039928967, 0.1909993302239137, 0.21722341420262292, 0.5633269959312175, 0.5764249768485666, 0.23004089342012635, 0.2699753915938051, 0.20442083674210576, 0.19287535297664837, 0.18680250222881523, 0.1402545312896578, 0.15522297794976003, 0.3683376569513116, 0.18195253000755884, 0.15149667087891916, 0.1772793238888325, 0.14176660142474962, 0.21511304603908443, 0.12904410508286634, 0.17231088346734635, 0.1640324296461727, 0.25210096851543495, 0.23620077974140552, 0.14312420385842506, 0.18494541814532728, 0.41851421023534574, 0.11405478921164935, 0.21622009450637703, 0.15250865602429187, 0.12175482775010915, 0.13822652411524217, 0.31841224109327637, 0.1329053870173923, 0.21732867882359164, 0.20992645721086822, 0.15175781805103472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010878109372378097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05434535556248232, 0.05144458879091385, 0.08685524973656411, 0.07381133738967527, 0.028575265994454258, 0.02031604609224269, 0.1763771589153228, 0.045396037509854104, 0.034345026772412024, 0.18165294682891797, 0.06416913871958041, 0.14600234162181203, 0.11996362975743291, 0.1048364114823982, 0.08961887853201023, 0.131627313156349, 0.10359560262509182, 0.0719598729290547, 0.07793692980824818, 0.12795381824040064, 0.1273794237801148, 0.15690422773487733, 0.2559120826191187, 0.01898506221683216, 0.0816028409246845, 0.2696655556181381, 0.08526092421433018, 0.5419625305561129, 0.5320458064821344, 0.5367770873770676, 0.5174112639068977, 0.5497176426356594, 0.5380428107142328, 0.5784910164306329, 0.541462033071876, 0.5523182300847119, 0.058629450061612576, 0.06993423847662417, 0.0644608940331427, 0.07184300089359752, 0.05244631108708675, 0.06356751432579366, 0.08481232490504953, 0.06608163245627041, 0.06351267647646586, 0.11898694397204312, 0.16972890513720917, 0.2362189094027206, 0.168166791568243, 0.2215341023809716, 0.15530392467422738, 0.2699922192853036, 0.22473248066318197, 0.208021288109133, 0.19111734784146273, 0.15537546950087144, 0.12939645644265751, 0.2149007213070938, 0.21679382212214893, 0.13515251208620083, 0.17011455468611925, 0.15807997731974643, 0.13887397957535563, 0.1408147761563665, 0.07314362555303744, 0.09044302965396489, 0.12623942724647663, 0.17640932130443687, 0.09623409784770609, 0.13946962049541967, 0.0892279808991785, 0.10356225926196116, 0.1870322036392118, 0.15593865971536547, 0.187555888310715, 0.19069137590791674, 0.18332787582718124, 0.15258029424925224, 0.20748168178226856, 0.14335056766537113, 0.22253077276207944, 0.17886850606053373, 0.19937743001575792, 0.20711046797472932, 0.1685716095353138, 0.20217574784608205, 0.18717580914169574, 0.1757819221710042, 0.19490534967773887, 0.2070472035584905, 0.1888910755350981, 0.13738391232030878, 0.2590782658133055, 0.23614947819843624, 0.14420643538233613, 0.088517865082818, 0.1483577378146136, 0.1257999004781255, 0.16495893358016767, 0.7192690752176589, 0.11331799748690807, 0.1440293355022495, 0.16805865314318158, 0.21028613849713085, 0.1240586044778571, 0.6136181594752177, 0.13463398762006795, 0.33410671465118125, 0.18891376704218377, 0.2591127567136664, 0.21472636983704085, 0.20778961501419313, 0.24908561646151894, 0.23343961337627284, 0.2388487449018195, 0.2599337164318043, 0.213632089382786, 0.051364419157855834, 0.062277686663189114, 0.06902690937171452, 0.06264292054321907, 0.0494210280890498, 0.06680036041152304, 0.06350088745933391, 0.043232130718706685, 0.06427330207305926]}, "mutation_prompt": null}
{"id": "f6104544-0af3-475c-931c-723033bd3e11", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n\n        exploration_phase = True\n        sampling_rate = 0.14\n        adaptive_rate = 0.15\n        max_iterations = self.budget * 0.25\n        shrink_factor = 0.95\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 27 if exploration_phase else 20  # Slight increase in candidates\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.06 * shrink_factor), adaptive_rate)\n\n            # Introduce a random walk effect for diversification\n            if evals % 18 == 0:  # Slightly more frequent chaotic mutation\n                random_walk = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                candidates.append(np.clip(random_walk, self.lower_bound, self.upper_bound))\n\n            sampling_rate *= (1 + 0.015 * chaotic_sequence[evals % len(chaotic_sequence)])\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "EnhancedADSO with Adaptive Chaotic Mutation for improved search space exploration.", "configspace": "", "generation": 98, "fitness": 0.22342834437740594, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "f714e39a-2bd7-4066-b1ef-f47cae48ac84", "metadata": {"aucs": [0.6969166173525183, 0.6809159445700235, 0.6831814754955563, 0.7048787864661289, 0.6861131285136208, 0.675069996053024, 0.6781903750226637, 0.7354278159497536, 0.718804395411631, 0.03235834341274091, 0.07493563865309083, 9.999999999998899e-05, 0.272825305009019, 0.1202539318103274, 9.999999999998899e-05, 0.07865080294273352, 0.16835373768924888, 9.999999999998899e-05, 0.08776335600680019, 0.13403063286387862, 0.07667367918585877, 0.08237190864990629, 0.07590198139054372, 0.06500342259978187, 0.07626034999871156, 0.08046033956836307, 0.09321695360796234, 0.13441727362182498, 0.05802813862397438, 0.05581780729887742, 0.078214067732295, 0.07972361905759118, 0.0860107688348527, 0.09465324120835283, 0.0497684169866337, 0.057851476392429824, 0.8960304749657011, 0.8831551520000801, 0.7426613603268639, 0.8971762641907001, 0.8898318557812053, 0.8784242609026691, 0.8482841805840882, 0.7740628173189796, 0.9073044532768424, 0.5533420940087413, 0.23104968519616254, 0.20599059051407753, 0.5495514984435698, 0.5283864891853082, 0.4951123915005846, 0.5063386427941807, 0.22627466951073616, 0.2281048363122926, 0.18416487449484642, 0.16828131613317476, 0.13660359741329853, 0.9450370856686773, 0.18030860688988237, 0.1693045190355419, 0.20106920953820895, 0.1654306431273439, 0.17708685614755904, 0.22902417861886393, 0.1259148711619209, 0.17067341123124335, 0.14842576448632094, 0.25733054454141513, 0.2581820546249878, 0.18679891281558925, 0.22595566782419474, 0.11596956836741501, 0.19484527848006772, 0.21126194560612221, 0.11796306028849213, 0.20825341537881792, 0.3186482593909008, 0.19444850512648004, 0.2447654111169273, 0.2013511642474124, 0.20880189662328363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389468793330975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06212399135384061, 0.04856319014895727, 0.1046828574417259, 0.09719113928469347, 0.030442189125191033, 0.01564397027831188, 0.1863758650991172, 0.06437881216313324, 0.028698256262054578, 0.16539830887262796, 0.051862994382705474, 0.13547577516839193, 0.098816228099317, 0.147003171879444, 0.08166794490891371, 0.1601266346301483, 0.14138792382405097, 0.0685873172873871, 0.05800025862394853, 0.16226874236114253, 0.07811556206193326, 0.13019650412594563, 0.14204466371930558, 0.017928829994638407, 0.0839273881199517, 0.10527231874061804, 0.08503846677372096, 0.5780690901903359, 0.5180852024182772, 0.517790898213822, 0.5475978774170894, 0.5063833258569794, 0.5678753718663485, 0.5811231657916285, 0.5781048560963069, 0.5464403308576237, 0.05222046850666717, 0.0569838662613904, 0.05735135714468875, 0.08200793059728861, 0.06707419740055343, 0.07975707052365488, 0.07082906179601656, 0.06099485075203681, 0.05380162998125726, 0.14342758263519806, 0.1669101275684972, 0.15140534247419923, 0.15166310869609756, 0.2075687801486461, 0.15103964333925546, 0.16683738814675886, 0.15944821799819442, 0.17778488670325332, 0.19684426041157976, 0.15626994985361742, 0.12899469137038355, 0.2372206921927349, 0.21990137009121147, 0.15977112388781556, 0.16218456569600836, 0.16670682971526873, 0.14483180233124426, 0.1346721907829186, 0.080417773020108, 0.14198712724857543, 0.14133619777078166, 0.1611005175052207, 0.11523435819963401, 0.11846484998347262, 0.16398274895340292, 0.12757232524789108, 0.1778928394046123, 0.1779283950160956, 0.18638515787334353, 0.19082855015624067, 0.18103080771040814, 0.161111235064064, 0.24417276599345195, 0.1625917981693057, 0.16703039577840195, 0.17571951101690775, 0.2225805561893467, 0.18218134528355945, 0.19502250887214256, 0.21437371245480785, 0.17377289595540935, 0.18215185342953621, 0.19354227850701577, 0.18942396106734838, 0.1887780427751603, 0.1372461289083532, 0.1828277721262176, 0.3425459939966965, 0.1710521179266863, 0.12951908044259364, 0.13311560526891886, 0.12625705304543422, 0.16571494006239396, 0.6778325003958834, 0.1345988853595229, 0.1322268692498777, 0.19880371172568334, 0.21117819753661138, 0.20677826922180853, 0.6382241662028784, 0.13241970499993894, 0.3206786519002409, 0.1935135417437568, 0.23568483338901092, 0.227279193016672, 0.2340502365958903, 0.2891876583838616, 0.23695359607935707, 0.23199910236921317, 0.2387238215918832, 0.2059481874920488, 0.0696223674040044, 0.06426321878572328, 0.052444328786715566, 0.06493173693896281, 0.04918679776270529, 0.06031492099931912, 0.07330495186972497, 0.05174570611318707, 0.06152086762979447]}, "mutation_prompt": null}
{"id": "3b67acb3-80c6-4292-bd12-19e1d4eae75d", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        evals = 0\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evals += 1\n\n        exploration_phase = True\n        sampling_rate = 0.13  # Slightly reduced for finer exploration\n        adaptive_rate = 0.16  # Increased for more adaptability\n        max_iterations = self.budget * 0.3  # Increased to extend exploration\n        shrink_factor = 0.94  # Slightly increased shrink rate\n        chaotic_sequence = self._generate_chaotic_sequence(int(self.budget))\n\n        while evals < self.budget:\n            dynamic_candidates = 28 if exploration_phase else 21  # Increased candidates count\n            candidates = self._generate_candidates(best_solution, sampling_rate, dynamic_candidates)\n\n            for candidate in candidates:\n                if evals >= self.budget:\n                    break\n                candidate_value = func(candidate)\n                evals += 1\n                if candidate_value < best_value:\n                    best_value = candidate_value\n                    best_solution = candidate\n\n            if exploration_phase:\n                sampling_rate *= shrink_factor\n                if evals >= max_iterations:\n                    exploration_phase = False\n            else:\n                sampling_rate = max(sampling_rate * (1.07 * shrink_factor), adaptive_rate)\n\n            if evals % 17 == 0:  # More frequent chaotic mutation\n                random_walk = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                candidates.append(np.clip(random_walk, self.lower_bound, self.upper_bound))\n\n            sampling_rate *= (1 + 0.016 * chaotic_sequence[evals % len(chaotic_sequence)])  # Adjusted multiplier\n\n        return best_solution\n\n    def _generate_candidates(self, center, rate, num_samples):\n        candidates = []\n        for _ in range(num_samples):\n            perturbation = self._levy_flight(self.dim) * rate\n            candidate = np.clip(center + perturbation, self.lower_bound, self.upper_bound)\n            candidates.append(candidate)\n        return candidates\n\n    def _generate_chaotic_sequence(self, length):\n        sequence = np.zeros(length)\n        sequence[0] = 0.7\n        for i in range(1, length):\n            sequence[i] = 4.0 * sequence[i-1] * (1 - sequence[i-1])\n        return sequence\n\n    def _levy_flight(self, dim, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "EnhancedADSO", "description": "Improved EnhancedADSO with Adaptive Chaotic Mutation by adjusting perturbation rates and adaptive parameters for more efficient search space exploration.", "configspace": "", "generation": 99, "fitness": 0.22332499144753654, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "f6104544-0af3-475c-931c-723033bd3e11", "metadata": {"aucs": [0.8273452655151412, 0.8227622676768696, 0.8064407393017309, 0.8169905137120861, 0.8004918981777666, 0.8154786398159314, 0.8080415183628961, 0.8102000656009001, 0.8318790717824347, 0.07019134757605028, 0.01730077800110963, 0.030824047791972453, 0.06284486916856202, 0.12374093421011034, 9.999999999998899e-05, 0.06012389992048228, 0.20386400978371755, 9.999999999998899e-05, 0.09721306038278854, 0.09365849970015339, 0.07630413686458248, 0.12257473512771921, 0.0984793718497835, 0.08338208766337196, 0.08491287804040881, 0.05388937458968157, 0.08384374272749318, 0.14441988706099784, 0.07651423798604251, 0.07308751800669067, 0.11216343721441846, 0.07897220736583388, 0.05882231905541613, 0.10694040440688446, 0.07418630913175672, 0.0933333255923382, 0.929655146977434, 0.8551393066901715, 0.7006285488016953, 0.7398183941690364, 0.7452567035236691, 0.8521579779831521, 0.7187844868362825, 0.9159784811145614, 0.703081498926199, 0.6378033599382884, 0.19976016304576638, 0.20194911537230387, 0.6329140006469354, 0.6470744622814426, 0.22757992628729795, 0.5795046622766103, 0.21335435989019103, 0.20443314407249835, 0.17244485868398374, 0.1242310347785337, 0.1658569642802038, 0.24183146266569233, 0.1875277707536529, 0.24253321939366146, 0.16469730305062058, 0.16242840401464476, 0.18343113013328038, 0.19664523704624748, 0.1751761476446041, 0.13165386719370675, 0.23624853015153235, 0.3036832205399551, 0.088056412189778, 0.30427962656254937, 0.25688777894276305, 0.1341863731747076, 0.22480508552693368, 0.22298980871255114, 0.11906050288439418, 0.16965173950083023, 0.1721978189931016, 0.23434460119258715, 0.26271273548089114, 0.07949521742068211, 0.21311456811659635, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928505151700632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019437600007550238, 0.004831973466790762, 9.999999999998899e-05, 9.999999999998899e-05, 0.047149762447473376, 0.05433857352125582, 0.10425505311086947, 0.07032423198263693, 0.030385149608689654, 0.020997336404114497, 0.18665039379393134, 0.058022989848169115, 0.06995601608089708, 0.2540697313322726, 0.03587814372609133, 0.20256033699199594, 0.11960910656510859, 0.11013196059755281, 0.1722524475710041, 0.09625319579773928, 0.22176640990526952, 0.07423257968205965, 0.03806145456569443, 0.2652206311435773, 0.09494015819519008, 0.0675179638548401, 0.2273329556493846, 0.04950743074545849, 0.1164549198410918, 0.18620540670790575, 0.08972867133125328, 0.5340160806110719, 0.5305118868546895, 0.5335586935174821, 0.5590947134267692, 0.5702172139425532, 0.5241345760152751, 0.5555182049294468, 0.5843099314826243, 0.6278381407508231, 0.0517051295734271, 0.04752494373735339, 0.04386822909143506, 0.07106668792154558, 0.08023657117920813, 0.08367184471190325, 0.048450601438646435, 0.06413830801578424, 0.05960651449104715, 0.2236946240623734, 0.16817087475945447, 0.36113888809397576, 0.13858268019528985, 0.21866287539836804, 0.22365686355682923, 0.12230388646917423, 0.15973323549171836, 0.17661264102494023, 0.17709200798516778, 0.16450897907887774, 0.11926352048521782, 0.21958557188676608, 0.16065526956085086, 0.21865910969618763, 0.1687614811965601, 0.15068320449448025, 0.1689852050437305, 0.126805122872519, 0.07517880743260352, 0.10533906724486863, 0.19379261353558075, 0.371130306086745, 0.11336982258677253, 0.13355578370185872, 0.09086787756795345, 0.11391027807485676, 0.18668071915391626, 0.1580773626112657, 0.16358674200234724, 0.20230344703037573, 0.20353597456891293, 0.14889937232660544, 0.209817110280633, 0.1625466406467896, 0.13638626852433278, 0.1830605539547855, 0.1739082492277363, 0.18696234379053123, 0.19652209788245323, 0.22403614006953088, 0.17808777047840973, 0.1729991924710914, 0.18038731280212394, 0.18139263503284286, 0.18834919253782278, 0.17878480134500152, 0.12451956022754962, 0.17347457796769084, 0.12924808757361228, 0.13041297552941855, 0.13257252441561573, 0.12503700058673117, 0.1665884239383466, 0.6779421657992011, 0.1133052226965956, 0.11579714130626306, 0.16834742114871115, 0.20736424943797327, 0.15558645383965963, 0.3093386537556998, 0.1330900239372269, 0.2991466443189915, 0.2578472680843884, 0.2517428219320226, 0.2029561573802512, 0.21331599265313894, 0.21166080359471617, 0.21477580865638501, 0.31496007035855045, 0.224192840442909, 0.29377026703801346, 0.055095597478557856, 0.07529939126108298, 0.05090616294942063, 0.07620947637770092, 0.051414814269120646, 0.07727308362503793, 0.06621718237288299, 0.05252550446974524, 0.054201180585253694]}, "mutation_prompt": null}
