{"id": "0dd18b1b-b322-42b9-933c-f697c02ce11f", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "66e23f1c-9371-43a8-8372-9cda7f7666c3", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dd18b1b-b322-42b9-933c-f697c02ce11f", "metadata": {}, "mutation_prompt": null}
{"id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 2, "fitness": 0.18521273080272696, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0dd18b1b-b322-42b9-933c-f697c02ce11f", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "691a6d6b-d9b5-4b04-9af4-1e57144c57e1", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "7a49e334-9937-4273-b5ad-699ea99310d1", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_rate = 1.0 / np.sqrt(_ + 1)  # Adaptive mutation rate\n            candidate_solution = best_solution + mutation_rate * np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Improving exploration by incorporating adaptive mutation rate based on fitness progress.", "configspace": "", "generation": 4, "fitness": 0.15301718817573418, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.18.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.6895885831914957, 0.6895869883086876, 0.7075989912436582, 0.6416717018978237, 0.6440758089048225, 0.6644202089854364, 0.6657640782699115, 0.7049792516191107, 0.670473349403659, 0.036392608879285415, 0.002823829928994215, 9.999999999998899e-05, 0.08560229955569487, 0.0654133115228751, 9.999999999998899e-05, 0.02383187276387344, 0.030062401661007376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024727966867287288, 9.999999999998899e-05, 9.999999999998899e-05, 0.01571858257754355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14096276495134408, 0.06506609409852404, 0.06949902438546285, 0.08937037830431505, 0.07934368521558555, 0.1119425938004146, 0.08288582815534051, 0.09194734981973485, 0.12507066437823633, 0.5390232232585443, 0.2688006608077218, 0.19088871238743743, 0.47362000485283584, 0.5248199739112392, 0.38262253420480397, 0.46607582144209514, 0.23947713990637187, 0.4677521003376187, 0.04780454844153936, 9.999999999998899e-05, 9.999999999998899e-05, 0.027325354699322846, 9.999999999998899e-05, 9.999999999998899e-05, 0.0242042685996412, 9.999999999998899e-05, 9.999999999998899e-05, 0.2324230834768729, 0.2541695013583951, 0.2604660628597618, 0.22056308345519993, 0.2504416645838524, 0.22342446279314176, 0.2832472969096924, 0.23247290513251573, 0.2751436348096532, 0.302385185769975, 0.2474794425308764, 0.13200761838736086, 0.2799974944414928, 0.3007913860779261, 0.13111190594128308, 0.28707998781888955, 0.24444433592240744, 0.2505432594183893, 0.06403886552420701, 9.999999999998899e-05, 0.03453639358331895, 0.05627714179668897, 0.014068415068237083, 0.024788357118952664, 0.00514344758203511, 9.999999999998899e-05, 0.06121014437007766, 0.08293800152892494, 0.0598142277021676, 0.19701953674948125, 0.06568992198875745, 0.013224203201431028, 0.017102507365488462, 0.19618975268378291, 0.021486182846573665, 0.07046931550935098, 0.17055521787935324, 0.03507086072914767, 0.14171822156799319, 0.09818588676786966, 0.12116827760512316, 0.06374758940712033, 0.13090205502930863, 0.11525118956306757, 0.07733346053587431, 0.06296110007678468, 0.1192681663286852, 0.07419386342228007, 0.15304755513792456, 0.1406059011455878, 0.1000035407161799, 0.0845337304488305, 0.06773147158555626, 0.08682999382383916, 0.5567689942528911, 0.5081554529048145, 0.5832052471999042, 0.5559593859532383, 0.4594380921610415, 0.47135871500194715, 0.5756312665965091, 0.5543040446130776, 0.5693808320110406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13723477789202043, 0.07531717084355971, 0.08082986410403026, 0.07113427355266011, 0.12455664609882022, 0.08296862881933553, 0.04955628912384091, 0.23553620053083368, 0.08031563819398801, 0.1150772424314811, 0.10076527810992031, 0.10431838682656203, 0.14329919489935616, 0.06737584558957932, 0.10746087700475304, 0.14952787993365624, 0.07842987560860204, 0.09298956138124781, 0.05005149308440593, 0.03415132017600753, 0.031883406952077364, 0.07943872527305407, 0.0037069983946197427, 0.049448311060866446, 0.06898677615302728, 0.011340784703952833, 0.02293577867573371, 0.1723401269359065, 0.04494560423361271, 0.11428927156892987, 0.18835067353731383, 0.0601534795929769, 0.07183922208307503, 0.20412974472467238, 0.05270937927023389, 0.08966545759335953, 0.16073551439571487, 0.17139040641787961, 0.1750744237952807, 0.16034990351047362, 0.18487309713273548, 0.17795965096104904, 0.15493080053726715, 0.16574284263912165, 0.16836576145042326, 0.18905752545761434, 0.1375985804006543, 0.9089705620682128, 0.17411564206888486, 0.11162771418713313, 0.06162364543475973, 0.10850892751016306, 0.11540779156818737, 0.1675466085808024, 0.10542617415617117, 0.11341275927098105, 0.08110604949161226, 0.01587923133675484, 0.20473048988747267, 0.20385678238457605, 0.11147171976237202, 0.05875772468246154, 0.051444476464230116, 0.2722898566783307, 0.2604493939114132, 0.20599167101209537, 0.275800317037021, 0.198103431739014, 0.2626943964861552, 0.26045128525778005, 0.2381161189358385, 0.28328814695162363, 0.026668810759687078, 9.999999999998899e-05, 0.029919615416628575, 0.03344085256768392, 9.999999999998899e-05, 0.014851189852177926, 0.03887129699843739, 0.008401254189690177, 0.033071787523054286]}, "mutation_prompt": null}
{"id": "b95c1d14-c238-4cda-8d69-176c8fec6c33", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_factor = np.random.uniform(0.1, 0.5) * np.linalg.norm(best_solution - candidate_solution) / self.dim\n            candidate_solution = best_solution + mutation_factor * np.random.uniform(-1.0, 1.0, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Introducing a dynamic mutation factor based on the fitness difference between the candidate and current best solutions to adapt the search step.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'candidate_solution' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'candidate_solution' referenced before assignment\")", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {}, "mutation_prompt": null}
{"id": "df4eb8cc-388b-45c8-b991-26e0817dda21", "solution": "import numpy as np\n\nclass DynamicMutationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  \n        best_fitness = func(best_solution)\n        mutation_scale = 0.5  # Initial mutation scale\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + mutation_scale * np.random.uniform(-0.5, 0.5, self.dim)  \n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  \n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                mutation_scale *= 1.01  # Adaptive mutation scaling factor\n            else:\n                mutation_scale *= 0.99\n        \n        return best_solution", "name": "DynamicMutationAlgorithm", "description": "Utilizing a dynamic mutation scaling factor to adaptively adjust the exploration-exploitation balance during the optimization process.", "configspace": "", "generation": 6, "fitness": 0.1789445422342052, "feedback": "The algorithm DynamicMutationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.25.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.9665991165705765, 0.962773219858953, 0.9651137293184354, 0.9596896173630254, 0.9575044552316596, 0.959427296079636, 0.9619451929238957, 0.9646384749974268, 0.9595201921109633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003432592247079036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0072137060723187485, 9.999999999998899e-05, 9.999999999998899e-05, 0.023094301855082766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11247319614152607, 0.0648821493274816, 0.07738811411338953, 0.08547416625995496, 0.07115642944743117, 0.09613848617171539, 0.09017953700363868, 0.08558258185562118, 0.14301217826987977, 0.9353501996699283, 0.9064103576365914, 0.05922271778593435, 0.9389558874929639, 0.942476989813693, 0.21493538574713167, 0.93446297641609, 0.8965968361801888, 0.7111315208305677, 0.10162270950348262, 0.017436416366091945, 0.011786776740809524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024199559945207283, 9.999999999998899e-05, 9.999999999998899e-05, 0.24156662077451418, 0.2081896081542134, 0.1749007083800731, 0.18201884184948347, 0.2139526107081079, 0.16367301101843423, 0.20349590426207598, 0.21235364183183503, 0.18003864011903692, 0.2275000609566803, 0.2051307515745885, 0.1378300220265879, 0.20442682455285655, 0.41041643383505333, 0.21782855921816613, 0.247636165287889, 0.28362653181823727, 0.17639846239491452, 9.999999999998899e-05, 9.999999999998899e-05, 0.06344317456353421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08106539984785355, 0.080944666147439, 0.14583035198860306, 0.060253904137452796, 0.010144866761479299, 0.012922262170527943, 0.1428991186613191, 0.02080521558879811, 0.08081824476489363, 0.24763711215762574, 0.04949180056044822, 0.24369578561383265, 0.09422411117284024, 0.13627291353429116, 0.09088102853208346, 0.32588012439679437, 0.13429328793415918, 0.123340738789536, 0.04231052111263256, 0.1971466799822631, 0.11457133519727081, 0.12083752319876462, 0.07950799217292137, 0.08421977602670738, 0.09277138837464971, 0.0917329655686624, 0.09436412848238085, 0.5262983245091514, 0.5360119617345738, 0.5530265247512663, 0.5330942704904558, 0.5133990023465345, 0.5226912859896942, 0.5364705633382548, 0.5271141611227854, 0.5193972226541889, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006288382037604401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12547839268492678, 0.0955882839001353, 0.16364408649041706, 0.11029428105964922, 0.11574247445139063, 0.1306981170326973, 0.14279561191024492, 0.15552956376040694, 0.10288442503999085, 0.11503913118138065, 0.09639840837145786, 0.10904203831652193, 0.14326629236211097, 0.07098090878411512, 0.10812912539889419, 0.14007569587831437, 0.07819038588662586, 0.09342188362027881, 0.047077369534325175, 0.033335426770819354, 0.0351579226990647, 0.08220752204122073, 9.999999999998899e-05, 0.06413986221376455, 0.07274499437310311, 0.012358833299106253, 0.02452099817041742, 0.19925613493137884, 0.08801127785541119, 0.09510958569445171, 0.19454499921673218, 0.07765421507991976, 0.09221705511721867, 0.20280758549028544, 0.07499647573223389, 0.08847486444221031, 0.15453601456007904, 0.16374600605302747, 0.164210404014001, 0.18442455887871978, 0.17612353432965588, 0.15580505435110303, 0.16348607947189175, 0.18327358724689324, 0.1837024512421489, 0.18986605578267668, 0.13780985803212065, 0.9755070386941583, 0.1741851641020743, 0.06598259935481787, 0.061916585386783796, 0.1088228954140652, 0.11543296540800074, 0.16889389387851605, 0.5146103003979958, 0.11345881669105273, 0.0832276045359246, 0.015894799740217014, 0.21409023599883392, 0.21302936933032202, 0.05012692845209221, 0.059277684262854735, 0.05141258535508586, 0.23244844679192, 0.19226390497202517, 0.23906410565010372, 0.18902103031419604, 0.27947091769404186, 0.2113338150597701, 0.23236757813825937, 0.2182432034954841, 0.2647946854728609, 0.03753991822613212, 0.004778214612521481, 0.02907583860876961, 0.037892679591516765, 0.003956290799621676, 0.019898579481788192, 0.0419593982860853, 0.01401418355582007, 0.035722449555673275]}, "mutation_prompt": null}
{"id": "349f3e9c-c32e-482b-a828-5f516546f51c", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "61ffed30-fe0e-4845-8639-6994a11cb530", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        mutation_rate = 0.5\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)  # Mutation step with dynamic rate\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                mutation_rate *= 0.9  # Adjust mutation rate based on fitness improvement\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing a dynamic mutation rate that adapts based on the fitness improvement.", "configspace": "", "generation": 8, "fitness": 0.05321250426477677, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.11894767351142022, 0.06795081406575332, 0.11742896261463809, 0.03528662070043698, 0.030488501859195605, 0.05212418307599542, 0.07171941139986249, 0.10539293011019057, 0.0557006235468811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020105783128411492, 9.999999999998899e-05, 9.999999999998899e-05, 0.012042213969376658, 9.999999999998899e-05, 0.006588716428002739, 0.015622545861838644, 9.999999999998899e-05, 9.999999999998899e-05, 0.02362881209584833, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023990665608570882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02682229363519195, 0.015494686553488624, 0.005957286418652785, 0.015758945088080734, 0.030550358179240122, 0.01815034686893302, 0.016536530929460946, 0.03156851564376162, 0.018018547990116707, 0.08925020206260614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04190867724618241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09110882503201956, 0.04357647569134493, 0.02138952754916823, 0.09070725217186537, 9.999999999998899e-05, 9.999999999998899e-05, 0.07655996423521827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09273856340889974, 9.999999999998899e-05, 9.999999999998899e-05, 0.0535080444949364, 9.999999999998899e-05, 9.999999999998899e-05, 0.05672541565562317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06809276256895935, 0.004890978895221276, 0.01139150008953782, 0.20811230473340014, 0.03038675302511329, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10218392397934384, 0.036210825426543525, 0.16966079992128835, 0.09049808167274842, 0.04397733959267902, 0.0027182482600508484, 0.14736829064551327, 0.1288638891061823, 0.08286893592327649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008848102175209371, 0.0009026619039111949, 0.019479953090635327, 0.029176723932293536, 0.006638062501513553, 0.38992734361257286, 0.1685495672664813, 0.18269503540496868, 0.08693566565720734, 0.16162661402117795, 0.21835776363022963, 0.12342302720184473, 0.1949590333408714, 0.1275389738549877, 0.13526500915020823, 0.10299684039639179, 0.10521951705349131, 0.17046137924474059, 0.0734175316007617, 0.11681995917870558, 0.15994773570367926, 0.09055405657118187, 0.0905704721335433, 0.05982405539303892, 0.041426655134437884, 0.036462463432423986, 0.14294219572357558, 0.005274611347238944, 0.08207744622397017, 0.1089456671376473, 0.02191049982415394, 0.022037080534754727, 0.18862719120733762, 0.09047855741289446, 0.17117496538668164, 0.1945956779399799, 0.09947981932509298, 0.14102153768555503, 0.18576352640631577, 0.10409326564742627, 0.13481597303096882, 0.15630972398798026, 9.999999999998899e-05, 9.999999999998899e-05, 0.15562439740263168, 9.999999999998899e-05, 9.999999999998899e-05, 0.16353097113266324, 9.999999999998899e-05, 9.999999999998899e-05, 0.15371116447766786, 0.13719619988987197, 0.06509269616756197, 0.16860536313964547, 0.08354751820463258, 0.04398644412837116, 0.09132278401916305, 0.11545543219837706, 0.1058788718989756, 0.38417776925189717, 0.10999427249831495, 0.015865223104984172, 0.015219104333221156, 0.021461249572000685, 0.022781721062901994, 0.04240857373483364, 0.03095447910963467, 0.12384267681395045, 0.17777884400351562, 0.18947334743741218, 0.1894675619826789, 0.18793993924878272, 0.19060247503981043, 0.1762140452951455, 0.19044833609594758, 0.18093539759782828, 0.18087479639508164, 0.03204875883248748, 0.024749661378223986, 0.030208921472911765, 0.04363016102553807, 0.007820789134619366, 0.05488847210192094, 0.06689380073419593, 0.00792426950453351, 0.051990538738409864]}, "mutation_prompt": null}
{"id": "d51e0e2c-3fec-4930-8949-a227890b660b", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "a5132cfa-e4b7-44cd-9942-ea76773142fd", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        mutation_step_size = 0.5\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-mutation_step_size, mutation_step_size, self.dim)  # Dynamic mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                mutation_step_size *= 0.95  # Update mutation step size\n\n        return best_solution", "name": "ImprovedMetaheuristicAlgorithm", "description": "Introducing a dynamic mutation step size based on the fitness improvement of candidate solutions.", "configspace": "", "generation": 10, "fitness": 0.08784346965039075, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.10.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.4739149536888969, 0.1467797389842379, 0.24089168731686705, 0.07415924691533893, 0.07249231918614496, 0.096922456272594, 0.13015242000091987, 0.2539856431417513, 0.09613290881135383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001716346887675746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07869768899753382, 9.999999999998899e-05, 0.007951637777328657, 0.014610921954523515, 9.999999999998899e-05, 0.01499406847900464, 0.03898897552324543, 9.999999999998899e-05, 0.0034238727828825866, 0.06497508494727222, 9.999999999998899e-05, 9.999999999998899e-05, 0.02937226030005291, 9.999999999998899e-05, 0.011795656817261468, 0.0027100168615473708, 9.999999999998899e-05, 9.999999999998899e-05, 0.0586227291684841, 0.02787933721994773, 0.02233067067572936, 0.04164947776814021, 0.04603561963573388, 0.03683852352179873, 0.041731934111214786, 0.04535485445811627, 0.03618239703204418, 0.3057680633561005, 9.999999999998899e-05, 9.999999999998899e-05, 0.05492244898245213, 0.11707608124709856, 0.0030472341143462645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11579040231356652, 0.06564397146504108, 0.041423728742232324, 0.19981630383197668, 9.999999999998899e-05, 9.999999999998899e-05, 0.08181990664246186, 9.999999999998899e-05, 9.999999999998899e-05, 0.23246616068740178, 9.999999999998899e-05, 9.999999999998899e-05, 0.23681986761105722, 9.999999999998899e-05, 9.999999999998899e-05, 0.18804560421690952, 9.999999999998899e-05, 0.05280948733225799, 0.2022479450649779, 0.05094994457222202, 0.13331840271440853, 0.26403533845541494, 9.999999999998899e-05, 0.08793544082348204, 0.23245426064632602, 9.999999999998899e-05, 0.0855389900521224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.142445018017049, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018855273576701137, 9.999999999998899e-05, 9.999999999998899e-05, 0.08170246097286615, 0.07598638271445057, 0.21453194790313734, 0.07323564262323057, 0.0266339519766865, 0.025235205280472073, 0.2035668640346484, 0.045532786553800775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08984070167186042, 0.2385911529579896, 0.10308037586157848, 0.6046723911113365, 0.1272661096292259, 0.10607990023734748, 0.07644774776491137, 0.2070730734686902, 0.18562870594032033, 0.1780769969676942, 0.006428999194775131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04154785061304633, 0.02207828616875418, 0.03784795351404702, 0.031961326156499825, 0.25559238880710144, 0.1546223642849638, 0.16286997355252575, 0.17806949518345117, 0.1436489978527088, 0.19434380550581387, 0.11653028834424672, 0.28079674241724917, 0.13003707577356705, 0.13258235955488673, 0.11107484677192991, 0.11685989259020169, 0.18421184485509945, 0.1021949602292721, 0.11573734629075538, 0.2198244928360592, 0.0993266829012367, 0.09013374980997602, 0.08136167899897451, 0.05897236063155653, 0.05829682811932124, 0.21357529106719486, 0.019299466330591875, 0.08261637768476471, 0.20252383229643278, 0.03921445969479265, 0.028211261691819534, 0.19656260506964085, 0.13517201627518172, 0.194003569113262, 0.20555558480578917, 0.13541439296298452, 0.1606325260544742, 0.2645502536681953, 0.13222313767441196, 0.1619272466038434, 0.16059406786964558, 9.999999999998899e-05, 0.15988755178994363, 0.16296090970335897, 0.16105558156653277, 0.15924311987259776, 0.1629947600585978, 9.999999999998899e-05, 0.06805053136112615, 0.19000141588766106, 0.13782034348698302, 0.16785864284058682, 0.17416574006944285, 0.10562309227903666, 0.06177661180505534, 0.10890897364011021, 0.11538653396311926, 0.16623456111287505, 0.7631916842918145, 0.1135431754456393, 0.06496901012454714, 0.015897562399901255, 0.09796807860889478, 0.08024216162896158, 0.10732190818233334, 0.05932569167860113, 0.17671955341927714, 0.18027012388968977, 0.18720848956487324, 0.18265616428504616, 0.18089619280562008, 0.18922364768512823, 0.17985356318348167, 0.1948122814796488, 0.18485139712364207, 0.19305910235083712, 0.05869451199278031, 0.05333327615419259, 0.06151220817597658, 0.0677251728732372, 0.027355126910136862, 0.05019797728068209, 0.07490129205943863, 0.03213278372261141, 0.05999125737677802]}, "mutation_prompt": null}
{"id": "8b4c4631-9842-46a7-a77c-c3afbecae3b5", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "7e89ba07-ec77-4759-83dc-afe761d16fea", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "30467558-30c7-4c8f-910f-923516ff8ebb", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_step_size = 0.5  # Initial mutation step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        mutation_step_size = self.initial_step_size\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-mutation_step_size, mutation_step_size, self.dim)  # Dynamic mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                mutation_step_size *= 0.99  # Decrease mutation step size for exploitation\n            else:\n                mutation_step_size *= 1.01  # Increase mutation step size for exploration\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Employing a dynamic mutation strategy based on the function landscape to adaptively adjust the mutation step size during optimization.", "configspace": "", "generation": 13, "fitness": 0.13788048946295373, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.31361615500814755, 0.2894879099094333, 0.25605479796476616, 0.3013387668498252, 0.29082097441433064, 0.2612113780669051, 0.2622280312441977, 0.2792005962079406, 0.2568987808705415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043804676333259907, 0.04335395144312537, 0.0536183497233782, 0.05301831074711194, 0.0474896665627077, 0.035670255239001025, 0.04567271850294785, 0.03800786864874117, 0.045686631323020865, 0.046813457786705315, 0.04432175984688469, 0.015639527422525834, 0.042052815597827586, 0.030308898513417226, 0.027247013421917265, 0.04892790538707781, 0.04350129193210128, 0.03645437500514204, 0.9744494831769362, 0.9781190988422419, 0.9758824831554272, 0.9676071697870204, 0.9770403434513378, 0.9750838697190702, 0.9753945488794791, 0.9679059146760857, 0.9803435911843876, 0.15706512238624548, 0.09653992158063962, 0.0991090118539032, 0.14205025613519517, 0.16780433986975385, 0.1001509475266168, 0.137949608775768, 0.1352307989150029, 0.13666231339419355, 0.17308313678691611, 0.08802631283311768, 0.09955330282537511, 0.195754549375314, 0.1674006259291111, 0.15497029959088138, 0.111878157795966, 0.14306338404608743, 0.1530440090694385, 0.06159760424905458, 0.0700384000864287, 0.04619687059585087, 0.038905520496615664, 0.07360241104706144, 0.013608336800088217, 0.07957416124570682, 0.06676009426947072, 0.06962679535235838, 0.10566538797031211, 0.08972210962132687, 0.0442332525826421, 0.059185619370047626, 0.054569201878765905, 0.1037320425409134, 0.09786361842888325, 0.05659707104312006, 0.07680377434019592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04807224448755165, 0.059767310497151116, 0.09164623388520543, 9.999999999998899e-05, 0.015892339665482202, 0.008976933904350282, 0.031705318762812795, 9.999999999998899e-05, 0.0639766143856183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010903286453581185, 0.0024714565705491465, 0.030262995304244367, 0.025154762124859342, 0.01841527411964472, 0.030825512978797986, 0.01562623978828437, 0.002774022646088836, 0.029700890148686487, 0.2700383121783285, 0.2706675208168341, 0.2599581731494327, 0.2765358564882975, 0.2542922636881464, 0.2527187272173652, 0.2783365445813849, 0.27934305512983626, 0.2696434356172688, 0.0629903580092781, 0.05131183572086406, 0.036944841884200996, 0.06458889269490142, 0.05791187644291873, 0.05401715961269149, 0.05938344092137937, 0.06715692640386184, 0.060843369873976316, 0.11417991176361297, 0.14544632139043734, 0.1867648249866345, 0.11205373179705835, 0.10702639761876165, 0.1186716936984854, 0.0975120185056283, 0.15831986308982926, 0.12963622310188183, 0.17213869388896497, 0.13352717175326856, 0.13233062653298022, 0.2100110973783903, 0.149938740019245, 0.15081142717764173, 0.15300666832156107, 0.11550077016610227, 0.14459822720516768, 0.10354132242196779, 0.08970827889092747, 0.05971298933474334, 0.10731227692180312, 0.09670819563971178, 0.06180733798854254, 0.11375028711536228, 0.09410324194336939, 0.08230938478638816, 0.16903739823777864, 0.13232698868841852, 0.13009545301160974, 0.16845789822987534, 0.13857572961000353, 0.1673089412224792, 0.13728614774508718, 0.1523580758968901, 0.23268396027208615, 0.1521705484445285, 0.15159277710698893, 0.15859388840415978, 0.16162715055158883, 0.15585415976697636, 0.15082701514639152, 0.1563914147215968, 0.15301121201358614, 0.16536373972616292, 0.17810368594941173, 0.1270331218300138, 0.33808736395899885, 0.1689593044514739, 0.08514508686893318, 0.0928839750325795, 0.10687801822789245, 0.11295722523573681, 0.15090632221812517, 0.23174289499432232, 0.10641451372852995, 0.0840704646866881, 0.08058547782344316, 0.16687768365736066, 0.1597479109729868, 0.11199033380636925, 0.1236425488137678, 0.1551585792561927, 0.1572185912084364, 0.1668405754598572, 0.16944303728844679, 0.15702299015189403, 0.15460664799751045, 0.17082956735564025, 0.1663986409943432, 0.1873952906922195, 0.16402200688684643, 0.028581528929766842, 0.05579846670167332, 0.04075840761632077, 0.05758436185077864, 0.036872319245361385, 0.04545346872601641, 0.06834497136071116, 0.04729467701638135, 0.04489967716109167]}, "mutation_prompt": null}
{"id": "76345c82-545f-4a73-a5c8-10109d3a977f", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_step = 0.5 / np.sqrt(_ + 1)  # Dynamic mutation step\n            candidate_solution = best_solution + np.random.uniform(-mutation_step, mutation_step, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Introducing a dynamic mutation step size based on the fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 14, "fitness": 0.1530171881757331, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.18.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.6895885831914956, 0.6895869883086876, 0.7075989912436582, 0.6416717018978237, 0.6440758089048126, 0.6644202089854364, 0.6657640782699398, 0.7049792516191202, 0.6704733494036621, 0.036392608879285415, 0.002823829928994215, 9.999999999998899e-05, 0.08560229955569487, 0.0654133115228751, 9.999999999998899e-05, 0.02383187276387344, 0.030062401661007376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024727966867287288, 9.999999999998899e-05, 9.999999999998899e-05, 0.01571858257754355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14096276495134408, 0.06506609409852404, 0.06949902438546285, 0.08937037830431505, 0.07934368521558555, 0.1119425938004146, 0.08288582815534051, 0.09194734981973485, 0.12507066437823633, 0.5390232232585436, 0.2688006608077218, 0.19088871238743743, 0.47362000485283584, 0.5248199739112392, 0.38262253420454206, 0.4660758214420957, 0.2394771399063289, 0.4677521003376187, 0.04780454844153936, 9.999999999998899e-05, 9.999999999998899e-05, 0.027325354699322846, 9.999999999998899e-05, 9.999999999998899e-05, 0.0242042685996412, 9.999999999998899e-05, 9.999999999998899e-05, 0.2324230834768729, 0.2541695013583951, 0.2604660628597618, 0.22056308345519993, 0.2504416645838524, 0.22342446279314176, 0.2832472969096924, 0.23247290513251573, 0.2751436348096532, 0.302385185769975, 0.2474794425308764, 0.13200761838736086, 0.2799974944414928, 0.3007913860779261, 0.13111190594128308, 0.28707998781888955, 0.24444433592240744, 0.2505432594183893, 0.06403886552420701, 9.999999999998899e-05, 0.03453639358331895, 0.05627714179668897, 0.014068415068237083, 0.024788357118952664, 0.00514344758203511, 9.999999999998899e-05, 0.06121014437007766, 0.08293800152892494, 0.0598142277021676, 0.19701953674948136, 0.06568992198875745, 0.013224203201431028, 0.017102507365488462, 0.19618975268378291, 0.021486182846573665, 0.07046931550935098, 0.17055521787940675, 0.03507086072917032, 0.14171822156788272, 0.09818588676786699, 0.12116827760512316, 0.06374758940712033, 0.13090205502930863, 0.11525118956306757, 0.07733346053587431, 0.06296110007678468, 0.1192681663286852, 0.07419386342228007, 0.15304755513792456, 0.1406059011455878, 0.1000035407161799, 0.0845337304488305, 0.06773147158555626, 0.08682999382383916, 0.5567689942528997, 0.5081554529048318, 0.5832052471998065, 0.5559593859532372, 0.45943809216096076, 0.47135871500194726, 0.5756312665967042, 0.5543040446130774, 0.5693808320110274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13723477789202043, 0.07531717084359257, 0.08082986410403026, 0.07113427355266011, 0.12455664609882022, 0.08296862881933553, 0.04955628912384091, 0.23553620053083368, 0.08031563819398801, 0.1150772424314811, 0.10076527810992031, 0.10431838682656203, 0.14329919489935616, 0.06737584558957932, 0.10746087700475304, 0.14952787993365624, 0.07842987560860204, 0.09298956138124781, 0.05005149308440593, 0.03415132017600753, 0.031883406952077364, 0.07943872527305407, 0.0037069983946197427, 0.049448311060866446, 0.06898677615302728, 0.011340784703952833, 0.02293577867573371, 0.17234012693590706, 0.04494560423358851, 0.11428927156892987, 0.18835067353733026, 0.0601534795929769, 0.0718392220830747, 0.20412974472467238, 0.05270937927023389, 0.08966545759335953, 0.16073551439571487, 0.17139040641787961, 0.1750744237952807, 0.16034990351047362, 0.18487309713273548, 0.17795965096104904, 0.15493080053726715, 0.16574284263912165, 0.16836576145042326, 0.18905752545761434, 0.1375985804006543, 0.9089705620682128, 0.17411564206888486, 0.11162771418713313, 0.06162364543475973, 0.10850892751016306, 0.11540779156818737, 0.1675466085808024, 0.10542617415617117, 0.11341275927098105, 0.08110604949161226, 0.01587923133675484, 0.20473048988747278, 0.20385678238457605, 0.11147171976237202, 0.05875772468246154, 0.051444476464230116, 0.2722898566783307, 0.2604493939114312, 0.20599167101209537, 0.2758003170370209, 0.19810343173901523, 0.2626943964861552, 0.26045128525778005, 0.23811611893583862, 0.28328814695162363, 0.026668810759687078, 9.999999999998899e-05, 0.029919615416628575, 0.03344085256768392, 9.999999999998899e-05, 0.014851189852177926, 0.03887129699843739, 0.008401254189690177, 0.033071787523054286]}, "mutation_prompt": null}
{"id": "77cb308d-5a01-42e0-a26b-b61b40c2bf10", "solution": "import numpy as np\n\nclass DynamicMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.step_size = 0.5  # Initial step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-self.step_size, self.step_size, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                self.step_size *= 0.99  # Dynamic step size adaptation\n        \n        return best_solution", "name": "DynamicMetaheuristicAlgorithm", "description": "Introducing dynamic step size adaptation to enhance exploration and exploitation balance.", "configspace": "", "generation": 15, "fitness": 0.18332210953843442, "feedback": "The algorithm DynamicMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.38370366964303926, 0.41209062807389896, 0.39802946453521104, 0.43182978800796035, 0.4173357683239749, 0.42906869065967024, 0.4572533847328678, 0.3959168158734655, 0.4434994241993556, 0.002576740236648223, 0.00014579795311076005, 9.999999999998899e-05, 0.009302159690808054, 0.03913712303238592, 9.999999999998899e-05, 9.999999999998899e-05, 0.03623219448461312, 9.999999999998899e-05, 0.09173830034369057, 0.010857601003833262, 0.017645038176595684, 0.0621063268605776, 0.03473827061580759, 0.03993780437623029, 0.06441215709986103, 0.016337638710555824, 0.07227827167198686, 0.09377535602091103, 0.024089494321342553, 0.03134224119317763, 0.05148774500631337, 0.03119051357680125, 0.05082312745405981, 0.059516656241819677, 0.03643932436574182, 0.05994667582407853, 0.9373303064911331, 0.887778008987977, 0.9004753885685626, 0.8938982327818579, 0.8458450883522837, 0.8815974160671548, 0.9436480519173506, 0.9329676138547321, 0.96755808199313, 0.2712805569480653, 0.3449278994574221, 0.30824534868069187, 0.30080992062249823, 0.31332978553731505, 0.32518974558416314, 0.309013116356767, 0.37100183730397407, 0.28956500800283225, 0.16147165356747595, 0.11230429028736866, 0.08426585448664425, 0.2812781453021388, 0.11108860465118309, 0.11162324590612838, 0.1793063004210449, 0.10752145330442886, 0.12906065583373982, 0.17375934958774653, 0.14902005288826714, 0.19827295973176373, 0.13926678445935214, 0.19377529363236723, 0.06960424410061783, 0.15000200187606938, 0.1737305631258338, 0.18342809800127358, 0.15829255810945198, 0.15877600803146974, 0.1111166145842779, 0.178784357256496, 0.18668416835396628, 0.18155620233205017, 0.1795798790933002, 0.185229674074034, 0.1323024488134752, 0.0424335954886077, 0.0035888339199585673, 0.044584555958016026, 0.02706261747963523, 0.005506733362459326, 0.07586131590040912, 9.999999999998899e-05, 9.999999999998899e-05, 0.012780026065529082, 0.09760378106983225, 0.11069818887683036, 0.19270199774392494, 0.0747579581667005, 0.05764246365281345, 0.03499504877992965, 0.21606156960229816, 0.06937810998737803, 0.09742556543505487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09531113229656618, 0.07173867447767679, 0.10076144119180974, 0.11285391094594266, 0.07688565994840302, 0.11305978168908715, 0.07159926906882885, 0.11254212325707469, 0.0862833174470008, 0.40008209073501233, 0.40814260084596654, 0.3881699783368735, 0.392632462923291, 0.42242056674947526, 0.4002782094677261, 0.3956807365083931, 0.3920404702416237, 0.40025546379740895, 0.10200173325656525, 0.011012899515130958, 0.07841600406579585, 0.05290588617999514, 0.05952741460944666, 0.08082023544635175, 0.07220969802472954, 0.1096330808294399, 0.07364438533863504, 0.2299536747842732, 0.1547889830789203, 0.1826187583216472, 0.17180954991382147, 0.14732884635484733, 0.15490013203218256, 0.14696290065900852, 0.2597306359035497, 0.10972746155640833, 0.2560342634434498, 0.23098889574955273, 0.10817373073094239, 0.23065546306366635, 0.12898722024603648, 0.11681664544244308, 0.2034709722646071, 0.14839555988852604, 0.088763584652916, 0.20673557193027625, 0.1017238872200924, 0.059412265387406515, 0.19062800068457708, 0.18253029125395126, 0.08209854461680166, 0.1727171390474569, 0.09692424080966922, 0.04088300720309379, 0.2134436489070517, 0.19898781344677385, 0.20123307273679703, 0.20667541136143774, 0.19927718512739745, 0.20059305536625405, 0.27218805499983645, 0.17414353712033792, 0.18585451488995075, 0.17496271961784893, 0.16245623137372256, 0.17113535275500413, 0.18533133817112213, 0.1816856392891898, 0.16759758399876168, 0.1808018951239575, 0.17425482625552213, 0.16363112776283562, 0.1877452607637642, 0.1376325518719741, 0.6104228508383444, 0.17388187982360392, 0.11264595965113822, 0.06197440924059483, 0.10873861693987952, 0.11532995671266622, 0.16882564251370136, 0.5155235982130988, 0.11335067509147234, 0.08322247792269877, 0.08322642258840474, 0.21346208255052834, 0.21327794270254985, 0.11340510333937182, 0.05928944107152734, 0.48034558216363676, 0.17985465669574918, 0.1787665723938664, 0.1828027431132062, 0.18865822174264635, 0.1903276992879256, 0.1817939010419184, 0.1815927401199119, 0.1845173714630568, 0.1758356819592053, 0.052267219474194326, 0.08423381354087067, 0.08815016073176651, 0.07434532390798088, 0.05814747025137801, 0.10990021693117302, 0.06295147385982258, 0.03881917340608465, 0.05845888152430001]}, "mutation_prompt": null}
{"id": "37dd7f80-946b-4911-b20e-d5074031318a", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution\n            for _ in range(3):  # Multi-step mutation\n                candidate_solution += np.random.uniform(-0.5, 0.5, self.dim)\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Exploiting the best solution by incorporating a multi-step mutation strategy to enhance exploration in the solution space.", "configspace": "", "generation": 16, "fitness": 0.06762435937132219, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.23476681651244513, 0.12156786029954747, 0.25091428367550994, 0.18452307981783722, 0.1644905645923267, 0.21628935617255862, 0.11679880326980385, 0.1903818176682014, 0.23071816811029533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015119520088840988, 0.0001364222021243977, 0.00028024394273507003, 0.039631218367546905, 0.01995276864780826, 0.025426617858021916, 0.050730443931209956, 0.02508321568961125, 0.017592039165085227, 0.0022419611555262176, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017421208606736016, 0.00783809177518846, 0.01949261685830883, 9.999999999998899e-05, 0.01596152159858344, 9.999999999998899e-05, 0.06350549014257412, 0.06155862479612684, 0.15362252344624505, 0.11117049151641167, 0.08113786964151004, 0.10853596811973043, 0.1046215837388027, 0.10832796031886538, 0.0694113630142974, 0.06340161062823313, 9.999999999998899e-05, 9.999999999998899e-05, 0.12182540406154896, 0.04456060377994131, 0.022275140912085822, 0.03177280258381687, 9.999999999998899e-05, 0.043749515871337685, 0.07161157750706804, 0.08209558200463019, 0.02986000177161674, 0.0359452397275174, 9.999999999998899e-05, 0.0400629991865451, 0.039112670530173865, 0.04969285684314584, 0.002256508291890391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462480676841828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03338470926429926, 0.021945406764082187, 0.0639045969807055, 9.999999999998899e-05, 9.999999999998899e-05, 0.032696597248820236, 0.005595535122226325, 0.001537486147974776, 0.004856768140582557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009303664755827556, 0.12216346322466687, 0.1655689940643864, 0.20316639605651332, 0.19869000522433367, 0.2039132669609589, 0.2651379369255402, 0.15677063453601114, 0.19647369195204278, 0.14050335789413826, 0.008835692080231494, 0.022535126273008244, 0.026050816447338865, 0.02357510055658818, 0.05113519415733769, 0.020100224720816406, 0.04455468001220175, 0.019323076784541482, 0.0024896161806087225, 0.14013100773245513, 0.13541294211428123, 0.12237812552189531, 0.14831484367469971, 0.14731280693876703, 0.1221378502836109, 0.1291056141968937, 0.1294721188346346, 0.17073080465628498, 0.16203770612141122, 0.15118892139130968, 0.10956639312311545, 0.1458288647965852, 0.1527840658529418, 0.11036184456375997, 0.1587495897667517, 0.10976460812484257, 0.08629566623185436, 0.10781412960928594, 0.07057155602727794, 0.06319844832149213, 0.09209179928709732, 0.10621504631080192, 0.06879397560023304, 0.1241119126841399, 0.05812934608022646, 0.03386294029940051, 0.12907749397031787, 0.14741147089373607, 0.1303344391025938, 0.13729961110265687, 0.14213940743302989, 0.1471132587319004, 0.1300419262710213, 0.1253052070614873, 0.13306758936238583, 9.999999999998899e-05, 0.05568902792222652, 0.07382561185145242, 0.13905379890963654, 0.1620184334788024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11782890697353321, 0.1502016500727572, 0.11865223289254756, 0.07753589161564378, 0.1357893271019116, 0.1630139395754039, 0.09038681866584575, 0.12839190964084335, 0.24766002206925564, 0.09847146376544991, 0.10581988799175046, 0.0837599954533822, 0.06083855966648044, 0.2012294256836028, 0.11254239057822812, 0.05352757970748767, 0.045372863369158245, 0.10068330584574947, 0.15363047596252433, 0.18201777634971528, 0.18479031667592138, 0.20827998145823468, 0.1923436773774243, 0.19915238603312158, 0.18271678150057025, 0.18609354568569458, 0.1955685551932077, 0.17843352760260822, 0.014464889192510766, 0.031034418004770692, 0.042457281706542394, 0.03429315194664706, 0.0421598632118243, 0.0042560888153476695, 0.050286517616383364, 0.040545907274809334, 0.028640188113502885]}, "mutation_prompt": null}
{"id": "99da8a9e-b436-4022-9c3f-0d344175654d", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "11afe5c9-e998-4409-abdb-a1b1e03261ec", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "295b3ae2-9046-4d16-b707-da8a2ef1e61a", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "df6870cb-ce76-470d-8b49-582d782a7026", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "8de254d3-46db-4f29-bfe8-338382d6e078", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "8222c690-4f6a-47bb-9c8b-8d330c55786d", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "a8a67273-f581-4e1b-9406-a82202d428a9", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "1ac81ccf-fee1-40da-9dbf-96fcffa630e9", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "fffcb3c3-791a-4a03-ae8e-c3307b9f4afa", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "b0285175-fb25-4891-988e-46d9ff99664e", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        mutation_step_size = 0.5\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-mutation_step_size, mutation_step_size, self.dim)  # Dynamic mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                mutation_step_size *= 0.99  # Reduce mutation step size for exploitation\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Utilizing a dynamic mutation step size based on the fitness improvement of candidate solutions to enhance exploration and exploitation balance.", "configspace": "", "generation": 26, "fitness": 0.18332210953843442, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.38370366964303926, 0.41209062807389896, 0.39802946453521104, 0.43182978800796035, 0.4173357683239749, 0.42906869065967024, 0.4572533847328678, 0.3959168158734655, 0.4434994241993556, 0.002576740236648223, 0.00014579795311076005, 9.999999999998899e-05, 0.009302159690808054, 0.03913712303238592, 9.999999999998899e-05, 9.999999999998899e-05, 0.03623219448461312, 9.999999999998899e-05, 0.09173830034369057, 0.010857601003833262, 0.017645038176595684, 0.0621063268605776, 0.03473827061580759, 0.03993780437623029, 0.06441215709986103, 0.016337638710555824, 0.07227827167198686, 0.09377535602091103, 0.024089494321342553, 0.03134224119317763, 0.05148774500631337, 0.03119051357680125, 0.05082312745405981, 0.059516656241819677, 0.03643932436574182, 0.05994667582407853, 0.9373303064911331, 0.887778008987977, 0.9004753885685626, 0.8938982327818579, 0.8458450883522837, 0.8815974160671548, 0.9436480519173506, 0.9329676138547321, 0.96755808199313, 0.2712805569480653, 0.3449278994574221, 0.30824534868069187, 0.30080992062249823, 0.31332978553731505, 0.32518974558416314, 0.309013116356767, 0.37100183730397407, 0.28956500800283225, 0.16147165356747595, 0.11230429028736866, 0.08426585448664425, 0.2812781453021388, 0.11108860465118309, 0.11162324590612838, 0.1793063004210449, 0.10752145330442886, 0.12906065583373982, 0.17375934958774653, 0.14902005288826714, 0.19827295973176373, 0.13926678445935214, 0.19377529363236723, 0.06960424410061783, 0.15000200187606938, 0.1737305631258338, 0.18342809800127358, 0.15829255810945198, 0.15877600803146974, 0.1111166145842779, 0.178784357256496, 0.18668416835396628, 0.18155620233205017, 0.1795798790933002, 0.185229674074034, 0.1323024488134752, 0.0424335954886077, 0.0035888339199585673, 0.044584555958016026, 0.02706261747963523, 0.005506733362459326, 0.07586131590040912, 9.999999999998899e-05, 9.999999999998899e-05, 0.012780026065529082, 0.09760378106983225, 0.11069818887683036, 0.19270199774392494, 0.0747579581667005, 0.05764246365281345, 0.03499504877992965, 0.21606156960229816, 0.06937810998737803, 0.09742556543505487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09531113229656618, 0.07173867447767679, 0.10076144119180974, 0.11285391094594266, 0.07688565994840302, 0.11305978168908715, 0.07159926906882885, 0.11254212325707469, 0.0862833174470008, 0.40008209073501233, 0.40814260084596654, 0.3881699783368735, 0.392632462923291, 0.42242056674947526, 0.4002782094677261, 0.3956807365083931, 0.3920404702416237, 0.40025546379740895, 0.10200173325656525, 0.011012899515130958, 0.07841600406579585, 0.05290588617999514, 0.05952741460944666, 0.08082023544635175, 0.07220969802472954, 0.1096330808294399, 0.07364438533863504, 0.2299536747842732, 0.1547889830789203, 0.1826187583216472, 0.17180954991382147, 0.14732884635484733, 0.15490013203218256, 0.14696290065900852, 0.2597306359035497, 0.10972746155640833, 0.2560342634434498, 0.23098889574955273, 0.10817373073094239, 0.23065546306366635, 0.12898722024603648, 0.11681664544244308, 0.2034709722646071, 0.14839555988852604, 0.088763584652916, 0.20673557193027625, 0.1017238872200924, 0.059412265387406515, 0.19062800068457708, 0.18253029125395126, 0.08209854461680166, 0.1727171390474569, 0.09692424080966922, 0.04088300720309379, 0.2134436489070517, 0.19898781344677385, 0.20123307273679703, 0.20667541136143774, 0.19927718512739745, 0.20059305536625405, 0.27218805499983645, 0.17414353712033792, 0.18585451488995075, 0.17496271961784893, 0.16245623137372256, 0.17113535275500413, 0.18533133817112213, 0.1816856392891898, 0.16759758399876168, 0.1808018951239575, 0.17425482625552213, 0.16363112776283562, 0.1877452607637642, 0.1376325518719741, 0.6104228508383444, 0.17388187982360392, 0.11264595965113822, 0.06197440924059483, 0.10873861693987952, 0.11532995671266622, 0.16882564251370136, 0.5155235982130988, 0.11335067509147234, 0.08322247792269877, 0.08322642258840474, 0.21346208255052834, 0.21327794270254985, 0.11340510333937182, 0.05928944107152734, 0.48034558216363676, 0.17985465669574918, 0.1787665723938664, 0.1828027431132062, 0.18865822174264635, 0.1903276992879256, 0.1817939010419184, 0.1815927401199119, 0.1845173714630568, 0.1758356819592053, 0.052267219474194326, 0.08423381354087067, 0.08815016073176651, 0.07434532390798088, 0.05814747025137801, 0.10990021693117302, 0.06295147385982258, 0.03881917340608465, 0.05845888152430001]}, "mutation_prompt": null}
{"id": "229a1525-78f2-4a1d-a1aa-009906709f61", "solution": "import numpy as np\n\nclass ImprovedNovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        radius = 0.5  # Initial search radius\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-radius, radius, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                radius *= 0.99  # Decrease search radius\n        \n        return best_solution", "name": "ImprovedNovelMetaheuristicAlgorithm", "description": "Expanding the search radius dynamically to explore a broader solution space efficiently.", "configspace": "", "generation": 27, "fitness": 0.18332210953843442, "feedback": "The algorithm ImprovedNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.38370366964303926, 0.41209062807389896, 0.39802946453521104, 0.43182978800796035, 0.4173357683239749, 0.42906869065967024, 0.4572533847328678, 0.3959168158734655, 0.4434994241993556, 0.002576740236648223, 0.00014579795311076005, 9.999999999998899e-05, 0.009302159690808054, 0.03913712303238592, 9.999999999998899e-05, 9.999999999998899e-05, 0.03623219448461312, 9.999999999998899e-05, 0.09173830034369057, 0.010857601003833262, 0.017645038176595684, 0.0621063268605776, 0.03473827061580759, 0.03993780437623029, 0.06441215709986103, 0.016337638710555824, 0.07227827167198686, 0.09377535602091103, 0.024089494321342553, 0.03134224119317763, 0.05148774500631337, 0.03119051357680125, 0.05082312745405981, 0.059516656241819677, 0.03643932436574182, 0.05994667582407853, 0.9373303064911331, 0.887778008987977, 0.9004753885685626, 0.8938982327818579, 0.8458450883522837, 0.8815974160671548, 0.9436480519173506, 0.9329676138547321, 0.96755808199313, 0.2712805569480653, 0.3449278994574221, 0.30824534868069187, 0.30080992062249823, 0.31332978553731505, 0.32518974558416314, 0.309013116356767, 0.37100183730397407, 0.28956500800283225, 0.16147165356747595, 0.11230429028736866, 0.08426585448664425, 0.2812781453021388, 0.11108860465118309, 0.11162324590612838, 0.1793063004210449, 0.10752145330442886, 0.12906065583373982, 0.17375934958774653, 0.14902005288826714, 0.19827295973176373, 0.13926678445935214, 0.19377529363236723, 0.06960424410061783, 0.15000200187606938, 0.1737305631258338, 0.18342809800127358, 0.15829255810945198, 0.15877600803146974, 0.1111166145842779, 0.178784357256496, 0.18668416835396628, 0.18155620233205017, 0.1795798790933002, 0.185229674074034, 0.1323024488134752, 0.0424335954886077, 0.0035888339199585673, 0.044584555958016026, 0.02706261747963523, 0.005506733362459326, 0.07586131590040912, 9.999999999998899e-05, 9.999999999998899e-05, 0.012780026065529082, 0.09760378106983225, 0.11069818887683036, 0.19270199774392494, 0.0747579581667005, 0.05764246365281345, 0.03499504877992965, 0.21606156960229816, 0.06937810998737803, 0.09742556543505487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09531113229656618, 0.07173867447767679, 0.10076144119180974, 0.11285391094594266, 0.07688565994840302, 0.11305978168908715, 0.07159926906882885, 0.11254212325707469, 0.0862833174470008, 0.40008209073501233, 0.40814260084596654, 0.3881699783368735, 0.392632462923291, 0.42242056674947526, 0.4002782094677261, 0.3956807365083931, 0.3920404702416237, 0.40025546379740895, 0.10200173325656525, 0.011012899515130958, 0.07841600406579585, 0.05290588617999514, 0.05952741460944666, 0.08082023544635175, 0.07220969802472954, 0.1096330808294399, 0.07364438533863504, 0.2299536747842732, 0.1547889830789203, 0.1826187583216472, 0.17180954991382147, 0.14732884635484733, 0.15490013203218256, 0.14696290065900852, 0.2597306359035497, 0.10972746155640833, 0.2560342634434498, 0.23098889574955273, 0.10817373073094239, 0.23065546306366635, 0.12898722024603648, 0.11681664544244308, 0.2034709722646071, 0.14839555988852604, 0.088763584652916, 0.20673557193027625, 0.1017238872200924, 0.059412265387406515, 0.19062800068457708, 0.18253029125395126, 0.08209854461680166, 0.1727171390474569, 0.09692424080966922, 0.04088300720309379, 0.2134436489070517, 0.19898781344677385, 0.20123307273679703, 0.20667541136143774, 0.19927718512739745, 0.20059305536625405, 0.27218805499983645, 0.17414353712033792, 0.18585451488995075, 0.17496271961784893, 0.16245623137372256, 0.17113535275500413, 0.18533133817112213, 0.1816856392891898, 0.16759758399876168, 0.1808018951239575, 0.17425482625552213, 0.16363112776283562, 0.1877452607637642, 0.1376325518719741, 0.6104228508383444, 0.17388187982360392, 0.11264595965113822, 0.06197440924059483, 0.10873861693987952, 0.11532995671266622, 0.16882564251370136, 0.5155235982130988, 0.11335067509147234, 0.08322247792269877, 0.08322642258840474, 0.21346208255052834, 0.21327794270254985, 0.11340510333937182, 0.05928944107152734, 0.48034558216363676, 0.17985465669574918, 0.1787665723938664, 0.1828027431132062, 0.18865822174264635, 0.1903276992879256, 0.1817939010419184, 0.1815927401199119, 0.1845173714630568, 0.1758356819592053, 0.052267219474194326, 0.08423381354087067, 0.08815016073176651, 0.07434532390798088, 0.05814747025137801, 0.10990021693117302, 0.06295147385982258, 0.03881917340608465, 0.05845888152430001]}, "mutation_prompt": null}
{"id": "f97fb9b1-0de6-45bb-8be7-b4c3821fdf40", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "69dc1213-e3e2-4d8a-89e9-4ba8bde9e779", "solution": "import numpy as np\n\nclass AdaptiveMutationMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        mutation_rate = 0.5\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-mutation_rate, mutation_rate, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                mutation_rate *= 0.95  # Decrease mutation rate for exploitation\n            else:\n                mutation_rate *= 1.05  # Increase mutation rate for exploration\n        \n        return best_solution", "name": "AdaptiveMutationMetaheuristicAlgorithm", "description": "Introducing a dynamic mutation rate based on fitness improvement for adaptive exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.11574546589182297, "feedback": "The algorithm AdaptiveMutationMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.20.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.256348842238464, 0.2883611539888531, 0.16923422561955193, 0.2738004749414654, 0.24553067333569634, 0.16607290026544796, 0.23728279786172612, 0.2582011161324127, 0.16770860178307356, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050279201869710466, 0.030246808474664766, 0.029063246364322892, 0.038696324890078126, 0.017978352005003972, 0.005507245044130138, 0.028914386006658965, 0.11212877550754019, 0.006971258513357337, 0.02862045337538288, 0.023537394716989235, 0.013821399842359416, 0.03604893953697086, 0.01383992546545032, 0.0191940461945711, 0.03918332256457613, 0.034824508473225935, 9.999999999998899e-05, 0.9874984083262517, 0.9868091554255614, 0.9852339438321933, 0.9837797655558086, 0.9863043305824859, 0.9875369180472827, 0.9843316046260698, 0.9882570286815986, 0.9834803634697881, 0.16533130602283164, 0.023474269219431743, 9.999999999998899e-05, 0.09014206041239414, 0.09022420067019665, 0.034695484274053556, 0.051242360100104634, 0.09108203620663302, 0.04255711120336836, 0.10434214856628476, 0.09278560974989636, 0.031410692165868004, 0.1271479383006726, 0.1567553508835826, 0.08526195157515282, 0.075177063777775, 0.06276413092020261, 0.1319781704270936, 0.011049420928450515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02524243828878503, 9.999999999998899e-05, 9.999999999998899e-05, 0.05049859350517327, 0.04633330385999712, 0.08134616023451358, 0.008927728133516166, 0.0053274246645919066, 0.011672445396190945, 0.08429120820886715, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033402391060862735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007921813473690364, 0.04425827602408494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956976644988099, 9.999999999998899e-05, 0.017474602032225284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005263613674231227, 9.999999999998899e-05, 0.011409351953409863, 9.999999999998899e-05, 0.008371945647857482, 0.2461959732374187, 0.26285556138244537, 0.20398208617063707, 0.25561837885125605, 0.23396457063319476, 0.2202169252654076, 0.25281700788763406, 0.2222022929902333, 0.3101803810643602, 0.026955340352094015, 0.025502726843195656, 0.03636033591824217, 0.04322969200271565, 0.02597315056984406, 0.03737905881994852, 0.005799251017883811, 0.0344170746371959, 0.031840059149884636, 0.10350298509712541, 0.09308808280069736, 0.14115954203269154, 0.10852852966266202, 0.14447077727045599, 0.09851160273093851, 0.11034470984845046, 0.08975307610958694, 0.0783769652971188, 0.11774808655804914, 0.16549018677500948, 0.16288717371929962, 0.12896128134100615, 0.12595404281403078, 0.14623377496938406, 0.1355944312997186, 0.15053654593668764, 0.12455210819053131, 0.07406148774215604, 0.048305696293012845, 0.03549356295717121, 0.12199913241797278, 0.07720493047796428, 0.07546590993080937, 0.06415847717888878, 0.05991064769514143, 0.0788027117768314, 0.1172592691667994, 0.2267455566700024, 0.11732293340318134, 0.13523889753140683, 0.12460174011893266, 0.12462316266655904, 0.15466164938457005, 0.17094174316454136, 0.11486234204018964, 0.15343106187275768, 0.1541278350866867, 0.14594493027677313, 0.17146022634323022, 0.15412716823969608, 9.999999999998899e-05, 0.14527685964418469, 0.16534986909208038, 0.14305140008413142, 0.16902618484572052, 0.11145923901215415, 0.09623001019536859, 0.12507780378832778, 0.12374898067788487, 0.09981488230447144, 0.0964122373557631, 0.11004311389042831, 0.0893978968729594, 0.33613948497376755, 0.09399666323555844, 0.07923273347326454, 0.0766837560640995, 0.14598528408375644, 0.06457826265538646, 0.10305914632951085, 0.07987385224117594, 0.07372335303499744, 0.16552360059049587, 0.1213085962469721, 0.146208907912442, 0.14998615832712803, 0.1500140625211217, 0.16027121399996214, 0.15325124424749992, 0.13938864113970906, 0.1413552621794799, 0.043201086090422725, 0.047952316021102726, 0.02386495488297169, 0.036105227786998095, 0.02548557435687493, 0.035565844292796966, 0.027840001175915452, 0.03623139198504155, 0.06390983603051537]}, "mutation_prompt": null}
{"id": "b251e099-4a14-4d3f-b05e-210a3cda5a20", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing the selected solution by incorporating a mutation operator to introduce diversity in the solution space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.367386838745251, 0.37393231385058023, 0.36788706080767475, 0.37084387470434177, 0.4143286245233023, 0.3853956711494314, 0.39795056010269214, 0.3939177413127868, 0.39448238114812784, 0.022067985643052457, 9.999999999998899e-05, 9.999999999998899e-05, 0.02117238012675493, 0.037905155784055955, 9.999999999998899e-05, 9.999999999998899e-05, 0.010067770540255538, 9.999999999998899e-05, 0.07886548482933742, 0.05008823058259737, 0.029840741836951512, 0.06317753035447804, 0.041047913296266, 0.045844576702954165, 0.03960941389959405, 0.059374416900100035, 0.06725499419712178, 0.08915402053292487, 0.04383661009731499, 0.01842790996512489, 0.05766400049885556, 0.09241343143911906, 0.08731439306117827, 0.03943762117385463, 0.053078052219466154, 0.09522803117264722, 0.9652901183719007, 0.9542584696944627, 0.9425918581775262, 0.9444740701220143, 0.9289254480955729, 0.9418211804399118, 0.9665870116522541, 0.9562503870618928, 0.9753441052159091, 0.26726723504541283, 0.25291096771145316, 0.3048775720695682, 0.24050871958845876, 0.2698080811932906, 0.2672503654289913, 0.23717850625545356, 0.2718664278031583, 0.25917027461108344, 0.17273361508012908, 0.0843432275655327, 0.0932178594906441, 0.2929510024751877, 0.27279532532401185, 0.3404787953434466, 0.21709497279723577, 0.29458351487610746, 0.16996432411665408, 0.1487019173022952, 0.1261219445414299, 0.15950884110050523, 0.17402003945176603, 0.12838903675352686, 0.11421206129937489, 0.17205688901720273, 0.12593042036667101, 0.15062480936770772, 0.12714624781075923, 0.13208369746221993, 0.11721569968503842, 0.14918597774735953, 0.15503554900184646, 0.17310425284833386, 0.15013582228610134, 0.17292833712821376, 0.16342670194422082, 9.999999999998899e-05, 9.999999999998899e-05, 0.06613763365936154, 0.042346021889516305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026922993184401722, 0.03748649987896102, 0.11826302137809597, 0.14779556172565333, 0.2058974550170305, 0.07969747110137837, 0.06555624566482876, 0.02914683096829007, 0.1485764780657468, 0.07668556355914169, 0.13382652862217492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730238718914128, 0.07190610978631207, 0.07634856286133107, 0.08787191215430068, 0.07817247420269435, 0.07050330624548384, 0.06653191076860343, 0.08870998403262187, 0.07340219910772705, 0.37896307446280186, 0.3756541784167804, 0.3864982124447235, 0.3611044697408303, 0.3560747768612159, 0.37620140151961845, 0.401437297169978, 0.3603523732454518, 0.36518098333832394, 0.08731142514813839, 0.06516712255750423, 0.09101242506178842, 0.096917337865148, 0.08608860869229029, 0.12730388378602786, 0.08913270017505803, 0.09476851680750842, 0.07603978594289751, 0.2134514000746831, 0.1324320537104493, 0.14935643523592335, 0.19339028107014133, 0.2017253088598614, 0.16913104344830077, 0.13881665288978273, 0.23231339106311044, 0.20632722764338818, 0.23427461684659645, 0.1016030185191763, 0.12377154080282493, 0.20191309761793685, 0.20898262466482986, 0.11514313755313943, 0.19831003763790078, 0.21182247487525496, 0.08899236803508392, 0.2082096412915827, 0.05022346756865759, 0.0825955521624544, 0.18579165402508147, 0.16747832078001268, 0.06308972807343638, 0.16853872130152814, 0.12881917195212322, 0.03875363019544331, 0.20780341974303906, 0.1864628875523593, 0.20196520356493142, 0.21383866505491944, 0.17217815596571873, 0.20765669987013358, 0.2435089788972774, 0.1569121834820567, 0.1951143793744764, 0.18259684354667616, 0.19039459816473558, 0.18606057125505504, 0.16814109533676203, 0.19359544770727044, 0.16684917815611733, 0.18681097163381832, 0.185149948029261, 0.178356563620387, 0.1879986633706473, 0.13699446244384672, 0.6300738695746466, 0.1734774835692633, 0.1127179366855311, 0.06197446755570468, 0.10871601644993045, 0.1151956481048595, 0.16872714900729135, 0.6331677970546157, 0.1134297146806793, 0.08307639435651548, 0.08313620160801671, 0.2114243038788678, 0.21186512009882286, 0.11337223127071971, 0.16444027833797714, 0.4886403335448902, 0.1838886352395922, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.17606185594529322, 0.18797292353724193, 0.18197724319699005, 0.19474973338406631, 0.1845572898868698, 0.09081103863630047, 0.10100039562211238, 0.0716707232906374, 0.06719776126551291, 0.06028226832644723, 0.10633298514427048, 0.10942518954707414, 0.07062926435020511, 0.07686567858357307]}, "mutation_prompt": null}
{"id": "d28d93df-446f-4df8-87db-23875f8817ee", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Local search step for exploitation\n                for _ in range(3):\n                    local_candidate = best_solution + np.random.uniform(-0.1, 0.1, self.dim)\n                    local_candidate = np.clip(local_candidate, -5.0, 5.0)\n                    local_fitness = func(local_candidate)\n                    if local_fitness < best_fitness:\n                        best_solution = local_candidate\n                        best_fitness = local_fitness\n                        break\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Introduce a local search step to exploit the neighborhood of the current solution for enhanced exploitation.", "configspace": "", "generation": 31, "fitness": 0.1923619725365788, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "6515e542-4dd9-4abf-8aa9-bf943cef4428", "metadata": {"aucs": [0.5007417140865441, 0.49749057251322015, 0.5167905205753389, 0.49370660622295615, 0.5095619107759215, 0.49874800380568607, 0.49406073892255964, 0.5076580270507173, 0.5009484098328951, 0.007100703857737978, 9.999999999998899e-05, 9.999999999998899e-05, 0.06961257934525733, 0.05396708838294084, 9.999999999998899e-05, 9.999999999998899e-05, 0.037183648075032605, 9.999999999998899e-05, 0.03429885589657533, 0.015133457589060706, 9.999999999998899e-05, 0.04511848953087205, 0.008646764692471165, 0.0010858449557564764, 0.03227872632587658, 0.017147951324715915, 0.021254364784556112, 0.03370554214287835, 0.019415652932411986, 0.0007640468501641795, 0.04908671809733001, 0.004733283700320112, 0.03602818544874897, 0.046609194459462766, 0.019041016339872097, 0.03836153917344476, 0.922943824341613, 0.9120803837620902, 0.9039843810432909, 0.8819691205525798, 0.8719546188558652, 0.8649047012319027, 0.925196307836359, 0.9336447099873197, 0.9635930925423598, 0.36670180988787515, 0.3433178120468169, 0.34758731932828457, 0.3550291131231248, 0.43267170820017153, 0.3605464921135545, 0.3619705295309422, 0.35188297837271776, 0.3596388644619617, 0.15303715345205127, 0.12448481351698704, 0.16117013927643442, 0.8230275860900977, 0.19495793190965172, 0.27733999447697666, 0.6713718768296761, 0.226474348156802, 0.1297090698223735, 0.23526250949097394, 0.1355081175001609, 0.21781437964763262, 0.22033981864206398, 0.1746322147406899, 0.1899903435849143, 0.20672279769996826, 0.13499463997522576, 0.21021150927985588, 0.19930705089620537, 0.21105608945986543, 0.13302187633833473, 0.21077531968084218, 0.26809090924245005, 0.13184352927676213, 0.2141509186388746, 0.1997468475813322, 0.17725298277790247, 0.0917031634485187, 0.0022554532521360526, 0.12721599082112056, 0.10566489441457838, 0.006127426966740179, 0.054829044819708184, 0.0013012625748444195, 0.00016390377039876558, 0.066211957125896, 0.10226814091637448, 0.17164731208533812, 0.19287025118645784, 0.08475873443439086, 0.037724442784296874, 0.026028074172884552, 0.21473000929449004, 0.0427024908677075, 0.09362926491146772, 9.999999999998899e-05, 9.999999999998899e-05, 0.015454714336001651, 0.03489887747426801, 0.017542173146721685, 9.999999999998899e-05, 0.011782497639023282, 9.999999999998899e-05, 9.999999999998899e-05, 0.07321157686996871, 0.08273703248948039, 0.0722890238935383, 0.13791250663495624, 0.0886474940298494, 0.09999368859694391, 0.08512575077210172, 0.10443581525031864, 0.1061082245492535, 0.4656231826901249, 0.49135721325727133, 0.4673008038329979, 0.4689729118849367, 0.46289694298781436, 0.4786056052152836, 0.49315584035578564, 0.5105728271668516, 0.4686220362820821, 0.019167859704119494, 0.016124898041259605, 0.030187953132589596, 0.016366183876430074, 0.029248191346472052, 0.038478916643927774, 0.01844764411306643, 0.060754955374550224, 0.03755801002889725, 0.2062762791394579, 0.15927641394148684, 0.20556175351420547, 0.08639697420227399, 0.1280547622362701, 0.14834172129863932, 0.1847490141036452, 0.20949083922852474, 0.0984943095360804, 0.17473921550931937, 0.10511466727673047, 0.10564445947595758, 0.21533902182969933, 0.08938427164366547, 0.11780679246847181, 0.1445565721894172, 0.1106384417656564, 0.09291491866313772, 0.05554601647266788, 0.04170518603431994, 0.03447492298384891, 0.1387746118530384, 0.09775965336974746, 0.06535637413673245, 0.168764748987842, 0.03455111627506757, 0.02529019309738101, 0.19208294023623806, 0.1377263169878945, 0.15116592163058995, 0.19839422324077038, 0.20452349204023534, 0.18226839981473975, 0.20306042206283703, 0.15217226200732914, 0.17764181252549316, 0.16437207354121952, 0.1626393047973177, 0.1739869648947595, 0.18559205829043046, 0.19126163025904708, 0.1702128680895707, 0.16998704035980994, 0.19535246314826527, 0.18442366538843913, 0.18978932593001463, 0.13774662971070994, 0.07148016021586356, 0.1741814036777054, 0.06600231213879071, 0.061949197634376785, 0.10877771811799752, 0.115388026009, 0.1689569106100025, 0.7100237696410236, 0.11337229831766849, 0.08328436497902347, 0.01589706472349639, 0.2139353679047683, 0.21346782905403805, 0.11332859376891702, 0.05925661460014331, 0.6228326359253203, 0.17460754097880182, 0.19512234404548656, 0.18050835999789816, 0.19397825136445734, 0.19699400949058932, 0.1955191685520714, 0.20274405568569853, 0.22127425562691883, 0.18820847965382914, 0.06859049550694873, 0.043075847823863866, 0.03599915925305919, 0.04295345150899432, 0.019432799299537673, 0.04530412783174875, 0.06751844988169886, 0.030094050664999816, 0.03801802486780048]}, "mutation_prompt": null}
{"id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 32, "fitness": 0.20529545694320206, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "d28d93df-446f-4df8-87db-23875f8817ee", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "dd6c0673-e508-4620-a335-0b8349d81dd5", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "795af107-7f17-4b9e-907a-7446f8d2436e", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        mutation_step = 0.5\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-mutation_step, mutation_step, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                mutation_step *= 0.95  # Reduce mutation step if fitness improves\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Introducing a dynamic mutation strategy based on fitness improvement to adapt mutation step size.", "configspace": "", "generation": 34, "fitness": 0.17403638611111627, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.16.", "error": "", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.9659993244205525, 0.627566620171081, 0.4818757939277821, 0.3369403939460133, 0.21310337357252984, 0.6179394067171855, 0.5154550027497261, 0.5620183033293877, 0.291822034848376, 0.06654496178082392, 9.999999999998899e-05, 0.015477035568759123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07308274199154041, 0.10299249885026862, 0.08651893646710507, 0.050268558900487204, 0.07783808180353857, 0.057901542945126505, 0.09236936296346632, 0.1049998817024832, 0.0874401664183666, 0.044253124936361576, 0.06507334994789926, 0.06923196250781982, 0.11519175212163446, 0.10991968781123929, 0.11900272220526387, 0.10496327776947978, 0.07244498511699604, 0.06024523374379165, 0.07576636369860867, 0.07612430107341284, 0.07226620053419752, 0.07005831022666131, 0.07946497831120247, 0.07493280702667071, 0.07256446437609232, 0.08005294630593529, 0.07382209721844013, 0.18067160296996554, 0.10284827545115227, 0.1339211846188647, 0.09340909989197976, 0.09245856721909185, 0.10545972617165367, 0.11476207868260158, 0.12411861964052973, 0.08254453612770118, 0.2286595004691705, 0.21601277250153894, 0.2309933983924709, 0.1801469132741207, 0.2833920067051662, 0.1637336004877329, 0.2550953436560124, 0.19157858634596847, 0.18094429847392324, 0.14943712052040026, 0.23719961756520702, 0.11382213629687854, 0.03636128224254642, 0.19730757083034245, 0.024998708433388805, 0.15289966615337658, 0.009520093812541708, 0.20384053979870798, 0.17445895078942997, 0.2118886909308102, 0.20791182389643936, 0.19583060250022277, 0.17000398540878137, 0.17730549203075074, 0.1808232127421293, 0.23669685867541868, 0.14912375336291606, 9.999999999998899e-05, 9.999999999998899e-05, 0.12118038439381107, 0.0045855683813380566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03215236464715221, 0.13845669417364403, 0.0851894427130323, 0.13816676895488256, 0.159581144328948, 0.10289541454768547, 0.09644468588279065, 0.08772659008681893, 0.14279519773564497, 0.05546173358881701, 0.1029750481135665, 0.07880918166254236, 9.999999999998899e-05, 0.006623244309461707, 9.999999999998899e-05, 0.0027068145158587464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08253561409842336, 0.019536544449345827, 0.008442787474168267, 0.0435660305186788, 0.18792942822834058, 0.013651012360852977, 9.999999999998899e-05, 9.999999999998899e-05, 0.09525592902673485, 0.4750196284722229, 0.5146640575699011, 0.5478095902429443, 0.21980910506563833, 0.47079344176392157, 0.5431058685145453, 0.5237684081595395, 0.5103625966832037, 0.47754910885452906, 0.07273869605426642, 0.07417556683101534, 0.0815791500573998, 0.07810963578787633, 0.07616525135262942, 0.0739683001418483, 0.08521843477694924, 0.08495423821481418, 0.08898120355749328, 0.27053769666586935, 0.14308713783182936, 0.24633499110060253, 0.234980461712623, 0.17774486048427607, 0.27141991955666955, 0.15703209896942882, 0.2444961216790189, 0.26520484135919364, 0.27313682452841925, 0.2332333354497117, 0.20882937329999063, 0.29467618101337634, 0.2607279305137514, 0.2884527170736526, 0.21662221273367221, 0.24769208709214563, 0.22072464801488623, 0.1820787533849405, 0.15647199604398576, 0.17813208609187636, 0.17029573175305746, 0.15420825811859962, 0.2337219828988244, 0.1921365953742341, 0.1848643462535552, 0.20491351482654696, 0.2197223070921941, 0.20428922273811723, 0.24131442651890134, 0.2463810986809385, 0.23404898385790274, 0.20251863821616667, 0.22017269795629535, 0.19926754031085647, 0.2108879611198783, 0.20886056915476414, 0.20952917073424082, 0.187812926005267, 0.1850378637257878, 0.20359506687356388, 0.18565880426030967, 0.17912583055675035, 0.19197561214212933, 0.1816239030176322, 0.1781610784879486, 0.1696906989493937, 0.18956569238262733, 0.6015335430395065, 0.14940057414664465, 0.14911275458977813, 0.16368508288182382, 0.6864188429584521, 0.20392911912975975, 0.5940831472941039, 0.4832061778256016, 0.5024468712017718, 0.2148581146760995, 0.1980230337751454, 0.7121661987999872, 0.1699857498038817, 0.5460518590094257, 0.21062132321358717, 0.17724007634658623, 0.1797035269703987, 0.1819255051008879, 0.17860906869403426, 0.185963930820366, 0.17836150345871682, 0.19058662667566728, 0.1884335832414843, 0.20674348864422754, 0.0774742964446663, 0.07101483354785176, 0.07601559392630497, 0.09739838629459951, 0.08876875705989207, 0.08291447168844568, 0.08338752929856619, 0.0719495170320903, 0.06769680443483173]}, "mutation_prompt": null}
{"id": "a429c467-118b-40dd-b1b2-dc40e6667598", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "a7c2b704-6d01-479e-a8f4-601ba166cdb5", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "7f188863-880c-482b-85bf-9bf0722bb8ae", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "f30127d3-0d84-4089-ae5f-9853eddf07aa", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "f8e09213-5155-47a4-a866-03a9f5c14692", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                self.mutation_rate = max(0.1, self.mutation_rate * 0.9)  # Adjust mutation rate for successful improvements\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)\n                trial_solution = best_solution + self.mutation_rate * (mutant - best_solution)\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n                    self.mutation_rate = min(0.9, self.mutation_rate * 1.1)  # Increase mutation rate for exploring new regions\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Improve exploration and exploitation by introducing a self-adaptive mutation rate based on function evaluations.", "configspace": "", "generation": 39, "fitness": 0.19602976875072167, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.36385692869589115, 0.38454043392096615, 0.3864817266949382, 0.3616187297873843, 0.378543500800548, 0.3627362928005614, 0.3749184360367285, 0.3625674054608585, 0.3706018614239456, 9.999999999998899e-05, 0.0006672983781472741, 0.0001375480983213384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08992568078959595, 0.10533067198557333, 0.08918504155972973, 0.08851568311065416, 0.10470388746509962, 0.0942342068645241, 0.08316685369831378, 0.09702996737485015, 0.09765387094343347, 0.07280647337346202, 0.11633582637498474, 0.09982270118414671, 0.10376703465812576, 0.10139928524266195, 0.06429887978818971, 0.1035649816086559, 0.08685720965043509, 0.08681919243904324, 0.9521875860801483, 0.9221816568550528, 0.9189534057442048, 0.9074304620946574, 0.8978982489069053, 0.8880972924534816, 0.96653087034542, 0.9377181952565659, 0.9637349553784326, 0.23972535484226787, 0.24738879612522868, 0.24935760448348188, 0.29604198401744497, 0.2592896271028575, 0.2479581918801227, 0.2688183838290932, 0.25263428919037123, 0.2492069096245254, 0.3004967203258406, 0.22323032469444948, 0.22764026365253442, 0.2858327627593167, 0.290354759591948, 0.2728904032131104, 0.23714270004098303, 0.2659206418569916, 0.34800414758613707, 0.14352510855979528, 0.17057965440494505, 0.1438426657877684, 0.15102407799911766, 0.14662964835010595, 0.11421331457750838, 0.1414872780599017, 0.15606998720513587, 0.14232699430039464, 0.1445789581893716, 0.13946053820677295, 0.12937854947960747, 0.11097685869076335, 0.2620370898435477, 0.14140058650830178, 0.15130550406317356, 0.12629469839135932, 0.13107816418565, 0.016485436201329362, 0.0124980292324528, 9.999999999998899e-05, 0.048327087245087164, 0.014458381811956689, 0.020032685723706534, 9.999999999998899e-05, 0.0014170752953399646, 0.011205185333649337, 0.1101595582942253, 0.10921570436830952, 0.19824108539945173, 0.09683482177428082, 0.06754271232416575, 0.07159805692518806, 0.1284082722661899, 0.07181744530940581, 0.13475949462936054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07074040497857992, 0.08669582699520739, 0.08045915434748241, 0.06987338404862586, 0.05853685686156662, 0.0856060576125407, 0.05657973809925365, 0.07624946804301158, 0.07537783170656676, 0.36536616112324516, 0.3509314549053856, 0.36022231024649964, 0.3690245159697131, 0.36062585503761124, 0.37148866343665166, 0.3491116513568421, 0.3718971742033752, 0.3583032407714375, 0.06984765826970929, 0.09078848491181213, 0.0646456014446758, 0.10795868560630117, 0.08472950024591319, 0.0847564956680873, 0.14611009855232993, 0.07814622887625577, 0.08452842264242588, 0.2051036800028775, 0.16711276922737928, 0.19096036779177883, 0.18991372755911096, 0.20537483821551716, 0.1841529670137656, 0.23503328032490223, 0.20220299371748396, 0.20107788317625164, 0.2723932872498338, 0.23343600220563954, 0.28153593368057195, 0.25435384018207075, 0.2550495457167573, 0.28122024527941614, 0.19869377740094507, 0.2616185947801004, 0.24665327491537214, 0.20840474417284882, 0.21168153389979272, 0.20353271105259896, 0.1891507098424523, 0.19256709785117787, 0.2110101325933057, 0.18911418887120213, 0.18301148700085068, 0.17415020162159167, 0.20196419987683234, 0.2505290904149723, 0.20332357205817386, 0.20918387189405618, 0.22283437441629816, 0.18719417422483564, 0.2199289174848278, 0.2275201055867465, 0.210585665752422, 0.19077310334897934, 0.18406990036918192, 0.16634782629360068, 0.19176971302008328, 0.1821247468911369, 0.17600292547653063, 0.17648744041627284, 0.19389144728719143, 0.18616258212936576, 0.1593608099503092, 0.18737708303820932, 0.18714449693581126, 0.17293763485313918, 0.11250306164889667, 0.11708702414852212, 0.16854086380469946, 0.11488624633842215, 0.16869459305907297, 0.5454902187780866, 0.11252769589412459, 0.4914628807816007, 0.15546666547834798, 0.2124450761761949, 0.2120741080455818, 0.16952629938643582, 0.16906059691037734, 0.3897791917350458, 0.18009371551218156, 0.18123624501202928, 0.17642031022420324, 0.18314969913135803, 0.18171291315609095, 0.1780150294314341, 0.1753027210248017, 0.19506979875366792, 0.1876549222873114, 0.08155811362776844, 0.08891412541746957, 0.09995566031740677, 0.06535692493360334, 0.08463499475564606, 0.09742943417645789, 0.07570348316748476, 0.0864701555040236, 0.129818001433196]}, "mutation_prompt": null}
{"id": "022e10c8-90fe-4498-a4b4-c6efa99e4f57", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "aeaa51ee-baca-466c-b6f1-0037c47e0f32", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "3a83d6a5-2089-40a7-9a50-5b1b06b29182", "solution": "import numpy as np\n\nclass SelfAdaptiveMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_step = 0.5\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-self.mutation_step, self.mutation_step, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n                else:\n                    self.mutation_step *= 0.95  # Self-adapt mutation step size based on landscape\n                \n        return best_solution", "name": "SelfAdaptiveMetaheuristicAlgorithm", "description": "Improve convergence by incorporating a self-adaptive strategy to adjust mutation step sizes based on function landscape", "configspace": "", "generation": 42, "fitness": 0.15103618947787323, "feedback": "The algorithm SelfAdaptiveMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.9787868564979332, 0.9783304274158328, 0.9802209853075157, 0.9785557771651987, 0.21529175573964043, 0.97704092836931, 0.24499573196733526, 0.9821775935782937, 0.28646137228716684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04071205834511582, 0.12187062429246254, 0.06015915448626108, 0.0676506978443393, 0.06196889342149792, 0.09365952856814563, 0.07420745794644223, 0.1086008919667727, 0.05167842228300901, 0.044483734499883076, 0.07211584224354228, 0.0442799949753071, 0.0653601678127046, 0.04153639268344467, 0.050930244499378885, 0.09945042165480245, 0.060212214371532125, 0.03868095653359993, 0.08438729041841742, 0.06973158023004866, 0.07958515427371127, 0.0730609982987035, 0.07284264919318406, 0.0707310456723641, 0.07326884077663054, 0.07651460695973544, 0.07067730529967575, 0.10849131043906723, 0.1020072760763695, 0.08502509383218149, 0.09504324001281461, 0.09937464394323214, 0.08199717472110146, 0.13734191592769407, 0.11384769163832731, 0.14142099980258716, 0.1810203706684529, 0.1511457382893281, 0.17307609868823348, 0.15126249779303547, 0.2135974254176174, 0.1549469578836774, 0.15208822603086114, 0.17742125434301637, 0.1972301565912764, 0.1806060149175519, 0.4434251303446678, 0.03954651627492678, 0.025474687449062783, 0.016141865099332464, 0.019251229252090107, 0.054026464346703884, 0.04703427632531132, 0.14853073582325382, 0.026191452335775134, 0.1448566925302952, 0.23189331666472013, 0.15722091528862492, 0.05793319257248386, 0.13327853281184598, 0.18483461596047168, 0.26788022210135465, 0.21519300659131946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06745187140842701, 0.08729377423694074, 0.1443133962707851, 0.0700512845929161, 0.02434101683024914, 0.07365506317800974, 0.1620483406499199, 0.07511294504185317, 0.07543664885831747, 9.999999999998899e-05, 0.06033106051794823, 9.999999999998899e-05, 0.11229584173467044, 0.1388682944451628, 9.999999999998899e-05, 0.1297341829867753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032805080286890664, 0.011861922770258437, 0.01552659748937879, 0.000944328579436271, 0.07241367257277975, 9.999999999998899e-05, 0.009627004312575793, 0.0046111588407266035, 0.3457019958060913, 0.2890750657065815, 0.2949231165320737, 0.20645237476680944, 0.24864296200788194, 0.3254942570380489, 0.2271690992906974, 0.387666513612968, 0.4036797255960526, 0.06843091360121811, 0.0763663565542041, 0.04808898005777251, 0.07201134074536819, 0.06829773249636562, 0.08390014085262543, 0.10391720691952777, 0.07378425560741653, 0.06936362717666111, 0.27167509793485145, 0.18045356454606776, 0.16807725401592521, 0.15776363111487057, 0.11885135174998684, 0.13644909670428385, 0.16290378325803156, 0.1320759241329843, 0.19462014061075483, 0.19012292403651787, 0.17227685210249855, 0.18231127910618017, 0.1921491702590924, 0.17972084920367437, 0.1940258911470717, 0.1882493830185743, 0.18578047682269827, 0.171954922466385, 0.14459835903257423, 0.12521346231333352, 0.11799839560406311, 0.15735017755154657, 0.12730332940434042, 0.1227672098784226, 0.13117387217167142, 0.16615845426363307, 0.16347357838842214, 0.19961258245358982, 0.28105153283593465, 0.22718825770754625, 0.21379224029282273, 0.19110961874105525, 0.17222593606068126, 0.16841939338751033, 0.1809637724454778, 0.2753321512134509, 0.1756223299688161, 0.20703089929825658, 0.17371417351759866, 0.17383784756597198, 0.16323114594068266, 0.20618161941236424, 0.16461501574072301, 0.17681126658227642, 0.17481943703642466, 0.1604264958441436, 0.16972038592490335, 0.19007807143240596, 0.27774381438155427, 0.14955383706966785, 0.20446790013679406, 0.15536453507299774, 0.21490329764575322, 0.25706755223442734, 0.32622968133925156, 0.2251603881415487, 0.17937315895375328, 0.22725937739875723, 0.32175758195896487, 0.24552653880493236, 0.14569776089420594, 0.21841838849386297, 0.20339508985952204, 0.2157882131086154, 0.24307672576986483, 0.2178807702440443, 0.25141380955314774, 0.1976450136825777, 0.17690607416095516, 0.205026887824868, 0.23107652994292183, 0.18617183058448883, 0.10349772163576976, 0.05265804085688486, 0.08541964405754165, 0.11083929782203272, 0.09376810310684636, 0.06825532319346872, 0.06633679347461019, 0.08620587143471836, 0.0641086557583862]}, "mutation_prompt": null}
{"id": "c48a4db0-f4d8-46bf-bf00-7e640083b484", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "58d69b56-ed8a-40c8-b61a-880ca0ac29aa", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "f3150b3e-f240-4d42-aa30-d57521974882", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "a1aa89de-aa35-4402-8c0a-544649acc4f6", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "effeca30-b323-49c3-bda1-2c5c5fc0158f", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "f9dd9d97-5c9d-4fd1-84ac-aec39ffcf355", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "5dee6175-aad9-460f-8bd9-fc1c7d4d3cc7", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "5d1c4f3c-183a-4d4f-ae5c-047161ff9f8d", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "e2e057a7-a4a8-4587-bfe9-78326de090de", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "8be4e2a1-3dce-4652-bf92-92429e8bf1ee", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "329ea111-5567-4527-b85b-c74df450acde", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "c5a58634-9cbe-4f2a-9e89-5f57d000dda4", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-0.5, 0.5, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                # Differential evolution strategy for enhanced exploration and exploitation\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.35706168267895144, 0.3733856361876694, 0.36461952480041815, 0.36194449741062396, 0.3797467314492461, 0.36663007981746343, 0.3778641534135848, 0.39397322776175236, 0.36238608337692446, 0.025219120895600855, 9.999999999998899e-05, 9.999999999998899e-05, 0.03573659589115319, 0.005470317918701895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07326783118733116, 0.11605730032878714, 0.1159294650357755, 0.08191305241961166, 0.09294614664890033, 0.07279087876295653, 0.07630176148080081, 0.09452886175081643, 0.09062946714271036, 0.08644828224845769, 0.06470372992105877, 0.06407626873107908, 0.09698077634412161, 0.0890530149499218, 0.0937494096900664, 0.08099819733834124, 0.06051185048737551, 0.08928282843914326, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.255779106678916, 0.24992978131869803, 0.2687213745521452, 0.2473975582807516, 0.25781679334855157, 0.23588806041882615, 0.23942478178111282, 0.2570508291021002, 0.25323697609383866, 0.21254272702850574, 0.2232695555446389, 0.2307949937858137, 0.2966268640542954, 0.20609053621725748, 0.28397296627056945, 0.23039593732602537, 0.3178487545848091, 0.23830923154216366, 0.098675558422892, 0.15515771331720407, 0.12014849088913926, 0.15317833460070596, 0.14669840673076417, 0.14200804456761706, 0.12489028036079686, 0.133020603517073, 0.1441444043345118, 0.22707926411023271, 0.14073020395759905, 0.11375792622187286, 0.14279267918161842, 0.14035023864443485, 0.12727483445523846, 0.14882616556071881, 0.14969016489051845, 0.14891473915718256, 0.0005867423469894106, 9.999999999998899e-05, 0.012568199486019505, 0.011793265528964203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017603014454080412, 0.00955608530396801, 0.08984488396191315, 0.14279160694818915, 0.11474850889029364, 0.1051455296197017, 0.09685432339874767, 0.07498983016648908, 0.17129401401622435, 0.07886549802806841, 0.13000684213306557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727179817459992, 0.04717740794412639, 0.05430870948812894, 0.06374249923545228, 0.09276664637233023, 0.07548758079279705, 0.07944852995061535, 0.06742256646302336, 0.07966139254984084, 0.35880507517207494, 0.3700118167353521, 0.3546685304374101, 0.3585549923403998, 0.3495598302411612, 0.364486869170055, 0.3629357379441258, 0.35768766287731446, 0.37085836253700444, 0.09103985127455982, 0.10264056416431921, 0.0997947684791477, 0.10103089542885968, 0.07541409873787575, 0.07647228252840177, 0.07532462830534659, 0.09022334464371307, 0.06599963035989787, 0.20246095416551113, 0.1452656137701338, 0.1565716009895679, 0.24948573419730402, 0.1494932868521024, 0.20708048004633384, 0.20032460605927338, 0.235637652946718, 0.21799593255888816, 0.26908100413277547, 0.17517217768572846, 0.23166778424054002, 0.2601141152397938, 0.26663815054134565, 0.26650138161842707, 0.2629235565424669, 0.28941910082072386, 0.20213860601901523, 0.17585667880660927, 0.2111875733391536, 0.2044014016870156, 0.19030944244739745, 0.18426962939448166, 0.17300879506630285, 0.17990086766235758, 0.1990215875354594, 0.19814475951790356, 0.21682598932061425, 0.19378885924400957, 0.1997470728607652, 0.1939340387280839, 0.18919959942826725, 0.24925584576267235, 0.21824599951834966, 0.21384493543087846, 0.20457937479451316, 0.19151395446138608, 0.20026121798291918, 0.17199634926025642, 0.1831953276326559, 0.19172598141240593, 0.1834392218422175, 0.18455592815294264, 0.18456241098394344, 0.19384251878489234, 0.17574388393555673, 0.16954587449700742, 0.18635248726366238, 0.5098094781908911, 0.19216522164746241, 0.19011180367221137, 0.16326306622587106, 0.5685163074452904, 0.463978688685702, 0.5165175299051147, 0.21247195822156295, 0.4915630858626657, 0.3961684482341854, 0.49115218323597953, 0.5174751342804255, 0.5104868836944751, 0.39290494060257597, 0.34520258695958494, 0.20017638465832177, 0.1832683347147498, 0.195508474718167, 0.17626088929650285, 0.19460512014957654, 0.19287017030477316, 0.18729372160876978, 0.20823643341355869, 0.1949851331804865, 0.08324514254007442, 0.08911149455541423, 0.08166375982540353, 0.08162281978748309, 0.07341078008321222, 0.08660223196319017, 0.10914950564103254, 0.06781860498987502, 0.07225674850346187]}, "mutation_prompt": null}
{"id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize a dynamic mutation strategy based on function evaluations to adapt mutation scale.", "configspace": "", "generation": 55, "fitness": 0.20863945460624342, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0dec89fd-d945-4174-9d12-8dfa2fa10a0a", "metadata": {"aucs": [0.37653489014251706, 0.3845616344376318, 0.3707899379689592, 0.3534205354081096, 0.3842310267386845, 0.3771295287465799, 0.392155623558072, 0.4088484175202579, 0.3771470201055239, 0.020831362677503074, 9.999999999998899e-05, 9.999999999998899e-05, 0.042786664239797934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07787006566668064, 0.1042917536595549, 0.10814345916249601, 0.09404216685105837, 0.08177700108038266, 0.06248157700668, 0.07761969145841507, 0.10626794908320458, 0.08356577169028512, 0.0747150320052844, 0.05651684984946659, 0.07911541765243513, 0.09404537532084745, 0.08981653257699185, 0.09376284359944476, 0.0797434564997882, 0.06123677988834875, 0.0862733121840733, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.2573907484598775, 0.2487777820634779, 0.27269341291867255, 0.2544185971629497, 0.2604857636072141, 0.25660687449506414, 0.24733251820162572, 0.2616921895147797, 0.26388888292955937, 0.21111255328069078, 0.22356394317959616, 0.17211885828168438, 0.3070124122771335, 0.2175749873035815, 0.29558186487076576, 0.23039593732602537, 0.32031514140277473, 0.23830923154216366, 0.10620564631912477, 0.1571674655471923, 0.1334891220959329, 0.15697079269926384, 0.12240137765629555, 0.15306792022019722, 0.13379881505245195, 0.13914894626165664, 0.12881650904132946, 0.22707926411023271, 0.14110169504732073, 0.11790144936189317, 0.14803092289484265, 0.15087845613428053, 0.13802250908363856, 0.15086093447354232, 0.1677751117655586, 0.15128369566235322, 9.999999999998899e-05, 0.002778920816063013, 0.020793626401512832, 0.02972107172639571, 9.999999999998899e-05, 0.01649863860582701, 9.999999999998899e-05, 0.019742592714890317, 0.0010771873798703924, 0.09117123685042283, 0.13847664920578318, 0.12129213241810499, 0.1046928201874554, 0.09295383807879898, 0.07784198671587983, 0.18342529314303924, 0.0794649930630108, 0.13133240422094883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0787355501913225, 0.04169836419049211, 0.05127106091988154, 0.07052983192769002, 0.09413826771722911, 0.0836755672188999, 0.0686745524229827, 0.0904156215905697, 0.08187361729739928, 0.35939189956142126, 0.3790754923238776, 0.363569788351348, 0.3653626076621378, 0.35932428359624247, 0.37773472354265725, 0.37168331551730194, 0.37857977622356687, 0.3762141233782239, 0.0792398397454912, 0.10657683696925546, 0.10927079872804113, 0.09434282915128955, 0.06480397384974002, 0.086418705972795, 0.08180463090625634, 0.09207878468472663, 0.06861291056203211, 0.22389878122879103, 0.1534461802865178, 0.1645852486442282, 0.2502728077972496, 0.16258487942247868, 0.21022826871155242, 0.2032185682658736, 0.2552792886044787, 0.21799593255888816, 0.2611230365367354, 0.17746210082539915, 0.24118358557585529, 0.26222297838616115, 0.2759145532421322, 0.266429566810075, 0.26096390227312904, 0.28941910082072386, 0.2012659449685733, 0.17724964275496113, 0.20528784899605634, 0.19210247495066235, 0.19467354117755864, 0.18948771509466955, 0.17440345388042477, 0.18964308126298557, 0.2148037944516935, 0.20501583808753232, 0.19630745114023074, 0.21356919750521997, 0.2106591519158515, 0.1970191355050822, 0.23878244107916213, 0.23315840265875598, 0.2238136591585811, 0.2112606367289558, 0.20737206955934695, 0.1958070351754968, 0.20377814599457988, 0.18005579055591514, 0.1855177173924505, 0.18961823880677398, 0.18520969444388435, 0.18445242128918404, 0.18774500077309064, 0.19384251878489234, 0.1762057072505553, 0.1695551690625502, 0.18689885010307106, 0.5195928887481844, 0.32584837779642284, 0.1906239564092923, 0.16326306622587106, 0.5800267898631007, 0.329241736016204, 0.5300535869283656, 0.21245516706647616, 0.491580433950221, 0.458481661788654, 0.5244454648579351, 0.5250418446735388, 0.5131646228712634, 0.42335123561651167, 0.35199563473576045, 0.20017638465832177, 0.1832683347147498, 0.1814492171502795, 0.17626088929650285, 0.19460512014957654, 0.18590145171336503, 0.19242817376071708, 0.20823643341355869, 0.20072893835302819, 0.09201105012399291, 0.09309534396456598, 0.08015197520163675, 0.07449080400914387, 0.07903605490610566, 0.10396049288176201, 0.10028243458067831, 0.08246321847514793, 0.07607967260221304]}, "mutation_prompt": null}
{"id": "a139b78a-45e6-49be-b010-e5a4180b22ca", "solution": "class NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            gaussian_mutation = np.random.normal(0, self.mutation_scale, self.dim)  # Gaussian mutation\n            cauchy_mutation = np.random.standard_cauchy(self.dim) * 0.1  # Cauchy mutation\n            candidate_solution = best_solution + (gaussian_mutation + cauchy_mutation)  # Combined mutation\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Improve population diversity through a novel mutation operator combining Gaussian mutation with Cauchy mutation.", "configspace": "", "generation": 56, "fitness": 0.19413779144263169, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "metadata": {"aucs": [0.3834766033424003, 0.3714942007310247, 0.37189144135839936, 0.36460386379715237, 0.36474137564672937, 0.37429468793291354, 0.3707268616565882, 0.35732249039829067, 0.3714569104278751, 0.013857675426150129, 0.00935655158912252, 0.006570946287843604, 0.006233374772565581, 0.007921639977007566, 0.009627519762414494, 0.006978876856156613, 0.006739664967762238, 0.0034058738227016327, 0.08301803976261779, 0.10501213758293326, 0.1087284346320252, 0.09720495140866192, 0.11981933397200917, 0.10781130410363293, 0.10384785840425115, 0.10644736796164611, 0.11701722698061623, 0.1131416190788257, 0.09508881026913074, 0.09911703401496885, 0.11809168697125583, 0.09077183141458678, 0.08748786447106627, 0.10170907618716918, 0.0829765949708231, 0.06107926072873582, 0.9873183129800135, 0.9871317514684818, 0.9639507432431524, 0.9661791571754262, 0.9887336961931233, 0.9798378992279734, 0.989153344475716, 0.9839514678453756, 0.9910562507233678, 0.23945945505467237, 0.2494216057068972, 0.2511692565606488, 0.2592905981890795, 0.23812401989569976, 0.2566470612137135, 0.2587915606566942, 0.2507928917036292, 0.28980704633317733, 0.3175088198737288, 0.28250678693885256, 0.28373709274041614, 0.3015230824725087, 0.2077820737011814, 0.3200339646193575, 0.25852503348164835, 0.2251166814455381, 0.33240421035624057, 0.1515184388212767, 0.1314255591790512, 0.13980024841804883, 0.14186884935883193, 0.15211304562097916, 0.0774689428936195, 0.12724582544378538, 0.14407964094896475, 0.15636216039386075, 0.13182947606368578, 0.19350123439101752, 0.10501272265845618, 0.15186664477644496, 0.1621003829184443, 0.13810032408821282, 0.14553400435371422, 0.0748151492217316, 0.15965520407707423, 0.0339899511902273, 9.999999999998899e-05, 0.0003969694484996511, 0.012566697794007431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.174053467216171, 0.1145887763222414, 0.1406139459350494, 0.058596234895187393, 0.0067028647323850166, 0.06376826916605549, 0.0796742671737164, 0.07723814028745057, 0.07575131066947693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04950042596606907, 0.059633010505592554, 0.07743331812956333, 0.08769317452768954, 0.062222532446072676, 0.061016564598766476, 0.06970342259261597, 0.07852747148332251, 0.06036301087477991, 0.34174511182687983, 0.34117547382679014, 0.36661326170552033, 0.37688657993401264, 0.36939087239702006, 0.3459522834325598, 0.3484203449028772, 0.3512178793655607, 0.3538563785648903, 0.08565077028991053, 0.08887700752887517, 0.0991811056907923, 0.09578711835659448, 0.0934140538023085, 0.10785265826466761, 0.11164331845399211, 0.08963558530776061, 0.1006955779790153, 0.15857988852426208, 0.14135586599567906, 0.21309676732725835, 0.2220935807385107, 0.20170134584486576, 0.25227046043891543, 0.2089617024931132, 0.2013611245970084, 0.22192999053648077, 0.22444309206205915, 0.19456824227956537, 0.14173644549097175, 0.25041017340846394, 0.27288040743596154, 0.2632844446913045, 0.19469727609945786, 0.24477233858850478, 0.251343544699285, 0.1959325629328208, 0.18741272739155734, 0.17964843814588205, 0.20511622111443262, 0.20995224554791847, 0.20397703924349098, 0.17177045569294003, 0.18018682898011407, 0.21420293830254156, 0.2209293187814413, 0.2057439440767279, 0.20120781340548433, 0.19713096393890728, 0.235909283233653, 0.2195453641132542, 0.2306827770258385, 0.19917396762908812, 0.20887282531288498, 0.19598959249705927, 0.18606366575675903, 0.18608907817426523, 0.198414017289138, 0.1856834709113897, 0.18921314478845952, 0.19394975255568447, 0.20724782776912454, 0.2092597922200875, 0.18714390956121452, 0.1359249884765792, 0.1676306510452107, 0.1860196167422189, 0.1687871345863481, 0.1611573223806978, 0.10838776289634511, 0.11479503615145148, 0.15329982008240117, 0.47545644256346686, 0.11276920220243503, 0.08284778599842868, 0.16984654215465433, 0.20952257235970306, 0.04420503793397734, 0.16803989363798244, 0.1677632424594231, 0.45312788825517536, 0.1845985655367438, 0.18174370011201435, 0.18012836992739523, 0.1827388209056766, 0.18335029864618857, 0.19457050797049869, 0.19412817237700786, 0.19371752225449868, 0.18265564066204087, 0.09605240917844071, 0.11313209725043538, 0.08743984400870886, 0.0881361527181922, 0.09234277123479673, 0.08483294419293508, 0.10967645078845778, 0.0873723506866163, 0.09477681843093866]}, "mutation_prompt": null}
{"id": "eda2ab75-8574-4de5-b58a-ff5b7bcdda98", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            candidate_solution = 0.8 * best_solution + 0.2 * np.random.uniform(-5.0, 5.0, self.dim)  # Modified mutation step with weighted average\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmRefined", "description": "Modify the mutation step to incorporate a weighted average of the best solution and a random solution, enhancing exploration.", "configspace": "", "generation": 57, "fitness": 0.13912438847148292, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "metadata": {"aucs": [0.3045539528243202, 0.26740241986326685, 0.30004540154079773, 0.24959410659956427, 0.25256802839309, 0.22579069038526656, 0.26542781869338294, 0.2303705246398714, 0.30815850730523175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08082211778118054, 0.08124774462390283, 0.0938438501478317, 0.07739252742841163, 0.08244913962863798, 0.08245716153411664, 0.06888001951819334, 0.0769260982381682, 0.10071147680736225, 0.06537086156807015, 0.06897050541466887, 0.06571164198549317, 0.08142937760815216, 0.06254583974320371, 0.06401871750848986, 0.07123553450707643, 0.06749613549230382, 0.08147835296331485, 0.07977133588259, 0.06763440830768197, 0.07756476727974537, 0.06950817085082295, 0.07165343236684862, 0.06878122144146981, 0.07498341934664621, 0.07673327394248519, 0.07107633520851919, 0.18915115961222628, 0.18262232152366742, 0.19832893390511086, 0.1847920489003333, 0.1531727958962017, 0.16547637312502972, 0.20909700080491078, 0.17976544236884506, 0.18972051896309006, 0.21277046596859583, 0.21299344820415722, 0.218692469250946, 0.24699433456480924, 0.2198202716106893, 0.2224773769069024, 0.18949889971729428, 0.21913230120252558, 0.19980689061842472, 0.11946570817674473, 0.11250198902392272, 0.10940868067543452, 0.09336025132387626, 0.08687166736115692, 0.07497319631987032, 0.14469228458700378, 0.0851909848209792, 0.11378671229645965, 0.11076702136436001, 0.13470982847709112, 0.10075501133363363, 0.12020812105668777, 0.10767912532883839, 0.12490506593612938, 0.12779902396229714, 0.10825339241869714, 0.132418231112448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002103693134319684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09990902357333564, 0.10685350249735837, 0.14033171399984223, 0.08543460901473587, 0.09633842069675558, 0.06765376724528882, 0.09393458312162783, 0.08227199044849764, 0.12902511957886487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029752384865211368, 0.031459933804545814, 0.023413397872039554, 0.041173408990028304, 0.05634068763737177, 0.025835954670097583, 0.016574355221194326, 0.034834392130456915, 0.028231675984510596, 0.32768146167683887, 0.30079119058348636, 0.31659457075964836, 0.28720157374905775, 0.2748908011605482, 0.28715429026234973, 0.3086087459100547, 0.289200636078619, 0.2951622285036942, 0.04998872519697328, 0.054143568243429585, 0.06901664840137933, 0.07264385517318528, 0.07730739242364759, 0.07979907121050778, 0.07579373536115874, 0.08145997557896667, 0.06912821623202436, 0.1806881109267271, 0.1642586689083131, 0.14287678032245643, 0.15848229161823857, 0.13182146766520475, 0.18375475138407582, 0.13555880524426578, 0.13387075519774894, 0.15635648203585262, 0.23443971035722266, 0.19553542421732262, 0.2080933376323182, 0.22820009769062477, 0.23382912638372433, 0.23401561123740877, 0.19083598634897303, 0.21314293068304724, 0.1853664243228622, 0.15317971258228957, 0.16417323312833199, 0.15760692962984724, 0.174782220087779, 0.17093955942800987, 0.1663804057271211, 0.13120053314925695, 0.15955826262872308, 0.14573579043526863, 0.22441174878907744, 0.2229271517159197, 0.23424199877173424, 0.21838721925741267, 0.20766181124753658, 0.21973555622576624, 0.20681124489478142, 0.2170070881098125, 0.21724188142590817, 0.1821957117197297, 0.18045326892737323, 0.16745419751960855, 0.1739522449388523, 0.16230061034131504, 0.17335581352301366, 0.17179978102144, 0.17012735121289968, 0.17057487868753818, 0.14950401338748287, 0.18310082400654026, 0.26713819578508924, 0.3820468707580451, 0.17851939376024062, 0.18315950877090792, 0.1577232990438424, 0.4113293043799642, 0.38985425291242104, 0.34045789837789486, 0.34992206013265703, 0.34563667045445157, 0.18623576218479332, 0.19845909077015833, 0.344295062424797, 0.1714167998939693, 0.31426601744330396, 0.26060922276211373, 0.192889537253351, 0.1878910865527722, 0.18000574275135717, 0.18023888526290688, 0.18402253289571446, 0.1978917519776251, 0.1853799961882736, 0.18446937646641126, 0.18934993496263275, 0.06874080622462131, 0.10471688454875616, 0.07048002961334698, 0.07724244050644136, 0.07693162427000932, 0.0896738241170606, 0.08694955314380326, 0.07271748326534344, 0.10497563820725442]}, "mutation_prompt": null}
{"id": "6c67fc4f-ecd7-40f1-bca8-72a5e0a31bc0", "solution": "import numpy as np\n\nclass HybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                \n                de_solution = best_solution + 0.8 * (candidate_solution - trial_solution)  # Differential evolution solution\n                de_solution = np.clip(de_solution, -5.0, 5.0)  # Ensure DE solution is within bounds\n                de_fitness = func(de_solution)\n                \n                if de_fitness < best_fitness:\n                    best_solution = de_solution\n                    best_fitness = de_fitness\n        \n        return best_solution", "name": "HybridMetaheuristicAlgorithm", "description": "Implement a hybrid mutation strategy combining differential evolution with mutation scaling for enhanced exploration-exploitation balance.", "configspace": "", "generation": 58, "fitness": 0.1745961821767104, "feedback": "The algorithm HybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "metadata": {"aucs": [0.37653489014251706, 0.36490740968696145, 0.37884807728286085, 0.3733337861383481, 0.38556243292986736, 0.357948948787951, 0.3630057942312118, 0.38430037235281755, 0.3781871555645886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042786664239797934, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007988427430356548, 9.999999999998899e-05, 9.999999999998899e-05, 0.05430504230704736, 0.07711459053629222, 0.012324212753549002, 0.06763825764873654, 0.0692297059193484, 0.07458830322180965, 0.08244961241225723, 0.004501905783168003, 0.05359279139805384, 0.05018100366236433, 0.08721992037591586, 0.006885331495828151, 0.0387394460633923, 0.021501850932801214, 0.02212938641962192, 0.022895903507970217, 0.00012040426831261275, 0.05483398445177301, 0.9975872614725274, 0.9727815619018343, 0.9760054819241542, 0.9842458018086746, 0.9853857170179848, 0.996293879933257, 0.9552794816885654, 0.9915487437204499, 0.9973811227568972, 0.27248954768579714, 0.24319269643156072, 0.2620465213569706, 0.2635166751825132, 0.2499176035381121, 0.2509023081317857, 0.23661713253669148, 0.24865081066858297, 0.24911741894669426, 0.21869368664903965, 0.19099324484404234, 0.2027245484170196, 0.2680907055206255, 0.18965354011697755, 9.999999999998899e-05, 0.23700207243158378, 0.14856339063482082, 0.2633038881737111, 0.16805806704135395, 0.15715282892478677, 0.14849566914345647, 0.14723987209961975, 0.17028678196672775, 0.14903982700083473, 0.14040037411052875, 0.15576611749170166, 0.12787039884584428, 0.13041206385608928, 0.17884057523886754, 0.10377818289017471, 0.14803092289484265, 0.1478621046249382, 0.16609097754412527, 0.15086093447354232, 0.15252488955842802, 0.13212021462916967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030781720994541684, 0.005314957616743388, 9.999999999998899e-05, 0.023495430821291463, 0.03899002162618215, 0.0771943630587979, 0.07046546583226065, 0.015485853614485845, 0.016710910407312984, 0.18342529314303924, 0.029708403958394025, 0.019219186258872423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04083484234504031, 0.031722349420584606, 0.04409642039828232, 0.09829651375524717, 0.08095659629913154, 0.09136539524452858, 0.08299926876613573, 0.07952372015330234, 0.07139500873931903, 0.367086261098303, 0.355771842072483, 0.3601870426793917, 0.3668913455191589, 0.3618785065498411, 0.35815979784647034, 0.3592690428747066, 0.3704504121516081, 0.373582057326335, 0.07096173847993037, 0.0334748716939659, 0.1193076295215103, 0.06466142567122712, 0.029709332557456447, 0.055003132225437956, 0.07133538086535296, 0.09630130609519127, 0.0660537655030996, 0.16571882194226195, 0.20985974298728127, 0.21027191022984415, 0.1641365351630677, 0.13656452304857025, 0.16146172338154063, 0.17318684984479227, 0.20760364711082147, 0.22417574599825907, 0.2489980505268451, 0.09916910196721673, 0.12848397589863236, 0.21370141223851524, 0.14475007220275293, 0.11465645721029427, 0.20977513810885662, 0.14939529483126446, 0.11731003194114686, 0.20481048293520998, 0.06872687107587239, 0.061526994676515234, 0.22167620124796317, 0.14079394011267354, 0.08333650427140726, 0.15854506434997462, 0.0961372188088031, 0.052242539839026936, 0.1689815789982726, 0.20206613506689408, 0.1828336914012022, 0.18372677110515323, 0.2051163300998483, 0.1519678358284755, 0.1819794214692343, 0.13003159367950445, 0.1726827759493086, 0.18713642954251997, 0.18158121791810955, 0.19783770806234902, 0.1762529019240313, 0.16737315917860018, 0.17219570742319956, 0.2095539214183113, 0.1752483062491439, 0.18369894502855322, 0.12323586660748109, 0.13528480747031113, 0.09922002647479089, 0.17349141825135594, 0.06593842319828125, 0.06195779204813423, 0.16994427307083915, 0.1290041808841188, 0.16764626308500408, 0.09474388157754476, 0.1123432349561777, 0.0951846928220863, 0.08325274133213822, 0.21095444317251988, 0.42400499078900167, 0.517988833485939, 0.16773837500952216, 0.3803984593303107, 0.18556467994949344, 0.18936467002946245, 0.17444273353254758, 0.21025425689292343, 0.1906308710582567, 0.21029319516323697, 0.18534773956410344, 0.1845731209430833, 0.17532993569702138, 0.11433475543768146, 0.10372554686157853, 0.059834455699901645, 0.08146056935075408, 0.04284452158263519, 0.06957626772324188, 0.08779893620086043, 0.049055890124461654, 0.04098293223146343]}, "mutation_prompt": null}
{"id": "9382ea4c-f267-4e25-8cb9-e911c37b7562", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize a dynamic mutation strategy based on function evaluations to adapt mutation scale.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "metadata": {"aucs": [0.37653489014251706, 0.3845616344376318, 0.3707899379689592, 0.3534205354081096, 0.3842310267386845, 0.3771295287465799, 0.392155623558072, 0.4088484175202579, 0.3771470201055239, 0.020831362677503074, 9.999999999998899e-05, 9.999999999998899e-05, 0.042786664239797934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07787006566668064, 0.1042917536595549, 0.10814345916249601, 0.09404216685105837, 0.08177700108038266, 0.06248157700668, 0.07761969145841507, 0.10626794908320458, 0.08356577169028512, 0.0747150320052844, 0.05651684984946659, 0.07911541765243513, 0.09404537532084745, 0.08981653257699185, 0.09376284359944476, 0.0797434564997882, 0.06123677988834875, 0.0862733121840733, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.2573907484598775, 0.2487777820634779, 0.27269341291867255, 0.2544185971629497, 0.2604857636072141, 0.25660687449506414, 0.24733251820162572, 0.2616921895147797, 0.26388888292955937, 0.21111255328069078, 0.22356394317959616, 0.17211885828168438, 0.3070124122771335, 0.2175749873035815, 0.29558186487076576, 0.23039593732602537, 0.32031514140277473, 0.23830923154216366, 0.10620564631912477, 0.1571674655471923, 0.1334891220959329, 0.15697079269926384, 0.12240137765629555, 0.15306792022019722, 0.13379881505245195, 0.13914894626165664, 0.12881650904132946, 0.22707926411023271, 0.14110169504732073, 0.11790144936189317, 0.14803092289484265, 0.15087845613428053, 0.13802250908363856, 0.15086093447354232, 0.1677751117655586, 0.15128369566235322, 9.999999999998899e-05, 0.002778920816063013, 0.020793626401512832, 0.02972107172639571, 9.999999999998899e-05, 0.01649863860582701, 9.999999999998899e-05, 0.019742592714890317, 0.0010771873798703924, 0.09117123685042283, 0.13847664920578318, 0.12129213241810499, 0.1046928201874554, 0.09295383807879898, 0.07784198671587983, 0.18342529314303924, 0.0794649930630108, 0.13133240422094883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0787355501913225, 0.04169836419049211, 0.05127106091988154, 0.07052983192769002, 0.09413826771722911, 0.0836755672188999, 0.0686745524229827, 0.0904156215905697, 0.08187361729739928, 0.35939189956142126, 0.3790754923238776, 0.363569788351348, 0.3653626076621378, 0.35932428359624247, 0.37773472354265725, 0.37168331551730194, 0.37857977622356687, 0.3762141233782239, 0.0792398397454912, 0.10657683696925546, 0.10927079872804113, 0.09434282915128955, 0.06480397384974002, 0.086418705972795, 0.08180463090625634, 0.09207878468472663, 0.06861291056203211, 0.22389878122879103, 0.1534461802865178, 0.1645852486442282, 0.2502728077972496, 0.16258487942247868, 0.21022826871155242, 0.2032185682658736, 0.2552792886044787, 0.21799593255888816, 0.2611230365367354, 0.17746210082539915, 0.24118358557585529, 0.26222297838616115, 0.2759145532421322, 0.266429566810075, 0.26096390227312904, 0.28941910082072386, 0.2012659449685733, 0.17724964275496113, 0.20528784899605634, 0.19210247495066235, 0.19467354117755864, 0.18948771509466955, 0.17440345388042477, 0.18964308126298557, 0.2148037944516935, 0.20501583808753232, 0.19630745114023074, 0.21356919750521997, 0.2106591519158515, 0.1970191355050822, 0.23878244107916213, 0.23315840265875598, 0.2238136591585811, 0.2112606367289558, 0.20737206955934695, 0.1958070351754968, 0.20377814599457988, 0.18005579055591514, 0.1855177173924505, 0.18961823880677398, 0.18520969444388435, 0.18445242128918404, 0.18774500077309064, 0.19384251878489234, 0.1762057072505553, 0.1695551690625502, 0.18689885010307106, 0.5195928887481844, 0.32584837779642284, 0.1906239564092923, 0.16326306622587106, 0.5800267898631007, 0.329241736016204, 0.5300535869283656, 0.21245516706647616, 0.491580433950221, 0.458481661788654, 0.5244454648579351, 0.5250418446735388, 0.5131646228712634, 0.42335123561651167, 0.35199563473576045, 0.20017638465832177, 0.1832683347147498, 0.1814492171502795, 0.17626088929650285, 0.19460512014957654, 0.18590145171336503, 0.19242817376071708, 0.20823643341355869, 0.20072893835302819, 0.09201105012399291, 0.09309534396456598, 0.08015197520163675, 0.07449080400914387, 0.07903605490610566, 0.10396049288176201, 0.10028243458067831, 0.08246321847514793, 0.07607967260221304]}, "mutation_prompt": null}
{"id": "fa428d31-a3b6-45ba-a57c-270919d4f55b", "solution": "import numpy as np\n\nclass CrowdingEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                crowding_solution = best_solution + 0.3 * np.random.rand(self.dim)  # Introduce crowding-based solution\n                crowding_solution = np.clip(crowding_solution, -5.0, 5.0)  # Ensure crowding solution is within bounds\n                crowding_fitness = func(crowding_solution)\n                \n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedMetaheuristicAlgorithm", "description": "Enhance the diversity maintenance by incorporating a crowding-based selection mechanism.", "configspace": "", "generation": 60, "fitness": 0.17861739407563557, "feedback": "The algorithm CrowdingEnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "metadata": {"aucs": [0.38452236521056515, 0.3786080418701808, 0.3838576773214417, 0.3574048161323393, 0.39761486060226525, 0.38641112932557675, 0.3670192023496006, 0.3677269458375345, 0.40957518508285096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023930444476592316, 0.0015954438740459764, 9.999999999998899e-05, 9.999999999998899e-05, 0.002126586976294531, 9.999999999998899e-05, 0.06782578730167899, 0.048643602406044706, 0.020738355020607058, 0.0678299244862346, 0.04125116507838067, 0.04620566175268648, 0.06937067485397697, 0.035724483461481715, 0.057572232337883, 0.0890584719069124, 0.038039523398934016, 0.044037804845242334, 0.052290253057655556, 0.03150151600014872, 0.038358907146841204, 0.04568323370241978, 0.05276155806039917, 0.048711635735156245, 0.9594401439574252, 0.9781333858602252, 0.9758670887035853, 0.8831799530183294, 0.8993491182555439, 0.8628594708292102, 0.940286731373214, 0.9216665717239035, 0.962135755922782, 0.24431407153894003, 0.2641992711822896, 0.2664962563518799, 0.2522767837539266, 0.26407078070825407, 0.2514531719067754, 0.24220477684866082, 0.2656555248231066, 0.2842427189215395, 0.29516978936206206, 0.1135556459397612, 0.13469300804132855, 0.29818575663933666, 0.21118281732241717, 0.21222047182847414, 0.23572174772830112, 0.29426129631112974, 0.13179425342151352, 0.13213420543625054, 0.18063430221521926, 0.12360218258790134, 0.1615361489372823, 0.2018559734109494, 0.15320395660860264, 0.22708140695654078, 0.19924271578693797, 0.2190867836512279, 0.1611048898748717, 0.18409157651547525, 0.1042604243842099, 0.15569879826568045, 0.1382259914536731, 0.1466791218174176, 0.18251905549798908, 0.1426483030508774, 0.12474575074129046, 9.999999999998899e-05, 0.02957666797943015, 9.999999999998899e-05, 0.08617302660456039, 9.999999999998899e-05, 0.0013887369159605312, 0.001646467735791468, 0.0064715669926055375, 9.999999999998899e-05, 0.1194148639383833, 0.09920145631680222, 0.08495587405003457, 0.0730305288063664, 0.04388769834465367, 0.07049121843457284, 0.15816173451091675, 0.07224709457876, 0.022269524070659408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04872270797170586, 0.036635757566474414, 0.08112636883276136, 0.10898555928721831, 0.0512641364069959, 0.08673519579096223, 0.08006793558880454, 0.07607807984227444, 0.06143073277843902, 0.3572640198235776, 0.3606376682344625, 0.3621699779412717, 0.37639670987843854, 0.3685346386313737, 0.35673501524880047, 0.3958756274783356, 0.3715636599918729, 0.355146175892174, 0.07260883798506967, 0.04149735200553206, 0.043054461014411904, 0.05194303775655973, 0.08357744029963665, 0.06556472510061195, 0.028766764630877018, 0.09252512293133297, 0.060366555534068556, 0.1881493505850188, 0.12364439490681511, 0.2115250923542349, 0.11114037346016992, 0.215356654779438, 0.1688782609881384, 0.20042796840935995, 0.24834030883587188, 0.14552781379706137, 0.2520697600563444, 0.13326085103144436, 0.10652088131671389, 0.2636168159701029, 0.2164445908415642, 0.11465645721029427, 0.19268016271785626, 0.14856291837431457, 0.09264613035747349, 0.18689118286606676, 0.0982423431432653, 0.05668352898250506, 0.18226667172909305, 0.1804945361052629, 0.06254821598129912, 0.17672569683795536, 0.12420402896440497, 0.029922207252987776, 0.1975360261170127, 0.21148805838468043, 0.18471286380438567, 0.2048901021770494, 0.18420159356443433, 0.21159008596353157, 0.18610771220366118, 0.15724394507102624, 0.1730006889475051, 0.1846487003254479, 0.18996729909430232, 0.1696822325093068, 0.17985763854984949, 0.19429964945526723, 0.16482428485042966, 0.1950937645888583, 0.17553988897142203, 0.18392150787282202, 0.1881490507212421, 0.1369478485763499, 0.5545364994333188, 0.17345417505722793, 0.06586132311583792, 0.06176493445572506, 0.10864558139675151, 0.11535279655652941, 0.16902723594122382, 0.44152510315764926, 0.11122266769243183, 0.08336145639777004, 0.08292960924069848, 0.21154481954838678, 0.21003584420458543, 0.11305023709656703, 0.16925682906628337, 0.4782828888735843, 0.18472401492273216, 0.18747224617451552, 0.18733163917378304, 0.18721738474648641, 0.17546475483969703, 0.178590279779674, 0.18816427587383378, 0.175655621831052, 0.18767426369371165, 0.07189984922068926, 0.07753779755649681, 0.08275522093548948, 0.054851674341056644, 0.06897862001261279, 0.07514880741985586, 0.06515151866801738, 0.04493631114670893, 0.047764536360831666]}, "mutation_prompt": null}
{"id": "eb8a7197-47ff-48f0-a3aa-56febe605050", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithm", "description": "Utilize a dynamic mutation strategy based on function evaluations to adapt mutation scale.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "metadata": {"aucs": [0.37653489014251706, 0.3845616344376318, 0.3707899379689592, 0.3534205354081096, 0.3842310267386845, 0.3771295287465799, 0.392155623558072, 0.4088484175202579, 0.3771470201055239, 0.020831362677503074, 9.999999999998899e-05, 9.999999999998899e-05, 0.042786664239797934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07787006566668064, 0.1042917536595549, 0.10814345916249601, 0.09404216685105837, 0.08177700108038266, 0.06248157700668, 0.07761969145841507, 0.10626794908320458, 0.08356577169028512, 0.0747150320052844, 0.05651684984946659, 0.07911541765243513, 0.09404537532084745, 0.08981653257699185, 0.09376284359944476, 0.0797434564997882, 0.06123677988834875, 0.0862733121840733, 0.9557825670487942, 0.9192729524389853, 0.9297223138265963, 0.9104115055400512, 0.9007493712273458, 0.8883344790597301, 0.9679608471772028, 0.9424301068921329, 0.9656198889808867, 0.2573907484598775, 0.2487777820634779, 0.27269341291867255, 0.2544185971629497, 0.2604857636072141, 0.25660687449506414, 0.24733251820162572, 0.2616921895147797, 0.26388888292955937, 0.21111255328069078, 0.22356394317959616, 0.17211885828168438, 0.3070124122771335, 0.2175749873035815, 0.29558186487076576, 0.23039593732602537, 0.32031514140277473, 0.23830923154216366, 0.10620564631912477, 0.1571674655471923, 0.1334891220959329, 0.15697079269926384, 0.12240137765629555, 0.15306792022019722, 0.13379881505245195, 0.13914894626165664, 0.12881650904132946, 0.22707926411023271, 0.14110169504732073, 0.11790144936189317, 0.14803092289484265, 0.15087845613428053, 0.13802250908363856, 0.15086093447354232, 0.1677751117655586, 0.15128369566235322, 9.999999999998899e-05, 0.002778920816063013, 0.020793626401512832, 0.02972107172639571, 9.999999999998899e-05, 0.01649863860582701, 9.999999999998899e-05, 0.019742592714890317, 0.0010771873798703924, 0.09117123685042283, 0.13847664920578318, 0.12129213241810499, 0.1046928201874554, 0.09295383807879898, 0.07784198671587983, 0.18342529314303924, 0.0794649930630108, 0.13133240422094883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0787355501913225, 0.04169836419049211, 0.05127106091988154, 0.07052983192769002, 0.09413826771722911, 0.0836755672188999, 0.0686745524229827, 0.0904156215905697, 0.08187361729739928, 0.35939189956142126, 0.3790754923238776, 0.363569788351348, 0.3653626076621378, 0.35932428359624247, 0.37773472354265725, 0.37168331551730194, 0.37857977622356687, 0.3762141233782239, 0.0792398397454912, 0.10657683696925546, 0.10927079872804113, 0.09434282915128955, 0.06480397384974002, 0.086418705972795, 0.08180463090625634, 0.09207878468472663, 0.06861291056203211, 0.22389878122879103, 0.1534461802865178, 0.1645852486442282, 0.2502728077972496, 0.16258487942247868, 0.21022826871155242, 0.2032185682658736, 0.2552792886044787, 0.21799593255888816, 0.2611230365367354, 0.17746210082539915, 0.24118358557585529, 0.26222297838616115, 0.2759145532421322, 0.266429566810075, 0.26096390227312904, 0.28941910082072386, 0.2012659449685733, 0.17724964275496113, 0.20528784899605634, 0.19210247495066235, 0.19467354117755864, 0.18948771509466955, 0.17440345388042477, 0.18964308126298557, 0.2148037944516935, 0.20501583808753232, 0.19630745114023074, 0.21356919750521997, 0.2106591519158515, 0.1970191355050822, 0.23878244107916213, 0.23315840265875598, 0.2238136591585811, 0.2112606367289558, 0.20737206955934695, 0.1958070351754968, 0.20377814599457988, 0.18005579055591514, 0.1855177173924505, 0.18961823880677398, 0.18520969444388435, 0.18445242128918404, 0.18774500077309064, 0.19384251878489234, 0.1762057072505553, 0.1695551690625502, 0.18689885010307106, 0.5195928887481844, 0.32584837779642284, 0.1906239564092923, 0.16326306622587106, 0.5800267898631007, 0.329241736016204, 0.5300535869283656, 0.21245516706647616, 0.491580433950221, 0.458481661788654, 0.5244454648579351, 0.5250418446735388, 0.5131646228712634, 0.42335123561651167, 0.35199563473576045, 0.20017638465832177, 0.1832683347147498, 0.1814492171502795, 0.17626088929650285, 0.19460512014957654, 0.18590145171336503, 0.19242817376071708, 0.20823643341355869, 0.20072893835302819, 0.09201105012399291, 0.09309534396456598, 0.08015197520163675, 0.07449080400914387, 0.07903605490610566, 0.10396049288176201, 0.10028243458067831, 0.08246321847514793, 0.07607967260221304]}, "mutation_prompt": null}
{"id": "406bdb3d-1930-4479-89c0-11b4981bfe16", "solution": "import numpy as np\n\nclass NovelAdaptiveMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.learning_rate = 0.1  # Initialize adaptive learning rate\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            candidate_solution = best_solution + np.random.uniform(-self.learning_rate, self.learning_rate, self.dim)  # Mutation step\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                self.learning_rate *= 1.1  # Increase learning rate for exploration\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n                    self.learning_rate *= 0.9  # Decrease learning rate for exploitation\n        \n        return best_solution", "name": "NovelAdaptiveMetaheuristicAlgorithm", "description": "Introduce a novel adaptive learning rate based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 62, "fitness": 0.1884900909374388, "feedback": "The algorithm NovelAdaptiveMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "metadata": {"aucs": [0.3247040121164154, 0.28074747556657353, 0.41115189469570534, 0.3248013406850738, 0.3548055206053454, 0.3266109055659384, 0.3053845222325904, 0.28715725848935836, 0.26520781675664384, 0.05896531940841632, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07215109825299804, 0.08365669776704288, 0.07024877836638155, 0.07117284523384204, 0.07326452418582008, 0.08160306668611106, 0.09371479306985331, 0.07399790230520797, 0.09270295456785138, 0.06694217282514237, 0.07152396915275216, 0.0803931854814206, 0.10213509410338972, 0.09465252511139699, 0.1022073678334573, 0.06519437130227257, 0.05338008314354503, 0.08669728439601809, 0.9679536316614858, 0.9645985683722124, 0.9758041519203621, 0.9790992807674528, 0.9569159274566524, 0.983489896966229, 0.9708603920212006, 0.9623511147989412, 0.981659183377151, 0.22246792794674197, 0.19711993124024152, 0.15347573261378988, 0.23040282343589213, 0.1842638623189805, 0.1638911188105281, 0.16386633667101758, 0.14836112960200376, 0.22433621120912262, 0.215670033052627, 0.2282250816878898, 0.22926320942070355, 0.20913280014758306, 0.33087249248136963, 0.1901708838426741, 0.3008764972107043, 0.2684443263491214, 0.3125812106000664, 0.0913116651291197, 0.12653430949271627, 0.10678975188717599, 0.11931581915329947, 0.10353331111851294, 0.08293857309191222, 0.12192885631047101, 0.11347398556616628, 0.08618207180589144, 0.11327864720649994, 0.13242816731934104, 0.13630900850583016, 0.13106350988199722, 0.1569727951456802, 0.1323158411916533, 0.1420176186264298, 0.12430683629156969, 0.1763659929734127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018731125637004853, 0.021668736040506564, 0.008020644959725876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08949134872840547, 0.1088420295103828, 0.12748049092687175, 0.09682004786665288, 0.04130408256279028, 0.06361816954606381, 0.09367973989699263, 0.10183104730557369, 0.1246168127048497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03227962945093388, 0.04155354516683252, 0.02811565125464255, 0.040382774288975076, 0.04711408555783059, 0.04045927188310994, 0.0177732186761832, 0.0269298907990837, 0.05015750258030782, 0.3245636939936676, 0.37495606533068127, 0.3225279049151829, 0.2966630621921932, 0.2678590811500464, 0.294438846231298, 0.32144576680268167, 0.31898756629045655, 0.3079420248081878, 0.05697043334886498, 0.10202637802361658, 0.06963983516166494, 0.09472492922988407, 0.06040926641771183, 0.07693316289574392, 0.08403511316652945, 0.06473496013936841, 0.08410354328277936, 0.15584111919338517, 0.22014579094874576, 0.1801605606539064, 0.1803622762439392, 0.18940135537382052, 0.20583370685149016, 0.2629880146505926, 0.18782477095688133, 0.24948569563169032, 0.2539736686026195, 0.2683098296894948, 0.2405518523028326, 0.24148573445242738, 0.24873068170780133, 0.2842059955144486, 0.19555160174115516, 0.2521527855734913, 0.19080485103085054, 0.20018291908961228, 0.17384364988705003, 0.1646297358837413, 0.15738908791830675, 0.15267670329579175, 0.19781182235258543, 0.1606707150624006, 0.15531798136568176, 0.17000874631600704, 0.17819034956835844, 0.23382409948598926, 0.1851547188794399, 0.18834511981335444, 0.19058062239001727, 0.20137894733652006, 0.18758353803196037, 0.18714839619834556, 0.20345689735030215, 0.17230027731341124, 0.17952536308220135, 0.16108510798449205, 0.16360237951159384, 0.18848358291895306, 0.1880886125077662, 0.1652981467319813, 0.174603900212702, 0.16891847823313133, 0.1838676956452001, 0.16922730863946167, 0.18536316070758296, 0.31087701802432244, 0.2795013966650529, 0.20014629681278517, 0.25919620279874234, 0.15157840996360428, 0.38817080751193833, 0.3644675964996429, 0.3514376859749182, 0.2899480240450575, 0.19176524462660538, 0.3648797771443393, 0.4741972770357946, 0.41819499988562525, 0.37396108792161853, 0.3816969767241031, 0.19459987096039733, 0.2007272995587518, 0.19009536272369554, 0.20166398464066382, 0.18069889220020963, 0.19510863260996703, 0.17689308862083175, 0.18825118227388882, 0.17643728391769453, 0.08262423979550437, 0.07424323153652257, 0.08007885002866333, 0.09044267855204147, 0.08134998594724308, 0.09900643494177563, 0.0678671606463922, 0.10822030865425492, 0.09463722309935985]}, "mutation_prompt": null}
{"id": "1473dddf-a3a1-462f-b46a-6ee0a38aadd1", "solution": "import numpy as np\n\nclass PopulationBasedEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, population_size=10):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(self.population_size)]  # Initialize population\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            candidate_solutions = [indiv + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim) for indiv in population]  # Mutation step\n            candidate_solutions = [np.clip(indiv, -5.0, 5.0) for indiv in candidate_solutions]  # Ensure solutions are within bounds\n            candidate_fitnesses = [func(indiv) for indiv in candidate_solutions]\n            \n            best_candidate_idx = np.argmin(candidate_fitnesses)\n            if candidate_fitnesses[best_candidate_idx] < best_fitness:\n                best_solution = candidate_solutions[best_candidate_idx]\n                best_fitness = candidate_fitnesses[best_candidate_idx]\n            \n            population = [population[i] + 0.6 * (candidate_solutions[i] - population[i]) for i in range(self.population_size)]  # Update population using best candidate\n        \n        return best_solution", "name": "PopulationBasedEnhancedMetaheuristicAlgorithm", "description": "Introducing a population-based approach to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 63, "fitness": 0.07034838408387027, "feedback": "The algorithm PopulationBasedEnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "metadata": {"aucs": [0.15486738822084045, 0.22911319248859974, 0.14971766108838314, 0.08492143810591246, 0.10174044182095854, 0.09491641175927801, 0.12511868956517824, 0.14092108791517677, 0.14154404724340786, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01940585338948131, 0.05997705270995779, 0.02736431948041884, 0.05526672284303036, 0.045586671619056496, 0.06111815824755851, 0.04385122219218551, 0.028311259806764077, 0.02624556919892107, 0.023670198512250495, 0.014436877946390814, 0.016366864349842025, 0.04313940684717821, 0.0004741409692869958, 9.999999999998899e-05, 0.04041856179252168, 0.012643794626212568, 9.999999999998899e-05, 0.0664073059762813, 0.043680329223319325, 0.07615186090421922, 0.07114663203927363, 0.05945340997910609, 0.051667312212477556, 0.06944331898644196, 0.06150290167923955, 0.045775777262804906, 0.004659059780131036, 0.03405721543642126, 0.021955143469057137, 0.022730923924082158, 0.11003465810767377, 0.06134416294933831, 9.999999999998899e-05, 0.014836658999191066, 0.037986164745948514, 0.16280974764907163, 0.10030061161146608, 0.05192522501531416, 0.06947484655181158, 0.023071803029292792, 0.09983742998088241, 0.07168578994402341, 0.08758469680998715, 0.14820598835655452, 0.007161756155568244, 0.06339777354631082, 9.999999999998899e-05, 9.999999999998899e-05, 0.03551120852907219, 9.999999999998899e-05, 0.0036174798619327264, 9.999999999998899e-05, 0.006945180942891649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08936255374352864, 0.015658435491712086, 0.061005292321729576, 0.062163463490741755, 0.050988758799830114, 0.016701405416504, 0.050710192797882025, 0.049135787487560645, 0.04330372774214264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1685835995710715, 0.16289086065183633, 0.14821953835500112, 0.14237094435500908, 0.13863020205266618, 0.10360320330273876, 0.16764728901189319, 0.15326505450440475, 0.14357607315688825, 0.012384549024051061, 0.0070198840185891065, 9.999999999998899e-05, 0.03220127563457842, 0.045555369689827985, 0.04796855604205508, 0.039416012007057355, 0.04213978440855448, 0.045300227974734986, 0.14368702907964448, 0.1211666061351907, 0.14259071837183723, 0.15479867923181978, 0.1615929423053034, 0.13923141764415436, 0.15271778472965702, 0.1243950192005745, 0.1378052353063245, 0.135169661328994, 0.14328324003397885, 0.13964298438017864, 0.14318251833431228, 0.1552867718438452, 0.12756611749891422, 0.1340072312158752, 0.16277686551571602, 0.11914466415857183, 0.08426482336300123, 0.0863776688068778, 0.08013424548579129, 0.09322125123617175, 0.10280322070395709, 0.07767722816620337, 0.1059770340399584, 0.10692982486015956, 0.06005616623111365, 0.15671031575237448, 0.14997665903217205, 0.14686788512307336, 0.14530662432998176, 0.16819847515549669, 0.1350111664988095, 0.1515928881266676, 0.15685530483472576, 0.13269743124172617, 0.16573055183244945, 0.006085343230331608, 0.08053885994539, 9.999999999998899e-05, 0.13920310003966074, 9.999999999998899e-05, 0.07885583805846996, 0.04429671028920423, 0.033837464264405925, 0.10153606722917119, 0.12577473810601092, 0.11636330290389796, 0.15737140149271778, 0.15086859244818895, 0.1303117774498047, 0.11897164438722752, 0.10865346889507033, 0.14683996309994107, 0.13132263045494497, 0.10780185168439493, 0.11851071309726613, 0.14730692155673752, 0.13847912936730133, 0.16277624200147167, 0.11068500060179198, 0.10050617957815544, 0.13862406945389538, 0.18480131002605082, 0.18450278720641777, 0.17428158906400837, 0.18172144266750134, 0.19180953768020936, 0.17763262587537065, 0.18528495346440854, 0.18137511228396874, 0.20498596891639853, 0.057257379951160536, 0.04138381282920367, 0.04301891707501071, 0.05248705933773601, 0.047099712595553456, 0.025281351386636897, 0.04289846180415191, 0.05256557881082358, 0.05610665291974615]}, "mutation_prompt": null}
{"id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 64, "fitness": 0.23990166315046937, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmLevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "34d2c273-0783-44da-9dd7-fdc15cab085e", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "16b44d1e-b0d8-4244-b120-98613322ea22", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "aec70abd-6e82-4870-93e6-56cdc5d405e9", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "e292808c-8b39-40ef-a172-007c3d64828f", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "e46a84bf-ae52-4365-bee9-bc4b593bfade", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "2482b33c-72a7-4f2b-b477-d2ed208391d4", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "2dc9ec42-78b2-49a4-b73b-b0ea9029fda1", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n                \n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n                else:\n                    crossover_point = np.random.randint(0, self.dim)  # Select random crossover point\n                    mutant[crossover_point:] = best_solution[crossover_point:]  # Perform crossover\n                    trial_solution = mutant\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyDE", "description": "Enhancing the mutation strategy by incorporating differential evolution to drive diversity and improve convergence.", "configspace": "", "generation": 70, "fitness": 0.23903748975487316, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmLevyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5411416433358098, 0.5355453826309358, 0.4998780105617129, 0.5199635615484917, 0.5640996742316898, 0.5330351872680548, 0.5706974435194061, 0.5327451935331695, 0.49784406623261, 0.19259753089157916, 0.13079146968993915, 0.17622474349082695, 0.2067867660790157, 0.16455706374840862, 0.11926822623824895, 0.13581402178844615, 0.13121476113570174, 0.17346640245320377, 0.0761232884776909, 0.11015369143673381, 0.14015354174939787, 0.11939606377446677, 0.09737985014052952, 0.15611040113160302, 0.1619615492979175, 0.14919448834687188, 0.10291755849369433, 0.08215949528875977, 0.1227549373461605, 0.10109574832907331, 0.10250760436896433, 0.08583890994956767, 0.11927300931647078, 0.0684161173594452, 0.10780999269672176, 0.09076635482021178, 0.976797431428978, 0.9668520283315851, 0.9492532662698517, 0.9513787970177155, 0.9605551567976228, 0.9776240914481513, 0.964582435316801, 0.9847359837011125, 0.9705464705623558, 0.34822083880549337, 0.3105655527184952, 0.30770086946712727, 0.29216478881149466, 0.31843162447335605, 0.3449657328273321, 0.32324458810776935, 0.34604342055639326, 0.3441090524384429, 0.3557942557545538, 0.21975075121533538, 0.21915238619279542, 0.3574964247514232, 0.2885733018800333, 0.2811280198355611, 0.27864525578665844, 0.23659069473428707, 0.23672969694035984, 0.16733266183213003, 0.2693195495329097, 0.17823135303030102, 0.19000496170042136, 0.2750123154848182, 0.15120681218475096, 0.1850146937238213, 0.26482699776904817, 0.24009465717709566, 0.15374795211655168, 0.14630418369465314, 0.16831742253440352, 0.1684885176094678, 0.13901199629906746, 0.13410173077332765, 0.1308129874489894, 0.15770215024441492, 0.15614622770860553, 0.011601274516641724, 9.999999999998899e-05, 0.007807636527051187, 0.009867721024521603, 0.05218234286766532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066059588162787, 0.13174318525945583, 0.05178466925121661, 0.08351828531288552, 0.08125481125352874, 0.04457215421669314, 0.16293335718419544, 0.15242018340224583, 0.05853281282257228, 0.021547516158838875, 0.008367967995076442, 0.010677618932018573, 0.01875570589519171, 0.03398604026035956, 0.1016923229958473, 0.006630095907264377, 0.01809181554292194, 0.0015082348902556442, 0.13990090133769262, 0.11839575533323843, 0.14611957378610008, 0.11052793322018639, 0.10160038129327753, 0.04700755456442529, 0.13948707838224506, 0.08145403593532663, 0.14440621695064493, 0.44538359209632783, 0.4431377648582897, 0.4408955445255237, 0.43104101054535415, 0.4359225281766408, 0.48039492039998866, 0.46448702179537193, 0.449185148281914, 0.4225836412343372, 0.0814673565999503, 0.08461119224048141, 0.07563615598999185, 0.07121991369540426, 0.06581689971890081, 0.0922988345449689, 0.08819286214974931, 0.08146543467888334, 0.1361938704590253, 0.15420761323839982, 0.15721738976625732, 0.16761574274918822, 0.22208475498853808, 0.24957307045947852, 0.18514043455254636, 0.250902910731405, 0.28699470009067607, 0.30796524048822826, 0.22696370329978832, 0.2007187603916465, 0.31655448192777136, 0.21340385228162095, 0.19932206856063184, 0.26899090079487675, 0.26026384906527644, 0.2542299034893589, 0.3421960091685934, 0.22880369236038767, 0.19245236584369363, 0.21696828506854304, 0.20214696821798084, 0.25573036573983177, 0.19364279287484032, 0.15129923489513897, 0.171286187435285, 0.18533483906705617, 0.2001708240850104, 0.18588029931084438, 0.18889826834260293, 0.21691103701109427, 0.20365528329230542, 0.1982534911430346, 0.20807278737792956, 0.20124794811822, 0.21612522321063854, 0.19802102766271656, 0.25251252239415856, 0.20068293677888216, 0.19406207819217058, 0.21466795565622465, 0.21467329758713882, 0.24935284462909157, 0.19934636354959911, 0.20167129324005584, 0.18973156113593403, 0.1898291912935629, 0.6918947362883325, 0.7312586580654112, 0.15632748429936494, 0.20160070962290833, 0.722890965677778, 0.5626138171552278, 0.6648226356924699, 0.4390454683944638, 0.2099246978440601, 0.4732466906714351, 0.213190801644639, 0.21124464013120958, 0.21407808536245276, 0.16998636585779792, 0.5052365015737224, 0.21139148942921038, 0.17479912275372989, 0.20289421275070185, 0.1983072091305309, 0.18383722610764586, 0.19439999892124704, 0.18616771852827907, 0.18609409907375174, 0.2122209520487418, 0.18289746960171704, 0.0962095795100909, 0.07437414348702187, 0.11820355156842377, 0.08692303063966933, 0.07543648118190616, 0.08069088985250761, 0.09121674976934357, 0.07603417964551007, 0.08039776458333558]}, "mutation_prompt": null}
{"id": "4f7d5733-8766-42ca-8f2d-96dcf18425df", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyDynamic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale based on function landscape\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyDynamic", "description": "Enhancing exploration by incorporating a dynamic mutation strategy based on function landscape analysis.", "configspace": "", "generation": 71, "fitness": 0.23990166315046937, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmLevyDynamic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "0a2a5237-0e88-4278-ac65-2ee6cb4071d4", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "57f5b113-c1aa-4b0f-ae7a-c2dd626d3254", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "7d1a4559-65c2-4714-959a-fc9278f1f11d", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "563bc7f3-39b8-4a43-9822-abf6e31ea250", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "d906a390-5ddb-4306-b7c0-4464891899f3", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "aa00843a-d092-4935-82dd-07e73a0e4f79", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n        self.adaptive_step_factor = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n\n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - self.adaptive_step_factor * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n\n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Implement adaptive control of mutation step size based on solution improvement.", "configspace": "", "generation": 77, "fitness": 0.23855649664931203, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmLevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03553982786334087, 0.14673952903332244, 0.13869663616656747, 9.999999999998899e-05, 0.10843308743395697, 0.0011931820751407418, 9.999999999998899e-05, 0.07310420439856369, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.04410392782209105, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07251977951396815, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.31755667772434315, 0.28408747063077766, 0.36407067373966273, 0.20743869454583075, 0.22846876318110543, 0.22253882004664116, 0.31752959191295316, 0.13041979954967098, 0.13550850394217795, 0.16879724352356296, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.20012415903837688, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.07928445480157154, 0.15293945946085097, 0.024029831953169545, 0.008147398134084272, 0.0005429578837170546, 0.000586755303331854, 0.03646069436471555, 0.00971999359958664, 9.999999999998899e-05, 0.017833261228569097, 0.06112361029981761, 0.1103517527255008, 0.13468418939465832, 0.14323330451382643, 0.09048113944589098, 0.1263072267955988, 0.10606313101203346, 0.1636404966381928, 0.10908324847788753, 0.1369178495800748, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.06383468890672828, 0.07214948569242274, 0.1151551526675999, 0.0685791461847357, 0.07844327077707491, 0.12658955277402295, 0.07154000905161306, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.2805135777082237, 0.26240903223533585, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19244801891431118, 0.1703489472063604, 0.1993289832939128, 0.2306176503336309, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.26537169081013745, 0.29950952772139594, 0.16114780076282953, 0.21855545753046612, 0.20411444519748212, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.1976479877489472, 0.20631187261602302, 0.20473740039075083, 0.2069764077170706, 0.18631365990747029, 0.18779923863415093, 0.19830794104294613, 0.23832091904278407, 0.1945532882385843, 0.202573424400322, 0.21353169375197067, 0.17480376814451393, 0.21118978644178965, 0.18403796674941097, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.6143049256714377, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.38679908459915946, 0.6107401730907445, 0.21379211165918743, 0.3872534099004855, 0.2126570093120813, 0.4702111551968282, 0.5581036867552597, 0.34536693176509425, 0.18549003690678234, 0.19411742585491087, 0.19975048700447728, 0.18941355417811745, 0.18965172324601287, 0.18640705016124648, 0.19954295266979105, 0.19824112605724398, 0.19811512198539527, 0.06894815292034728, 0.08534747535372611, 0.08758787096898846, 0.09975822814294988, 0.0969473200797647, 0.10622863924054071, 0.07802592832432442, 0.1080515331219003, 0.09247891866134228]}, "mutation_prompt": null}
{"id": "3255f64d-6656-495f-a56e-809feec79f6d", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n            candidate_fitness = func(candidate_solution)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n            else:\n                mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                trial_fitness = func(trial_solution)\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevy", "description": "Introducing a Levy Flight step to explore the search space more effectively.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5689561228835477, 0.5310624635110802, 0.5235580631823029, 0.5481571480200899, 0.5369962805643764, 0.5257141538325341, 0.5527167116410043, 0.5690468652452574, 0.5665980496705407, 0.04171590439765571, 0.07267193365614799, 0.03827131522694094, 0.11646602878743129, 0.13869663616656747, 9.999999999998899e-05, 0.10314016827237993, 0.0004985101815553339, 9.999999999998899e-05, 0.07309115818101841, 0.09578143772333003, 0.0946223364266785, 0.07854027881338421, 0.11217434397479209, 0.11560294499311907, 0.10282844391556012, 0.09758746699151821, 0.08713495084525491, 0.10045876727807224, 0.13230559530394803, 0.08576679268638077, 0.1116628529066831, 0.08770362612849114, 0.08219396665097034, 0.10728227957934466, 0.10121540710136578, 0.07510953107467233, 0.9673656579554902, 0.9101095206645816, 0.9380887427297044, 0.9243296087039972, 0.967327525414312, 0.9470690507213241, 0.9092820832261697, 0.9652426285038648, 0.9791891867031102, 0.3540662604535866, 0.3895799032532594, 0.32646687065620406, 0.41053201582926213, 0.3764726944080907, 0.29170001857301486, 0.3640895836036464, 0.33344338426495657, 0.3567893695107308, 0.22804076684500296, 0.22744778922777065, 0.32313960694344446, 0.28408747063077766, 0.3639962994497483, 0.2051229909879525, 0.22846876318110543, 0.22209550008417722, 0.35369737017254443, 0.13041979954967098, 0.1357975320296615, 0.1723260848125281, 0.18323705422493564, 0.1338239825808636, 0.1287862784736864, 0.18835810828256006, 0.14646108647325307, 0.1965089711860496, 0.24519940685848585, 0.18288812517970654, 0.2762221181098252, 0.1494671626956302, 0.14945423406545, 0.16542324583491752, 0.13065749682162053, 0.08001352101371673, 0.17096178624750769, 0.03139259908689562, 0.00446321941320893, 9.999999999998899e-05, 0.0014565427818615806, 0.03646069436471555, 0.019743608802096246, 9.999999999998899e-05, 0.016974997572875683, 0.06624740224140402, 0.10747462808266206, 0.1317245934572978, 0.14222644292977604, 0.08854214336201771, 0.1237283531411858, 0.11363368250744266, 0.16274503352204917, 0.11446522078484866, 0.15211042270537178, 0.03318537444620584, 0.015283803260131235, 0.02847378659529698, 0.03796361591303887, 0.028853159963755926, 0.0003367850572163489, 0.03696777113959415, 0.03138986204980243, 0.01143059478101971, 0.1122379474784364, 0.16000181450096118, 0.1487783774955278, 0.07938455060582073, 0.09360364189959203, 0.055542248376750813, 0.0860879467755139, 0.09769173684128096, 0.10727811912491125, 0.44109035787194517, 0.4454410122827317, 0.45187668212791254, 0.47782531242782234, 0.46257737441390934, 0.4478627105489994, 0.4616402155605258, 0.4381452382091128, 0.4460144689646727, 0.07006578975903577, 0.07214948569242274, 0.12950237315573065, 0.06331253168841267, 0.07844327077707491, 0.09611240679834532, 0.06516100879810016, 0.08283183558458018, 0.14528257270829437, 0.3101465332659885, 0.30060894849493514, 0.2613882560433993, 0.1303414419156227, 0.17180127447935978, 0.2542353706059737, 0.19599091259457913, 0.17990041194339101, 0.22114560399597016, 0.2302120241251122, 0.21655616811514522, 0.3359415310182887, 0.2823265581809902, 0.2624712324244133, 0.2646556719748929, 0.29950952772139594, 0.16092401236002063, 0.21855545753046612, 0.2223161030601346, 0.24201617867521297, 0.2169904680043484, 0.18984499884994677, 0.19847759164146872, 0.14038155479416115, 0.16282787434877233, 0.20588360445888465, 0.192189292226293, 0.22939251328962973, 0.18821612098494112, 0.20631187261602302, 0.20282140782765223, 0.2069764077170706, 0.20279091107052505, 0.18162032756384683, 0.2010746097372783, 0.20773730200881968, 0.1945532882385843, 0.202573424400322, 0.21203336206205026, 0.17480883337906383, 0.21118978644178965, 0.18191278877531825, 0.2001545978592839, 0.19268059390462133, 0.17128793238641116, 0.18960938214201417, 0.1892003051769794, 0.16920864658542323, 0.6474539889803037, 0.2024701695528106, 0.2023085005920312, 0.625476042942517, 0.8138198623136008, 0.8518092476335499, 0.7426392700022595, 0.369523263791645, 0.7086619108127798, 0.21379211165918743, 0.3732123696677694, 0.2126570093120813, 0.4788099197728405, 0.6584466035676408, 0.35715141881836165, 0.1919541009324125, 0.18631694842962798, 0.19975048700447728, 0.18812307470848477, 0.19479703704454354, 0.18662003808323602, 0.1915267399122551, 0.19824112605724398, 0.19811512198539527, 0.06781755993178562, 0.09450515512014424, 0.08758787096898846, 0.09150919104042654, 0.09551116417511507, 0.09379647730065044, 0.08272530803244793, 0.1002313394145895, 0.0854152325412808]}, "mutation_prompt": null}
{"id": "2a18390c-4d11-453a-b9be-c5cb87517445", "solution": "import numpy as np\n\nclass DynamicPopulationSizeAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10  # Initialize population size\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n                self.population_size = 10 + eval_count // (self.budget // 10)  # Adjust population size dynamically\n\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(self.population_size)]  # Create population\n            \n            for candidate_solution in population:\n                candidate_solution += np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeAlgorithm", "description": "Introduce a dynamic population size to adapt to the optimization problem and improve exploration-exploitation balance.", "configspace": "", "generation": 79, "fitness": 0.08963754534165878, "feedback": "The algorithm DynamicPopulationSizeAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.17228070216803737, 0.16097281857449974, 0.16225135772704402, 0.17662216070507197, 0.19815495835907992, 0.18391869616841805, 0.1829800706018836, 0.15103335225513492, 0.17855610175704606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08029629594361287, 0.051907245675844704, 0.047177515506095946, 0.03870087067939987, 0.04491407547190718, 0.048482681986960596, 0.05127631801578614, 0.07173161394448602, 0.04389035922146811, 0.04269931772945634, 0.03019502733415158, 0.0533146031908831, 0.027701398586302273, 0.052801844644225326, 0.043225866549898795, 0.031859576191208716, 0.028440085468629528, 0.05298317815092379, 0.10078562056752982, 0.07555160903797165, 0.07926728072068312, 0.08576059322451579, 0.0896182916515329, 0.08251162360035758, 0.08019795743473102, 0.09460761646739213, 0.0852019972276783, 0.08205692099784068, 0.08222896732373997, 0.09766668245826282, 0.05942286985610479, 0.06478910539474714, 0.05369710403136341, 0.08596026544830415, 0.06166934324593798, 0.08302682398202887, 0.12506836037240776, 0.15122429221305134, 0.17006428873099444, 0.13297594504645627, 0.09380236036068568, 0.12415984008351466, 0.11602962297233166, 0.1187615450969075, 0.12271117984768376, 0.021500856054009643, 0.019356722865783715, 0.00907420572043971, 0.000963678480783714, 9.999999999998899e-05, 0.016789452650320946, 9.999999999998899e-05, 0.000719886234627154, 0.014854388797297391, 0.019028412902750147, 9.999999999998899e-05, 9.999999999998899e-05, 0.02382268053087333, 0.003046951146840171, 9.999999999998899e-05, 0.004261247606000662, 0.0027838970024104404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05140711571858314, 0.044883446270683414, 0.051899402308841824, 0.036061586033421245, 0.06391593585608368, 0.05403932560314295, 0.046822640301318996, 0.038143517549418915, 0.03903732425133333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2001697925278394, 0.19920738303789676, 0.22671848513602066, 0.19882432098842362, 0.19349984300148448, 0.1925287915073649, 0.1953236490927377, 0.18165887086372923, 0.19565271179887656, 0.04427116214783511, 0.047026078798243165, 0.04237702262368659, 0.0415417296807411, 0.038109011593322806, 0.044580665802522734, 0.038171624433849916, 0.04227189113340102, 0.03855013720235534, 0.15216989012305226, 0.15426733682252602, 0.12419405725361488, 0.13665561639750834, 0.12451709253214172, 0.16380561101968216, 0.14469463375734049, 0.13449819870304747, 0.1455189975989053, 0.1745056407776725, 0.17933492994821987, 0.15579922993724848, 0.15948394835435942, 0.17115444738677454, 0.15971250992803432, 0.1605111175691376, 0.15834531451286804, 0.16758028838113948, 0.0967457496892361, 0.10573195548216896, 0.11557531889397288, 0.10906913983504474, 0.12065058654774785, 0.11116054683152687, 0.11441990497578358, 0.09991305843444409, 0.10872113365617442, 0.14926536271824753, 0.15625895850689064, 0.15080821561332702, 0.16915294186011487, 0.15004802934808303, 0.1513364883516557, 0.16705109121697037, 0.16124781248010678, 0.1603536465523655, 0.16028081512781223, 0.1609518505048836, 0.14434369944208336, 0.14297416680799668, 0.1478091321793521, 0.13637775523889517, 0.14990288091893866, 0.1466248868841401, 0.16213285394719423, 0.18225937090041489, 0.16651389745948741, 0.17146042690784036, 0.1488156062124204, 0.14305278313440573, 0.13164789866142523, 0.16228228510574605, 0.16722081012302625, 0.15537061765734028, 0.14525464360845985, 0.15465158047192362, 0.1604132805801266, 0.16893092332371784, 0.17297545333172437, 0.1885422861192324, 0.18157179945596325, 0.19610901705362038, 0.14812026212848228, 0.19321625920746022, 0.18262294755000452, 0.17638802504304607, 0.1995419768400738, 0.18473398542361041, 0.200075974206671, 0.19136444042538048, 0.17417377806777645, 0.17782379481168953, 0.047831134206565595, 0.0566207034926951, 0.06177545260007333, 0.06192774035208315, 0.05491099357077778, 0.05227439034609471, 0.0455059776368838, 0.0614265644308194, 0.04436382504530123]}, "mutation_prompt": null}
{"id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 80, "fitness": 0.24062102841941174, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmLevyADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "81ce11f4-7779-4777-a921-2bcef0cc4f11", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "99ea1df2-3505-49c4-937f-425f6241dac7", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADEMultiStart:\n    def __init__(self, budget, dim, num_starts=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_starts = num_starts\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.num_starts - 1):\n            start_solution = np.random.uniform(-5.0, 5.0, self.dim)\n            start_fitness = func(start_solution)\n            if start_fitness < best_fitness:\n                best_solution = start_solution\n                best_fitness = start_fitness\n\n        for eval_count in range(self.budget - self.num_starts):\n            # Algorithm logic remains the same as EnhancedMetaheuristicAlgorithmLevyADE\n            \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADEMultiStart", "description": "Improve exploration by adding a multi-start strategy to initialize multiple solutions and perform search from each.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndentationError('expected an indented block', ('<string>', 24, 9, '        return best_solution\\n')).", "error": "IndentationError('expected an indented block', ('<string>', 24, 9, '        return best_solution\\n'))", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {}, "mutation_prompt": null}
{"id": "f2b9dc53-eddd-45cc-bf96-da86c8d28e75", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "8f0dd547-d9f4-49d6-89c6-c64424966c3b", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "ebafc8da-8b8b-4074-b154-32cd69ce696f", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "392bf8d4-c0cc-4ef0-af6d-14ed1a8256e2", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n        self.population_size = 20  # Initialize population size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n                self.population_size = int(20 * (1 - eval_count/self.budget))  # Adapt population size dynamically\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADEImproved", "description": "Improve convergence by incorporating a dynamic population-size strategy to adapt to the problem landscape.", "configspace": "", "generation": 85, "fitness": 0.24062102841941174, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmLevyADEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "7f77888c-32bf-4c75-a9e9-0b5f7146b11a", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n        self.population_size = 10  # Initialize population size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n                self.population_size = 10 + int(40 * eval_count / self.budget)  # Adapt population size\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5 and self.population_size > 1:  # Introduce adaptive differential evolution\n                    mutants = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))  # Generate mutants for DE\n                    trial_solutions = best_solution + 0.6 * (mutants - best_solution)  # Create trial solutions\n                    trial_solutions = np.clip(trial_solutions, -5.0, 5.0)  # Ensure solutions are within bounds\n                    candidate_fitnesses = np.apply_along_axis(func, 1, trial_solutions)\n                    best_idx = np.argmin(candidate_fitnesses)\n                    candidate_solution = trial_solutions[best_idx]\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Improve exploration by implementing a dynamic population size strategy to enhance diversity and convergence speed.", "configspace": "", "generation": 86, "fitness": 0.19676723226612397, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmLevyADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.47102721226090494, 0.45637950318426834, 0.5130089506294957, 0.41980886156891684, 0.4663381596800448, 0.4835449369997348, 0.4591479618530633, 0.4819524122822658, 0.4532430553918775, 9.999999999998899e-05, 0.027224406295568992, 0.02184271654596981, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005777745008903601, 9.999999999998899e-05, 9.999999999998899e-05, 0.00207583117482113, 0.10754700644227777, 0.0907505232523288, 0.07640434156807407, 0.07352223510308709, 0.13364504823303924, 0.0947920600432477, 0.0972894320042198, 0.13606920926071597, 0.09845148343995025, 0.07637547289628854, 0.07378705582570833, 0.07830414953216625, 0.06473172342878097, 0.09864837597927412, 0.0787992369156334, 0.0717947752954422, 0.08324347065552884, 0.06615794628998606, 0.7697206619401544, 0.6828978940801491, 0.7449706509688165, 0.7926274245791989, 0.6703232797566181, 0.43695600945325863, 0.6818964851186735, 0.4861415512070676, 0.7014485906038801, 0.2882578678476373, 0.29173613430090195, 0.23306566641269932, 0.26359294408420353, 0.22309838650249403, 0.2308607711060301, 0.2846418924602968, 0.291990036342507, 0.2721409374816113, 0.24015039153626683, 0.3239350781143333, 0.15292104146719554, 0.2580555846682433, 0.32706640019172806, 0.2877290009767024, 0.17800880219248316, 0.2246671081744107, 0.24707942221977897, 0.12006293126279255, 0.14665066317579967, 0.11766921065037639, 0.12805232276874268, 0.12484074727649186, 0.11939743830026672, 0.15916222069746833, 0.1368318464503958, 0.12542397740543532, 0.12556346557042575, 0.14384426133865547, 0.12036963906433251, 0.1288572448545161, 0.15250112518736347, 0.13435442754788507, 0.15055858662970045, 0.19334242603201646, 0.13314644695306765, 9.999999999998899e-05, 0.019011652055762496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022231854139319607, 0.0015111368896950639, 9.999999999998899e-05, 0.000207833208534014, 0.10429937826535551, 0.109030988099866, 0.1210491925471433, 0.09148981844037041, 0.08910771912049453, 0.06199255020893901, 0.11722324513909843, 0.08765563432606582, 0.10504885962256372, 9.999999999998899e-05, 0.01852178796798165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012140792990947058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13074344550009231, 0.12269504684516197, 0.09582237294677876, 0.12863567790498365, 0.13487873198240363, 0.12164648376248877, 0.06597752761769393, 0.10715021409569947, 0.09706655410697917, 0.36187366119116693, 0.42090508296061446, 0.3888056512640905, 0.3986283266121128, 0.4229066197865754, 0.3505404036186056, 0.4133482873413834, 0.403015662374932, 0.4221100685748431, 0.06909308084553378, 0.07328709025083191, 0.1007244530527629, 0.09914531462668508, 0.08079504882149069, 0.08421502008359893, 0.09953132556438282, 0.08272915848860263, 0.08385353997119238, 0.2013506651901975, 0.15092587124862944, 0.15051362850301264, 0.16526877601796275, 0.14921881445280016, 0.14977813731625034, 0.21612177003708744, 0.17170126251910167, 0.2869269338398409, 0.26659752295148165, 0.24531123806886723, 0.19040394724171428, 0.21271899107944314, 0.24966884106378862, 0.2586238945682646, 0.23052873741124158, 0.19006569880384172, 0.20161770020089775, 0.20116504501275434, 0.17778676521676984, 0.16997125807099778, 0.20007473031354284, 0.20697036944265523, 0.1822888554307298, 0.1470945992118552, 0.1713329223488088, 0.17648959426103195, 0.21949184467768224, 0.17824674571431276, 0.21952115090513724, 0.19382894361116665, 0.1850197647666344, 0.1900743499121802, 0.19013862627386846, 0.17794561980912238, 0.21041781922575065, 0.1759970656383475, 0.1877587856116708, 0.16857041810116302, 0.20018810304222545, 0.18768044154594266, 0.16653302753404786, 0.1876087628675035, 0.18618254802539402, 0.19214414077160868, 0.18750784223942452, 0.1884151950641768, 0.18879178178419687, 0.5260388559586618, 0.3474377372747839, 0.6991031070031822, 0.1511637270545505, 0.5263605426075944, 0.6411350208035761, 0.40529387195536715, 0.4000856246362102, 0.3889811332435381, 0.15424897739091414, 0.15166150451739324, 0.3836032933032799, 0.30381469055358357, 0.16976824182000527, 0.292225449732912, 0.17819263881780445, 0.18648499799588159, 0.1967633028283604, 0.183572517622536, 0.1891606950479381, 0.1810587283812467, 0.20085125286777716, 0.19801525859578073, 0.19021124678366008, 0.07005417071161046, 0.08934721724882189, 0.07697898414012816, 0.09941132685235843, 0.07355546849718486, 0.08477771356081953, 0.08670042851096882, 0.0752135471012414, 0.0924394011428985]}, "mutation_prompt": null}
{"id": "9ff96a99-f44b-46b7-942a-14d4842eef6a", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmGaussianLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.normal(0, 1, self.dim)  # Gaussian mutation\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmGaussianLevyADE", "description": "Improve exploration by incorporating a Gaussian mutation strategy to enhance diversity in the search space.", "configspace": "", "generation": 87, "fitness": 0.21790476948474488, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmGaussianLevyADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5146091806447926, 0.5472545965361122, 0.5232267660528727, 0.5261775615475044, 0.4739885341171167, 0.5105856588780566, 0.5991786258692733, 0.5443213309212449, 0.5093319022084948, 0.019025368602817783, 0.058089120690912543, 0.0011973380477598994, 9.999999999998899e-05, 0.08449543015271432, 0.06377325008454604, 0.06515309440407946, 9.999999999998899e-05, 0.04301038554623793, 0.09395430458520693, 0.08260497742307471, 0.08844868417620377, 0.10984139628523937, 0.09268151619498544, 0.0702694270392431, 0.10920752471317596, 0.1126917598837317, 0.14102641562680984, 0.10795497772048479, 0.09077456174870946, 0.10432740640387606, 0.08906336190225961, 0.12345700165037832, 0.08067123025106993, 0.11330326916563649, 0.10532414801011947, 0.08653905479630197, 0.95171479865507, 0.9499638690534395, 0.9153778012253241, 0.9468710431474537, 0.9405143544857935, 0.908905847338991, 0.9599945527971351, 0.9499386578661925, 0.9639877088811794, 0.34658124910143184, 0.31503481617524187, 0.24373403955302064, 0.27782890686724937, 0.18597554355204193, 0.21670206514856916, 0.3046704607285553, 0.2520122421288986, 0.2834810222147376, 0.22491498384551656, 0.19851302123293957, 0.16183427475838708, 0.19859507716836855, 0.2631106513472996, 0.22694389276857685, 0.2152339384716423, 0.20093852143378077, 0.2255395113833688, 0.15336179614089473, 0.14306787727389525, 0.13155750819737644, 0.16372355759547297, 0.28955714016796197, 0.16423249799427775, 0.1370679453088114, 0.12289372158135503, 0.11942684095823242, 0.16463414942699017, 0.12083078576758366, 0.12276047457417794, 0.1387926010826881, 0.12804502132450468, 0.12083093779915632, 0.15767565950412332, 0.1326731359982627, 0.16807335978037918, 0.007241308599158391, 0.04945593967856965, 0.011346576138807407, 9.999999999998899e-05, 9.999999999998899e-05, 0.019494430367419935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15514126183549237, 0.14679969963122108, 0.09987236004432876, 0.07355712140484028, 0.07366702513557011, 0.04135668268447279, 0.09269547277713042, 0.0649739629682825, 0.11158507433591969, 0.02367276303593857, 0.019165511511053723, 0.0116102484889119, 0.01376164560868709, 0.04689580631054524, 0.022149292168666013, 0.03689320532406759, 0.00830143869017741, 0.014514802985875042, 0.06357649508382746, 0.08673987713062392, 0.12747243129520813, 0.09848349912229348, 0.1413697682631222, 0.12548468801446033, 0.11087048905196839, 0.07528032371533988, 0.13004087679143617, 0.4274773889612856, 0.4732707865483927, 0.40713180966638995, 0.4466505698872577, 0.45589505508432115, 0.3802700372801945, 0.4309624376743103, 0.4059153451123235, 0.37645797563104666, 0.08167500183415832, 0.09825027560490251, 0.0962774499682697, 0.12765277444647471, 0.1162243931906829, 0.11150499362077948, 0.14531516729238725, 0.10016037093434826, 0.09124870705030064, 0.18544533306757316, 0.16469742360704565, 0.23799393555041282, 0.13500949049229616, 0.17278449803443163, 0.17937752762371528, 0.19337382152951643, 0.2742960087332781, 0.1596591402777371, 0.23120524972703382, 0.26030051741813653, 0.24495067986468766, 0.2124969217181688, 0.23183482604276917, 0.24681691088384383, 0.21856796793924882, 0.22291364774106892, 0.21649026180800401, 0.19320280463124995, 0.18714782202961122, 0.15441510197774444, 0.16928857802770303, 0.16402154193300544, 0.20474171649241268, 0.20169193954214348, 0.23034406697741838, 0.18544164348599512, 0.19082476095435819, 0.21654393259762905, 0.21212568598240455, 0.21889232116490653, 0.17287514103565715, 0.18061857159443295, 0.21048540840896834, 0.20403724396322243, 0.18569408433226076, 0.19839915468304903, 0.24928788704977545, 0.18215530440651206, 0.1769906945336137, 0.1744392398824639, 0.21763001168675444, 0.18606370469844846, 0.18694330242735502, 0.1938420797708843, 0.18779852552731546, 0.17744825749208304, 0.1722805319776577, 0.736576937506187, 0.6859831712815542, 0.19957262066221915, 0.1705895296219322, 0.5705308206902315, 0.645248961941371, 0.2845162972205276, 0.14909018970693355, 0.39651769357606803, 0.2085605209457504, 0.31314774047361693, 0.37497284648857077, 0.3387090962843171, 0.29826812486747345, 0.29003750099815284, 0.20069843910390195, 0.21517416791291077, 0.18592563737634327, 0.20408451902211167, 0.1815061194378813, 0.18852320169115622, 0.192248471384305, 0.18861207535735625, 0.22385057110167128, 0.08759411766468705, 0.09015187224966614, 0.07960260862181479, 0.08395085319375417, 0.07762027541709926, 0.0892987593398833, 0.09392639169625472, 0.08594159653587141, 0.09232561633868241]}, "mutation_prompt": null}
{"id": "c5714d03-6cbc-498f-a73b-946957607d3a", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n        self.success_rate = 0.0  # Initialize success rate\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                if self.success_rate > 0.5:  # Adapt population size based on success rate\n                    self.dim = min(self.dim + 1, 10)  # Increase population size\n                else:\n                    self.dim = max(self.dim - 1, 2)  # Decrease population size\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Update success rate\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n                        self.success_rate = 0.9 * self.success_rate + 0.1  # Update success rate\n                    else:\n                        self.success_rate = 0.9 * self.success_rate  # Update success rate\n\n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADEImproved", "description": "Improve algorithm convergence by incorporating a dynamic population size adaptation mechanism based on success rate of solutions.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (4,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (4,) (5,) ')", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {}, "mutation_prompt": null}
{"id": "f2b49d2b-8ff6-4656-b5c9-94856733ae0f", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "60912d68-45e4-4a1e-b090-36a0a016e7c8", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n        self.adaptive_scale = 0.5  # Initialize adaptive scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.adaptive_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt adaptive scale\n\n            self.mutation_scale = self.adaptive_scale  # Update mutation scale based on adaptive scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "ImprovedMetaheuristicAlgorithmLevyADE", "description": "Improve the algorithm by introducing a self-adaptive mechanism to adjust the mutation scale during the optimization process.", "configspace": "", "generation": 90, "fitness": 0.24062102841941174, "feedback": "The algorithm ImprovedMetaheuristicAlgorithmLevyADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "b16f8f6a-eed7-43b0-a8b4-22377599b100", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n        self.levy_step_size = 0.01  # Initialize Levy flight step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n                self.levy_step_size = 0.01 + 0.04 * (1 - np.exp(-eval_count / self.budget))  # Adjust Levy flight step size\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = self.levy_step_size * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Implement a dynamic mechanism to adjust the Levy flight step size based on the function landscape to enhance exploration capability.", "configspace": "", "generation": 91, "fitness": 0.23626166172138582, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmLevyADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5251392206479975, 0.5319190344527236, 0.5217303436274074, 0.5425372533806372, 0.5417462152694403, 0.5148971522120802, 0.5366785796086857, 0.5189103872019276, 0.5463749577355763, 0.012412142834622664, 0.027012472997945958, 0.03856387449280596, 0.05534745887624193, 0.09832213504219833, 9.999999999998899e-05, 0.022233499768126275, 0.018902659457400328, 0.007843572592844406, 0.12764492954321738, 0.0912114639073176, 0.09143099961065415, 0.10093814684418523, 0.10422986895765574, 0.09249087832851821, 0.12852889046633498, 0.10836391510089871, 0.11178473668205546, 0.11780244417382912, 0.06711173879709009, 0.09887262070268754, 0.09219563540492604, 0.08306682522043707, 0.1027857186652924, 0.10902151979537189, 0.13073920758016777, 0.0851663416173275, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7834945448703126, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.31353293873909893, 0.3565318440708094, 0.33000197147151844, 0.30422549510996955, 0.2968376282213636, 0.3193878228322081, 0.36284887453073156, 0.31603434787444074, 0.32109475320552205, 0.22035579445425568, 0.5475565833412064, 0.2908555170453384, 0.5896723320913235, 0.3526329523313686, 0.27299911040135383, 0.2881506701729444, 0.2969487949040539, 0.31266436592086977, 0.16632557480235555, 0.14580284726745107, 0.14705301924932979, 0.12493077775150463, 0.14418792976058814, 0.1476183021459596, 0.20648919400061505, 0.12729674880406905, 0.1282605693034422, 0.193106765861626, 0.13223007577683143, 0.16056988772145542, 0.17771589940778143, 0.14359157658348298, 0.13090755528610865, 0.12994076650362874, 0.13257598894011025, 0.16123111388563993, 0.038671096892682555, 0.032696735227359386, 0.07629643193441282, 0.052593528975954595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01280891821725183, 9.999999999998899e-05, 0.08110665954477736, 0.10377785648143856, 0.09278279119402832, 0.14326625042946017, 0.08751995032169002, 0.05134632861183397, 0.08374887444233303, 0.11353035381023124, 0.12766891698868332, 0.008174229951084633, 0.0018273462689223363, 0.010143580935695673, 9.999999999998899e-05, 0.001727294848599903, 9.999999999998899e-05, 0.00716417219628418, 0.01716857806654859, 0.012172161251644886, 0.07691818811235751, 0.10809288608728351, 0.12871882129194068, 0.14939036890052992, 0.0799184615714279, 0.1042784633786128, 0.1038185034990684, 0.10386420693721643, 0.12527059967694332, 0.44843767644385335, 0.43775233153135484, 0.45661783790581334, 0.4068394133203854, 0.42100038983987553, 0.42898686433314226, 0.4011478832102181, 0.43510172721411366, 0.493532571676776, 0.09634265286361066, 0.0846429879315268, 0.06239276969089458, 0.09682021877780733, 0.09379943031486504, 0.06032138003201726, 0.07814168673681887, 0.08071128942942907, 0.16924165111662282, 0.24536267808792556, 0.2611973750761909, 0.17752338709785254, 0.25301083689692005, 0.17918556871627844, 0.15137074783431104, 0.1379001779185175, 0.19218892932038556, 0.21800250057707016, 0.23329549168174968, 0.2743223688716505, 0.2854912579188189, 0.2727265607543312, 0.283312129281191, 0.19848030288137664, 0.27412833283930915, 0.1641427395963928, 0.2839955378271064, 0.19423382007644407, 0.2661405747513119, 0.2226903608616505, 0.24096508393847738, 0.20748638811126585, 0.20160555255163726, 0.21982482382606372, 0.23000209399209193, 0.16173813462903397, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.20743354452993468, 0.21767446275233415, 0.19430816002632922, 0.21611167301411438, 0.2127115097020179, 0.21682772157902042, 0.19849812376515952, 0.19945249919015073, 0.16580745366779825, 0.18050504647736654, 0.17163700120543313, 0.17890007781523054, 0.1732705116819856, 0.16647857219943218, 0.21084501021635138, 0.6575876691469189, 0.18906486735001138, 0.16904469422689217, 0.7506246991762359, 0.7044726940765189, 0.6985484068738255, 0.7073859491912506, 0.32909264012617867, 0.7622208330594294, 0.4512793308912223, 0.24619849337266064, 0.5544335369495159, 0.21238508060413352, 0.41757731538202414, 0.36118264290076607, 0.5399439422039423, 0.1665232250034676, 0.3799156590443368, 0.20955353531585474, 0.18410476878895898, 0.183691034069553, 0.1809692049638082, 0.19094505130188988, 0.22060875534538504, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.09336608792294121, 0.0963845275015226, 0.07721634561161295, 0.09041014674036307, 0.11226918168262878, 0.08442632956916518, 0.07837049881134717, 0.07836538257546, 0.07828660873447935]}, "mutation_prompt": null}
{"id": "b66ddad9-96fd-4897-8ba3-83d60f4f00d9", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "7d3895cb-5d2f-47cd-ba3c-4e1bbf4148fd", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "d3f07015-65f5-4572-ad70-756adf8b6b73", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "5171653a-77b2-4abc-a783-e8b9e9317140", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "01f08814-fe93-4668-abd7-1e51bb3cb163", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = 0.01 * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5390069986314847, 0.5541620165528489, 0.5507719536023492, 0.5671867606332881, 0.5555955649042452, 0.5441527685796388, 0.5503181843247571, 0.5653453098543982, 0.5405128560512981, 0.024225740200231827, 0.056533219657951106, 0.0539959623107783, 0.07080489702969295, 0.1273895176520944, 0.0029647298255373045, 0.04274598792645723, 0.008680729202946713, 0.06261529627991513, 0.14329066048083783, 0.19635252733425768, 0.0985258947290828, 0.10514185843445156, 0.10421992122857449, 0.12461218282536268, 0.09114615751020883, 0.11003915928264474, 0.1121009501481347, 0.12774207762016454, 0.06454847485747084, 0.0688653516218799, 0.10446721343886589, 0.08326515253553757, 0.09554661101640904, 0.10976883207077315, 0.13108647431587472, 0.08513176242861376, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7824434182753361, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.3449497751333692, 0.3759047882366069, 0.34760983643329735, 0.3600041773324004, 0.35485070146797093, 0.36296167378365973, 0.3734018697723034, 0.3354355455577944, 0.3418284734284993, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8594096163909987, 0.32494112429217004, 0.27298658303248935, 0.2940738638650279, 0.23879814479221673, 0.29842204654584137, 0.16418195599343421, 0.1710201593399815, 0.15168230988615683, 0.1251103732629132, 0.13877644692102697, 0.13268305081571574, 0.2076010801326994, 0.12736531953130525, 0.128335812347373, 0.19462864057394813, 0.1323118822488628, 0.1645634342670772, 0.17870882497399543, 0.1449484268276725, 0.13109573017098797, 0.12915612471573445, 0.13246098763564296, 0.14828841923150105, 0.03753108742178424, 0.01047751847376821, 0.06902334151806366, 0.054568334108693106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07642074584770964, 0.10995930167820511, 0.09333043359724635, 0.14583891424661122, 0.08266488978157138, 0.05240825913819336, 0.07860148688551183, 0.11309693114435782, 0.1253526935500211, 0.02346895600117771, 0.030998993745833148, 0.0387034855646845, 0.014198441490912539, 0.027673701332614487, 0.019492194288592724, 0.029575885495871646, 0.06333103407804119, 0.021090568133966592, 0.08084364968774693, 0.10894694506759572, 0.1263430385293035, 0.16066316128635694, 0.08122753841508235, 0.10744347046006564, 0.10178885935032977, 0.10673730213297439, 0.12426349340721721, 0.4553658859546573, 0.4377573330528267, 0.44590869768587915, 0.40888625901630204, 0.4097956598318663, 0.4218964591250677, 0.41394628009575285, 0.4492471714373599, 0.48646571966885477, 0.08827604614062912, 0.0846429879315268, 0.06291352021621865, 0.09714007573902017, 0.09473926955467527, 0.08222973197533834, 0.07871766941924074, 0.07499453157019376, 0.1753095341826918, 0.250544874891118, 0.2442376561350763, 0.16626447744612938, 0.2559808028257976, 0.18397592753140957, 0.15944076924887007, 0.14439109195772692, 0.18901211253856742, 0.21800250057707016, 0.23231319939878303, 0.26260448669119485, 0.2903842386411982, 0.24239413847921198, 0.2539535640629704, 0.1994000842494259, 0.2636557165019431, 0.1655431057780985, 0.2807160741775174, 0.22466231720004837, 0.27150113682880095, 0.2156198268465781, 0.22577689056993033, 0.19784566940503756, 0.19701405604633748, 0.23671024201634105, 0.24139435798225528, 0.16899407353615592, 0.21796766929923084, 0.20189754426550977, 0.18624644160366643, 0.2022498642292836, 0.21767446275233415, 0.19430816002632922, 0.21610944513462815, 0.20467136452346302, 0.22048284886348724, 0.19874454764922855, 0.19952608293004337, 0.17367753788884055, 0.17725217370509805, 0.17212189805221245, 0.17910191817329602, 0.17383574558177317, 0.1681946448647148, 0.21120522553388033, 0.6832074300598676, 0.18907831948646736, 0.17187646723844996, 0.8640421033639643, 0.7871546622676252, 0.7855320015246572, 0.6909250652390388, 0.29228095260075404, 0.8258940859878237, 0.4351006613867391, 0.20669855708273788, 0.5521305593482437, 0.21253403325591957, 0.38443683782845206, 0.37366794994682284, 0.42566798124992, 0.16655952192307688, 0.3524087043004893, 0.21120067514904317, 0.18099284931614434, 0.18433212574707059, 0.1825729561240731, 0.19094505130188988, 0.22162741537557973, 0.19402371453584055, 0.19207558387858903, 0.18718034077794377, 0.07904925971896559, 0.09705293470053988, 0.07768776468649408, 0.09569893806095331, 0.11716654814970806, 0.0850381454247443, 0.0792087399480561, 0.07847616397209789, 0.07855405989800479]}, "mutation_prompt": null}
{"id": "c6fab800-a67f-4998-863c-b9e96ca51aad", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n        self.levy_step_size = 0.01  # Initialize Levy flight step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n                self.levy_step_size = 0.01 - 0.005 * eval_count / self.budget  # Adapt Levy flight step size\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = self.levy_step_size * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Improve algorithm convergence by dynamically adjusting Levy flight step size based on fitness improvement.", "configspace": "", "generation": 97, "fitness": 0.24310886188532882, "feedback": "The algorithm EnhancedMetaheuristicAlgorithmLevyADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "f044c88a-234a-444d-903c-8bc575cf0e3e", "metadata": {"aucs": [0.5622651290299813, 0.557040863742365, 0.550423212189125, 0.5588703932873009, 0.53686401406476, 0.5530294072839073, 0.5515495284056451, 0.571210334131622, 0.5423653990503849, 0.02623283956378386, 0.0612369978106424, 0.049814434330760604, 0.0815696456756192, 0.1342353030739072, 0.0018122869658836471, 0.05666847969631583, 0.014840521934103568, 0.05141594276531303, 0.13166580632154434, 0.10711784785356737, 0.0965205654499689, 0.10117090240363691, 0.10423612142756666, 0.1033339933376759, 0.09117775760650515, 0.11049819497317825, 0.11211854923280384, 0.12488161206693371, 0.06820406123066658, 0.06713301442594033, 0.10837489812365753, 0.09063122763960274, 0.0955983549136179, 0.11322166646996634, 0.13250141343216726, 0.08523058818909501, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7823588812650365, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.36517391008749334, 0.3987351785900132, 0.41444387041974806, 0.34704257224056034, 0.3574117729198417, 0.3727323907918506, 0.360078686369683, 0.33398847964951905, 0.3383438349240375, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8430669102298514, 0.3252398312453124, 0.27298658303248935, 0.3070651187448762, 0.23902467419584195, 0.2984232424606359, 0.1650160440415811, 0.14873499669337564, 0.1594761844137189, 0.1251463224553785, 0.14279603959841347, 0.14961335429777411, 0.20803298413781612, 0.12736185432678304, 0.12828570680288554, 0.19582804143365795, 0.13231955871897794, 0.16524480010273634, 0.1788219341721048, 0.1601115621054059, 0.1310972342079374, 0.13003001098046407, 0.13269559082568616, 0.1483876450738959, 0.03792536284674186, 0.009640517200728338, 0.06581987130344003, 0.05414556729106412, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07643976500112681, 0.10986087153642798, 0.09320460722068746, 0.14597525123661215, 0.08293987235755906, 0.05242665216352704, 0.07827478571128599, 0.11306813154666784, 0.12434201498230846, 0.03296342186297496, 0.03462140866200225, 0.04434263927887805, 0.01748434589273662, 0.03670543427469586, 0.021531722023865996, 0.03854435613348073, 0.07570007396457845, 0.021586981100876645, 0.08097687177236479, 0.11021326454051394, 0.12560322102624522, 0.16376503411531318, 0.08159104658932514, 0.1080543795041452, 0.10582869692246166, 0.1153476073397427, 0.1239693452418642, 0.4564007106047724, 0.43039725543017093, 0.44495729452620203, 0.41644371128538094, 0.42055247430349874, 0.4216261598067321, 0.41815481834707935, 0.45960164345166654, 0.4883521863396344, 0.08824682338687362, 0.08464319510604856, 0.06293261158549723, 0.09716101832975177, 0.09486060444914224, 0.08678820673306731, 0.07879097232960253, 0.07515694907324288, 0.1755876889791964, 0.26118029484870653, 0.2131291120261778, 0.1728539082786008, 0.28144496905381056, 0.18563394894894902, 0.16069706820344132, 0.14637887221035673, 0.161335380197001, 0.21829820927351806, 0.22153679018654293, 0.26826110651002333, 0.28668442638833713, 0.23812934148088405, 0.26569132552877794, 0.20004488909596274, 0.30724820325771296, 0.21663093148142576, 0.3214663956442543, 0.23823864467256795, 0.2677091824228415, 0.21713663468586342, 0.22911844347650856, 0.19939350166367797, 0.20509024889638328, 0.23507383550078242, 0.23937351478556868, 0.16871581607195163, 0.21796766929923084, 0.20189754426550977, 0.19790339761497178, 0.2022498642292836, 0.20858965546243446, 0.19430816002632922, 0.21610944513462815, 0.20469219049773568, 0.21682772157902042, 0.19878967212800214, 0.199526003939419, 0.17450361222067678, 0.1772161892422215, 0.17210196578070935, 0.17921822142761634, 0.17582691658701566, 0.16646936627676057, 0.21123607457794902, 0.7980125711251644, 0.1890788995640289, 0.16904802381567663, 0.8488937088585824, 0.7979967690303714, 0.7840397931559936, 0.6969805913417156, 0.3146472265174223, 0.8069470961840057, 0.47039771543135944, 0.2066821989664055, 0.544774430240194, 0.21254206246775098, 0.41689842965448043, 0.362764416040706, 0.44176093150445117, 0.1665472338893924, 0.38609169673069765, 0.21346938476073174, 0.18530508147760383, 0.18760579127061805, 0.187391482201977, 0.19094505130188988, 0.22516247974840198, 0.19402371453584055, 0.19207558387858903, 0.19091793357937448, 0.08852109315619072, 0.09730491990094703, 0.07814020563136892, 0.09591110156725846, 0.1176003344962242, 0.08510661483374349, 0.0789381880010882, 0.0785492888609799, 0.07842475374068958]}, "mutation_prompt": null}
{"id": "543063d4-dbc2-45ef-99ea-dcc843990bcb", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n        self.levy_step_size = 0.01  # Initialize Levy flight step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n                self.levy_step_size = 0.01 - 0.005 * eval_count / self.budget  # Adapt Levy flight step size\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = self.levy_step_size * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Improve algorithm convergence by dynamically adjusting Levy flight step size based on fitness improvement.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c6fab800-a67f-4998-863c-b9e96ca51aad", "metadata": {"aucs": [0.5622651290299813, 0.557040863742365, 0.550423212189125, 0.5588703932873009, 0.53686401406476, 0.5530294072839073, 0.5515495284056451, 0.571210334131622, 0.5423653990503849, 0.02623283956378386, 0.0612369978106424, 0.049814434330760604, 0.0815696456756192, 0.1342353030739072, 0.0018122869658836471, 0.05666847969631583, 0.014840521934103568, 0.05141594276531303, 0.13166580632154434, 0.10711784785356737, 0.0965205654499689, 0.10117090240363691, 0.10423612142756666, 0.1033339933376759, 0.09117775760650515, 0.11049819497317825, 0.11211854923280384, 0.12488161206693371, 0.06820406123066658, 0.06713301442594033, 0.10837489812365753, 0.09063122763960274, 0.0955983549136179, 0.11322166646996634, 0.13250141343216726, 0.08523058818909501, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7823588812650365, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.36517391008749334, 0.3987351785900132, 0.41444387041974806, 0.34704257224056034, 0.3574117729198417, 0.3727323907918506, 0.360078686369683, 0.33398847964951905, 0.3383438349240375, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8430669102298514, 0.3252398312453124, 0.27298658303248935, 0.3070651187448762, 0.23902467419584195, 0.2984232424606359, 0.1650160440415811, 0.14873499669337564, 0.1594761844137189, 0.1251463224553785, 0.14279603959841347, 0.14961335429777411, 0.20803298413781612, 0.12736185432678304, 0.12828570680288554, 0.19582804143365795, 0.13231955871897794, 0.16524480010273634, 0.1788219341721048, 0.1601115621054059, 0.1310972342079374, 0.13003001098046407, 0.13269559082568616, 0.1483876450738959, 0.03792536284674186, 0.009640517200728338, 0.06581987130344003, 0.05414556729106412, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07643976500112681, 0.10986087153642798, 0.09320460722068746, 0.14597525123661215, 0.08293987235755906, 0.05242665216352704, 0.07827478571128599, 0.11306813154666784, 0.12434201498230846, 0.03296342186297496, 0.03462140866200225, 0.04434263927887805, 0.01748434589273662, 0.03670543427469586, 0.021531722023865996, 0.03854435613348073, 0.07570007396457845, 0.021586981100876645, 0.08097687177236479, 0.11021326454051394, 0.12560322102624522, 0.16376503411531318, 0.08159104658932514, 0.1080543795041452, 0.10582869692246166, 0.1153476073397427, 0.1239693452418642, 0.4564007106047724, 0.43039725543017093, 0.44495729452620203, 0.41644371128538094, 0.42055247430349874, 0.4216261598067321, 0.41815481834707935, 0.45960164345166654, 0.4883521863396344, 0.08824682338687362, 0.08464319510604856, 0.06293261158549723, 0.09716101832975177, 0.09486060444914224, 0.08678820673306731, 0.07879097232960253, 0.07515694907324288, 0.1755876889791964, 0.26118029484870653, 0.2131291120261778, 0.1728539082786008, 0.28144496905381056, 0.18563394894894902, 0.16069706820344132, 0.14637887221035673, 0.161335380197001, 0.21829820927351806, 0.22153679018654293, 0.26826110651002333, 0.28668442638833713, 0.23812934148088405, 0.26569132552877794, 0.20004488909596274, 0.30724820325771296, 0.21663093148142576, 0.3214663956442543, 0.23823864467256795, 0.2677091824228415, 0.21713663468586342, 0.22911844347650856, 0.19939350166367797, 0.20509024889638328, 0.23507383550078242, 0.23937351478556868, 0.16871581607195163, 0.21796766929923084, 0.20189754426550977, 0.19790339761497178, 0.2022498642292836, 0.20858965546243446, 0.19430816002632922, 0.21610944513462815, 0.20469219049773568, 0.21682772157902042, 0.19878967212800214, 0.199526003939419, 0.17450361222067678, 0.1772161892422215, 0.17210196578070935, 0.17921822142761634, 0.17582691658701566, 0.16646936627676057, 0.21123607457794902, 0.7980125711251644, 0.1890788995640289, 0.16904802381567663, 0.8488937088585824, 0.7979967690303714, 0.7840397931559936, 0.6969805913417156, 0.3146472265174223, 0.8069470961840057, 0.47039771543135944, 0.2066821989664055, 0.544774430240194, 0.21254206246775098, 0.41689842965448043, 0.362764416040706, 0.44176093150445117, 0.1665472338893924, 0.38609169673069765, 0.21346938476073174, 0.18530508147760383, 0.18760579127061805, 0.187391482201977, 0.19094505130188988, 0.22516247974840198, 0.19402371453584055, 0.19207558387858903, 0.19091793357937448, 0.08852109315619072, 0.09730491990094703, 0.07814020563136892, 0.09591110156725846, 0.1176003344962242, 0.08510661483374349, 0.0789381880010882, 0.0785492888609799, 0.07842475374068958]}, "mutation_prompt": null}
{"id": "21034eef-d878-4860-b9fc-309606a6e54a", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithmLevyADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_scale = 0.5  # Initialize mutation scale\n        self.levy_step_size = 0.01  # Initialize Levy flight step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)  # Initialize random solution\n        best_fitness = func(best_solution)\n        \n        for eval_count in range(self.budget):\n            if eval_count % (self.budget // 10) == 0 and eval_count > 0:\n                self.mutation_scale = 0.5 - 0.5 * eval_count / self.budget  # Adapt mutation scale\n                self.levy_step_size = 0.01 - 0.005 * eval_count / self.budget  # Adapt Levy flight step size\n\n            if np.random.rand() < 0.1:  # Introduce Levy flight with a probability\n                levy_step = self.levy_step_size * np.random.standard_cauchy(self.dim)  # Generate Levy flight step\n                candidate_solution = best_solution + levy_step\n            else:\n                if np.random.rand() < 0.5:  # Introduce adaptive differential evolution\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant for DE\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                else:\n                    candidate_solution = best_solution + np.random.uniform(-self.mutation_scale, self.mutation_scale, self.dim)  # Mutation step\n\n            if 'candidate_solution' in locals():  # Check if candidate solution exists\n                candidate_solution = np.clip(candidate_solution, -5.0, 5.0)  # Ensure solution is within bounds\n                candidate_fitness = func(candidate_solution)\n                \n                if candidate_fitness < best_fitness:\n                    best_solution = candidate_solution\n                    best_fitness = candidate_fitness\n                else:\n                    mutant = np.random.uniform(-5.0, 5.0, self.dim)  # Generate mutant\n                    trial_solution = best_solution + 0.6 * (mutant - best_solution)  # Create trial solution\n                    trial_solution = np.clip(trial_solution, -5.0, 5.0)  # Ensure trial solution is within bounds\n                    trial_fitness = func(trial_solution)\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n        \n        return best_solution", "name": "EnhancedMetaheuristicAlgorithmLevyADE", "description": "Improve algorithm convergence by dynamically adjusting Levy flight step size based on fitness improvement.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c6fab800-a67f-4998-863c-b9e96ca51aad", "metadata": {"aucs": [0.5622651290299813, 0.557040863742365, 0.550423212189125, 0.5588703932873009, 0.53686401406476, 0.5530294072839073, 0.5515495284056451, 0.571210334131622, 0.5423653990503849, 0.02623283956378386, 0.0612369978106424, 0.049814434330760604, 0.0815696456756192, 0.1342353030739072, 0.0018122869658836471, 0.05666847969631583, 0.014840521934103568, 0.05141594276531303, 0.13166580632154434, 0.10711784785356737, 0.0965205654499689, 0.10117090240363691, 0.10423612142756666, 0.1033339933376759, 0.09117775760650515, 0.11049819497317825, 0.11211854923280384, 0.12488161206693371, 0.06820406123066658, 0.06713301442594033, 0.10837489812365753, 0.09063122763960274, 0.0955983549136179, 0.11322166646996634, 0.13250141343216726, 0.08523058818909501, 0.9324232417291254, 0.9368965677512933, 0.8535583889547605, 0.9013618089953338, 0.8935103959134557, 0.7823588812650365, 0.913493444851595, 0.9385691566853174, 0.9174692756726391, 0.36517391008749334, 0.3987351785900132, 0.41444387041974806, 0.34704257224056034, 0.3574117729198417, 0.3727323907918506, 0.360078686369683, 0.33398847964951905, 0.3383438349240375, 0.22035579445425568, 0.38415733353449366, 0.22406874177999703, 0.8430669102298514, 0.3252398312453124, 0.27298658303248935, 0.3070651187448762, 0.23902467419584195, 0.2984232424606359, 0.1650160440415811, 0.14873499669337564, 0.1594761844137189, 0.1251463224553785, 0.14279603959841347, 0.14961335429777411, 0.20803298413781612, 0.12736185432678304, 0.12828570680288554, 0.19582804143365795, 0.13231955871897794, 0.16524480010273634, 0.1788219341721048, 0.1601115621054059, 0.1310972342079374, 0.13003001098046407, 0.13269559082568616, 0.1483876450738959, 0.03792536284674186, 0.009640517200728338, 0.06581987130344003, 0.05414556729106412, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07643976500112681, 0.10986087153642798, 0.09320460722068746, 0.14597525123661215, 0.08293987235755906, 0.05242665216352704, 0.07827478571128599, 0.11306813154666784, 0.12434201498230846, 0.03296342186297496, 0.03462140866200225, 0.04434263927887805, 0.01748434589273662, 0.03670543427469586, 0.021531722023865996, 0.03854435613348073, 0.07570007396457845, 0.021586981100876645, 0.08097687177236479, 0.11021326454051394, 0.12560322102624522, 0.16376503411531318, 0.08159104658932514, 0.1080543795041452, 0.10582869692246166, 0.1153476073397427, 0.1239693452418642, 0.4564007106047724, 0.43039725543017093, 0.44495729452620203, 0.41644371128538094, 0.42055247430349874, 0.4216261598067321, 0.41815481834707935, 0.45960164345166654, 0.4883521863396344, 0.08824682338687362, 0.08464319510604856, 0.06293261158549723, 0.09716101832975177, 0.09486060444914224, 0.08678820673306731, 0.07879097232960253, 0.07515694907324288, 0.1755876889791964, 0.26118029484870653, 0.2131291120261778, 0.1728539082786008, 0.28144496905381056, 0.18563394894894902, 0.16069706820344132, 0.14637887221035673, 0.161335380197001, 0.21829820927351806, 0.22153679018654293, 0.26826110651002333, 0.28668442638833713, 0.23812934148088405, 0.26569132552877794, 0.20004488909596274, 0.30724820325771296, 0.21663093148142576, 0.3214663956442543, 0.23823864467256795, 0.2677091824228415, 0.21713663468586342, 0.22911844347650856, 0.19939350166367797, 0.20509024889638328, 0.23507383550078242, 0.23937351478556868, 0.16871581607195163, 0.21796766929923084, 0.20189754426550977, 0.19790339761497178, 0.2022498642292836, 0.20858965546243446, 0.19430816002632922, 0.21610944513462815, 0.20469219049773568, 0.21682772157902042, 0.19878967212800214, 0.199526003939419, 0.17450361222067678, 0.1772161892422215, 0.17210196578070935, 0.17921822142761634, 0.17582691658701566, 0.16646936627676057, 0.21123607457794902, 0.7980125711251644, 0.1890788995640289, 0.16904802381567663, 0.8488937088585824, 0.7979967690303714, 0.7840397931559936, 0.6969805913417156, 0.3146472265174223, 0.8069470961840057, 0.47039771543135944, 0.2066821989664055, 0.544774430240194, 0.21254206246775098, 0.41689842965448043, 0.362764416040706, 0.44176093150445117, 0.1665472338893924, 0.38609169673069765, 0.21346938476073174, 0.18530508147760383, 0.18760579127061805, 0.187391482201977, 0.19094505130188988, 0.22516247974840198, 0.19402371453584055, 0.19207558387858903, 0.19091793357937448, 0.08852109315619072, 0.09730491990094703, 0.07814020563136892, 0.09591110156725846, 0.1176003344962242, 0.08510661483374349, 0.0789381880010882, 0.0785492888609799, 0.07842475374068958]}, "mutation_prompt": null}
