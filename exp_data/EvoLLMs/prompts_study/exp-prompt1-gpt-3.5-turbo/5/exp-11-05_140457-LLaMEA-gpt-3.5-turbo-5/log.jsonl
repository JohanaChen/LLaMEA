{"id": "cd3fe1e1-fe99-4ae5-9c9d-0d2df9c350f5", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "dd54c151-e67a-4c23-bc46-198eb0cd8c21", "solution": "import numpy as np\n\nclass AdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent1)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationGeneticAlgorithm", "description": "Utilizing a modified Genetic Algorithm with adaptive mutation rates for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": 0.1968200469201322, "feedback": "The algorithm AdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "cd3fe1e1-fe99-4ae5-9c9d-0d2df9c350f5", "metadata": {"aucs": [0.49999857078203713, 0.5100145913263465, 0.5066773520319185, 0.46099919273604506, 0.5156349238998197, 0.4473941681047886, 0.47341132030835276, 0.506675660933442, 0.4587216021302146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003125645508270436, 9.999999999998899e-05, 9.999999999998899e-05, 0.046562585530435685, 9.999999999998899e-05, 9.999999999998899e-05, 0.07878008839695172, 0.10575230590901719, 0.0820611279821355, 0.09516204481021961, 0.06420333780381149, 0.13767637425665946, 0.06559450472602568, 0.08008714337225542, 0.06568189222779397, 0.06984574885214256, 0.0659633280736327, 0.05178874295490932, 0.14577361480794193, 0.06733519545503697, 0.059889427463935, 0.09314803414064632, 0.03552580553598761, 0.07856456992241223, 0.8317293440624383, 0.8778231165350251, 0.8892360119895844, 0.8777500624396495, 0.8713600636950454, 0.8593765522265103, 0.7879465586882234, 0.9076708429960657, 0.8373054619690861, 0.2653476675550084, 0.20541469153910064, 0.325287119345008, 0.2339490590825536, 0.30785152314001885, 0.23143461983859037, 0.32064832300569124, 0.3418203161340472, 0.13534564344088484, 0.7660476577599915, 0.14369476882196464, 0.2138658072098396, 0.3029222460160985, 0.22046730802762426, 0.15324043038049973, 0.13213689425119735, 0.36343533840768516, 0.23622187467044464, 0.15814600557076552, 0.12602239152639705, 0.104506264560568, 0.09869806522954383, 0.08498164275350495, 0.0806324521488152, 0.14686609765573155, 0.11512093505434384, 0.13434973512760828, 0.14460777020060578, 0.046396059826280034, 0.19837010452304948, 0.16121469085967188, 0.12583755663906782, 0.13460428772170052, 0.14297280656901257, 9.999999999998899e-05, 0.1474157935583098, 0.004185177041325705, 9.999999999998899e-05, 0.0009084634349439957, 0.013635806539073148, 0.0158922285586095, 0.018458761215714548, 0.030517385393828977, 9.999999999998899e-05, 9.999999999998899e-05, 0.06497074502305933, 0.053284462122808685, 0.07928781587064582, 0.07617488463254252, 0.025635312179991376, 0.03214036626119854, 0.1478046118404216, 0.04760015826117647, 0.05970086421349863, 0.01712709964889414, 0.0416673199318508, 0.07871456747684569, 0.003920855398672707, 0.04248231870435393, 0.04066685909971002, 0.03318749257956877, 0.06936280151947571, 0.04084048913137106, 0.1297859492813601, 0.05796528520783162, 0.10259871082208905, 0.0635907607526286, 0.05126628119329779, 0.049969489327557515, 0.07339708601717776, 0.018453677236702215, 0.00762655844797222, 0.3970969771674916, 0.4305636941390848, 0.486317541722335, 0.4450204776716683, 0.41742524951119386, 0.37765085184484815, 0.37624403926942185, 0.3921366987807907, 0.418886482601151, 0.08644631395854796, 0.13528203664780225, 0.060016285918072065, 0.10942130994086852, 0.06422009615561763, 0.0769431876296327, 0.11063915102474675, 0.07854765165461597, 0.06829612464938362, 0.15668724889229324, 0.17974933203943944, 0.18320831736622156, 0.1829493428814628, 0.18906669344199956, 0.1779023611008228, 0.16071593554192565, 0.17258741630686947, 0.15688096311166677, 0.20132045364877216, 0.2433223743981675, 0.15774588864980565, 0.24970948003421045, 0.1605519180395879, 0.26288396707218786, 0.16135882241464117, 0.17968140647755193, 0.15167366353406975, 0.15545206488796304, 0.2212973724462204, 0.1292124583819143, 0.18002470671118675, 0.14984720337914403, 0.21372810789417118, 0.12383364092519655, 0.14454422559530689, 0.11234394395459224, 0.22012871164416092, 0.19675941989560852, 0.20599323573681716, 0.22275004022872058, 0.20183411510366678, 0.1832764775641922, 0.23874625457481746, 0.18923337235953508, 0.1999841679492802, 0.18317424905017277, 0.18988535164828246, 0.17229434291549295, 0.17021689936687856, 0.1714579397248821, 0.17462284877433432, 0.19132675627281337, 0.21747430102089915, 0.17502460472805925, 0.18199247508817373, 0.1860454690633877, 0.18382469204901242, 0.7352741753783446, 0.20027182564701962, 0.11460530429779503, 0.4594601670580868, 0.11449967217937607, 0.18527580158153745, 0.3875647662753544, 0.10631910784507981, 0.43935715377965734, 0.4662230472322475, 0.14829612480816945, 0.14932910414948053, 0.28987581673506513, 0.20322473904340854, 0.257315633424851, 0.18526118668356228, 0.21260585132153142, 0.19487514162043684, 0.20896566538318628, 0.20714389920948406, 0.2258503287979221, 0.21057019815513112, 0.21253887954740358, 0.19793468734708253, 0.10834106031105017, 0.08027720365284607, 0.08988932026645358, 0.09066300516210446, 0.08886696861579291, 0.07528838524968395, 0.08809298686346723, 0.07773975592794358, 0.09981245992191257]}, "mutation_prompt": null}
{"id": "d4d37c15-fed1-400f-a6ee-58ec0d11cc7d", "solution": "import numpy as np\n\nclass AdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent1)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationGeneticAlgorithm", "description": "Utilizing a modified Genetic Algorithm with adaptive mutation rates for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd54c151-e67a-4c23-bc46-198eb0cd8c21", "metadata": {"aucs": [0.49999857078203713, 0.5100145913263465, 0.5066773520319185, 0.46099919273604506, 0.5156349238998197, 0.4473941681047886, 0.47341132030835276, 0.506675660933442, 0.4587216021302146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003125645508270436, 9.999999999998899e-05, 9.999999999998899e-05, 0.046562585530435685, 9.999999999998899e-05, 9.999999999998899e-05, 0.07878008839695172, 0.10575230590901719, 0.0820611279821355, 0.09516204481021961, 0.06420333780381149, 0.13767637425665946, 0.06559450472602568, 0.08008714337225542, 0.06568189222779397, 0.06984574885214256, 0.0659633280736327, 0.05178874295490932, 0.14577361480794193, 0.06733519545503697, 0.059889427463935, 0.09314803414064632, 0.03552580553598761, 0.07856456992241223, 0.8317293440624383, 0.8778231165350251, 0.8892360119895844, 0.8777500624396495, 0.8713600636950454, 0.8593765522265103, 0.7879465586882234, 0.9076708429960657, 0.8373054619690861, 0.2653476675550084, 0.20541469153910064, 0.325287119345008, 0.2339490590825536, 0.30785152314001885, 0.23143461983859037, 0.32064832300569124, 0.3418203161340472, 0.13534564344088484, 0.7660476577599915, 0.14369476882196464, 0.2138658072098396, 0.3029222460160985, 0.22046730802762426, 0.15324043038049973, 0.13213689425119735, 0.36343533840768516, 0.23622187467044464, 0.15814600557076552, 0.12602239152639705, 0.104506264560568, 0.09869806522954383, 0.08498164275350495, 0.0806324521488152, 0.14686609765573155, 0.11512093505434384, 0.13434973512760828, 0.14460777020060578, 0.046396059826280034, 0.19837010452304948, 0.16121469085967188, 0.12583755663906782, 0.13460428772170052, 0.14297280656901257, 9.999999999998899e-05, 0.1474157935583098, 0.004185177041325705, 9.999999999998899e-05, 0.0009084634349439957, 0.013635806539073148, 0.0158922285586095, 0.018458761215714548, 0.030517385393828977, 9.999999999998899e-05, 9.999999999998899e-05, 0.06497074502305933, 0.053284462122808685, 0.07928781587064582, 0.07617488463254252, 0.025635312179991376, 0.03214036626119854, 0.1478046118404216, 0.04760015826117647, 0.05970086421349863, 0.01712709964889414, 0.0416673199318508, 0.07871456747684569, 0.003920855398672707, 0.04248231870435393, 0.04066685909971002, 0.03318749257956877, 0.06936280151947571, 0.04084048913137106, 0.1297859492813601, 0.05796528520783162, 0.10259871082208905, 0.0635907607526286, 0.05126628119329779, 0.049969489327557515, 0.07339708601717776, 0.018453677236702215, 0.00762655844797222, 0.3970969771674916, 0.4305636941390848, 0.486317541722335, 0.4450204776716683, 0.41742524951119386, 0.37765085184484815, 0.37624403926942185, 0.3921366987807907, 0.418886482601151, 0.08644631395854796, 0.13528203664780225, 0.060016285918072065, 0.10942130994086852, 0.06422009615561763, 0.0769431876296327, 0.11063915102474675, 0.07854765165461597, 0.06829612464938362, 0.15668724889229324, 0.17974933203943944, 0.18320831736622156, 0.1829493428814628, 0.18906669344199956, 0.1779023611008228, 0.16071593554192565, 0.17258741630686947, 0.15688096311166677, 0.20132045364877216, 0.2433223743981675, 0.15774588864980565, 0.24970948003421045, 0.1605519180395879, 0.26288396707218786, 0.16135882241464117, 0.17968140647755193, 0.15167366353406975, 0.15545206488796304, 0.2212973724462204, 0.1292124583819143, 0.18002470671118675, 0.14984720337914403, 0.21372810789417118, 0.12383364092519655, 0.14454422559530689, 0.11234394395459224, 0.22012871164416092, 0.19675941989560852, 0.20599323573681716, 0.22275004022872058, 0.20183411510366678, 0.1832764775641922, 0.23874625457481746, 0.18923337235953508, 0.1999841679492802, 0.18317424905017277, 0.18988535164828246, 0.17229434291549295, 0.17021689936687856, 0.1714579397248821, 0.17462284877433432, 0.19132675627281337, 0.21747430102089915, 0.17502460472805925, 0.18199247508817373, 0.1860454690633877, 0.18382469204901242, 0.7352741753783446, 0.20027182564701962, 0.11460530429779503, 0.4594601670580868, 0.11449967217937607, 0.18527580158153745, 0.3875647662753544, 0.10631910784507981, 0.43935715377965734, 0.4662230472322475, 0.14829612480816945, 0.14932910414948053, 0.28987581673506513, 0.20322473904340854, 0.257315633424851, 0.18526118668356228, 0.21260585132153142, 0.19487514162043684, 0.20896566538318628, 0.20714389920948406, 0.2258503287979221, 0.21057019815513112, 0.21253887954740358, 0.19793468734708253, 0.10834106031105017, 0.08027720365284607, 0.08988932026645358, 0.09066300516210446, 0.08886696861579291, 0.07528838524968395, 0.08809298686346723, 0.07773975592794358, 0.09981245992191257]}, "mutation_prompt": null}
{"id": "9a7611e6-0e0b-476b-b8ad-95d540def7d7", "solution": "import numpy as np\n\nclass AdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent1)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationGeneticAlgorithm", "description": "Utilizing a modified Genetic Algorithm with adaptive mutation rates for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd54c151-e67a-4c23-bc46-198eb0cd8c21", "metadata": {"aucs": [0.49999857078203713, 0.5100145913263465, 0.5066773520319185, 0.46099919273604506, 0.5156349238998197, 0.4473941681047886, 0.47341132030835276, 0.506675660933442, 0.4587216021302146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003125645508270436, 9.999999999998899e-05, 9.999999999998899e-05, 0.046562585530435685, 9.999999999998899e-05, 9.999999999998899e-05, 0.07878008839695172, 0.10575230590901719, 0.0820611279821355, 0.09516204481021961, 0.06420333780381149, 0.13767637425665946, 0.06559450472602568, 0.08008714337225542, 0.06568189222779397, 0.06984574885214256, 0.0659633280736327, 0.05178874295490932, 0.14577361480794193, 0.06733519545503697, 0.059889427463935, 0.09314803414064632, 0.03552580553598761, 0.07856456992241223, 0.8317293440624383, 0.8778231165350251, 0.8892360119895844, 0.8777500624396495, 0.8713600636950454, 0.8593765522265103, 0.7879465586882234, 0.9076708429960657, 0.8373054619690861, 0.2653476675550084, 0.20541469153910064, 0.325287119345008, 0.2339490590825536, 0.30785152314001885, 0.23143461983859037, 0.32064832300569124, 0.3418203161340472, 0.13534564344088484, 0.7660476577599915, 0.14369476882196464, 0.2138658072098396, 0.3029222460160985, 0.22046730802762426, 0.15324043038049973, 0.13213689425119735, 0.36343533840768516, 0.23622187467044464, 0.15814600557076552, 0.12602239152639705, 0.104506264560568, 0.09869806522954383, 0.08498164275350495, 0.0806324521488152, 0.14686609765573155, 0.11512093505434384, 0.13434973512760828, 0.14460777020060578, 0.046396059826280034, 0.19837010452304948, 0.16121469085967188, 0.12583755663906782, 0.13460428772170052, 0.14297280656901257, 9.999999999998899e-05, 0.1474157935583098, 0.004185177041325705, 9.999999999998899e-05, 0.0009084634349439957, 0.013635806539073148, 0.0158922285586095, 0.018458761215714548, 0.030517385393828977, 9.999999999998899e-05, 9.999999999998899e-05, 0.06497074502305933, 0.053284462122808685, 0.07928781587064582, 0.07617488463254252, 0.025635312179991376, 0.03214036626119854, 0.1478046118404216, 0.04760015826117647, 0.05970086421349863, 0.01712709964889414, 0.0416673199318508, 0.07871456747684569, 0.003920855398672707, 0.04248231870435393, 0.04066685909971002, 0.03318749257956877, 0.06936280151947571, 0.04084048913137106, 0.1297859492813601, 0.05796528520783162, 0.10259871082208905, 0.0635907607526286, 0.05126628119329779, 0.049969489327557515, 0.07339708601717776, 0.018453677236702215, 0.00762655844797222, 0.3970969771674916, 0.4305636941390848, 0.486317541722335, 0.4450204776716683, 0.41742524951119386, 0.37765085184484815, 0.37624403926942185, 0.3921366987807907, 0.418886482601151, 0.08644631395854796, 0.13528203664780225, 0.060016285918072065, 0.10942130994086852, 0.06422009615561763, 0.0769431876296327, 0.11063915102474675, 0.07854765165461597, 0.06829612464938362, 0.15668724889229324, 0.17974933203943944, 0.18320831736622156, 0.1829493428814628, 0.18906669344199956, 0.1779023611008228, 0.16071593554192565, 0.17258741630686947, 0.15688096311166677, 0.20132045364877216, 0.2433223743981675, 0.15774588864980565, 0.24970948003421045, 0.1605519180395879, 0.26288396707218786, 0.16135882241464117, 0.17968140647755193, 0.15167366353406975, 0.15545206488796304, 0.2212973724462204, 0.1292124583819143, 0.18002470671118675, 0.14984720337914403, 0.21372810789417118, 0.12383364092519655, 0.14454422559530689, 0.11234394395459224, 0.22012871164416092, 0.19675941989560852, 0.20599323573681716, 0.22275004022872058, 0.20183411510366678, 0.1832764775641922, 0.23874625457481746, 0.18923337235953508, 0.1999841679492802, 0.18317424905017277, 0.18988535164828246, 0.17229434291549295, 0.17021689936687856, 0.1714579397248821, 0.17462284877433432, 0.19132675627281337, 0.21747430102089915, 0.17502460472805925, 0.18199247508817373, 0.1860454690633877, 0.18382469204901242, 0.7352741753783446, 0.20027182564701962, 0.11460530429779503, 0.4594601670580868, 0.11449967217937607, 0.18527580158153745, 0.3875647662753544, 0.10631910784507981, 0.43935715377965734, 0.4662230472322475, 0.14829612480816945, 0.14932910414948053, 0.28987581673506513, 0.20322473904340854, 0.257315633424851, 0.18526118668356228, 0.21260585132153142, 0.19487514162043684, 0.20896566538318628, 0.20714389920948406, 0.2258503287979221, 0.21057019815513112, 0.21253887954740358, 0.19793468734708253, 0.10834106031105017, 0.08027720365284607, 0.08988932026645358, 0.09066300516210446, 0.08886696861579291, 0.07528838524968395, 0.08809298686346723, 0.07773975592794358, 0.09981245992191257]}, "mutation_prompt": null}
{"id": "18141e3e-41a6-4d12-a46a-13446f332260", "solution": "import numpy as np\n\nclass AdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent1)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationGeneticAlgorithm", "description": "Utilizing a modified Genetic Algorithm with adaptive mutation rates for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd54c151-e67a-4c23-bc46-198eb0cd8c21", "metadata": {"aucs": [0.49999857078203713, 0.5100145913263465, 0.5066773520319185, 0.46099919273604506, 0.5156349238998197, 0.4473941681047886, 0.47341132030835276, 0.506675660933442, 0.4587216021302146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003125645508270436, 9.999999999998899e-05, 9.999999999998899e-05, 0.046562585530435685, 9.999999999998899e-05, 9.999999999998899e-05, 0.07878008839695172, 0.10575230590901719, 0.0820611279821355, 0.09516204481021961, 0.06420333780381149, 0.13767637425665946, 0.06559450472602568, 0.08008714337225542, 0.06568189222779397, 0.06984574885214256, 0.0659633280736327, 0.05178874295490932, 0.14577361480794193, 0.06733519545503697, 0.059889427463935, 0.09314803414064632, 0.03552580553598761, 0.07856456992241223, 0.8317293440624383, 0.8778231165350251, 0.8892360119895844, 0.8777500624396495, 0.8713600636950454, 0.8593765522265103, 0.7879465586882234, 0.9076708429960657, 0.8373054619690861, 0.2653476675550084, 0.20541469153910064, 0.325287119345008, 0.2339490590825536, 0.30785152314001885, 0.23143461983859037, 0.32064832300569124, 0.3418203161340472, 0.13534564344088484, 0.7660476577599915, 0.14369476882196464, 0.2138658072098396, 0.3029222460160985, 0.22046730802762426, 0.15324043038049973, 0.13213689425119735, 0.36343533840768516, 0.23622187467044464, 0.15814600557076552, 0.12602239152639705, 0.104506264560568, 0.09869806522954383, 0.08498164275350495, 0.0806324521488152, 0.14686609765573155, 0.11512093505434384, 0.13434973512760828, 0.14460777020060578, 0.046396059826280034, 0.19837010452304948, 0.16121469085967188, 0.12583755663906782, 0.13460428772170052, 0.14297280656901257, 9.999999999998899e-05, 0.1474157935583098, 0.004185177041325705, 9.999999999998899e-05, 0.0009084634349439957, 0.013635806539073148, 0.0158922285586095, 0.018458761215714548, 0.030517385393828977, 9.999999999998899e-05, 9.999999999998899e-05, 0.06497074502305933, 0.053284462122808685, 0.07928781587064582, 0.07617488463254252, 0.025635312179991376, 0.03214036626119854, 0.1478046118404216, 0.04760015826117647, 0.05970086421349863, 0.01712709964889414, 0.0416673199318508, 0.07871456747684569, 0.003920855398672707, 0.04248231870435393, 0.04066685909971002, 0.03318749257956877, 0.06936280151947571, 0.04084048913137106, 0.1297859492813601, 0.05796528520783162, 0.10259871082208905, 0.0635907607526286, 0.05126628119329779, 0.049969489327557515, 0.07339708601717776, 0.018453677236702215, 0.00762655844797222, 0.3970969771674916, 0.4305636941390848, 0.486317541722335, 0.4450204776716683, 0.41742524951119386, 0.37765085184484815, 0.37624403926942185, 0.3921366987807907, 0.418886482601151, 0.08644631395854796, 0.13528203664780225, 0.060016285918072065, 0.10942130994086852, 0.06422009615561763, 0.0769431876296327, 0.11063915102474675, 0.07854765165461597, 0.06829612464938362, 0.15668724889229324, 0.17974933203943944, 0.18320831736622156, 0.1829493428814628, 0.18906669344199956, 0.1779023611008228, 0.16071593554192565, 0.17258741630686947, 0.15688096311166677, 0.20132045364877216, 0.2433223743981675, 0.15774588864980565, 0.24970948003421045, 0.1605519180395879, 0.26288396707218786, 0.16135882241464117, 0.17968140647755193, 0.15167366353406975, 0.15545206488796304, 0.2212973724462204, 0.1292124583819143, 0.18002470671118675, 0.14984720337914403, 0.21372810789417118, 0.12383364092519655, 0.14454422559530689, 0.11234394395459224, 0.22012871164416092, 0.19675941989560852, 0.20599323573681716, 0.22275004022872058, 0.20183411510366678, 0.1832764775641922, 0.23874625457481746, 0.18923337235953508, 0.1999841679492802, 0.18317424905017277, 0.18988535164828246, 0.17229434291549295, 0.17021689936687856, 0.1714579397248821, 0.17462284877433432, 0.19132675627281337, 0.21747430102089915, 0.17502460472805925, 0.18199247508817373, 0.1860454690633877, 0.18382469204901242, 0.7352741753783446, 0.20027182564701962, 0.11460530429779503, 0.4594601670580868, 0.11449967217937607, 0.18527580158153745, 0.3875647662753544, 0.10631910784507981, 0.43935715377965734, 0.4662230472322475, 0.14829612480816945, 0.14932910414948053, 0.28987581673506513, 0.20322473904340854, 0.257315633424851, 0.18526118668356228, 0.21260585132153142, 0.19487514162043684, 0.20896566538318628, 0.20714389920948406, 0.2258503287979221, 0.21057019815513112, 0.21253887954740358, 0.19793468734708253, 0.10834106031105017, 0.08027720365284607, 0.08988932026645358, 0.09066300516210446, 0.08886696861579291, 0.07528838524968395, 0.08809298686346723, 0.07773975592794358, 0.09981245992191257]}, "mutation_prompt": null}
{"id": "0a955887-0f6f-4bb7-b04e-0cc81f989e35", "solution": "import numpy as np\n\nclass EnhancedMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.elitism_ratio = 0.2\n        self.mutation_prob = 0.1\n        self.initial_mutation_rate = 0.1\n        self.mutation_decay = 0.95\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.initial_mutation_rate * (parent2 - parent1)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            \n            # Elitism: Preserve the best individuals\n            num_elites = int(self.elitism_ratio * self.population_size)\n            elite_indices = np.argsort(fitness)[:num_elites]\n            population[:num_elites] = population[elite_indices]\n            \n            # Dynamic mutation rate based on fitness\n            average_fitness = np.mean(fitness)\n            self.initial_mutation_rate *= np.exp((average_fitness - fitness[best_idx]) * self.mutation_decay)\n        \n        return best_individual", "name": "EnhancedMutationGeneticAlgorithm", "description": "Enhancing diversity in the population by introducing elitism to preserve the best individuals while incorporating a dynamic mutation rate based on the fitness landscape.", "configspace": "", "generation": 5, "fitness": 0.0423577446062526, "feedback": "The algorithm EnhancedMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.10.", "error": "", "parent_id": "dd54c151-e67a-4c23-bc46-198eb0cd8c21", "metadata": {"aucs": [0.07181397830146763, 0.06432772651221763, 0.09642149973240521, 0.019583725566517884, 0.05267361210777377, 0.025288696900545027, 0.05140423906395497, 0.05434378004063534, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.012673266960969931, 0.003468015000008373, 0.005030769317801997, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.9977863234960906, 0.039088515291900494, 0.04687545855643349, 0.9974724174005623, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023313609954115355, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.03674503721386713, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.09036567547184715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08749291030720674, 0.1070271971752389, 0.14838054695461433, 0.09425923977458062, 0.08051072568095674, 0.09580441870675127, 0.12951846001245593, 0.1149708126654636, 0.12894994059474574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.004706492463458889, 0.030343167473510402, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.06735693451091307, 0.05468846648487902, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.05497932156064522, 0.04855804829477728, 0.07726393575557644, 0.10301521705435823, 0.11255318453016039, 0.10359778603806002, 0.10847166301008526, 0.08299910073640826, 0.10088909677005509, 0.11420206329748472, 0.1001363042967901, 0.08119784269614028, 0.033318937593247444, 0.0351359534046205, 0.03464785118471059, 0.044650675553987496, 0.0261476599173468, 0.037140780888393565, 0.05648699256316181, 0.038530072755655564, 0.034684701310280786, 0.0916346253723066, 0.06032920214938475, 0.1543803254800319, 0.10289055837941885, 0.06747178230817008, 0.10272650639722558, 0.12245976138762271, 0.0659221083149758, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01038706452455207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698289964516411, 0.060513280023151816, 0.060820319605016104, 0.06718871428537254, 0.1207914665021157, 0.09586967621755627, 0.06088618922663591, 0.056615725614002965, 0.06771926004483231, 0.03824121102611444, 0.03967402848431323, 0.01798757222918035, 0.02311182419545299, 0.04937084689529314, 0.045511073114331335, 0.018965050090669178, 0.016066121373242814, 0.04143420019681854, 0.10164348723124239, 0.12017502569002791, 0.14763022729669195, 0.11522743403867064, 0.13507761198289103, 0.12465113207635137, 0.12745434381907195, 0.11109891497390689, 0.14689007985489466, 0.013851335057610381, 0.012204213037243616, 0.031393493129599714, 0.012026019617474182, 0.011225714466957082, 0.018300600961476787, 0.00378771705097114, 9.999999999998899e-05, 0.023259605244570936]}, "mutation_prompt": null}
{"id": "571d7f88-a470-4556-a69e-1823c7df2030", "solution": "import numpy as np\n\nclass AdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent1)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationGeneticAlgorithm", "description": "Utilizing a modified Genetic Algorithm with adaptive mutation rates for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd54c151-e67a-4c23-bc46-198eb0cd8c21", "metadata": {"aucs": [0.49999857078203713, 0.5100145913263465, 0.5066773520319185, 0.46099919273604506, 0.5156349238998197, 0.4473941681047886, 0.47341132030835276, 0.506675660933442, 0.4587216021302146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003125645508270436, 9.999999999998899e-05, 9.999999999998899e-05, 0.046562585530435685, 9.999999999998899e-05, 9.999999999998899e-05, 0.07878008839695172, 0.10575230590901719, 0.0820611279821355, 0.09516204481021961, 0.06420333780381149, 0.13767637425665946, 0.06559450472602568, 0.08008714337225542, 0.06568189222779397, 0.06984574885214256, 0.0659633280736327, 0.05178874295490932, 0.14577361480794193, 0.06733519545503697, 0.059889427463935, 0.09314803414064632, 0.03552580553598761, 0.07856456992241223, 0.8317293440624383, 0.8778231165350251, 0.8892360119895844, 0.8777500624396495, 0.8713600636950454, 0.8593765522265103, 0.7879465586882234, 0.9076708429960657, 0.8373054619690861, 0.2653476675550084, 0.20541469153910064, 0.325287119345008, 0.2339490590825536, 0.30785152314001885, 0.23143461983859037, 0.32064832300569124, 0.3418203161340472, 0.13534564344088484, 0.7660476577599915, 0.14369476882196464, 0.2138658072098396, 0.3029222460160985, 0.22046730802762426, 0.15324043038049973, 0.13213689425119735, 0.36343533840768516, 0.23622187467044464, 0.15814600557076552, 0.12602239152639705, 0.104506264560568, 0.09869806522954383, 0.08498164275350495, 0.0806324521488152, 0.14686609765573155, 0.11512093505434384, 0.13434973512760828, 0.14460777020060578, 0.046396059826280034, 0.19837010452304948, 0.16121469085967188, 0.12583755663906782, 0.13460428772170052, 0.14297280656901257, 9.999999999998899e-05, 0.1474157935583098, 0.004185177041325705, 9.999999999998899e-05, 0.0009084634349439957, 0.013635806539073148, 0.0158922285586095, 0.018458761215714548, 0.030517385393828977, 9.999999999998899e-05, 9.999999999998899e-05, 0.06497074502305933, 0.053284462122808685, 0.07928781587064582, 0.07617488463254252, 0.025635312179991376, 0.03214036626119854, 0.1478046118404216, 0.04760015826117647, 0.05970086421349863, 0.01712709964889414, 0.0416673199318508, 0.07871456747684569, 0.003920855398672707, 0.04248231870435393, 0.04066685909971002, 0.03318749257956877, 0.06936280151947571, 0.04084048913137106, 0.1297859492813601, 0.05796528520783162, 0.10259871082208905, 0.0635907607526286, 0.05126628119329779, 0.049969489327557515, 0.07339708601717776, 0.018453677236702215, 0.00762655844797222, 0.3970969771674916, 0.4305636941390848, 0.486317541722335, 0.4450204776716683, 0.41742524951119386, 0.37765085184484815, 0.37624403926942185, 0.3921366987807907, 0.418886482601151, 0.08644631395854796, 0.13528203664780225, 0.060016285918072065, 0.10942130994086852, 0.06422009615561763, 0.0769431876296327, 0.11063915102474675, 0.07854765165461597, 0.06829612464938362, 0.15668724889229324, 0.17974933203943944, 0.18320831736622156, 0.1829493428814628, 0.18906669344199956, 0.1779023611008228, 0.16071593554192565, 0.17258741630686947, 0.15688096311166677, 0.20132045364877216, 0.2433223743981675, 0.15774588864980565, 0.24970948003421045, 0.1605519180395879, 0.26288396707218786, 0.16135882241464117, 0.17968140647755193, 0.15167366353406975, 0.15545206488796304, 0.2212973724462204, 0.1292124583819143, 0.18002470671118675, 0.14984720337914403, 0.21372810789417118, 0.12383364092519655, 0.14454422559530689, 0.11234394395459224, 0.22012871164416092, 0.19675941989560852, 0.20599323573681716, 0.22275004022872058, 0.20183411510366678, 0.1832764775641922, 0.23874625457481746, 0.18923337235953508, 0.1999841679492802, 0.18317424905017277, 0.18988535164828246, 0.17229434291549295, 0.17021689936687856, 0.1714579397248821, 0.17462284877433432, 0.19132675627281337, 0.21747430102089915, 0.17502460472805925, 0.18199247508817373, 0.1860454690633877, 0.18382469204901242, 0.7352741753783446, 0.20027182564701962, 0.11460530429779503, 0.4594601670580868, 0.11449967217937607, 0.18527580158153745, 0.3875647662753544, 0.10631910784507981, 0.43935715377965734, 0.4662230472322475, 0.14829612480816945, 0.14932910414948053, 0.28987581673506513, 0.20322473904340854, 0.257315633424851, 0.18526118668356228, 0.21260585132153142, 0.19487514162043684, 0.20896566538318628, 0.20714389920948406, 0.2258503287979221, 0.21057019815513112, 0.21253887954740358, 0.19793468734708253, 0.10834106031105017, 0.08027720365284607, 0.08988932026645358, 0.09066300516210446, 0.08886696861579291, 0.07528838524968395, 0.08809298686346723, 0.07773975592794358, 0.09981245992191257]}, "mutation_prompt": null}
{"id": "f3d56003-4896-40fb-9b13-dfaf74e113d2", "solution": "import numpy as np\n\nclass AdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent1)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveMutationGeneticAlgorithm", "description": "Utilizing a modified Genetic Algorithm with adaptive mutation rates for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd54c151-e67a-4c23-bc46-198eb0cd8c21", "metadata": {"aucs": [0.49999857078203713, 0.5100145913263465, 0.5066773520319185, 0.46099919273604506, 0.5156349238998197, 0.4473941681047886, 0.47341132030835276, 0.506675660933442, 0.4587216021302146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003125645508270436, 9.999999999998899e-05, 9.999999999998899e-05, 0.046562585530435685, 9.999999999998899e-05, 9.999999999998899e-05, 0.07878008839695172, 0.10575230590901719, 0.0820611279821355, 0.09516204481021961, 0.06420333780381149, 0.13767637425665946, 0.06559450472602568, 0.08008714337225542, 0.06568189222779397, 0.06984574885214256, 0.0659633280736327, 0.05178874295490932, 0.14577361480794193, 0.06733519545503697, 0.059889427463935, 0.09314803414064632, 0.03552580553598761, 0.07856456992241223, 0.8317293440624383, 0.8778231165350251, 0.8892360119895844, 0.8777500624396495, 0.8713600636950454, 0.8593765522265103, 0.7879465586882234, 0.9076708429960657, 0.8373054619690861, 0.2653476675550084, 0.20541469153910064, 0.325287119345008, 0.2339490590825536, 0.30785152314001885, 0.23143461983859037, 0.32064832300569124, 0.3418203161340472, 0.13534564344088484, 0.7660476577599915, 0.14369476882196464, 0.2138658072098396, 0.3029222460160985, 0.22046730802762426, 0.15324043038049973, 0.13213689425119735, 0.36343533840768516, 0.23622187467044464, 0.15814600557076552, 0.12602239152639705, 0.104506264560568, 0.09869806522954383, 0.08498164275350495, 0.0806324521488152, 0.14686609765573155, 0.11512093505434384, 0.13434973512760828, 0.14460777020060578, 0.046396059826280034, 0.19837010452304948, 0.16121469085967188, 0.12583755663906782, 0.13460428772170052, 0.14297280656901257, 9.999999999998899e-05, 0.1474157935583098, 0.004185177041325705, 9.999999999998899e-05, 0.0009084634349439957, 0.013635806539073148, 0.0158922285586095, 0.018458761215714548, 0.030517385393828977, 9.999999999998899e-05, 9.999999999998899e-05, 0.06497074502305933, 0.053284462122808685, 0.07928781587064582, 0.07617488463254252, 0.025635312179991376, 0.03214036626119854, 0.1478046118404216, 0.04760015826117647, 0.05970086421349863, 0.01712709964889414, 0.0416673199318508, 0.07871456747684569, 0.003920855398672707, 0.04248231870435393, 0.04066685909971002, 0.03318749257956877, 0.06936280151947571, 0.04084048913137106, 0.1297859492813601, 0.05796528520783162, 0.10259871082208905, 0.0635907607526286, 0.05126628119329779, 0.049969489327557515, 0.07339708601717776, 0.018453677236702215, 0.00762655844797222, 0.3970969771674916, 0.4305636941390848, 0.486317541722335, 0.4450204776716683, 0.41742524951119386, 0.37765085184484815, 0.37624403926942185, 0.3921366987807907, 0.418886482601151, 0.08644631395854796, 0.13528203664780225, 0.060016285918072065, 0.10942130994086852, 0.06422009615561763, 0.0769431876296327, 0.11063915102474675, 0.07854765165461597, 0.06829612464938362, 0.15668724889229324, 0.17974933203943944, 0.18320831736622156, 0.1829493428814628, 0.18906669344199956, 0.1779023611008228, 0.16071593554192565, 0.17258741630686947, 0.15688096311166677, 0.20132045364877216, 0.2433223743981675, 0.15774588864980565, 0.24970948003421045, 0.1605519180395879, 0.26288396707218786, 0.16135882241464117, 0.17968140647755193, 0.15167366353406975, 0.15545206488796304, 0.2212973724462204, 0.1292124583819143, 0.18002470671118675, 0.14984720337914403, 0.21372810789417118, 0.12383364092519655, 0.14454422559530689, 0.11234394395459224, 0.22012871164416092, 0.19675941989560852, 0.20599323573681716, 0.22275004022872058, 0.20183411510366678, 0.1832764775641922, 0.23874625457481746, 0.18923337235953508, 0.1999841679492802, 0.18317424905017277, 0.18988535164828246, 0.17229434291549295, 0.17021689936687856, 0.1714579397248821, 0.17462284877433432, 0.19132675627281337, 0.21747430102089915, 0.17502460472805925, 0.18199247508817373, 0.1860454690633877, 0.18382469204901242, 0.7352741753783446, 0.20027182564701962, 0.11460530429779503, 0.4594601670580868, 0.11449967217937607, 0.18527580158153745, 0.3875647662753544, 0.10631910784507981, 0.43935715377965734, 0.4662230472322475, 0.14829612480816945, 0.14932910414948053, 0.28987581673506513, 0.20322473904340854, 0.257315633424851, 0.18526118668356228, 0.21260585132153142, 0.19487514162043684, 0.20896566538318628, 0.20714389920948406, 0.2258503287979221, 0.21057019815513112, 0.21253887954740358, 0.19793468734708253, 0.10834106031105017, 0.08027720365284607, 0.08988932026645358, 0.09066300516210446, 0.08886696861579291, 0.07528838524968395, 0.08809298686346723, 0.07773975592794358, 0.09981245992191257]}, "mutation_prompt": null}
{"id": "25dd8fd2-d10c-4f19-81b6-92f9a0d24c59", "solution": "import numpy as np\n\nclass EnhancedGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent1)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < 0.5:  # Differential evolution component\n                    parent3 = population[np.random.choice(self.population_size)]\n                    child += 0.5 * (parent3 - parent1)\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedGeneticAlgorithm", "description": "Enhancing the exploration capability by introducing a differential evolution component to generate diverse solutions.", "configspace": "", "generation": 8, "fitness": 0.19324367392057257, "feedback": "The algorithm EnhancedGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "dd54c151-e67a-4c23-bc46-198eb0cd8c21", "metadata": {"aucs": [0.48973367390820555, 0.4590249264167976, 0.488173159009915, 0.4859360640112299, 0.4926336553966191, 0.4487062180142223, 0.47862097297311335, 0.5020632261948554, 0.4788950790101759, 0.019792453820417166, 0.01868626517645866, 9.999999999998899e-05, 0.04237284263107344, 0.0002405263084512832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07243688550620742, 0.07331736905296382, 0.11414035386956511, 0.12962703243856544, 0.07267613818124008, 0.05850405575751305, 0.06346268133578492, 0.07170888691259569, 0.10635303237875993, 0.06356833578794685, 0.03915988258783387, 0.04930026415639799, 0.07931327258282594, 0.06381775597784767, 0.05019324612316378, 0.08288527874393548, 0.061977695889796625, 0.040729111929787676, 0.8930691912400979, 0.8314464449437335, 0.838447139601668, 0.847956527952747, 0.8411079723679823, 0.867480284926729, 0.8056623946734144, 0.8454933815894007, 0.8265377452738266, 0.2156653405933081, 0.20480156475647182, 0.10066057835767783, 0.2939509491130132, 0.2892459494608717, 0.21121659458228248, 0.2253187955260071, 0.18215708924883744, 0.1349977840497819, 0.34655875600954444, 0.18426217214905782, 0.17192606367681196, 0.4550202281725999, 0.19214028531597738, 0.14286673215911927, 0.24956956828074306, 0.2134485834807479, 0.2233654366239456, 0.1646436736946718, 0.1425861060901571, 0.1120620155203702, 0.17204310029086622, 0.11553415790208654, 0.05398982974561828, 0.27729135308753816, 0.12697420310369323, 0.21065116900406577, 0.1670592099524738, 0.12596651363799116, 0.03994519319236056, 0.20246917798033015, 0.2895778928664726, 0.1331074702349926, 0.19583191565991387, 0.23943348070342385, 0.10254298948602647, 9.999999999998899e-05, 9.999999999998899e-05, 0.016493709490452813, 0.023434845722126174, 0.005757407006860227, 0.006870252507399033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1072261624636236, 0.05824564024137102, 0.12158066571765025, 0.0697105787316119, 0.03666756212798572, 0.061039834772534385, 0.12979160142532942, 0.09738336497008226, 0.08036118218291688, 9.999999999998899e-05, 0.053469217837655014, 0.027610381525958627, 0.026429713409749978, 0.01943233226128671, 0.00998876054885589, 0.01592257837473754, 9.999999999998899e-05, 0.0159713975602499, 0.07750800963003546, 0.04624279436716683, 0.09481200177031768, 0.09805005598231242, 0.12876818870635287, 0.08000032872629892, 0.08732011236062176, 0.08151002204877111, 0.04546451600416912, 0.40432362431803437, 0.4629665730842615, 0.3840702978144038, 0.4358706594717672, 0.4215715574851233, 0.3343443046664345, 0.40082604412675604, 0.40612204418615494, 0.33988547945683667, 0.07808647326985829, 0.0695851416976404, 0.06658851663242804, 0.09075025046666219, 0.06837483863884897, 0.07817509981040605, 0.07601882816510674, 0.06513188803899339, 0.06630235605881152, 0.15657792165391293, 0.23148894690364863, 0.200424698004262, 0.15050954141392925, 0.1819869055114396, 0.20996623492131217, 0.1696005815474224, 0.13486644273142667, 0.23278854280177386, 0.22763489224636035, 0.16783216495878472, 0.15316679756158735, 0.2146971884838491, 0.2698798474467612, 0.2565732338563216, 0.17881061686440425, 0.21946763009992742, 0.17024928695081454, 0.19983728961423552, 0.1690067332460118, 0.14785104496912227, 0.2216645899993368, 0.1714856125173534, 0.13274286152971948, 0.2038810063992691, 0.18363750221570974, 0.10622396839820791, 0.20553672036681458, 0.20552339190968283, 0.22941521641197027, 0.18755350075637944, 0.22734654590417347, 0.19100286244471187, 0.19920543733459983, 0.20259873813785012, 0.21370544566279792, 0.1776355929711193, 0.19943809374248578, 0.17523751628974782, 0.17653535262326636, 0.17037677632467152, 0.1889436983658599, 0.17181305870787256, 0.17631935508258734, 0.16222072899524864, 0.15659399445837696, 0.1865587967505289, 0.18569650941198712, 0.5757355903688316, 0.19837694177673215, 0.12509796918216032, 0.6935708475986178, 0.1136135277499567, 0.16859304659216556, 0.5066622562864276, 0.10700766352105207, 0.24580049087723077, 0.2913321987666595, 0.20268824334855529, 0.19660482357898768, 0.1627618035614229, 0.1626695951639906, 0.18472283266378176, 0.190989926910624, 0.19230946218348266, 0.18110419597613137, 0.18913443701396548, 0.21744449683010159, 0.21185325253874154, 0.2165326668886569, 0.2181911343573001, 0.19206546885214182, 0.10661690036106919, 0.09484886994902353, 0.07869054180715995, 0.08825930674800797, 0.07261722589683928, 0.07208727632067835, 0.0890700865097036, 0.09310502985336044, 0.07097549708375261]}, "mutation_prompt": null}
{"id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 9, "fitness": 0.2050033182612598, "feedback": "The algorithm ImprovedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "dd54c151-e67a-4c23-bc46-198eb0cd8c21", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "9f705014-87a6-44c8-af93-784b2996b8e2", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "18b71838-e8e0-4313-89c8-e2669b5d8856", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "f8b17e30-a142-4358-9e36-1d891f7483c8", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "d034ff99-dbd9-477e-bfb7-a2d20a2233bd", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "9cd29616-0f7c-4b35-b782-3fdf52068789", "solution": "import numpy as np\n\nclass DynamicMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.base_mutation_prob = 0.1\n        self.base_mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.base_mutation_rate * (parent2 - parent3)\n                \n                # Dynamic mutation rate adjustment\n                mutation_rate = self.base_mutation_rate + np.random.normal(0, 0.1)\n                if np.random.uniform() < self.base_mutation_prob:\n                    child += mutation_rate * np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationGeneticAlgorithm", "description": "Implementing a dynamic mutation rate based on individual fitness levels to adaptively adjust exploration and exploitation trade-off.", "configspace": "", "generation": 14, "fitness": 0.1405321535724375, "feedback": "The algorithm DynamicMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.14.", "error": "", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6451292487817057, 0.5184842140087218, 0.697250695332724, 0.39229161368256094, 0.6482946130922108, 0.390178143220007, 0.5388714218197894, 0.4144922211044677, 0.5556031361402798, 0.12363304018002641, 0.04487254849276501, 0.0042833129626113076, 0.07094088945303556, 9.999999999998899e-05, 9.999999999998899e-05, 0.04886408105916418, 9.999999999998899e-05, 9.999999999998899e-05, 0.046216819195236125, 0.05392380937003127, 0.04933049336400963, 0.09062826588834905, 0.04325620850728629, 0.04095447012273268, 0.05209050776955204, 0.04404006230407598, 0.028815299675294392, 0.08729385591475969, 0.002083282621059168, 0.03159160771342773, 0.0777069491690976, 0.00935170597735302, 0.027497474330707372, 0.07168781333772001, 0.00766754600200692, 0.0020679885819792077, 0.5229516612291796, 0.25519120167421017, 0.6682874606968454, 0.4473486848916235, 0.23584126139630712, 0.22140632514065595, 0.10771902280895307, 0.36458810859996493, 0.09360848553053969, 0.13624384468825423, 0.128260164510422, 0.06509411666027887, 0.1744428750119681, 0.24319869098639524, 0.20282425876235366, 0.20920329628121515, 0.24566982341587584, 0.1112123642384435, 0.25444917943456336, 0.07186539850628726, 0.08490082409213051, 0.15806625776031447, 0.021995989932774518, 0.1333926989485439, 0.07277375491756244, 0.05132265367839661, 0.04703893487210831, 0.13751890825656898, 0.05824517544504071, 0.09653606557217442, 0.051272146293268483, 0.034431047682662363, 0.06283758732636213, 0.12502151510692072, 0.06874532621905349, 0.13337646759648358, 0.16498709181518278, 9.999999999998899e-05, 0.1184162013208927, 0.11870759679254717, 0.1687794756451635, 0.13158911600216505, 0.1769273268389152, 9.999999999998899e-05, 0.1353008486767805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004306043293635264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08075134803595807, 0.02752781348173572, 0.07670407527277989, 0.06817906232168403, 0.002511448153392659, 0.009530257929926345, 0.17838254019918165, 0.03523454600054088, 0.024359423047855988, 0.057003359093626416, 0.06674397057443915, 0.16230410284992436, 0.15609076031505864, 0.146159681811181, 0.07112541006358519, 0.051096260932265936, 0.0784055332595428, 0.04015465388370798, 0.065880081281113, 0.04851018689593656, 0.033872033128408696, 0.01944226230844559, 0.04733359407519222, 0.08673446528441742, 0.0298547251212804, 0.07088262790962585, 0.011566016253764633, 0.34060840926565283, 0.3668055154349297, 0.43122062875018285, 0.30601814197130606, 0.3215782873108899, 0.3416445613852809, 0.45388344143637216, 0.3428224587023494, 0.41779747776585874, 0.017543661577575254, 0.012740968857668067, 0.013361261887088083, 0.06737941485940113, 0.01284608626058037, 0.06342064019210591, 0.03449477625347808, 0.009350757245604524, 0.072837854002058, 0.1761524594984314, 0.13120967170394704, 0.19744700332145426, 0.16680051278292485, 0.146602697256473, 0.20082937848054638, 0.157586342082788, 0.15428531269176604, 0.11438011420983052, 0.12240247817034833, 0.1412559254403143, 0.11880573700885488, 0.15454861602458092, 0.13105528516609155, 0.1331622928032955, 0.1477479668842523, 0.12577214405572346, 0.10773188766500807, 0.07045452538558516, 0.07447107628067184, 0.07480986599449335, 0.11163078144537708, 0.07567163895247209, 0.08007593096985255, 0.08865111798554903, 0.06220153583485355, 0.05061735684127344, 0.20814209723655352, 0.11134973463838582, 0.1866525089177672, 0.16730959457868944, 0.12811795567100948, 0.18783552241591028, 0.23869660579846452, 0.16202206269028507, 0.1829215638338606, 0.15806496057499464, 0.18709410030541818, 0.18121456250904044, 0.16575229361316446, 0.16782379880931986, 0.1679981815036652, 0.17326525364425338, 0.16888750728393076, 0.17956513544249575, 0.11832138824425853, 0.07600222924732658, 0.11993357334833143, 0.5680345649890213, 0.2003444644430321, 0.10110598594806675, 0.13787419365037545, 0.11374653201958917, 0.10406963660993429, 0.0813276594894018, 0.10809565955823708, 0.3479629184307701, 0.2357507317819887, 0.12618658992850595, 0.17831949829777605, 0.14180976026772607, 0.1459895707107678, 0.19022539217554768, 0.23690918400445649, 0.23800066919969332, 0.18953520091821374, 0.1799941694728644, 0.22757225033158446, 0.20675633181375475, 0.26558675290114986, 0.23767435576286933, 0.24681661657738008, 0.06830057053637306, 0.05025506600906937, 0.05822184739370262, 0.034711341120847616, 0.04176912960951107, 0.05317741337754345, 0.05230607070902893, 0.03997177673536845, 0.0438297812607763]}, "mutation_prompt": null}
{"id": "8dffae43-8f46-4005-9a2c-d5ba050e387b", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "949d2461-df03-47d9-ad36-00a9cf7a44fd", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, population_size):\n                parent1 = population[np.random.choice(population_size)]\n                parent2 = population[np.random.choice(population_size)]\n                parent3 = population[np.random.choice(population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n\n            # Dynamic population size adaptation\n            if np.random.rand() < 0.05:\n                population_size = min(max(5, population_size + np.random.choice([-1, 1])), 20)\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, (population_size - len(population), self.dim)))\n                fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Incorporating a dynamic population size adaptation mechanism to improve exploration and exploitation balance.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 40, 17, '                fitness = np.array([func(individual) for individual in population])\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 40, 17, '                fitness = np.array([func(individual) for individual in population])\\n'))", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {}, "mutation_prompt": null}
{"id": "88d66b2b-cb42-4525-a628-69fa4edbc7b4", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            # Introduce elitism\n            new_population.sort(key=lambda x: func(x))\n            population = np.array(new_population[:self.population_size])\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Introducing an elitism mechanism to preserve the best individual in each generation.", "configspace": "", "generation": 17, "fitness": 0.17765542225450878, "feedback": "The algorithm ImprovedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.5650882588791388, 0.5630657811653565, 0.542068667220629, 0.5105163064260962, 0.46708144339314583, 0.3636669670826671, 0.4303696396877149, 0.48806394190171964, 0.4373246213155296, 0.17992276137299956, 0.07918368589115143, 0.05350289652893847, 0.04827367063205257, 0.006946580565466487, 0.06416677719063013, 0.043755061183057165, 0.07811242193631462, 0.02366128678045676, 0.10625000153622899, 0.09687349741044893, 0.09373075413957233, 0.07984984306855569, 0.11279060616123238, 0.12785050288102173, 0.05667045958740824, 0.0804921264604258, 0.08096674239301282, 0.06889107996878607, 0.04335693791509165, 0.0679489874940209, 0.09172912475397721, 0.045704347370069676, 0.05296277621905088, 0.09760979056079044, 0.03480363866794778, 0.056523946141145864, 0.8045477590734962, 0.8180502390005566, 0.8873097437247954, 0.8555261517312449, 0.8601884219962093, 0.8327451379832723, 0.7653957823450385, 0.8052597265064002, 0.7350693632396166, 0.24565180305103196, 0.25299482723385314, 0.2565367749901579, 0.16665955415961087, 0.24598862214826345, 0.22878847708727812, 0.22399500374370507, 0.1842176343630224, 0.08796370772788231, 0.19154370633129725, 0.13216489034169876, 0.12159451135801991, 0.1745533653862551, 0.14419028466533124, 0.15109249533216174, 0.11225123554173932, 0.15004573044135072, 0.1970806404278057, 0.10111288245161942, 0.12029555501934897, 0.027615970092152775, 0.17717521519562962, 0.14498594407854037, 0.09576399150433423, 0.240807906256449, 0.15182783053362725, 0.1337673295848164, 0.16765056570663406, 9.999999999998899e-05, 0.11128232609769295, 0.12964697375993806, 0.10456551770167732, 0.24006999587104183, 0.1682195462854994, 9.999999999998899e-05, 0.14940763894405085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07725051934803084, 0.039981147005841544, 0.05873063833859338, 0.03343694904135808, 0.006419815030303422, 0.007099842744281881, 0.14221586988658874, 0.043598116874411064, 0.06886436168267851, 0.04801820596399575, 0.07320679251773776, 0.023303349764258963, 0.07848076515400682, 0.04352038515381096, 0.054455431513566355, 0.0026965481896850108, 0.0653526648699968, 0.048894140106222395, 0.06085413007686713, 0.1569194471563531, 0.10645620205977468, 0.007830761850511236, 0.030686095804872693, 0.0848188847549276, 0.03197482554455777, 0.06379878264149863, 0.03456835954770143, 0.3860651841079059, 0.4026902210243738, 0.37048777779946174, 0.35427695899037936, 0.36522901301073196, 0.33425415378732226, 0.40674701871449315, 0.39690443145583076, 0.4154262722341878, 0.04227317337826986, 0.060290614952319466, 0.08183011115310945, 0.08969484462825417, 0.07724409436712654, 0.09116764508054453, 0.03017290117489413, 0.12170705529255632, 0.06437598747559659, 0.17387565515808712, 0.18679026270436594, 0.1697378261460184, 0.23739155481411967, 0.20440295624574656, 0.20955086114409427, 0.12405790989637666, 0.19714729661727748, 0.17977575814885294, 0.17212496903432406, 0.24747015362405622, 0.20430646085132687, 0.1877598674756238, 0.24860037968204762, 0.20323708120243933, 0.14900771179249006, 0.16183156155194933, 0.1607071780370809, 0.12383920384676295, 0.15135411170495572, 0.10098919716238375, 0.11018667963430928, 0.14485507384994256, 0.13601451930607544, 0.1366174414210496, 0.16806059913823157, 0.14202067287156916, 0.17480291603104325, 0.18274029409047687, 0.18749555875875412, 0.18066215054206636, 0.18454672467894262, 0.18684505665073237, 0.23303919789896477, 0.21481888066775945, 0.18521749141198207, 0.16502655817660383, 0.17425369865559237, 0.2145187801414269, 0.16238360720007017, 0.21945928857501462, 0.16738946731610982, 0.17930606724773712, 0.17321216134504536, 0.18803421437278478, 0.13049329145265542, 0.6448224846544628, 0.125150126802954, 0.1170359932460262, 0.19829695030773498, 0.13184907722030026, 0.14085405596799483, 0.1485084343233024, 0.13861899925416843, 0.19860092276772323, 0.11090304992427369, 0.07048984932227542, 0.16412808939603163, 0.19530817104342213, 0.18373736224815695, 0.07374318706413274, 0.09000428305424879, 0.1897738856123996, 0.21195204072701979, 0.18164372022985653, 0.242126981958402, 0.2394506427393156, 0.19573152906169555, 0.20256998079982036, 0.21384360968361282, 0.2191337156480616, 0.20331854304942176, 0.04329001533566312, 0.05346052044951144, 0.06555462041735394, 0.1192979577556249, 0.038729631868397174, 0.07081081391815913, 0.07952411121922265, 0.07199041529364913, 0.04261188418840234]}, "mutation_prompt": null}
{"id": "5f22f015-d728-4d0d-9627-fe8e18b5ef6b", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "aded64ee-b1e7-40f4-9c89-f8e9bdfa1a59", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                mutation_rate = np.clip(self.mutation_rate + np.random.normal(0, 0.1), 0, 1)\n                child = parent1 + mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < mutation_rate:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Implement a self-adaptive mutation strategy to dynamically adjust mutation rates during evolution.", "configspace": "", "generation": 19, "fitness": 0.20058045469017993, "feedback": "The algorithm ImprovedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.584562835242271, 0.647455686802004, 0.5782740727185858, 0.5689292389703908, 0.5972439093941819, 0.6479165112476895, 0.6289721461867597, 0.6136885336109211, 0.5791773207268449, 0.1766109670070931, 0.07016457021253864, 0.1610373774592705, 0.013079807952758205, 0.056354505985627856, 0.03928666599142194, 0.018911290435753125, 0.146179152788517, 0.0123893448730652, 0.15797197163456933, 0.12674871569797364, 0.06671898934513187, 0.11722329477220961, 0.11291130037882158, 0.11210720572180655, 0.07508636499333987, 0.12930745793827558, 0.07476904749657876, 0.07042691424302217, 0.06352362282556756, 0.06378476234425523, 0.13505393101110008, 0.1033436736133555, 0.08362196919586462, 0.12632931169698658, 0.06908925081586748, 0.08244350683030499, 0.9376751330490396, 0.920303274574833, 0.9256399640495491, 0.9161847101268388, 0.9301345925499176, 0.8487086859971161, 0.7989505730125854, 0.9405739512993884, 0.8460988533931252, 0.2726383918076575, 0.310506099448557, 0.3474305851285914, 0.30258811352568105, 0.33820426960964345, 0.253005265916159, 0.29680075058057975, 0.31164915457503284, 0.2090627738056149, 0.2515778384787638, 0.117858250868908, 0.21601724869502603, 0.20452634089888555, 0.1785076589898903, 0.17738104047752823, 0.11295315412491269, 0.22742661296111166, 0.14881609467297785, 0.14389664962372517, 0.13202639546918404, 0.09328440583612496, 0.1252339465199508, 0.12964512937577422, 0.12551341586647324, 0.14398015793538466, 0.23396714564249887, 0.1495156594936523, 0.37412178400576945, 9.999999999998899e-05, 0.127614038510104, 0.151436137489543, 0.11987066837399585, 0.14094759062138273, 0.18193049572036568, 9.999999999998899e-05, 0.1824753203942997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0396850133804344, 0.03359676663860245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007707265448281042, 0.08411857859471616, 0.03929469273439079, 0.10111755814467538, 0.06903187136467082, 0.0006367243509499687, 0.004866225237312616, 0.044053979867857196, 0.08054052978883797, 0.045014898863061203, 0.06109317110490897, 0.013566381495465407, 0.10384152815798842, 0.04748268233841224, 0.07139997343993709, 0.08343979657702916, 0.07179771322122774, 0.11752335346948128, 0.05245082404533785, 0.0514464685118714, 0.07887210790456034, 0.16776788303639278, 0.11711736075140888, 0.008585251734787414, 0.07958986153468273, 0.07728231986305178, 0.13092449386912774, 0.03328694969792634, 0.40041440177098864, 0.4478346083072542, 0.42079078193843866, 0.4237809135683166, 0.44121543264375596, 0.4197894097138337, 0.46710965352333167, 0.43869687584981265, 0.4266815336858816, 0.06608103575107271, 0.0468514362483653, 0.03215168411039648, 0.0796943855801222, 0.07017928840739296, 0.10379271624672004, 0.06447205122829458, 0.12195398412485992, 0.09043413331547234, 0.2116066205952113, 0.19259837013760328, 0.18520166915658476, 0.2234604418314925, 0.18463224973105707, 0.19086124455400455, 0.18134187679065772, 0.15391468923418072, 0.1749626517983075, 0.1473361701081296, 0.18132032306707224, 0.15052289660962193, 0.17001928655054466, 0.2024418049637784, 0.19056515051434564, 0.17733295975231267, 0.18348759397283076, 0.16073139674003156, 0.07291716781016788, 0.1812401464369433, 0.11454729106053418, 0.14817345045138208, 0.143740811742059, 0.16277203530245732, 0.1464399918131769, 0.1555258881169852, 0.09379738025022266, 0.22459178668584934, 0.14886871898484644, 0.19367338531323397, 0.19724255817428715, 0.1730516287618371, 0.16821676029716326, 0.18569658098211883, 0.17325337451220169, 0.20702892095423608, 0.1830763382422782, 0.21666966594617554, 0.17056837822226845, 0.17620434641490623, 0.18733534830097098, 0.1747768937288885, 0.1600897821377183, 0.19404201453497705, 0.18576488953258508, 0.12379030223822152, 0.10533398625673529, 0.12762001298017933, 0.7636303999396736, 0.2004903794593874, 0.5047003007597394, 0.147848114997148, 0.13833218520915358, 0.1523838824957966, 0.08267581183607486, 0.10961776613909502, 0.10054838573590064, 0.2773692471520496, 0.12790199816105874, 0.2013158678883955, 0.09346462777848519, 0.14824254921168833, 0.2709629848386357, 0.2216994597345321, 0.22173434199583708, 0.21587290320995567, 0.2082205690713097, 0.21149589705225436, 0.18457498141151296, 0.19839983178709242, 0.21183309441683618, 0.2364258491030039, 0.075975286724971, 0.07365547500555036, 0.06973622520866574, 0.06435699536384165, 0.09102213520499114, 0.05573702508152778, 0.08136519112335772, 0.06458791927736751, 0.07358319557202975]}, "mutation_prompt": null}
{"id": "c8f76806-fe0a-451f-bf33-a332b10ed98d", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "b7192ada-531c-459e-88b0-1059f2e2c0c4", "solution": "import numpy as np\n\nclass DynamicMutationCrossoverGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.initial_mutation_prob = 0.1\n        self.initial_mutation_rate = 0.1\n        self.initial_crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_fitness = np.min(fitness)\n        \n        mutation_prob = self.initial_mutation_prob\n        mutation_rate = self.initial_mutation_rate\n        crossover_rate = self.initial_crossover_rate\n\n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n\n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n\n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n\n            # Update mutation and crossover rates based on individual fitness\n            mutation_prob = max(0.1, self.initial_mutation_prob * (best_fitness / np.min(fitness)))\n            mutation_rate = max(0.1, self.initial_mutation_rate * (best_fitness / np.min(fitness)))\n            crossover_rate = min(0.9, self.initial_crossover_rate + 0.1 * (best_fitness / np.min(fitness)))\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationCrossoverGeneticAlgorithm", "description": "Implement a dynamic mutation and crossover rate adaptation strategy based on individual fitness.", "configspace": "", "generation": 21, "fitness": 0.17847169976621624, "feedback": "The algorithm DynamicMutationCrossoverGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.620168203906961, 0.5672233522148953, 0.5767219260032848, 0.5982529012138091, 0.5659661179022635, 0.6050431497739429, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.15833648440815073, 0.09514462380485711, 0.1322024993572155, 0.055348423876902086, 0.1326579950982737, 0.09982291524490994, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.14829279942878237, 0.12528671575196382, 0.13371042823503898, 0.1095819852350498, 0.11048559429956972, 0.10401933443626954, 0.9699222578119652, 0.9270724190456017, 0.9623603493201199, 0.914654947048173, 0.8924241441711495, 0.8910885618257149, 0.8683700276339432, 0.963701776270484, 0.9050779951806339, 0.1911393404450039, 0.08353216942028208, 0.0071741937393225985, 0.20667797249557773, 0.17799311456344202, 0.14478920510790882, 9.999999999998899e-05, 0.26866751891808793, 0.25152133544048383, 0.19310480398713037, 0.1595214817815631, 0.19965055554327005, 0.2693107140940054, 0.12116927932339472, 0.1245161889239027, 0.12217641100317433, 0.14914805572317003, 0.1348220251166229, 0.03493480288790485, 0.0027292417257857027, 0.011677216387440237, 9.999999999998899e-05, 0.12976648650166955, 0.15527178714354373, 0.11537256606051993, 0.08670237067335984, 0.07605719118214294, 0.05717943707887785, 9.999999999998899e-05, 0.031052649379423536, 0.036131041788399876, 0.007018582112477079, 0.06338871074450214, 0.04772953125203405, 9.999999999998899e-05, 0.03915793490249431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005257865823364849, 0.04559061246456053, 0.024893552422159182, 0.007985532773640114, 0.012542047641184606, 0.0012279264540616674, 9.999999999998899e-05, 0.02175736294042052, 0.056696139541564494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028390473555278573, 0.016044281667545457, 0.03197317811015166, 0.010133046944043267, 9.999999999998899e-05, 0.021375400499657138, 0.01581790818806983, 0.08163237403415136, 0.04786665468385998, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4407356926228726, 0.40892545797086655, 0.4754688404892109, 0.06465883055037414, 0.07752416957343122, 0.09886293743469765, 0.07754728289276902, 0.07534532813076766, 0.09768516215341005, 0.06231885872833187, 0.12347068227300262, 0.07335326524781216, 0.20444070628282784, 0.1826590408769564, 0.19523678938574385, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.19188132608291575, 0.1868679167657894, 0.15714485817147306, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.2675248692597867, 0.1691999061913304, 0.16835287354214257, 0.21498851656218843, 0.22597600421308706, 0.1930964775514563, 0.13709390208470817, 0.15224257257887897, 0.07027072775280063, 0.22369462712927224, 0.1717566583057193, 0.09714935453363871, 0.14163255134548547, 0.1734373900489683, 0.18196009099444177, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.17376562048381894, 0.1554504929336603, 0.20117002201031842, 0.22704708353347314, 0.1906377986283363, 0.2006560511091584, 0.17482285418697463, 0.18568073926758966, 0.19886093249602887, 0.18025131054658106, 0.13924417456782434, 0.2056849656329237, 0.14060958601399998, 0.15365519917816184, 0.17341875055061196, 0.16735661000037894, 0.11390908572883596, 0.12841403636440407, 0.12191478862613181, 0.17475100322027715, 0.15488539493981557, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.28805633003421593, 0.16378307332155584, 0.20597584549329728, 0.09370941663079957, 0.15251584434407772, 0.34985086643198604, 0.18906881931331432, 0.19805813072242995, 0.18359060270877714, 0.1729996068627705, 0.18750417794502328, 0.17654102696333995, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.09947088256978676, 0.09722895086114547, 0.07214194441383082, 0.09672285059491392, 0.1514585015735107, 0.09014120456198327, 0.06422232036095032, 0.06113774427610874, 0.07615495461805244]}, "mutation_prompt": null}
{"id": "3619ba07-53d7-4f28-bb9e-17a323a74649", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.base_mutation_prob = 0.1\n        self.base_mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        mutation_prob = self.base_mutation_prob\n        mutation_rate = self.base_mutation_rate\n\n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n\n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n\n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.uniform() < 0.1:  # Adjust mutation rates dynamically\n                best_fitness = np.min(fitness)\n                worst_fitness = np.max(fitness)\n                mutation_prob = self.base_mutation_prob * (1 - best_fitness / worst_fitness)\n                mutation_rate = self.base_mutation_rate * (1 - best_fitness / worst_fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Enhancing population diversity by implementing a mechanism to dynamically adjust mutation rates based on individual performance.", "configspace": "", "generation": 22, "fitness": 0.11390008813342843, "feedback": "The algorithm EnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.12.", "error": "", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.10101077475496001, 0.18008970803283697, 0.1157614615902508, 0.06176743784586558, 0.07866871200555159, 0.07634933197825433, 0.06097345688014988, 0.08329685288652822, 0.09603979360580617, 0.2545821371459196, 0.07350620627467364, 0.180124059273571, 0.08964171377394325, 0.07081221186605102, 0.030033782495884398, 0.10430717615644514, 0.13899355310671602, 9.999999999998899e-05, 0.015413567496261549, 0.02277695038602978, 0.004927223921807333, 0.08096577658680382, 0.14558981950140226, 0.09693898492860609, 0.04517660836396231, 0.059305594267002215, 0.026960190392001815, 0.04863092005454184, 0.0025640076676026746, 0.0024828454725990268, 0.12605225986698754, 0.0031695661289889987, 0.022351844573316848, 0.07586240329881, 0.03989272100370378, 0.11124923481285365, 0.924241292547278, 0.8552526751642048, 0.9572763119668328, 0.05032345193835719, 0.06032422413012295, 0.06250407495038757, 0.04463274237518067, 0.06745344656683594, 0.058410229931284086, 0.34797379933229045, 0.004255253105899803, 0.05306684725545452, 0.1694914149472586, 0.1828701081794084, 0.09238977526510228, 0.29149689279937574, 0.019751598116248492, 0.22729963634951644, 0.12964015653605365, 0.08428300356803398, 0.034076800352442094, 0.15241279096863347, 0.03890063218563666, 0.09002009647149933, 0.1169138329722127, 0.02474866304515022, 0.06652237591604404, 0.1446433234374439, 0.10540188060041289, 9.999999999998899e-05, 0.11361220469051547, 0.0023842375069529353, 0.16239152111358457, 0.13267022826103125, 0.12054127207943166, 0.13249104018200852, 0.11970468197194317, 0.01890841299867585, 0.07664792844429924, 0.12499905678368528, 0.3140318232934075, 0.15718240570845954, 0.16985996828945804, 9.999999999998899e-05, 0.14217346441940104, 0.019672071101721977, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001415703665926804, 0.048434836610921406, 0.003938248606018879, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0857910256099349, 0.02983927511502038, 0.10892458397281357, 0.039957387647934994, 0.018911033139321298, 0.005669487010351304, 0.08423843778045925, 0.08884216255599786, 0.07761960099187948, 0.06582132120528916, 0.04467864874911831, 0.14229481088699192, 0.12512010692455455, 0.12087202088082227, 0.08670027158817961, 9.999999999998899e-05, 0.16200736119432968, 0.07796128939678093, 0.06918093077194098, 0.204590702021486, 0.15204796314165903, 9.999999999998899e-05, 0.01121434148919287, 9.999999999998899e-05, 0.04640035295498768, 0.13671978898530046, 0.025693131151839355, 0.2124001440184068, 0.18911795656911112, 0.17222986575234667, 0.1283784304529919, 0.11842196222855705, 0.11572505237505482, 0.15581528157087576, 0.15035508994358426, 0.1667665020782919, 0.018315362090404963, 0.07541122677994905, 9.999999999998899e-05, 0.08075915873097017, 0.05379649888718285, 0.07737494312489157, 0.06053620044881303, 0.08182684246890293, 0.09112341943749125, 0.10302458003782122, 0.1582483899571413, 0.18571372162721, 0.11513267344009293, 0.1503881034148018, 0.15738939308014832, 0.1946078840665686, 0.13123539113006322, 0.13538767389047168, 0.14013740255725227, 0.22000154844841036, 0.15851217488452807, 0.16716365154650048, 0.14364411734698934, 0.10851731569157141, 0.12910921994932434, 0.1325145775231562, 0.09526573882568423, 0.15293517609670448, 0.14895588664076587, 0.05954803506237827, 0.10551926997889627, 0.12189008051716632, 0.07914975141580693, 0.06458871165532765, 0.07605379983765215, 0.026504399711465676, 0.12638206463538304, 0.13584253392633983, 0.16233638504444914, 0.15894883607954946, 0.12617879488679773, 0.1844654314894062, 0.16345984434886873, 0.12257128543128726, 0.15405935978285945, 0.16666477212072972, 0.19341786015734186, 0.18067626044486018, 0.08204214011203481, 0.1766192652779811, 0.1208241488269961, 0.19115546092048374, 0.16004186876583026, 0.1645114844595189, 0.10657406598292274, 0.07176529662829911, 0.17099384532391448, 0.1730236102521534, 0.20197011268762521, 0.09784632055971765, 0.0806330202261446, 0.1203869620484509, 0.10701126414739481, 0.07089334051970198, 0.07058039324997079, 0.02275949677438016, 0.035762280301972704, 0.09142762182201714, 0.08087451712284588, 0.0845923176545692, 0.1536789659227099, 0.3298608548421471, 0.18853538815016346, 0.2002019528206631, 0.20638064715497073, 0.27074913698914393, 0.2037269019073038, 0.20881795433629136, 0.14084774147758305, 0.1535780431249032, 0.16098176039996437, 0.06973993421355462, 0.052705311196911686, 0.0687353332231132, 0.03583845410719111, 0.07259400944625327, 0.062229691301043055, 0.08583557250144569, 0.062369406872677224, 0.05329988256239959]}, "mutation_prompt": null}
{"id": "b335fa6c-d179-4e22-be4f-8283099ad7ff", "solution": "import numpy as np\n\nclass DynamicMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                \n                dynamic_mutation = self.mutation_rate / (1 + np.exp(-5 * (1 - fitness[_])))\n                child = parent1 + dynamic_mutation * (parent2 - parent3)\n                \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationGeneticAlgorithm", "description": "Employing a dynamic mutation strategy based on individual fitness evaluations to enhance exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.163337730069358, "feedback": "The algorithm DynamicMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.2857559981992447, 0.3000002879523287, 0.3084442238238311, 0.28172276674537267, 0.28388636740711193, 0.2657098511331063, 0.6788381082231021, 0.5899436032532256, 0.6083385191202186, 0.03339395659583755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027274457423767107, 0.00041775954948830574, 9.999999999998899e-05, 0.07915473779589044, 0.09719230842699855, 0.11467965223941223, 0.09438860921636694, 0.11955389229755142, 0.12153906181577201, 0.0753073945041024, 0.08478791508507799, 0.09550272202654086, 0.10353810103342365, 0.08397144110498522, 0.0953746757208892, 0.08598096015074674, 0.06730042293141747, 0.06788093406586015, 0.09966565364003566, 0.0559491270569904, 0.06813296003541658, 0.8681170983950826, 0.8666178022953354, 0.886363137163425, 0.8805844502047412, 0.9068291526301884, 0.8743118073520155, 0.8371990958860339, 0.8868061480893635, 0.8637370471833175, 0.1331852136045496, 0.11252023296060432, 0.11853566006875571, 0.13868097123087353, 0.11787468499213305, 0.12976620485308032, 0.34760848450203696, 0.2408038709132767, 0.11426404293028114, 0.19371158595998894, 0.1072549397454583, 0.10831002428235714, 0.23494939918766877, 0.1656644195518605, 0.14369669345510339, 0.12454059378505156, 0.1565359065231754, 0.1646571997829256, 0.04059330103620029, 0.07405852969625071, 0.09355762632046338, 0.08247997724458822, 0.14104524561763043, 0.08048656878649707, 0.09030994569386641, 0.06029912102603607, 0.11164281072735416, 0.08594024084566931, 0.01097723948204421, 0.06007856511276044, 0.11004171924455464, 9.999999999998899e-05, 0.113040200619421, 0.06417495048331023, 9.999999999998899e-05, 0.05191367207132591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026160080216082626, 0.004855959638315643, 0.019954019998793426, 0.062262472706281935, 9.999999999998899e-05, 0.011669822792176432, 0.06662562973580699, 0.013752144165746327, 0.0569314258124628, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03389476508854827, 0.019847759984507496, 0.01715838195863073, 0.03237437738047888, 0.008258612179216973, 0.056665366417266494, 0.0385874045709248, 0.0551493735682812, 0.03382493561126654, 0.4262110191846791, 0.3822102418216581, 0.42433554469677204, 0.43048847564379344, 0.42553755688399153, 0.3924450188296157, 0.2859171982770754, 0.2788622333570485, 0.2998575756155839, 0.07169295981665436, 0.0626515382523829, 0.06676691520731748, 0.060203886212878754, 0.04456381621201966, 0.09225739648840303, 0.04721963717844169, 0.0510429265418636, 0.06643824103182994, 0.15916714137283183, 0.11166904175416237, 0.13643957547192553, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.10024092756930003, 0.14144157372337884, 0.1542825799592088, 0.1466832487762666, 0.25982656232758805, 0.16712381999483472, 0.17330075350813912, 0.15606341303761473, 0.19468310805942401, 0.17922593347497062, 0.17134128823665906, 0.17393892512364506, 0.1792973901301439, 0.28831939792483474, 0.16233850164737362, 0.1574781703988155, 0.1256587997819546, 0.10099241873726228, 0.1423082906629477, 0.12851437901115204, 0.1330975847106851, 0.23293791484492887, 0.18044568893882695, 0.18574399166263522, 0.13997953729085943, 0.15214926153462205, 0.18206102360833754, 0.17823478668489168, 0.14266087623610435, 0.15151423301586853, 0.16840762169930312, 0.17994298492825056, 0.17264975557811812, 0.17414372824397129, 0.1652189022986249, 0.16773037998719387, 0.17384203944722887, 0.1696798300961736, 0.1803510010001821, 0.1031846408699243, 0.2785176043856563, 0.10898870025850516, 0.7706188279201859, 0.19530183192866957, 0.08615174667442627, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.26389646836104785, 0.15917013706779948, 0.17685250501531924, 0.3975618108206268, 0.10339740502552919, 0.19424190528735197, 0.15306129301666693, 0.16462580306624586, 0.15434608618557577, 0.14938619749573567, 0.16635921328683467, 0.17304860576044756, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.056314825881584096, 0.05785137305686572, 0.052072827078811335, 0.05724887478389151, 0.055696456066298694, 0.05185114889853015, 0.05411095974328617, 0.049002064665821465, 0.05199118386831958]}, "mutation_prompt": null}
{"id": "3a03b386-3411-4ac3-a299-5e0efeed64f0", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "51abc803-d693-4976-848a-34a90389798b", "solution": "import numpy as np\n\nclass DynamicMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.base_mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                mutation_rate = self.base_mutation_rate / (1 + np.sum(fitness) - fitness_sorted_idx)\n                child = parent1 + mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < mutation_rate:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicMutationGeneticAlgorithm", "description": "Incorporating a dynamic mutation rate adjustment based on individual fitness for improved exploration and exploitation balance.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (5,) ')", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {}, "mutation_prompt": null}
{"id": "d3a5f04e-1f21-44f9-ae6f-59ecff84715e", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "9a56d0ec-6ca5-4e79-83c4-4049ceffd4cb", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "91c023ea-c8d7-42d2-82f0-95f4b41bec24", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.base_mutation_prob = 0.1\n        self.base_mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        mutation_rate = self.base_mutation_rate\n\n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.base_mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n\n            # Adapt mutation rate based on individual fitness\n            best_fitness = np.min(fitness)\n            worst_fitness = np.max(fitness)\n            mutation_rate = self.base_mutation_rate * (best_fitness / worst_fitness)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implementing a dynamic mutation rate adaptation mechanism based on individual fitness evaluations to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": 0.18252205997269652, "feedback": "The algorithm EnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6827042934854772, 0.6519727798761719, 0.6107507713916728, 0.6410900887104509, 0.5967550398847672, 0.6021919407808375, 0.6900434436671268, 0.6902817512793105, 0.5570115639714607, 0.0799455323224525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002872379030668393, 0.0635803568271267, 9.999999999998899e-05, 9.999999999998899e-05, 0.03882079350003953, 0.10150727454506414, 0.11104938129536768, 0.10180971404630523, 0.15141252786545412, 0.12565916848216707, 0.07625715151364021, 0.06908494537339627, 0.1044588236662759, 0.11748770176679513, 0.11157643542878648, 0.06781114693435042, 0.07975884457646609, 0.10656071534569256, 0.0664769056070531, 0.10067896030271661, 0.1322050820342513, 0.0954900819404143, 0.09142149761324636, 0.8822859379138606, 0.8938267976162095, 0.8881234727083187, 0.8852106963440656, 0.9142503703675253, 0.8943525166753584, 0.8540671796287893, 0.9318613534659147, 0.8645078161759354, 0.12071432564129081, 0.10125224071956929, 0.15227195901793478, 0.17970545705945928, 0.17872983390030872, 0.1513110294376131, 0.1646531972215982, 0.1554332952238876, 0.15547000449919302, 0.2041731708948088, 0.10571466843623689, 0.14843150726680143, 0.23017769238974417, 0.28932460057126264, 0.1065174759748988, 0.13483906398079182, 0.1694026099553485, 0.14792388919034782, 0.12236412512220596, 0.16499573392721267, 0.10272249488775342, 0.10207404106656304, 0.07140869651968174, 0.07148726856196241, 0.12320541334167356, 0.10408323473685266, 0.12153166479244792, 0.11417510004278175, 0.03658638934409186, 0.041146059218016506, 0.14665488182026987, 9.999999999998899e-05, 0.11303632455427903, 0.08205386493411537, 9.999999999998899e-05, 0.10499687595197282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032575085878323806, 0.019874010359761773, 0.02067195545197431, 0.0162837857533239, 0.02527446668548361, 0.01167480416998301, 0.0894498063360124, 0.017802787638532158, 0.009636085361300006, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057181630560236174, 0.028133449354036943, 0.034807136893426516, 0.01721135212618974, 0.016364853837719795, 0.014401820766213658, 0.05253011063443991, 0.051344345503273825, 0.015090388382489217, 0.4444630495440096, 0.3915107754664474, 0.4289771735461425, 0.3970215979575883, 0.43791085658381856, 0.4642499797302009, 0.49663325836909167, 0.4056984761729856, 0.4657221810685097, 0.04741247072208421, 0.05925152586796811, 0.06100823019519719, 0.06933182541806238, 0.1037320363314378, 0.07621693788667305, 0.06555587235695459, 0.06892551111719236, 0.0854157192012337, 0.13499354015630738, 0.15454399392145513, 0.26260858015211785, 0.2763077500837875, 0.1713316718344755, 0.16168449091294956, 0.12865243156453476, 0.21866075874449142, 0.18504806540167018, 0.1677934977221296, 0.21996610906842862, 0.15156231842220336, 0.19045671239680784, 0.1671597021276532, 0.15875485351213248, 0.2277899577241067, 0.1993352773029604, 0.14422573193630228, 0.16071812511057537, 0.1788832607745504, 0.1746690025427281, 0.21194226889147727, 0.12894657865849946, 0.13472730075407813, 0.14329503680386046, 0.1509449713858736, 0.15059071673387792, 0.20017081221091804, 0.1720955697269686, 0.22225984708834312, 0.19250723059822517, 0.1699280071752115, 0.1916376810443653, 0.22433488992733686, 0.17027740441050232, 0.16492789099934857, 0.17898027461333077, 0.1730443873780927, 0.5128836965041941, 0.20071006577484574, 0.19481487367623407, 0.1733033726375126, 0.18951940868819162, 0.18029594620760037, 0.21309708041674003, 0.14166910368759944, 0.14835499876145675, 0.12556225392871534, 0.1163871554039968, 0.18525306296667166, 0.09982423616798075, 0.14592566654897143, 0.12241407653632519, 0.16373274683944183, 0.27624738172314733, 0.1126176946770141, 0.31810602294182877, 0.08964284938079914, 0.16382047271021416, 0.20540375189001292, 0.16153176544124004, 0.15044380942575153, 0.22860338753366205, 0.19766702066210662, 0.21239458677252643, 0.1883121886116501, 0.20385031098471595, 0.20934859040627207, 0.21240785846630084, 0.23704344867363847, 0.19897814580191842, 0.1915025343528186, 0.08486603757236977, 0.0639750942066839, 0.07908471463043809, 0.09543201708888283, 0.1375869369662276, 0.0885768203900339, 0.09403667402129501, 0.06934032339219409, 0.07939843455487372]}, "mutation_prompt": null}
{"id": "9c171406-a900-4b56-ae06-5f99a0674398", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "11f5e320-dc74-481a-b691-3c2c3976b28b", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "5c984db8-40db-4e8b-a72b-a0fa6f1f6b54", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for _ in range(1, self.population_size):\n                parent1 = population[np.random.choice(self.population_size)]\n                parent2 = population[np.random.choice(self.population_size)]\n                parent3 = population[np.random.choice(self.population_size)]\n                child = parent1 + self.mutation_rate * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n            \n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveMutationGeneticAlgorithm", "description": "Adding Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.6417424402491156, 0.5851907604572175, 0.5554533588069388, 0.6428223870664216, 0.5251677305040798, 0.6330614235803819, 0.6788381082231021, 0.6555023390718964, 0.6083385191202186, 0.27647147269993155, 0.05060266425463211, 0.074219443590686, 0.3005763002211963, 0.01228637912616648, 0.1284333193040953, 0.1270174756325818, 0.09278777059844345, 0.111515258822937, 0.07917018731745717, 0.10627455010954456, 0.12162446108463099, 0.17325245617678064, 0.11708287959881258, 0.1195104431811076, 0.0703724621089985, 0.10787781837059685, 0.07016109195651299, 0.11585298692466017, 0.10898883739577903, 0.11597425982321674, 0.11326121720046356, 0.07837540224672535, 0.09739422878524218, 0.11672272827408103, 0.15281700013863775, 0.0852279061697433, 0.8836400826000339, 0.8672007781508184, 0.9022394452877359, 0.8869849565180621, 0.9047599692444382, 0.8956634148310225, 0.882337333131051, 0.9458245148382147, 0.8528817060238404, 0.33333946988011043, 0.3116891448227862, 0.25811950496591507, 0.2682347689789051, 0.2626985168621008, 0.24520424405029828, 0.37347186880367467, 0.26866751891808793, 0.23479140806071164, 0.20635138782175777, 0.20475285956953493, 0.18151630052155743, 0.26340669280527995, 0.22378619808249378, 0.1322277373049655, 0.13296218180086328, 0.1730850830445716, 0.1777464690867142, 0.15463792241692698, 0.20816244482955581, 0.12287715646998731, 0.1053413853953502, 0.111585542148815, 0.0811047157283179, 0.15886210231988063, 0.13470118152265442, 0.15292166183523948, 0.14070421869108463, 0.11215932447101473, 0.11821366673847189, 0.2735597685483503, 0.12943840206054924, 0.1310202115451521, 0.33389809820870564, 9.999999999998899e-05, 0.12662415008372518, 0.0006317279209291371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09716926796062741, 0.04992070267487636, 0.0628404742743931, 0.0218482742576942, 0.0025950852494134313, 0.0424276105112098, 0.04512052771092645, 0.03900662320229398, 0.07530117861359453, 0.1374838083723514, 0.07083377333558727, 0.10319426686587796, 0.15343595060972748, 0.0897133275539036, 0.13375693395686872, 0.08019393924595841, 0.09921782143303681, 0.05996625388848775, 0.09945376433450115, 0.1108296678132552, 0.14247280956872332, 0.11904377898478247, 9.999999999998899e-05, 0.06806564931857206, 0.0668060615340701, 0.032359523362356035, 0.011200361319502528, 0.4460951826465813, 0.3833727181049078, 0.43663661520253627, 0.4313695494904748, 0.4128245836316079, 0.4133528280825971, 0.4567087644159479, 0.4111530683281268, 0.5171007731347057, 0.057553838893737, 0.09807370191312148, 0.04468986724290569, 0.08717168993918545, 0.09008669374144596, 0.10992014850430953, 0.05097973633789099, 0.10082417246015885, 0.08416416480087974, 0.18853165156928742, 0.21338873609166475, 0.20555586991811947, 0.2136945876979054, 0.1455794065746504, 0.16838531230106635, 0.13242657696352467, 0.20170660945521235, 0.12334897147402424, 0.22048293010199482, 0.17833292795338496, 0.24358579073862696, 0.22070089743597154, 0.1593630375040821, 0.1372093643214688, 0.23335131220235994, 0.2229222512627579, 0.16685819279081648, 0.10038774305952136, 0.2163867752257823, 0.20001833335975938, 0.22633079665092126, 0.17661996423710935, 0.13925434043469198, 0.15726498906318753, 0.12415178950506944, 0.19555474373503146, 0.23293791484492887, 0.16720992476127172, 0.20011849724286357, 0.2236023847003611, 0.15038497197907252, 0.1845804401191793, 0.23457450253391354, 0.16710773896415887, 0.18472644585640796, 0.1785995290834751, 0.19292994156061305, 0.1982372588180188, 0.18183374445592937, 0.18845825105933578, 0.1852940903872492, 0.1667536520457683, 0.16638323587600967, 0.1863968734219975, 0.1444163033516972, 0.14847352706612404, 0.12645189542360147, 0.12492913868854849, 0.20006174267074073, 0.13957140707695603, 0.1456418709077918, 0.12156257537073323, 0.14660817169915863, 0.3025970884518966, 0.11145145641551513, 0.29285101442717865, 0.14622194627571627, 0.16371710036166098, 0.20556700448854148, 0.16191883155010733, 0.15337913876164733, 0.34985086643198604, 0.2083241764201208, 0.2165447137183838, 0.1999559412595494, 0.18030143430658685, 0.2085459369886633, 0.19155915925839706, 0.20719264084507172, 0.2412756565376879, 0.2213662716039172, 0.060952109760943896, 0.058063933971085335, 0.08089842389233215, 0.10537739587867545, 0.08946104656571152, 0.07546747970358703, 0.12652687325943957, 0.0713115939567941, 0.08346673979002461]}, "mutation_prompt": null}
{"id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 32, "fitness": 0.20840822544367757, "feedback": "The algorithm EnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "255156c4-c3ea-43eb-a9d7-0e8927ec773d", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "cb64a334-9a66-4ee0-8116-9c26ba34a44e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "122833a9-75de-4929-9654-f762124f5007", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def _local_search(self, population, func):\n        for i in range(self.population_size):\n            candidate = population[i].copy()\n            for _ in range(3):\n                new_candidate = candidate + 0.1 * np.random.normal(0, 1, self.dim)\n                if func(new_candidate) < func(candidate):\n                    candidate = new_candidate\n            population[i] = candidate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n\n            self._local_search(population, func)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Integrate a local search mechanism to exploit promising regions around the current solutions for enhanced exploitation.", "configspace": "", "generation": 34, "fitness": 0.17633755250588268, "feedback": "The algorithm EnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.4291579545870583, 0.4341160068119191, 0.39238059628584765, 0.40462748917736047, 0.4413322319955878, 0.3404793563673404, 0.3891662836740136, 0.40976082007406456, 0.39492409037525333, 0.04091090649906726, 0.0058675355248367644, 0.008267787256556414, 0.08925676419972439, 0.009764497207222611, 0.016621978694838058, 9.999999999998899e-05, 0.013176465620523548, 0.03618682545408014, 0.08574904507028969, 0.10635903212188114, 0.06251916058361362, 0.09054260321737273, 0.08852546995222821, 0.07466190619438495, 0.07576457220885591, 0.11245343806875485, 0.06472412843794917, 0.061624346790492224, 0.06421328131566384, 0.057537762222873434, 0.08808311993040319, 0.05876937834038931, 0.07388771771844771, 0.08977632534743885, 0.03835666232364965, 0.0613852894203234, 0.7592205631627775, 0.7315047794116926, 0.879376736809848, 0.8168822793360082, 0.7956449943006663, 0.8002521147918709, 0.5644806387798378, 0.818627983395426, 0.7193750283465865, 0.2790895505766924, 0.2373978627451987, 0.1851920905355896, 0.22177855063862562, 0.22658043517063875, 0.28328106257915064, 0.27570371061755605, 0.28590287470206377, 0.19272930412101874, 0.24451272405626878, 0.10689671699760306, 0.1922835190479606, 0.25357181374742255, 0.1795219102588964, 0.18924995649847898, 0.096079522420495, 0.1886866804560693, 0.21196957037428488, 0.15723457127260876, 0.09901153666790685, 0.11637853909802676, 0.11234860540410174, 0.029734342574714745, 0.11144434083934851, 0.15253109793309172, 0.10763475494978614, 0.11757162761537443, 0.20846962604566, 0.14497345776516868, 0.1187195674540672, 0.1549087812086989, 0.1452691952582279, 0.12895286472613243, 0.18312374035302537, 0.0001003383737916419, 0.1253695144150535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015488222509265293, 0.015997076546699796, 0.0004948835943221486, 9.999999999998899e-05, 0.0004649192335144381, 9.999999999998899e-05, 0.07979992073685316, 0.1050814231751026, 0.07651013843855348, 0.07966274940749152, 0.09933718079038423, 0.03334547767241858, 0.15007522305698817, 0.04709326785045609, 0.1036388492760485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016497704201374863, 9.999999999998899e-05, 0.06262974407910038, 0.044574537258944114, 0.07795835210406021, 0.0858245541361321, 0.03452995761522326, 0.08661392693543635, 0.10623121045670536, 0.09066784516411897, 0.09233773297315251, 0.3611721606064894, 0.3989240272823952, 0.3639634934560769, 0.37658427868120903, 0.3906363530369428, 0.35721748525210906, 0.39344193899046054, 0.39724815851519746, 0.3929414430612783, 0.05234701719694712, 0.06022154545734815, 0.06811837103096563, 0.09920422100365578, 0.05987382824253906, 0.0657576492079559, 0.06001810498208182, 0.05645717990559407, 0.1198656031133789, 0.29754373971970904, 0.2800607609385789, 0.15639955197732958, 0.27274521033592547, 0.23677123902246144, 0.2512456489741134, 0.16038630782199015, 0.18499678785881912, 0.1822830934906885, 0.1936520451003051, 0.20617137725563084, 0.16749638828069124, 0.2445800600886766, 0.15857020249530374, 0.2132718599612483, 0.17781080543434147, 0.22894934835004077, 0.1990007916822164, 0.08310135164157706, 0.1352377379924914, 0.12293369617653749, 0.12695434817686402, 0.11445146759540803, 0.15971810146617482, 0.1790238134053418, 0.1346771146445802, 0.1093239829647209, 0.1883585255326341, 0.19662575950998074, 0.17144811180742714, 0.18091256020347124, 0.20667413173548366, 0.15759353553296007, 0.2055029100410819, 0.18644653776447717, 0.16896656347518657, 0.1893834014536223, 0.18812417345818122, 0.18532730504374217, 0.18340101964817956, 0.1619505587967457, 0.18635747127258273, 0.1715916486600232, 0.1771191001332636, 0.16776799261342912, 0.1792498574179412, 0.17175956411757465, 0.5341855021002533, 0.14581224661030812, 0.19868139381344907, 0.12162647518278424, 0.14355827620140282, 0.12197667721369276, 0.14683154991909797, 0.08252677606176473, 0.4067324582118196, 0.07073835675099305, 0.3606892789453545, 0.43153294237363515, 0.19667418172251838, 0.15262085580273266, 0.09117366760354417, 0.26074999637932983, 0.17948622403130776, 0.1830304850152339, 0.1783216403935809, 0.1798139473669551, 0.1984992367093239, 0.1749240847172805, 0.1865269026236922, 0.18947554344651296, 0.16879411505956254, 0.08728490564363234, 0.05508504856082619, 0.05935978944269049, 0.067100869461313, 0.08957477605914077, 0.06883144844985067, 0.0802564229234839, 0.07759271744750562, 0.056176926817540496]}, "mutation_prompt": null}
{"id": "7aaa55fe-935a-48d6-a0ad-019e8f9079de", "solution": "import numpy as np\n\nclass CrowdingBasedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n            \n            # Crowding-based selection to enhance diversity\n            population = np.array(sorted(population, key=lambda x: np.sum(np.abs(x - np.mean(population, axis=0))))\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "CrowdingBasedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Enhance diversity in the population through crowding-based selection to maintain a balance between exploration and exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 41, 9, '        best_idx = np.argmin([func(individual) for individual in population])\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 41, 9, '        best_idx = np.argmin([func(individual) for individual in population])\\n'))", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {}, "mutation_prompt": null}
{"id": "37cbcae1-79fe-4ee7-8b6f-5991902bc283", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "c17885b1-18bf-40c3-9183-d3f76f00e751", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "d957fe3d-d09e-4463-9198-eb7f87c4ce46", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "b70ea183-9c9f-45a1-bf29-0d6da1d7c011", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "3b047707-e4e2-4818-ad98-0b7fa22fc1d0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "a55a623b-bb1c-44e0-ad07-aadf6e48049d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "a5269da6-dd45-40b2-92ca-61e23bceff76", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "6855d207-7666-464e-909c-7c50605d62ca", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement self-adaptive mutation rates for each individual in the population to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.5505491838000675, 0.5202353387816294, 0.6100327655934938, 0.5758199098512402, 0.5822029444260839, 0.5832792337839329, 0.5978432379293743, 0.5854017295542371, 0.5893258197089297, 0.21950425202256685, 0.0989287898357819, 0.024550753713172724, 0.264247174025407, 0.07740811594300501, 0.034929023206873855, 0.2138996308478841, 0.1874493585097622, 0.043370432232137546, 0.1073924806610792, 0.12390657827979135, 0.13179512664073845, 0.10872543686668323, 0.10445430147896373, 0.14792697301051716, 0.09306563568207604, 0.10793855374451611, 0.12905477534339005, 0.0976098831337946, 0.14362711593502553, 0.12037155085554008, 0.13248529692473598, 0.08070037692244225, 0.1036088776973203, 0.0978078029337004, 0.12590652460237328, 0.10725008902838873, 0.9348487512543091, 0.9128120336233951, 0.9719396108457388, 0.9462839363476058, 0.9415420675181212, 0.8776380329399914, 0.8871411922397179, 0.940680939201967, 0.8788758801888573, 0.26836424674170534, 0.33092273517976456, 0.23790675591023125, 0.31246376344346893, 0.22236828949412535, 0.3396055661464711, 0.3167005727306855, 0.29452230559192694, 0.28118860967977977, 0.21778975459062078, 0.16342251253645157, 0.16334433290020767, 0.1961916401855881, 0.20358680037796517, 0.20571028908971944, 0.16041322310500128, 0.24042995392761501, 0.23417898860506337, 0.15247714973314908, 0.14801225115946182, 0.31420220584209335, 0.1411331851850226, 0.1289178096095377, 0.1308585257000564, 0.13814999795699745, 0.14228881015178174, 0.14153870192797857, 0.19182239658858158, 9.999999999998899e-05, 0.13443000644169356, 0.1362803505795438, 0.1434563676345173, 0.15526761851333215, 0.17212431464273392, 0.09045437107803878, 0.13825785305897664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775599087285433, 0.057541337112531066, 9.999999999998899e-05, 0.00449061478153312, 9.999999999998899e-05, 9.999999999998899e-05, 0.12389727274563722, 0.03193109376216019, 0.06496089051471587, 0.08098875578852205, 0.0349181546472741, 0.035811866451276875, 0.08016121505769092, 0.046076991318108274, 0.0859660763784148, 0.10906220934233202, 0.020921850787217644, 0.08261073528592533, 0.02895199520388647, 0.06275193611627561, 0.05036336449340428, 0.008830842054073362, 0.038320080450611194, 0.056587658153256615, 0.05205461220848995, 0.0718239327249206, 0.09217005151865665, 0.09814317320469512, 0.017311309969555655, 0.11207736154468295, 0.08941519976183787, 0.07453568057300886, 0.0902665128411172, 0.4515392161175572, 0.40511128251137607, 0.46125847445354806, 0.41670322874303356, 0.4169383260024152, 0.39748297455748083, 0.4592336223837119, 0.3904592804368967, 0.4331716486745263, 0.08100715762761124, 0.06727684116425736, 0.12119364501125696, 0.09511122316288934, 0.05060246764880394, 0.11562227711596029, 0.10986056305233083, 0.09908046845610785, 0.09828608441835096, 0.1738766946502941, 0.14862043867115227, 0.14027997156851468, 0.19896866251605894, 0.11682569756911054, 0.24186092284678096, 0.18445030064503087, 0.1538940749065123, 0.17236333377712731, 0.1945341106497287, 0.25870770375829355, 0.14722267710119763, 0.1786152511961736, 0.2580978233776704, 0.21211057933744637, 0.1810995865433418, 0.18360280809984686, 0.17854896987983515, 0.08686401206229588, 0.24417345895936404, 0.2030071546761999, 0.15290603715700768, 0.12087426382908284, 0.18500155964733367, 0.13450354771587647, 0.16369472179943, 0.13733187921124224, 0.24068181195714855, 0.19389562014641515, 0.20411270893958422, 0.18941879050399868, 0.19217422198698741, 0.21762995018343523, 0.23751600379574989, 0.19433489505046397, 0.24206668351580296, 0.20668143198135525, 0.1878966650175401, 0.25083820329285345, 0.17847939606960606, 0.20009495180932702, 0.2081630485727335, 0.18802915064986914, 0.1822655643343324, 0.17617671474044672, 0.14798401437834185, 0.11325530473194467, 0.6088263612308841, 0.4136306148465817, 0.20045506775798116, 0.197505313929763, 0.11855207119351308, 0.12331492922610543, 0.16354738351094278, 0.08249217636992201, 0.38652506271628206, 0.13347418554580415, 0.2517808343037, 0.15908942117067926, 0.20507534833772612, 0.16087281637136353, 0.09303874851455274, 0.2661701749366835, 0.23425952326764155, 0.22175525629147586, 0.1956169906901024, 0.19649728891003837, 0.21193059703621409, 0.20542014378601148, 0.196400663831513, 0.19304006357117098, 0.18495743183713853, 0.09305276242599614, 0.08053249404906748, 0.06347968047679975, 0.08524897114891827, 0.09255505777862127, 0.08849946015261356, 0.08174285608748, 0.06522781353215068, 0.06237082806557048]}, "mutation_prompt": null}
{"id": "6aa60b3a-e32b-4ad3-b228-2f7882301f33", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement elitism to keep the best individual in the population and enhance exploration by introducing a mutation operator based on the best individual.", "configspace": "", "generation": 44, "fitness": 0.22870779014279832, "feedback": "The algorithm RefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "6b6e8d4a-7fb6-4b42-8cd3-22fdf851cf7e", "metadata": {"aucs": [0.6167091486987833, 0.6127403121227528, 0.6243248207419592, 0.6195562704342064, 0.6660963627110106, 0.6143217080275971, 0.6514890313462411, 0.6368010051119101, 0.6070701553602174, 0.19309557227793606, 0.15915153438864904, 0.1682567685317572, 0.2076416395782319, 0.13481274222717043, 0.25479665320031764, 0.17262159269025235, 0.23426490425471658, 0.25349621017021184, 0.0879238229217717, 0.14538886530754025, 0.138239943381266, 0.1492529443363939, 0.07264916207228667, 0.13519631870900817, 0.09175024885506411, 0.20961188604109193, 0.12270239130216998, 0.13645513136235188, 0.06577235583364271, 0.06697226793387379, 0.14301985763661818, 0.06561365868565228, 0.10875178993230517, 0.11750106385245984, 0.1275550639493287, 0.12965895766959423, 0.9407513348281474, 0.9438432645938947, 0.9772735937172429, 0.9327508387327019, 0.9204821433988891, 0.9313727346192867, 0.9221451037214456, 0.931100863497552, 0.9312145399677033, 0.3156949961826855, 0.3680401913475977, 0.3448439089314488, 0.292260867072309, 0.3823941201259098, 0.3861061571547362, 0.3606715336992795, 0.3281829677578635, 0.33064182521657515, 0.23532115407957876, 0.17981527416152765, 0.21897321499006006, 0.3715905009790925, 0.17772255241647927, 0.31041739279880176, 0.17326576892157408, 0.19507101814427208, 0.3506393992592056, 0.13892873069775447, 0.13492228382839944, 0.1498181645696417, 0.1243542933039109, 0.201241718704548, 0.16359929800661777, 0.22418654776150337, 0.20985026659700057, 0.11804995182813871, 0.18051139630218271, 0.10728833273328764, 0.17130669957785394, 0.144314991760639, 0.12209803638968975, 0.14513241619745443, 0.1287457013756257, 0.042880508035237797, 0.15712965547051716, 9.999999999998899e-05, 0.0003616377868589371, 0.02038111379427121, 0.024690118260008775, 0.0490518593282282, 0.058488513405759446, 9.999999999998899e-05, 9.999999999998899e-05, 0.08846374102450427, 0.050854079386353446, 0.04651946619294034, 0.08120069207191305, 0.07293082903130232, 0.013166966412532233, 0.03084561543121833, 0.08955839948753963, 0.08003107960232192, 0.13108330419220748, 0.0522170022737235, 0.056865409942562284, 0.05142504115291957, 0.06791123869094229, 0.08240559656178537, 0.0656795536401833, 0.05402655867062334, 0.0854275620939614, 0.007825412463658865, 0.07411653117028127, 0.07872083458041268, 0.10665688184813682, 0.09829239769644194, 0.05608323355578193, 0.15145130120554062, 0.16310210345286635, 0.1302724324898854, 0.01716173561640011, 0.5002593762256449, 0.47593469662392107, 0.49096385468986214, 0.432828262758416, 0.40509606648311225, 0.44922810103914046, 0.4571580240789793, 0.45360855072968775, 0.46094785600471255, 0.10346832249369997, 0.09206851406604288, 0.09423483392518395, 0.0764265231183564, 0.05987406712873966, 0.1589391033827633, 0.06243280278575891, 0.0843606502618206, 0.08154983596381082, 0.16900971763582662, 0.1999448612234922, 0.13573073827863424, 0.18200894107982213, 0.1777188045897108, 0.18723582998440824, 0.1759836472622195, 0.14438226949087585, 0.19982306723795107, 0.2826047645935582, 0.36335027638985784, 0.1332413393393308, 0.1903710808786917, 0.2050071868024378, 0.32641363366199216, 0.19586567881690442, 0.1828323448109378, 0.14481334809113144, 0.26983845414147667, 0.2103746002446225, 0.17578964997057012, 0.2817435631194207, 0.13554260370362337, 0.1509575950772032, 0.1463062093170292, 0.13676788210606605, 0.20903076923074937, 0.21699852192049396, 0.18035197227802724, 0.20663539874048698, 0.20126921216302285, 0.16111122778280518, 0.21766862781958984, 0.23173795883047743, 0.2060798235638741, 0.24283430331629197, 0.1890549411206901, 0.19583744110965995, 0.20541701078437669, 0.21509229945310904, 0.20770403914083235, 0.18249800247343428, 0.19207635485393293, 0.2114861408398785, 0.20154065823839973, 0.15761523160427515, 0.10022151322962514, 0.18750889002147164, 0.41393052560534804, 0.2022503425869686, 0.14758668513732986, 0.15161096605074487, 0.12495131064162723, 0.16318683147614355, 0.37234352316899644, 0.5374626729843319, 0.20719197615725993, 0.4134961470320292, 0.6516966577295908, 0.20749740563108976, 0.1597484136605668, 0.15487804672715644, 0.34041727050076853, 0.24939432247286697, 0.2068605154728066, 0.18509915436902447, 0.1914488872067257, 0.23710828076494217, 0.23266340140266395, 0.1973358901922987, 0.20386752221996363, 0.18603916106279061, 0.06657167627351102, 0.07655131336729737, 0.08153158824297768, 0.07623119426785285, 0.08966909564630365, 0.07696422209965914, 0.11634114377508065, 0.044791207126878674, 0.07558079404162277]}, "mutation_prompt": null}
{"id": "ed03cf4c-bfe6-464e-81ee-3a04b8abc095", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement elitism to keep the best individual in the population and enhance exploration by introducing a mutation operator based on the best individual.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6aa60b3a-e32b-4ad3-b228-2f7882301f33", "metadata": {"aucs": [0.6167091486987833, 0.6127403121227528, 0.6243248207419592, 0.6195562704342064, 0.6660963627110106, 0.6143217080275971, 0.6514890313462411, 0.6368010051119101, 0.6070701553602174, 0.19309557227793606, 0.15915153438864904, 0.1682567685317572, 0.2076416395782319, 0.13481274222717043, 0.25479665320031764, 0.17262159269025235, 0.23426490425471658, 0.25349621017021184, 0.0879238229217717, 0.14538886530754025, 0.138239943381266, 0.1492529443363939, 0.07264916207228667, 0.13519631870900817, 0.09175024885506411, 0.20961188604109193, 0.12270239130216998, 0.13645513136235188, 0.06577235583364271, 0.06697226793387379, 0.14301985763661818, 0.06561365868565228, 0.10875178993230517, 0.11750106385245984, 0.1275550639493287, 0.12965895766959423, 0.9407513348281474, 0.9438432645938947, 0.9772735937172429, 0.9327508387327019, 0.9204821433988891, 0.9313727346192867, 0.9221451037214456, 0.931100863497552, 0.9312145399677033, 0.3156949961826855, 0.3680401913475977, 0.3448439089314488, 0.292260867072309, 0.3823941201259098, 0.3861061571547362, 0.3606715336992795, 0.3281829677578635, 0.33064182521657515, 0.23532115407957876, 0.17981527416152765, 0.21897321499006006, 0.3715905009790925, 0.17772255241647927, 0.31041739279880176, 0.17326576892157408, 0.19507101814427208, 0.3506393992592056, 0.13892873069775447, 0.13492228382839944, 0.1498181645696417, 0.1243542933039109, 0.201241718704548, 0.16359929800661777, 0.22418654776150337, 0.20985026659700057, 0.11804995182813871, 0.18051139630218271, 0.10728833273328764, 0.17130669957785394, 0.144314991760639, 0.12209803638968975, 0.14513241619745443, 0.1287457013756257, 0.042880508035237797, 0.15712965547051716, 9.999999999998899e-05, 0.0003616377868589371, 0.02038111379427121, 0.024690118260008775, 0.0490518593282282, 0.058488513405759446, 9.999999999998899e-05, 9.999999999998899e-05, 0.08846374102450427, 0.050854079386353446, 0.04651946619294034, 0.08120069207191305, 0.07293082903130232, 0.013166966412532233, 0.03084561543121833, 0.08955839948753963, 0.08003107960232192, 0.13108330419220748, 0.0522170022737235, 0.056865409942562284, 0.05142504115291957, 0.06791123869094229, 0.08240559656178537, 0.0656795536401833, 0.05402655867062334, 0.0854275620939614, 0.007825412463658865, 0.07411653117028127, 0.07872083458041268, 0.10665688184813682, 0.09829239769644194, 0.05608323355578193, 0.15145130120554062, 0.16310210345286635, 0.1302724324898854, 0.01716173561640011, 0.5002593762256449, 0.47593469662392107, 0.49096385468986214, 0.432828262758416, 0.40509606648311225, 0.44922810103914046, 0.4571580240789793, 0.45360855072968775, 0.46094785600471255, 0.10346832249369997, 0.09206851406604288, 0.09423483392518395, 0.0764265231183564, 0.05987406712873966, 0.1589391033827633, 0.06243280278575891, 0.0843606502618206, 0.08154983596381082, 0.16900971763582662, 0.1999448612234922, 0.13573073827863424, 0.18200894107982213, 0.1777188045897108, 0.18723582998440824, 0.1759836472622195, 0.14438226949087585, 0.19982306723795107, 0.2826047645935582, 0.36335027638985784, 0.1332413393393308, 0.1903710808786917, 0.2050071868024378, 0.32641363366199216, 0.19586567881690442, 0.1828323448109378, 0.14481334809113144, 0.26983845414147667, 0.2103746002446225, 0.17578964997057012, 0.2817435631194207, 0.13554260370362337, 0.1509575950772032, 0.1463062093170292, 0.13676788210606605, 0.20903076923074937, 0.21699852192049396, 0.18035197227802724, 0.20663539874048698, 0.20126921216302285, 0.16111122778280518, 0.21766862781958984, 0.23173795883047743, 0.2060798235638741, 0.24283430331629197, 0.1890549411206901, 0.19583744110965995, 0.20541701078437669, 0.21509229945310904, 0.20770403914083235, 0.18249800247343428, 0.19207635485393293, 0.2114861408398785, 0.20154065823839973, 0.15761523160427515, 0.10022151322962514, 0.18750889002147164, 0.41393052560534804, 0.2022503425869686, 0.14758668513732986, 0.15161096605074487, 0.12495131064162723, 0.16318683147614355, 0.37234352316899644, 0.5374626729843319, 0.20719197615725993, 0.4134961470320292, 0.6516966577295908, 0.20749740563108976, 0.1597484136605668, 0.15487804672715644, 0.34041727050076853, 0.24939432247286697, 0.2068605154728066, 0.18509915436902447, 0.1914488872067257, 0.23710828076494217, 0.23266340140266395, 0.1973358901922987, 0.20386752221996363, 0.18603916106279061, 0.06657167627351102, 0.07655131336729737, 0.08153158824297768, 0.07623119426785285, 0.08966909564630365, 0.07696422209965914, 0.11634114377508065, 0.044791207126878674, 0.07558079404162277]}, "mutation_prompt": null}
{"id": "d783f2db-3eaa-435b-8ee0-223a50095962", "solution": "import numpy as np\n\nclass DynamicMutationCrossoverGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        crossover_rate = np.full(self.population_size, 0.9)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim)\n                if np.random.uniform() < crossover_rate[i]:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                new_population.append(child)\n                \n                # Update mutation and crossover rates based on individual fitness\n                best_fitness = func(fittest_individual)\n                individual_fitness = func(child)\n                if individual_fitness < best_fitness:\n                    mutation_rate[i] = np.clip(mutation_rate[i] * 1.1, 0.01, 0.5)\n                    crossover_rate[i] = min(crossover_rate[i] * 1.1, 1.0)\n                else:\n                    mutation_rate[i] = max(mutation_rate[i] * 0.9, 0.01)\n                    crossover_rate[i] = max(crossover_rate[i] * 0.9, 0.6)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "DynamicMutationCrossoverGeneticAlgorithm", "description": "Introduce dynamic adjustment of mutation and crossover rates based on individual fitness to improve exploration and exploitation balance.", "configspace": "", "generation": 46, "fitness": 0.15205891553173387, "feedback": "The algorithm DynamicMutationCrossoverGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "6aa60b3a-e32b-4ad3-b228-2f7882301f33", "metadata": {"aucs": [0.3559198166343859, 0.43484993674043204, 0.3296249952955993, 0.3421471539112022, 0.3211472906458671, 0.262923095343062, 0.35787411622794063, 0.38270346861309423, 0.4373017204458476, 0.017809315420625582, 0.036682043488319827, 0.013366473425991399, 9.999999999998899e-05, 9.999999999998899e-05, 0.03421057578260189, 0.010683228101909803, 0.006983625935271243, 0.059054813545125984, 0.06664788149966894, 0.05640812866512801, 0.09367895881002497, 0.1054724859467655, 0.0807650716858852, 0.11046306365087444, 0.04669334177385265, 0.0723520160799479, 0.05437485812588383, 0.08078669719370968, 0.026502004023625347, 0.0705007080674237, 0.10624866680129419, 0.04974127899618708, 0.06293931739419023, 0.08308478949231757, 0.06327137546636985, 0.050927344162058796, 0.8132921552925367, 0.7247128543316081, 0.8672209468599167, 0.6394472945684984, 0.7211676636841436, 0.750255977954009, 0.6991834728645983, 0.7510940069584071, 0.7500461515641769, 0.11929539720180893, 0.11811562681998333, 0.1134649953630158, 0.11327189576728847, 0.10233806105610255, 0.10494739857202318, 0.16000718586814433, 0.13134632164120064, 0.07761373076840339, 0.13707462723655572, 0.11016980249374464, 0.11754069669732814, 0.16701562410120163, 0.13344178100207627, 0.15069916762606284, 0.10487080806527849, 0.15303074530090466, 0.15469482137432655, 0.08899083267392671, 0.07767746837687262, 0.11315698487168413, 0.0985700731821273, 9.999999999998899e-05, 0.2168793745401425, 0.13432492476855373, 0.10604262528244546, 0.11169735829459204, 0.020911250937800663, 9.999999999998899e-05, 0.1549171494877517, 0.12165954546042956, 0.0712868133045873, 0.10373456772583811, 0.1271864613353899, 0.03340688035814543, 0.1019766855073524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06212715715965733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06307430376078138, 0.0018605583556258187, 0.05732016604349921, 0.060479505304589454, 0.0006339654721710941, 0.020753568179008974, 0.16369819177056366, 0.02274991458679998, 0.03881710211800127, 0.058780308126308634, 0.0060777039594438476, 0.03636225054446274, 0.020812789468366066, 0.02752285104388197, 0.0059551352899063215, 0.0705013143450336, 0.019343957862141048, 0.0019837767022189423, 0.019781619266697414, 0.03954969706616318, 0.06403008940609978, 0.10554723296048252, 0.0730659498330859, 0.0740864189687298, 0.01837721133151604, 0.02666930615348506, 0.01693207729735735, 0.30202381105160225, 0.3005228282022344, 0.37449454629331536, 0.29895556508774745, 0.34696558949811684, 0.27402784068224073, 0.3289143811577798, 0.2548261490933994, 0.2891498625099461, 0.04678917563759044, 0.05492839276314776, 0.04564464005118629, 0.10593617872374672, 0.07227249965934301, 0.12259027113419485, 0.05184530764068096, 0.050295156077999725, 0.08092835269329623, 0.14315599207273333, 0.12624189146231624, 0.2095175809725719, 0.14038042192931666, 0.3215184458271053, 0.15368346702032998, 0.13824252123988556, 0.12251042748939056, 0.11622965276324793, 0.17199316909801932, 0.20095661940606668, 0.17480075814301432, 0.24767440507087457, 0.13336490654310496, 0.13648442675450445, 0.1855368104789733, 0.16251389823326878, 0.13088776784972211, 0.13467841998992303, 0.12356065205464817, 0.08159762865052067, 0.0749244161257624, 0.1064240874379746, 0.1888423306626722, 0.1069701104451044, 0.07621611295954822, 0.046173626565358616, 0.18426292150378032, 0.16105446381792476, 0.22435837310790097, 0.1736326755462263, 0.2244357944554849, 0.18772265914075015, 0.20406563676164546, 0.1586354758021522, 0.17985634731631583, 0.16370707579562604, 0.1741340145720882, 0.19757958661344843, 0.1668446761916328, 0.1323753649615601, 0.1645323823731918, 0.1476910833975733, 0.16633768472033628, 0.16518104994231853, 0.16103262815604957, 0.09346780571420787, 0.10064775657189895, 0.41143989832777517, 0.2009821671703913, 0.089298983150644, 0.1158417443493045, 0.11359979962274558, 0.12271637151918857, 0.5612292508300766, 0.1846061724008331, 0.13151536287357302, 0.21388326582257666, 0.11727158170097896, 0.15208215631229627, 0.15560106524704298, 0.14363470445540405, 0.15870338381958105, 0.1721330820819369, 0.17116664119387637, 0.22822867087251897, 0.23390718324319237, 0.2518614030141544, 0.19623738189779338, 0.1951859038414353, 0.20277750744502887, 0.23917188034943315, 0.06808347412131444, 0.08422760752277048, 0.06570542484537656, 0.07394057594214809, 0.07519893349281304, 0.08433624997255063, 0.08757436014907749, 0.07513173958320551, 0.049693289108290295]}, "mutation_prompt": null}
{"id": "32e45924-c835-4584-890c-0d9e89283cef", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 47, "fitness": 0.22947247445106525, "feedback": "The algorithm RefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "6aa60b3a-e32b-4ad3-b228-2f7882301f33", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "69a77830-f609-4525-83f7-11ce08cc8fd6", "solution": "import numpy as np\n\nclass ImprovedRefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n        self.adaptation_rate = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + self.adaptation_rate*(fitness[i] - fitness[i-1]), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "ImprovedRefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Improve adaptive mutation rates based on individual performance and introduce a dynamic population size adjustment strategy.", "configspace": "", "generation": 48, "fitness": 0.22794084399791892, "feedback": "The algorithm ImprovedRefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.6238269396137675, 0.649528042282291, 0.6374399201539072, 0.575590021860353, 0.6526266005988219, 0.573003884438664, 0.577183643059163, 0.6182271986790921, 0.7215065233965047, 0.28599196258660975, 0.08848708275736972, 0.20672969918789463, 0.23584267183848273, 0.13794986813370325, 0.15415629449636947, 0.22579762152242677, 0.2615185264557194, 0.27704935861525837, 0.10921355600213989, 0.15690061409106004, 0.08026450552383957, 0.13366088302303325, 0.1425522726443642, 0.12170050759456985, 0.07513286519502815, 0.16138267439387077, 0.13831099148683446, 0.11547476957410252, 0.15170299629304718, 0.0762703802532686, 0.12107182970658237, 0.09601702389328837, 0.09593977806996767, 0.13224164661786586, 0.12801977861710478, 0.11619267759528484, 0.9243927639537659, 0.950268230304784, 0.9449048017977244, 0.938651004821059, 0.9564408059849194, 0.9702864605326318, 0.9369565704605934, 0.9663949023570685, 0.986222456451852, 0.3750294390070763, 0.3257370737972909, 0.368596585312454, 0.33265319786681347, 0.39270611013533185, 0.3366290738310881, 0.39561117216553343, 0.3638386702153701, 0.34842756358116134, 0.22867922117450235, 0.15536234255854886, 0.19706937626863785, 0.23741547597445933, 0.24551872512721995, 0.2062044626619458, 0.1841493234949434, 0.18311359094395607, 0.29094160369353317, 0.18117064777000946, 0.13602399813991795, 0.1462249361332233, 0.07880248154384151, 0.125010150320231, 0.16395986390783324, 0.3363124671399087, 0.1457489531883066, 0.1611971385993446, 0.13426775356560283, 0.10459547977415351, 0.11956118468752663, 0.13038965421855286, 0.12545380756510582, 0.15280838344250913, 0.13605506042137017, 0.1392127131038151, 0.1628927145601765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013705258358318484, 9.999999999998899e-05, 0.0016912703103398874, 9.999999999998899e-05, 0.02010646377232983, 0.07624068212279511, 0.0320397399475818, 0.08606856651593098, 0.06773080778514284, 0.004414368305023397, 0.031439922590993374, 0.1806724987361178, 0.0894604623572306, 0.09224554720146194, 0.06987736948659529, 0.12799263543860817, 0.10780097148399614, 0.02262287800527174, 0.05909888945841413, 0.11338035692288284, 0.13544137322155836, 0.14562429019822043, 0.09904676293884862, 0.06632096754042482, 0.06199090795087536, 0.0804607025479891, 0.14132111843519435, 0.05591502894317091, 0.22525013142717432, 0.006566776613924241, 0.1685798003279908, 0.023589405746359038, 0.4349101748465205, 0.4218543877490155, 0.47149462752785, 0.4582552510546798, 0.4402529722429698, 0.47100188879879146, 0.4276537906538197, 0.46276934038922946, 0.463401069765069, 0.0488688152468727, 0.10437516121546342, 0.12097188739509634, 0.08966839021668183, 0.10871027524409493, 0.11967391557271112, 0.07916087120475424, 0.07982969761194403, 0.08431929990468778, 0.18340762099631724, 0.1653090705642557, 0.24851649531865883, 0.26105414193043175, 0.14483751640623976, 0.15972926557350842, 0.16929108890936462, 0.20885927442161933, 0.19309450367120595, 0.29374539422174006, 0.22681847044280035, 0.2707822316186661, 0.15305213051159916, 0.17521968037073254, 0.15668135991896237, 0.1952837105144708, 0.22716153875521516, 0.1409428080759917, 0.13334447448757514, 0.18974762310293092, 0.17002683350614867, 0.10864443495371101, 0.15607022538558957, 0.3093493909250383, 0.18489181000479893, 0.1467791970089407, 0.15733860810222977, 0.2053135683653069, 0.17161869277441133, 0.19423414883565382, 0.23529486646844067, 0.17929662952495595, 0.2266505936287515, 0.22557202334558124, 0.2144021577554006, 0.18222469708605582, 0.19362033764761422, 0.2022315701420302, 0.21943133545676297, 0.2503659777533628, 0.19374456529311246, 0.17850766119203798, 0.16331031361482273, 0.19424334960465217, 0.21393825089565566, 0.17552474915597482, 0.11031430732355563, 0.13345616147828077, 0.8353635428273154, 0.20004205021244903, 0.11461905131730221, 0.15091966370985355, 0.12200749011252388, 0.15823985784736816, 0.08317574125550731, 0.10953144260822101, 0.4948639505498773, 0.38908405099030663, 0.12775224221346126, 0.20966549108201493, 0.31007936307997674, 0.14577466097124014, 0.2912995196114072, 0.24785232573505933, 0.22990370486359424, 0.22674918039422787, 0.2207555991741964, 0.21123423466503877, 0.23353915829383165, 0.26364529627841415, 0.21942102581056866, 0.2322391190806382, 0.07979032805982333, 0.078869836088036, 0.06663023865918039, 0.07906026160520341, 0.1488061746667796, 0.09932909879515117, 0.09604487902829972, 0.0847717559076887, 0.11002533687641158]}, "mutation_prompt": null}
{"id": "4b0d4652-88f2-4774-8cce-e5cdaffeba9f", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "2c5135ff-391d-4db1-8077-fc631c4403bb", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "c1ab22de-3c6e-4d60-b69c-a43c34f773a7", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "cd8a7a28-388a-4548-a276-2a30eb5021b9", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "9c75829b-4437-486f-b8b5-462db95986cb", "solution": "import numpy as np\n\nclass CrowdingEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n\n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n\n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n\n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n\n                # Crowding-based selection\n                crowding_dist = np.linalg.norm(population - np.mean(population, axis=0), axis=1)\n                crowding_sorted_idx = np.argsort(crowding_dist)\n                selected_crowd_idx = crowding_sorted_idx[::-1][i]\n                new_population.append(population[selected_crowd_idx])\n\n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n\n            population = np.array(new_population)\n\n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "CrowdingEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Enhance diversity by incorporating a crowding-based selection mechanism to maintain a diverse set of solutions.", "configspace": "", "generation": 53, "fitness": 0.03079676869890099, "feedback": "The algorithm CrowdingEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.04.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.07181397830146763, 0.06432772651221763, 0.08237988959495246, 0.019583725566517884, 0.05267361210777377, 0.025288696900545027, 0.05140423906395497, 0.05163064099738546, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07840071328182474, 0.1070271971752389, 0.14838054695461433, 0.09425923977458062, 0.08051072568095674, 0.09580441870675127, 0.1240568991094797, 0.09716408355800721, 0.1210557193025883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.06735693451091307, 0.05468846648487902, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.05497932156064522, 0.04855804829477728, 0.07726393575557644, 0.09606267484187503, 0.0962505644704219, 0.10359778603806002, 0.10847166301008526, 0.08299910073640826, 0.08326325451723493, 0.11420206329748472, 0.1001363042967901, 0.07784834048331069, 0.033318937593247444, 0.030850512655025697, 0.03464785118471059, 0.044650675553987496, 0.0154886331024634, 0.037140780888393565, 0.05648699256316181, 0.038530072755655564, 0.011873768353786729, 0.0916346253723066, 0.06032920214938475, 0.11089882950468877, 0.10289055837941885, 0.06747178230817008, 0.08176222879441697, 0.12245976138762271, 0.06494044806858634, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04385307240429104, 0.056143274529988574, 0.05626128006000852, 0.06718871428537254, 0.1207914665021157, 0.061750941843425444, 0.06088618922663591, 0.056615725614002965, 0.053674301379695866, 0.03824121102611444, 0.03967402848431323, 0.016401521055428026, 0.018606112313171663, 0.021600351495484005, 0.045511073114331335, 0.018965050090669178, 0.0158348977852244, 0.04143420019681854, 0.10096019244302157, 0.12017502569002791, 0.14763022729669195, 0.10735471808377628, 0.11402400224796383, 0.12465113207635137, 0.10056325222828677, 0.10862764757569365, 0.14689007985489466, 9.999999999998899e-05, 0.012204213037243616, 0.031393493129599714, 9.999999999998899e-05, 0.0058749879062220955, 0.00826091239954263, 0.00378771705097114, 9.999999999998899e-05, 0.007003257745281877]}, "mutation_prompt": null}
{"id": "a842e44e-4623-424a-bbfb-91ca5ca1d388", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "f3ef3293-16b4-4a29-8ada-78e258869d96", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "04b8b26a-6295-497d-aa0b-95922e72ce0f", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "711bfbcf-ecee-4e3d-ab5f-bfb788fed369", "solution": "import numpy as np\n\nclass EnhancedMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    scaling_factor = np.mean(fitness) / (fitness[i] + 1e-6)\n                    child += np.random.normal(0, 1, self.dim) * scaling_factor\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedMutationGeneticAlgorithm", "description": "Improve exploration by introducing a dynamic scaling factor for mutation rate based on the fitness landscape.", "configspace": "", "generation": 57, "fitness": 0.20680363971862106, "feedback": "The algorithm EnhancedMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5919822859187476, 0.7400850876091816, 0.6120393077176929, 0.5924927505513347, 0.6026966030784588, 0.5647178662031762, 0.5577207805158239, 0.6990225069946792, 0.6026633098738916, 9.999999999998899e-05, 0.02799670320079617, 0.012090535685195358, 0.13381217659038425, 0.0450768857394227, 9.999999999998899e-05, 0.00886915254297127, 9.999999999998899e-05, 0.019007237109957553, 0.10811891358354353, 0.13732148287756085, 0.053465128077319735, 0.1260045976396963, 0.09758434853854125, 0.15396066178862033, 0.0842522478502924, 0.17355522532756662, 0.12342545125784732, 0.061067285602657506, 0.04647698252098875, 0.09883907197797293, 0.10093267007744255, 0.03172442965877431, 0.10228705203480204, 0.09599472384640118, 0.07242782064425624, 0.10015638445684849, 0.9536905007864065, 0.961993042569298, 0.970497724556307, 0.9219058357365517, 0.9183438961150121, 0.9528224659350106, 0.9290361063510799, 0.9286139489838673, 0.9270436021017526, 0.31493605351958254, 0.28806131717721994, 0.16944858754693937, 0.291324227033242, 0.3319660323996021, 0.27248023063924154, 0.3125704739944172, 0.27238352003979094, 0.11492711005496281, 0.2872834153471605, 0.17146166758319992, 0.19511510485576833, 0.2741783352018897, 0.23528796636527738, 0.1588360133074248, 0.14166730148049844, 0.16291835993120696, 0.16291877829271995, 0.14575555018177078, 0.14678790103006445, 0.15993465327470513, 0.13209429182832955, 0.13104886592534182, 0.13778084414423097, 0.13481655005374704, 0.12542954821444197, 0.15551545248496645, 0.1873340874951679, 9.999999999998899e-05, 0.1568046263759989, 0.17383246402101338, 0.14352796828522008, 0.14636278098889766, 0.19295403469632477, 9.999999999998899e-05, 0.16619763473398053, 9.999999999998899e-05, 9.999999999998899e-05, 0.005997367454868452, 0.03345411916431207, 0.00837905489629831, 9.999999999998899e-05, 0.0001700699088341695, 9.999999999998899e-05, 0.029435196700644317, 0.03889763832542481, 0.02516377036047146, 0.06304042366510965, 0.06571373143898296, 9.999999999998899e-05, 0.018805744967852256, 0.04388658059845907, 0.018721884223527052, 0.11973683125959833, 0.05854111803378892, 0.007651368043346318, 0.016325512562915923, 0.033924608002198875, 0.0715205712624738, 0.022950432610924554, 0.002882599190879076, 0.012508202755291298, 0.0488707320959364, 0.03776157521332457, 0.08130826525519352, 0.08267544642245106, 0.10928585364278276, 0.014040866707562216, 0.12469694043970214, 0.19204986422395964, 0.11776882918569409, 0.0715567848885128, 0.4557027759271929, 0.45585312746466755, 0.5314782688993608, 0.3902224677902919, 0.4851438510371183, 0.45687259208373554, 0.4542762922814948, 0.47195073578453073, 0.47323084471670895, 0.050996098887691965, 0.0571381209971229, 0.15210847704632102, 0.1574785980722292, 0.09341712923961809, 0.09869989833834969, 0.08041773563418597, 0.0316403272273561, 0.0724225175181673, 0.184658505765519, 0.19594371287988022, 0.2396099458749258, 0.34152356964144237, 0.17137977634725032, 0.21899352365836544, 0.1689453281064458, 0.1863472639489856, 0.18662697536898654, 0.11208780882746017, 0.28166970967560634, 0.14499841191696816, 0.32342739691492484, 0.17470118343987484, 0.21918981091716516, 0.18819069261551846, 0.18932972189465458, 0.14698213194770537, 0.09215910701230656, 0.0771589955882016, 0.0886393015386635, 0.19459265239165535, 0.17202685711944143, 0.17903808331426774, 0.2009033625681549, 0.16345703127303768, 0.205381831788488, 0.24112512294749366, 0.17805001717279934, 0.19877618010105846, 0.2312916065762668, 0.17826667231243842, 0.2021018176425693, 0.16345926570085523, 0.2113554388616783, 0.18854212724609487, 0.2033848826060063, 0.1768955883400931, 0.1621151268530293, 0.1839059038428108, 0.16663409457661915, 0.18115465394470132, 0.1526346883087163, 0.1881495975783416, 0.16930250034084748, 0.15992806254867298, 0.10052347799422878, 0.8532024371955604, 0.17307133922803608, 0.20170072410038165, 0.15792528368406056, 0.151522155153628, 0.1241217174049829, 0.16249456190047207, 0.3552957092625463, 0.5088444746373132, 0.20592628474831043, 0.4052449375852544, 0.5771657200040367, 0.20755094107006322, 0.16291792948198347, 0.15477890182998832, 0.0945214243689243, 0.1973684502323424, 0.21802259148369674, 0.2050375437666414, 0.20083972710822295, 0.17395605516043633, 0.18227706330930937, 0.20067409665318936, 0.20022947369802202, 0.20441682134382932, 0.07977599776744537, 0.039165086460977716, 0.059130422294856766, 0.09397333591297552, 0.03362654947656196, 0.052067922316644255, 0.0719748840650174, 0.05598310937818296, 0.0356946081271039]}, "mutation_prompt": null}
{"id": "5c34c638-1b0c-4b90-88c6-22d3405f9a63", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.argsort(fitness)[:3]\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic selection of parents based on fitness for crossover to improve exploration and exploitation.", "configspace": "", "generation": 58, "fitness": 0.20162843442742967, "feedback": "The algorithm RefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.505859039687858, 0.5223441636726124, 0.5858906590165568, 0.4964650967878207, 0.5472859134285984, 0.5369762359538861, 0.4889634271599783, 0.5076705429354034, 0.5248549358119549, 0.14454870009887288, 0.1120274124686308, 0.1203625710860533, 0.1714774499129258, 0.16259887902200065, 0.16790465783040798, 0.16269563703186563, 0.1327282594351098, 0.1895923908162246, 0.23263075985659498, 0.1532251844901582, 0.13598997307035565, 0.14752222881942212, 0.1458229071028292, 0.13943164518776574, 0.09712145498075864, 0.13228085605559847, 0.1376015668378846, 0.1457200067533846, 0.10016201224006405, 0.12435603644671533, 0.17110375990024496, 0.05471196856346361, 0.11913469947331323, 0.10251430988186316, 0.10153183578582425, 0.13835148355360039, 0.9408574610671409, 0.9113074227044683, 0.9534628008153735, 0.9586560457507123, 0.9332434952172002, 0.9550766329315049, 0.9433738813607149, 0.9278534536227919, 0.9362469512098772, 0.286166994453098, 0.3618356954631078, 0.3445819913240955, 0.33904557767097465, 0.26187727392280236, 0.2527297777884, 0.28542961486122875, 0.35596782562168405, 0.2917704880383444, 0.21315007331123081, 0.1753144046906615, 0.33320580767597485, 0.16453549883725316, 0.24538826969682148, 0.19723292561212524, 0.22511434664277175, 0.21183697383967814, 0.13248450069323048, 0.10698417209416511, 0.12644970731150984, 0.1269028046898809, 0.12955160220248052, 0.12093997640601972, 0.10769137432846276, 0.16436172651931824, 0.11553769867213892, 0.15353256506461077, 0.12356206880534393, 9.999999999998899e-05, 0.24150859289752458, 0.12965872130999145, 0.1402903930581475, 0.13058875249232083, 0.1643583757372673, 9.999999999998899e-05, 0.1304685829725093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00118422786863559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10629023489022948, 0.02385429664474792, 0.06821615327282449, 0.06382945985542443, 9.999999999998899e-05, 0.007895580380439915, 0.22179128545864524, 0.06973246171683589, 0.058850646914542115, 0.0031333775244922757, 0.004581018044292451, 0.0212353172182842, 0.009148533251669866, 0.018881080691589336, 0.03373043306282375, 0.009346122552501446, 0.006031394098357845, 0.033937182500133334, 0.13812867666884354, 0.12285667379009879, 0.05472833437862579, 0.16467057796898366, 0.028923719140565685, 0.10791158273441759, 0.12487965327234929, 0.1631413824970327, 0.02649665479673735, 0.4309418438296142, 0.41874733036533185, 0.4418739232817678, 0.4205143114728789, 0.4068699781977967, 0.4338285144834688, 0.4225240148535905, 0.379802152905796, 0.41375823642015774, 0.05277086243691287, 0.06265180771950696, 0.042717490893478316, 0.08970359504633019, 0.05301684635764414, 0.08126818885621756, 0.048856486774540686, 0.04123299301898309, 0.10895699922625879, 0.19700631380414468, 0.18670881844591536, 0.22135590992685739, 0.16673382170584683, 0.20562275038405609, 0.2182463043045254, 0.24410785394103207, 0.17588551265217356, 0.2730383601837525, 0.12781832886239608, 0.20190064269446106, 0.1593958322952852, 0.21371984016457157, 0.150565297546281, 0.15815719592309596, 0.13897743265207285, 0.1535497345979686, 0.09849313831518336, 0.12546280791255082, 0.16674653794346017, 0.1139376522687211, 0.22958445572416353, 0.13456902345549437, 0.13138893550217912, 0.14219543892129727, 0.14560680963720174, 0.1547388661322191, 0.22024498232302026, 0.13048215593748824, 0.16288304459431724, 0.1773063249559509, 0.13713999260337262, 0.18483327290371776, 0.17777047105206178, 0.15372013195522993, 0.17462436851526586, 0.18338798336009232, 0.18054302717708814, 0.24184813271726502, 0.18066852875275763, 0.19656362254349957, 0.17412671186072348, 0.17488483144758193, 0.18402896291590842, 0.18062703985398987, 0.14158378549429163, 0.07613497240874967, 0.12527922313907125, 0.5978435483409537, 0.20112669432267472, 0.12705306690094753, 0.15004290347863058, 0.11336135770389844, 0.15321395131418303, 0.08271269839504602, 0.11166805772150346, 0.5058099373544507, 0.35552426469890275, 0.13084802600504664, 0.2044250682104385, 0.16376718246590993, 0.15577565083170142, 0.22311344582875237, 0.19378038733007286, 0.17694563284153775, 0.17477522989412553, 0.1820373877310355, 0.18824842010767207, 0.17943006160903496, 0.1841553297331906, 0.17313528237589237, 0.19274772634542636, 0.07640001342832603, 0.06785606816849554, 0.06327136373628806, 0.059997480446053464, 0.0957194224164859, 0.04037856052989841, 0.08409125034723897, 0.05017785612632375, 0.043979729300356096]}, "mutation_prompt": null}
{"id": "56ed58ad-4ef5-437c-9aaa-14b108281442", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "dc5351e7-0e3f-45bc-b07d-ee2af0031ae1", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "4d54a6c5-fce4-47a9-9f70-9771bfeeeeb4", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "6fd230f3-79ac-4938-9f5f-80ee483cd122", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "48a19b83-7a87-4de5-a677-f91a280cc1e1", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "aa13bf96-8d8c-4613-84ed-1cc6a5de5fbb", "solution": "import numpy as np\nfrom scipy.stats import logistic\n\nclass ChaoticEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def chaotic_map(self, x):\n        return 4 * x * (1 - x)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    chaotic_values = np.array([self.chaotic_map(val) for val in np.arange(0, 1, 1/self.dim)])\n                    child += chaotic_values * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "ChaoticEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce a chaotic search mechanism to enhance population diversity and global exploration.", "configspace": "", "generation": 64, "fitness": 0.19621538686877618, "feedback": "The algorithm ChaoticEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5703832718992985, 0.5539571033188484, 0.5827035614821802, 0.5659745996149219, 0.5728555403698703, 0.5386937047206304, 0.583812353761411, 0.6116420248211986, 0.5809405683263498, 0.22149763430332137, 0.055194981823280975, 0.07714634569640988, 0.15004693357952814, 0.03755473609246651, 0.09802490533973307, 0.03890272427579333, 0.1076599199510423, 0.12175578892735306, 0.09478469407147116, 0.08356233052036854, 0.10093596855977793, 0.10241745994297347, 0.07840573272408524, 0.17021882963888402, 0.05506096827819651, 0.14583654172213045, 0.15109240814863956, 0.10058212411501388, 0.03872233583235429, 0.10750202207698334, 0.11106374502981342, 0.039602979215151435, 0.12617239007502157, 0.14194286041817172, 0.05144285442853613, 0.12145951943847977, 0.7724103741582927, 0.718104119130063, 0.9399512250434674, 0.8130387072356882, 0.7196290455175234, 0.9073102791031876, 0.6416288109143924, 0.7826911451989331, 0.6237419119464531, 0.2944878509773736, 0.2466863787979381, 0.19761383485941664, 0.21336374207747721, 0.3317669106395822, 0.35128302351106344, 0.25769204906474863, 0.22155997022394636, 0.30896830977632106, 0.17438693655653992, 0.19880813861814817, 0.2403536535312456, 0.3567608775725096, 0.2701697241946487, 0.18269675304355326, 0.130714799576499, 0.1585900081536532, 0.168987673041595, 0.14088863846021615, 0.10612166486815222, 0.16174586753849307, 0.18050286104064395, 0.16220342452311254, 0.30427854316058156, 0.13571771763433538, 0.129821124006944, 0.3034217104749741, 0.22531265948700918, 9.999999999998899e-05, 0.13264149492230592, 0.12979277310005455, 0.12796412678511404, 0.15442189372879567, 0.197643305066315, 9.999999999998899e-05, 0.12998735318167676, 9.999999999998899e-05, 0.0024081448542139228, 9.999999999998899e-05, 9.999999999998899e-05, 0.049482351979924344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015366113372247137, 0.10322851518368736, 0.023049820646253605, 0.09821564553208029, 0.09014180480490175, 0.026146858924859462, 0.04499479706849452, 0.07158089254275524, 0.07433734633161204, 0.0866778544957959, 0.0421923603657306, 0.028946546694915032, 0.10458542783709834, 0.05193813601582209, 0.009951140789977386, 0.0683615002349175, 9.999999999998899e-05, 0.1621815200857898, 0.018564059602646177, 0.10375194845057756, 9.999999999998899e-05, 0.10724778324288187, 0.05794734655872069, 0.14344962617429213, 0.02480556041704418, 0.07718206957482676, 0.16999443785657642, 0.014855972068627543, 0.48852635342350237, 0.3840076857130311, 0.4904585850586508, 0.44752411491936905, 0.37418158756162334, 0.443897828528235, 0.4456138269044848, 0.3839607277987903, 0.4509065621363304, 0.04150205906590532, 0.06440563860758097, 0.059322068351331136, 0.05150081895675851, 0.05389221667016231, 0.06900508987843601, 0.028908433414169155, 0.039177199405089014, 0.07285969789250979, 0.27686909045245234, 0.183942539721637, 0.17315533463127963, 0.20301112843560976, 0.3319877518424911, 0.17511199402655397, 0.186402476353846, 0.14635452227796364, 0.2654138101451813, 0.12565898537844078, 0.23681407910692576, 0.20112674783662987, 0.14662840716952996, 0.18391907710409405, 0.161020903158675, 0.1871298560161948, 0.18886714547410677, 0.1289017756939409, 0.16383733772406472, 0.17601335053849965, 0.10311141774716592, 0.1380229232367638, 0.12058042907848299, 0.20373596932188953, 0.1204621117570559, 0.16169973282846772, 0.08415850284302195, 0.20760733807610599, 0.15508162204938503, 0.2005528769881062, 0.17137841120367392, 0.14615684528206074, 0.2106456690436429, 0.22227526505280004, 0.1586970364604645, 0.17587317423629045, 0.1872204864275956, 0.22321280542258504, 0.19602931051888794, 0.19045601815069013, 0.18148398465333238, 0.1816062484625841, 0.18626124646809694, 0.19808069075170143, 0.17785678211365175, 0.15846305719612896, 0.09931529653546844, 0.7657711345254041, 0.17333561402994968, 0.20195060017893052, 0.11671587672128514, 0.13764142846559502, 0.15218402361185346, 0.14707402673669423, 0.0791606678650909, 0.10828436209806569, 0.2990621521050021, 0.39803706371077363, 0.0514544547987551, 0.20279653162558242, 0.25681958356988166, 0.1673282386973287, 0.2390437713272231, 0.21413808493078734, 0.1865783906035685, 0.1986672658963763, 0.20198208884549418, 0.20413239299366437, 0.20179561522531864, 0.18819443057933727, 0.2253498838019593, 0.22225909044347802, 0.05597129247173849, 0.05737449770415748, 0.08154175357816096, 0.03141627770228084, 0.0888530189475003, 0.060742615451685245, 0.05483665836519935, 0.05807100548709332, 0.06794765862533625]}, "mutation_prompt": null}
{"id": "8e328072-f9b1-45d4-83df-79b807b0e638", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "6f2e6c65-e15a-4bde-abf4-3b7c10d2d860", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "f4db82da-6891-46db-885d-c51477285537", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce crowding distance selection to encourage diversity and prevent premature convergence.", "configspace": "", "generation": 67, "fitness": 0.22947247445106525, "feedback": "The algorithm RefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "894f034b-42ad-4cd5-a439-3e8a19b3c55c", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual based on success\n                if i > 1:\n                    if fitness[i] < fitness[i-1]:\n                        mutation_rate[i] = np.clip(mutation_rate[i] + 0.05, 0.01, 0.5)\n                    else:\n                        mutation_rate[i] = np.clip(mutation_rate[i] - 0.05, 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce a dynamic adjustment of the mutation rate based on the success of each individual in the population.", "configspace": "", "generation": 68, "fitness": 0.2200629209478535, "feedback": "The algorithm RefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.6643866863308359, 0.6317075659810043, 0.5786278833468053, 0.5786902600210477, 0.5967932764034503, 0.6497929641323617, 0.5810647898035421, 0.5974796208694799, 0.6053894438287712, 0.2432104048836613, 0.31395421151103, 0.14754304398273577, 0.07467726455747437, 0.11819995297434749, 0.07081087249299511, 0.0296998466393108, 0.27702469661721685, 0.13644178350538572, 0.1817772110416921, 0.11603478618933094, 0.10451820636184928, 0.08608031126591009, 0.11244740361729888, 0.14123415700157982, 0.09129218822471918, 0.1146401092731123, 0.07378156469538277, 0.1401911329251001, 0.06211119092262585, 0.09093548459882528, 0.14893825754939938, 0.06779348888090642, 0.10070650641576506, 0.13757151929795675, 0.1568152439034015, 0.08755696644955546, 0.9359620943132158, 0.9469601526613585, 0.944565701980252, 0.9228325287724484, 0.9266883873389804, 0.9366345101378316, 0.8737901151504801, 0.9258602640120189, 0.9497372617557867, 0.3637595031850359, 0.37070464604722986, 0.35346601938341793, 0.4020235003742815, 0.3484634610931818, 0.3589034067294413, 0.3470478052300515, 0.3112114327562222, 0.3056543297007571, 0.20537670157435017, 0.13034197221225352, 0.16771566647115765, 0.21149740937274086, 0.29276415426904634, 0.22197663168763682, 0.20751201387154472, 0.20962722386658073, 0.16669268775107315, 0.15429735305664471, 0.15756098249823103, 0.1978446197874575, 0.1659667586125766, 0.15231016509288164, 0.20070680741964642, 0.1726011190913589, 0.09144682303505813, 0.15521364022274753, 0.20720359058495275, 9.999999999998899e-05, 0.13305031532239175, 0.1334742024034835, 0.13792284990452663, 0.13025994134506036, 0.1465913762217138, 9.999999999998899e-05, 0.1412116010272062, 9.999999999998899e-05, 9.999999999998899e-05, 0.04054887294505949, 0.0011268887986035647, 0.06460715952458285, 0.05143890581978683, 9.999999999998899e-05, 9.999999999998899e-05, 0.08681526807799733, 0.1654346929043189, 0.057250403122951266, 0.1021418271734914, 0.07836740974215772, 0.009682158681457609, 0.04118539422424006, 0.20909801139964146, 0.05861863595642536, 0.0725788945741026, 0.027672762083613245, 0.0771359535269327, 0.0984226874398566, 0.05036563733598287, 0.08580906173546488, 0.06775091890179197, 0.04318559974572289, 0.04873199392287175, 0.04830120620186695, 0.04810895506455559, 0.03634288035943445, 0.1670853451985369, 0.08906679815304741, 0.1595552435866483, 0.10208012542744094, 0.04052840762878096, 0.10633556697889146, 0.04147834390886529, 0.4279217218693354, 0.4634495534544122, 0.4893875953255853, 0.4575636725756502, 0.4397590458230737, 0.48366707142109255, 0.5689358299050123, 0.416991832786764, 0.4395874899044653, 0.046830712866941626, 0.047601203064164155, 0.08309762974666723, 0.07846094607747378, 0.06648607385332761, 0.08444427386830589, 0.0720597362061195, 0.07482235421258998, 0.075450761385505, 0.21213249449930816, 0.24233247890371523, 0.21137072874662288, 0.23440839570257088, 0.21179923302643644, 0.21040089060854983, 0.18915305767137125, 0.22942568867026747, 0.23525006423331762, 0.23713673172229133, 0.26427867437184305, 0.14410969550154518, 0.24267613192656035, 0.21708275554502665, 0.18186558569067146, 0.22198344349435806, 0.1696776067067367, 0.18372942427774253, 0.0934852884598345, 0.17642358089282628, 0.08435673375406061, 0.1582667697735871, 0.1517387548437651, 0.1643294696571196, 0.17408836946011175, 0.16826045895989372, 0.14285906959332695, 0.20227642646241173, 0.19379836642032755, 0.2458248649556467, 0.1892621213287652, 0.1355921498756315, 0.18223650265762115, 0.2264569693262931, 0.23112796787487944, 0.23269563085474565, 0.1869790229275422, 0.18690483472761532, 0.2090554318664647, 0.18948390977324636, 0.19078804519653136, 0.2101528199206384, 0.2131246959551849, 0.19524415013378715, 0.2250965411225937, 0.15846921688589577, 0.11225141938258798, 0.19006788727132584, 0.7627111006667961, 0.20116144473260544, 0.14292550215909272, 0.15094252521418206, 0.11500046061202629, 0.1525001050892193, 0.08323090931262811, 0.11162579023930652, 0.5218458741665071, 0.49239277388283886, 0.12632990245574804, 0.2041489363527358, 0.15887136270522406, 0.15571335237860917, 0.288147127356309, 0.20282806141817777, 0.215143370958657, 0.2032293528287028, 0.25553679045266253, 0.1996146719243036, 0.19406489174659058, 0.20801372536281493, 0.23648347468975695, 0.24176555173735792, 0.09882263201333885, 0.07859373102316769, 0.06209418601369454, 0.0673858536073143, 0.09941131733311248, 0.10379614113398328, 0.07803402392915582, 0.06386238956357826, 0.07853150175118406]}, "mutation_prompt": null}
{"id": "5c60f70a-f1cd-4204-b597-fa7c07560166", "solution": "import numpy as np\n\nclass CrowdedRefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n            \n            # Calculate crowding distance for diversity maintenance\n            crowding_dist = np.zeros(self.population_size)\n            for j in range(self.dim):\n                sorted_fitness_idx = np.argsort([func(individual) for individual in population])\n                crowding_dist[sorted_fitness_idx[0]] = np.inf\n                crowding_dist[sorted_fitness_idx[-1]] = np.inf\n                sorted_fitness = fitness[sorted_fitness_idx]\n                crowding_dist[sorted_fitness_idx[1:-1]] += (sorted_fitness[2:] - sorted_fitness[:-2]) / (sorted_fitness[-1] - sorted_fitness[0])\n            \n            population = population[np.argsort(-crowding_dist)]\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "CrowdedRefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce diversity maintenance through crowding distance calculation to promote population diversity and prevent premature convergence.", "configspace": "", "generation": 69, "fitness": 0.14002464191019837, "feedback": "The algorithm CrowdedRefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.14.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.29240546214626917, 0.3797752075569377, 0.33151076696018966, 0.2494763685634077, 0.3973936628090019, 0.33254103568614424, 0.29051958245199316, 0.32666282910320477, 0.25830675541608217, 0.013185633147066667, 0.005332430296121182, 9.999999999998899e-05, 0.007841357905478463, 0.016363784119278746, 9.999999999998899e-05, 0.017855506918291963, 0.01208922452125849, 0.02859852747132885, 0.0678342771131496, 0.06610383778890705, 0.054979190059965544, 0.1094789375953904, 0.1037850040132422, 0.08086978881647378, 0.05033050286115626, 0.09927906772640693, 0.0669526358041237, 0.08207738544907639, 0.030173236914601276, 0.04168019231800513, 0.0761038809317075, 0.0201265909855447, 0.05045547786851423, 0.06487049728888272, 0.07946201921590124, 0.010125822705036813, 0.7622706718667658, 0.6363301580813288, 0.8010830251048467, 0.5746627940886506, 0.7810868849587701, 0.726811839969139, 0.4947639378985984, 0.7770800251886703, 0.5599377074547276, 0.16004962649684007, 0.13255359110572174, 0.07374268246587112, 0.12555974143849913, 0.18504835055096658, 0.09520216840261841, 0.16729036824272225, 0.16821499065404766, 0.13865851249672034, 0.1755759000093643, 0.08225299064697122, 0.11977452244675091, 0.16878915451922727, 0.16344320410860114, 0.16284153341046637, 0.13738450458275564, 0.1308563013794506, 0.18099273593489673, 0.07840574871560912, 0.11580497462910011, 0.12869601092869676, 0.10291396036386757, 0.0002367361647261923, 0.04553945609170318, 0.17320002398774192, 0.11095389627691254, 0.08205708187132155, 0.14516131057110981, 0.003980661690116016, 0.11850485331357852, 0.11440080260731156, 0.09628474831000366, 0.12328524892794213, 0.1378110479152711, 0.06404338393139619, 0.10399417917166087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06559506420689099, 0.023644396795749922, 0.06460027360240461, 0.05312459875557363, 9.999999999998899e-05, 0.007660246245479563, 0.044881253548265665, 0.010852863274533386, 0.03735507534049998, 0.01624829216269319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003911363079177721, 9.999999999998899e-05, 0.0027791575904985155, 9.999999999998899e-05, 0.017645672104564247, 0.03732512733630722, 0.020684302708628977, 0.034247132179017536, 0.044964022380867386, 0.07778330125147737, 0.05498639279308137, 0.042311769150529144, 0.032415627609597486, 0.3416042228732109, 0.3353666502929006, 0.34278807327860994, 0.2839852212606768, 0.3175377829501096, 0.3003124176182511, 0.2964942456947831, 0.2899043592813003, 0.3329434984877284, 0.08537381255341536, 0.10045724973716219, 0.03260310640523223, 0.0799465608169394, 0.023728675218928186, 0.06876263695815688, 0.04214129144172707, 0.05999729330863557, 0.07645518168452492, 0.12966620996578226, 0.14298826995189828, 0.1452626289510145, 0.1724741091453541, 0.13342904391296484, 0.16599856961528803, 0.1696698043777518, 0.13792552139811598, 0.14559927753865254, 0.15347871814251812, 0.18160215445350725, 0.12885667625878106, 0.1489555756777916, 0.1694566649529181, 0.12573569140429286, 0.15585896516839226, 0.15014984288761657, 0.14874540325280394, 0.08362036321085375, 0.12532032003068705, 0.08268438516548171, 0.11479633264454336, 0.15727553667499727, 0.16869427360886524, 0.12837135189828108, 0.10814072797221774, 0.08718966640238779, 0.17890292813952346, 0.1274303161821847, 0.16032408934656484, 0.18782296214762684, 0.19628398753755338, 0.16287944569395063, 0.17799239578873272, 0.1622984344556888, 0.15607736394993876, 0.17759763006192697, 0.1566214575628455, 0.22454351272686313, 0.16050536590286668, 0.1714632825604795, 0.16323306564245155, 0.15579529582232754, 0.17364126885314013, 0.11733956700170944, 0.10943505500285666, 0.07633914262567176, 0.37324931660520255, 0.15635992325128734, 0.1959621638348411, 0.11068426111811713, 0.12716520005748566, 0.18434686337708728, 0.13314904824926888, 0.07647574392030598, 0.10711021029846779, 0.13558960617755633, 0.21422919183780031, 0.16058295308443904, 0.15824287806819826, 0.1733186006512224, 0.10891745883909809, 0.1336892148794916, 0.164477828774366, 0.17081456817939156, 0.17325336709609096, 0.1744395978865939, 0.1514607655082384, 0.16533532115393423, 0.19243184367417154, 0.1780834498170243, 0.1832601198282361, 0.04908832996790968, 0.0542338382154407, 0.06284584979611207, 0.06224393540401174, 0.07647331123856671, 0.061073393775273654, 0.07201174278251132, 0.05024163477313681, 0.048711727334974975]}, "mutation_prompt": null}
{"id": "345cc5cc-d197-4f71-83a4-16ce2735ef85", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            # Adaptive population size adjustment based on diversity\n            diversity = np.mean(np.std(population, axis=0))\n            if diversity < 0.1:  # Increase population size\n                new_individuals = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                population = np.vstack([population, new_individuals])\n            elif diversity > 0.5 and len(population) > 5:  # Reduce population size\n                random_idx = np.random.choice(len(population), size=len(population)//2, replace=False)\n                population = population[random_idx]\n                \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Improve exploration by introducing adaptive population size adjustment based on diversity.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 6 is out of bounds for axis 0 with size 5').", "error": "IndexError('index 6 is out of bounds for axis 0 with size 5')", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {}, "mutation_prompt": null}
{"id": "10603447-443f-4b12-b351-f86bcb769b15", "solution": "import numpy as np\n\nclass DynamicEnsembleMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rates = np.full((self.population_size, 3), 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  \n                    child = fittest_individual + np.dot(mutation_rates[i], np.random.uniform(-1, 1, self.dim))\n                else:\n                    child = parent1 + np.dot(mutation_rates[i], parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    mutation_factor = 1 - 0.99 * (_ / self.budget)\n                    child += np.dot(np.random.normal(0, 1, self.dim), mutation_factor)\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rates for each individual\n                if i > 1:\n                    mutation_rates[i] = np.clip(mutation_rates[i] + np.random.normal(0, 0.1, 3), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "DynamicEnsembleMutationGeneticAlgorithm", "description": "Employ a dynamic ensemble of mutation strategies based on individual performance to enhance population diversity and convergence speed.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shapes (3,) and (5,) not aligned: 3 (dim 0) != 5 (dim 0)').", "error": "ValueError('shapes (3,) and (5,) not aligned: 3 (dim 0) != 5 (dim 0)')", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {}, "mutation_prompt": null}
{"id": "a0074629-8eaa-41d7-9095-51a6dc27bb24", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            # Dynamic population size adjustment based on diversity\n            diversity = np.mean(np.std(population, axis=0))\n            self.population_size = max(5, min(20, int(10 + 20 * diversity)))\n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Implement a dynamic population size adaptation mechanism to enhance diversity and exploration.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 11 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 11 is out of bounds for axis 0 with size 10')", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {}, "mutation_prompt": null}
{"id": "29ca6485-ebc1-4968-8abe-aa833b65d21a", "solution": "class RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.initial_population_size, self.dim))\n        mutation_rate = np.full(self.initial_population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, len(population)):\n                parents_idx = np.random.choice(len(population), 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n\n                mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce a dynamic population size adaptation based on fitness to enhance diversity and convergence.", "configspace": "", "generation": 73, "fitness": 0.2201305187397678, "feedback": "The algorithm RefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.6168078424906527, 0.593591349616105, 0.5992181663013438, 0.5575408913825337, 0.5836490094844718, 0.5551817646441146, 0.6307594012019058, 0.5993096854476756, 0.5797034423246648, 0.16163406579238326, 0.07127283417274233, 0.15050981473782954, 0.2773831245303021, 0.1646733324504559, 0.18504758983504066, 0.24384568288768993, 0.04887215183840221, 0.24153050029178136, 0.13518813298936838, 0.09621814896698921, 0.10878662016615859, 0.13698257759173427, 0.1275020073518912, 0.1314282084215378, 0.1134926191422323, 0.13660685602437384, 0.15752026345596892, 0.13550364238403467, 0.09733162587482114, 0.11398533815516443, 0.09463392647204505, 0.0676929868428704, 0.12703752731441365, 0.11452058313145286, 0.10618695968793179, 0.14724035966552018, 0.945888663234865, 0.9556941186414025, 0.953637663674041, 0.9442169274400833, 0.9086997367240874, 0.9062542114780121, 0.9201629682538021, 0.9096750982897484, 0.9250189822014642, 0.37026690546104024, 0.35906666162280987, 0.37243013246397216, 0.33028392899917947, 0.41126168686924613, 0.3216635024537853, 0.32806805532131744, 0.3174635544349709, 0.2922840559087876, 0.21671830043454066, 0.18557973568466146, 0.20091413217899567, 0.3438143785165052, 0.21301915200592636, 0.17523973708851304, 0.16440025428915284, 0.21220688509803487, 0.1931888411158491, 0.10925516547553182, 0.16049776076430755, 0.15893000137855273, 0.11675034189283451, 0.14171269702945244, 0.18526724314904286, 0.2928857416468914, 0.161705291829763, 0.16163724614126618, 0.19041117532193397, 0.09799987079762684, 0.12883545343971492, 0.14184648133970568, 0.16179409096640862, 0.13312817881232697, 0.1400951350345664, 0.13079527199788354, 0.16990928224879265, 9.999999999998899e-05, 0.03137228314325313, 9.999999999998899e-05, 0.0053672783706224525, 0.024661943413388343, 0.04093126577490491, 9.999999999998899e-05, 9.999999999998899e-05, 0.007106340862862326, 0.04325927631281101, 0.06365172113008344, 0.08001516547223309, 0.09337410059653628, 0.030892257697394787, 0.0393062288909809, 0.1779667932314798, 0.07191132069471218, 0.04748169475125974, 0.04605856021786969, 0.026134262146217058, 0.05277944437964743, 0.03836359486455454, 0.08591567456890947, 0.04691661350085519, 0.04655904992966753, 0.09520187058498208, 0.07566810850672046, 0.15535931179051166, 0.07963375617890722, 0.1869801227080401, 0.09070775141919185, 0.018229576008577886, 0.021304436598269194, 0.04050856369071132, 0.11041739252537885, 0.08107569779608115, 0.4451291027451423, 0.4387682917911565, 0.42915001324397417, 0.500683514181709, 0.4456855102894227, 0.42852563069566396, 0.44418471247033764, 0.45363241285564404, 0.4396015248584806, 0.05575142298330904, 0.09530211585539017, 0.2519713958678014, 0.13851196948089983, 0.07239147893433473, 0.10210622217687781, 0.11455168986650022, 0.06824307948664865, 0.07775401181531838, 0.22932630222479033, 0.24689001127761168, 0.19661232247134286, 0.15516353025920693, 0.2511471325431518, 0.17970267409605822, 0.1942838983968299, 0.19921797714627, 0.3425634742496291, 0.14038372448734826, 0.30933848732486047, 0.27910595096961976, 0.20665446159254564, 0.20207795150880925, 0.30865449622633656, 0.3015797005439729, 0.18363663630937177, 0.1489448363889132, 0.09676215684162837, 0.1839005636924096, 0.21919268008002202, 0.22405674405987042, 0.16100971674464704, 0.14516474357531184, 0.22582912881167427, 0.14704306689153512, 0.09716787918391734, 0.1979917132063309, 0.15761101081787343, 0.20933687443143967, 0.22354064995202638, 0.17531388301960127, 0.16876077432573167, 0.21340197735893585, 0.1740859870277527, 0.2019961460089449, 0.21266176236885226, 0.22131230371829347, 0.1968014321966295, 0.19127964110522067, 0.18909193371825672, 0.1742749012181597, 0.20027956217957477, 0.2090284211861303, 0.18307759570780013, 0.15835157576493353, 0.10990103708879595, 0.13205664010587226, 0.6283351821563683, 0.20151245730874623, 0.14856585423323632, 0.16578249538157253, 0.11482644638758377, 0.1683915893764264, 0.0823967330201294, 0.11052077927062309, 0.4985586739961101, 0.4078477752229194, 0.14780324695728342, 0.20677125938395013, 0.16389385684365076, 0.11422202019615302, 0.11186636320604826, 0.2093783186674425, 0.1937161574736569, 0.17906051899938447, 0.22411880266868567, 0.230782072296132, 0.20086339877227566, 0.2021473896057414, 0.2214925766582111, 0.19853372412036852, 0.061830717434047444, 0.05658173754394791, 0.06936814207716013, 0.1070930152948556, 0.08739994386328254, 0.07599152286556343, 0.09666005086775653, 0.07487706407575645, 0.08501680158371072]}, "mutation_prompt": null}
{"id": "20a6cff6-13c2-4e08-801a-9fec4c977855", "solution": "# import numpy as np\n\nclass AdaptivePopulationSizeGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n            \n            # Adaptive Population Size based on individual performance\n            if np.random.uniform() < 0.05:\n                if np.mean(fitness) > np.median(fitness):\n                    self.population_size += 1\n                else:\n                    self.population_size -= 1\n                    if self.population_size < 2:\n                        self.population_size = 2\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "AdaptivePopulationSizeGeneticAlgorithm", "description": "Introducing an adaptive population size based on individual performance to dynamically adjust exploration and exploitation.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {}, "mutation_prompt": null}
{"id": "0bc06d66-dedb-49b1-84e4-1ee557214ac9", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "bf9e8d6d-f728-4e1d-9d77-2bd26be6b88f", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                    \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            # Introduce differential evolution strategy for population evolution\n            population = np.clip(population + 0.1 * np.mean(population - np.array(new_population), axis=0), -5.0, 5.0)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce differential evolution strategy for population evolution to enhance diversity and convergence.", "configspace": "", "generation": 76, "fitness": 0.055875842598922434, "feedback": "The algorithm RefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.12180934198547788, 0.1025574809812988, 0.10647827059932136, 0.039885395304525284, 0.05543716197087545, 0.028063619810803853, 0.05434586444816614, 0.07198587779480914, 0.06882051748987617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0057012117264672035, 0.02167797604513977, 0.02538995457983184, 0.038450477479538336, 0.0221366006997894, 0.025469295794447677, 0.029537033032977833, 0.01506776416511657, 0.0133391293534314, 0.0013471209507271986, 9.999999999998899e-05, 9.999999999998899e-05, 0.040798410009113883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04747346743199321, 0.03058144271518759, 0.03327721672346584, 0.04922017919304211, 0.02584969810736515, 0.03812250530289241, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020675019919508264, 0.01047134847589537, 9.999999999998899e-05, 9.999999999998899e-05, 0.01487191462859172, 9.999999999998899e-05, 0.12656689318587522, 0.11065554964897506, 0.06338181259579012, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 0.02324376593021804, 0.1475527646751501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007452469267355655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022064813108529813, 0.04366141864112161, 0.06189903611287084, 9.999999999998899e-05, 0.016822200751610006, 0.027978997057168775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11838423000754794, 0.1070271971752389, 0.18105667130617298, 0.09680471968542803, 0.10020346300345151, 0.09677460631229806, 0.13592303464611577, 0.20329919435470734, 0.16764859634530116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.019086583161662785, 0.05434878944524657, 0.01243488288137673, 0.011589157883288292, 0.04305303813587702, 0.1231723058836307, 0.13474641574029667, 0.10520804293460784, 0.1207920361549264, 0.11470632685667492, 0.13483098703250473, 0.11086605658853277, 0.10451492253847194, 0.1149745995427155, 0.12184879739640275, 0.11590717997391276, 0.12301571950272105, 0.1345441742384471, 0.14142805204146658, 0.14249492490155646, 0.12266154689838549, 0.13681450666677153, 0.095923176786058, 0.06717308410089118, 0.054414418285555266, 0.05413579181654227, 0.06801476315353161, 0.0996379624433168, 0.06240976694542988, 0.0655329553413101, 0.10517919774155648, 0.038969893532607824, 0.14018444655943063, 0.1596648700270885, 0.1952306070202272, 0.20359247095756206, 0.18213849839157426, 0.1580881076014069, 0.15014388042831628, 0.20970561213012417, 0.18909868277941255, 0.14729049291914653, 0.006614051710641111, 0.1534119305739189, 9.999999999998899e-05, 0.15349451569877215, 0.14803491580297923, 0.05111284850242226, 0.013860811126490402, 9.999999999998899e-05, 0.10016602627131466, 0.12170492714486214, 0.07205982473551609, 0.16556512766819198, 0.139425949948917, 0.08440550418183068, 0.06245172914955821, 0.09291391831741935, 0.09989569894273098, 0.041217762868876906, 0.13571786624880622, 0.12430286335585317, 0.03765764157124851, 0.0633283472920555, 0.046295852557139416, 0.04210053868272612, 0.028345782075568926, 0.05981016536997308, 0.17785618419760119, 0.20005261456750878, 0.21046273097568924, 0.19585716985401092, 0.17467644770851642, 0.18007864707792542, 0.17142490010171152, 0.1911281279214917, 0.18817339903906072, 0.06600662796626877, 0.05543805027887572, 0.03793951853944422, 0.05194515911520814, 0.04579829276771086, 0.056651199165461685, 0.056130881686785816, 0.04155158200025766, 0.0305560635148886]}, "mutation_prompt": null}
{"id": "ef9b2e22-d9dc-4aec-a0c5-260aa3206824", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "e1df768e-2194-4e21-a2ec-03533b5ba42b", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "1d1d9150-3dc9-4d83-bfa9-afc21269e73b", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "1ec2b1b4-0c57-4b55-86c0-f21c2afd7e23", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "714c7a3e-686e-422b-a26a-fc17b4f9beed", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "8d384a31-6f83-426a-881b-12c062bb439a", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 15  # Increase population size for better diversity\n        self.mutation_prob = 0.2  # Increase mutation probability for more exploration\n        self.crossover_rate = 0.8  # Decrease crossover rate for more exploitation\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 5, replace=False)  # Increase parents for better genetic diversity\n                parent1, parent2, parent3, parent4, parent5 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3) + mutation_rate[i] * (parent4 - parent5)  # Incorporate more parents in mutation\n                \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.choice([True, False], size=self.dim, p=[0.3, 0.7])  # Change crossover strategy to incorporate both parents\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Improve mutation and crossover strategies for better exploration and exploitation.", "configspace": "", "generation": 82, "fitness": 0.1855676560188795, "feedback": "The algorithm RefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.4546974456429148, 0.36753323154737405, 0.42755411871738325, 0.4209754401900233, 0.38250578647630695, 0.41176231951653375, 0.41513296604341177, 0.3480387863904837, 0.3989720694338075, 0.0694730137497489, 9.999999999998899e-05, 0.005357886058973582, 0.06177066573982071, 9.999999999998899e-05, 0.04065052355264687, 0.020636512726542766, 9.999999999998899e-05, 0.005741080928228448, 0.10517291787241756, 0.07413492755169371, 0.08190749892644322, 0.11200451480342777, 0.0956613803536811, 0.10696728178887516, 0.13960217227615068, 0.04877862074282202, 0.09801911097176474, 0.1154955241609763, 0.052677602267006796, 0.07261925375896594, 0.06581870950594426, 0.07355923439329548, 0.08254225689113392, 0.0886396742428136, 0.07609568864040916, 0.0823621691272719, 0.9651818674400386, 0.9482847246095905, 0.965585418679023, 0.9738042755101046, 0.9699825466547796, 0.9708745061413402, 0.9485686416841138, 0.973999492414792, 0.982716583404944, 0.24915212316941793, 0.17653836315329385, 0.12643499626847476, 0.24202494566787913, 0.19539578085845932, 0.21902869957781457, 0.21741371908091067, 0.21510939159022413, 0.23482767434817775, 0.20766922576868985, 0.09448938155995878, 0.2240210755615536, 0.268844286265598, 0.1501185076979049, 0.15509483355085485, 0.14561146311184747, 0.11334896968984953, 0.17783793601612374, 0.09186800100748038, 0.012360891203001989, 0.04358873959780518, 0.2043067221583733, 0.11739738885857587, 0.13797391100027578, 0.18389747188684302, 0.0926607194666631, 0.11278866119062492, 0.19948149477687138, 9.999999999998899e-05, 0.12678204179938435, 0.127306357473987, 0.10613911104912133, 0.1279925876878133, 0.15471563973128832, 0.13614892260329192, 0.15995931068489622, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004587843185442808, 0.09094420554276639, 0.02333034029435843, 0.06923613746918345, 0.07484130009251222, 0.001469800089691109, 0.07085467150373603, 0.07237925875916862, 9.999999999998899e-05, 0.04096445751927891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004827935269379524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08885491943238355, 0.04849959741913412, 0.08120610319925037, 0.11220135459800407, 0.02021867113644127, 0.034344588156305145, 0.07653515860466964, 0.023447820629357574, 0.03720152408461275, 0.3805230813376115, 0.37102411579982053, 0.34760293585539603, 0.38152921679277874, 0.3593537945246852, 0.3808258540605488, 0.3781635108378788, 0.381508046115104, 0.3722151102260015, 0.059393750796419176, 0.04260733154167451, 0.09303342446078045, 0.06636300672091022, 0.0597999297766717, 0.0963104703123503, 0.0694875620168588, 0.08507447689079728, 0.07001286877522106, 0.2380075361263122, 0.17872205825514997, 0.2893540779101903, 0.24374095659231498, 0.22980872345373704, 0.14907541144628322, 0.1545976301168257, 0.19844070528827973, 0.15149962406997752, 0.23146528854138693, 0.13957092963316353, 0.219659741507938, 0.26729711775249876, 0.16306063843914798, 0.19251333444708496, 0.27189705968175804, 0.17893197912024517, 0.1512169879208013, 0.21370077202036142, 0.17443168888931382, 0.18185334451559843, 0.2116883564746893, 0.10522692341623407, 0.18265176442116404, 0.18264501101105135, 0.12230538522456669, 0.1419455063636611, 0.2244296407630495, 0.17184879075305814, 0.16038034883462626, 0.2033974921159173, 0.1850574371971364, 0.20857060406425232, 0.23562257672919518, 0.15068566415238005, 0.18611551747017663, 0.20304676469601968, 0.1627363390902632, 0.18021036668650836, 0.1900300103963949, 0.18144346364948383, 0.18226059472989065, 0.1869076441381493, 0.17529140172521185, 0.1788484978058592, 0.571571668463233, 0.1765343866749043, 0.18607725035889966, 0.5918207196686454, 0.1997314179949633, 0.5529903491723833, 0.15723837924985196, 0.13765740225371448, 0.1655093276680054, 0.30759178586148017, 0.1110954200275297, 0.15274106338258375, 0.19746195685211965, 0.24538034679011866, 0.20260137641471154, 0.4924412959687058, 0.14983177790577717, 0.22578241248395314, 0.172870340468261, 0.16892901610936129, 0.17632721629604964, 0.16439026847918992, 0.16562004963753296, 0.189873657074783, 0.1679135738730132, 0.1594640882479016, 0.1625121195905722, 0.05234963449282837, 0.044499709230840234, 0.05607519108313641, 0.08213213219080517, 0.04850269025769016, 0.08668526073250737, 0.08973698846196798, 0.04063069538267172, 0.07478906317143297]}, "mutation_prompt": null}
{"id": "fa0922f8-15a5-47dc-97c6-82779d308d88", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "76f3a87c-7e74-4d2c-96b7-eee8e5aa739e", "solution": "import numpy as np\n\nclass RefineCrowdingBasedGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            # Introduce crowding-based selection for diverse solutions\n            fitness_new = np.array([func(individual) for individual in new_population])\n            fitness_combined = np.concatenate((fitness, fitness_new))\n            idx = np.argsort(fitness_combined)[:self.population_size]\n            population = np.array(new_population)[idx]\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefineCrowdingBasedGeneticAlgorithm", "description": "Enhance population diversity by introducing a crowding-based selection mechanism to maintain high-quality solutions across generations.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {}, "mutation_prompt": null}
{"id": "c06f4092-b1b4-475b-ac74-ceb11c3a7128", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "503e3ff6-44f6-4041-9fe3-4b0f91af0f46", "solution": "import numpy as np\n\nclass DynamicPopulationSizeAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n            \n            # Dynamic population size adaptation\n            if i % 10 == 0:  # Adjust population size every 10 iterations\n                self.population_size = max(5, int(self.population_size * 1.1))\n                if len(population) < self.population_size:\n                    additional_population = np.random.uniform(-5.0, 5.0, (self.population_size - len(population), self.dim))\n                    population = np.vstack((population, additional_population))\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "DynamicPopulationSizeAdaptiveMutationGeneticAlgorithm", "description": "Incorporate a dynamic population size adaptation mechanism to enhance diversity and exploration in the genetic algorithm.", "configspace": "", "generation": 86, "fitness": 0.22947247445106525, "feedback": "The algorithm DynamicPopulationSizeAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "c1417ea4-b132-46bf-a421-4351f836b40d", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "d7535919-022a-4e4a-a0ca-8ba4a52a35f1", "solution": "import numpy as np\n\nclass DynamicPopulationSizeRefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, 2 * dim)\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "DynamicPopulationSizeRefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Enhance the algorithm by incorporating a dynamic population size that adapts based on the search space dimensionality.", "configspace": "", "generation": 88, "fitness": 0.22947247445106525, "feedback": "The algorithm DynamicPopulationSizeRefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "23935c8e-5346-4e64-81ef-c3e22a82b432", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "4067470b-00b0-432b-a852-ef3cd565af11", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "a724659b-3474-448d-9e5d-ee23d585fdfa", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            # Local search using best individual\n            best_individual = population[fitness_sorted_idx[0]]\n            new_population = [best_individual + np.random.normal(0, 0.5, self.dim) for _ in range(1, self.population_size)]\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Incorporate a local search step using the best individual found so far to refine the solutions.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 9 is out of bounds for axis 0 with size 9').", "error": "IndexError('index 9 is out of bounds for axis 0 with size 9')", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {}, "mutation_prompt": null}
{"id": "bc41743f-ea17-41b9-9354-e464fcfe6cee", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    # Incorporate local search with gradient descent\n                    gradient = np.gradient(func(fittest_individual))\n                    fittest_individual -= 0.01 * gradient\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Incorporate a local search strategy using a gradient descent approach to exploit the best individual.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"can't multiply sequence by non-int of type 'float'\").", "error": "TypeError(\"can't multiply sequence by non-int of type 'float'\")", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {}, "mutation_prompt": null}
{"id": "0696edbd-fd81-48ea-b950-5fc3ebf6ca89", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                    \n                    # Differential evolution strategy\n                    diff_individual = population[np.random.choice(self.population_size)]\n                    child += 0.5 * (diff_individual - child)\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Incorporate differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 93, "fitness": 0.2264865554100091, "feedback": "The algorithm RefinedEnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.6100669652698655, 0.6306361591106437, 0.6644941339959236, 0.5845749292824514, 0.6339861222564991, 0.5853092596116549, 0.5920772533368894, 0.6387573671522713, 0.6569760982210457, 0.2455209163812211, 0.09975779071219804, 0.12333503685072023, 0.2817179477502193, 0.31325091128834004, 0.10205833500397454, 0.09845862642362357, 0.08968882968508751, 0.15546357182743709, 0.06960269216803883, 0.0881655577973448, 0.10430352504014007, 0.09392440226140986, 0.09190316671863452, 0.12124755269216603, 0.09230422030086771, 0.05659930641847588, 0.15120930503971963, 0.10753074039257848, 0.12839700801882714, 0.10875432558748488, 0.09719544688610571, 0.12803949147387628, 0.07448585344422332, 0.11059591973341554, 0.07049916564680603, 0.10137752369376818, 0.9430027055071175, 0.9640018889081349, 0.920356210346079, 0.9009514678738879, 0.9019257960588436, 0.9349389474878919, 0.8901533150988806, 0.9447960021062264, 0.9200056506264026, 0.35637215481182694, 0.30925249576089286, 0.34531004592145054, 0.3629084914580405, 0.36043837920621324, 0.3288104391363783, 0.4030598762941251, 0.3446576082943811, 0.27538700791064996, 0.2323227334783039, 0.12285349377832788, 0.17723738747843742, 0.27969943472938374, 0.21585472626461644, 0.36791701728809845, 0.1555703990612345, 0.2395731754340622, 0.677377720251139, 0.15500886280008708, 0.14148657547325183, 0.16474285068045447, 0.1588312959675492, 0.14610996166851442, 0.16868740399276105, 0.30739487637345886, 0.19501854977141342, 0.17040291206287128, 0.21192061141059826, 0.18599136803758165, 0.13443407568054422, 0.16337572447695514, 0.1218667483766509, 0.13004841261998512, 0.18710586141072338, 9.999999999998899e-05, 0.2713629971612761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020824039854169696, 9.999999999998899e-05, 0.003983362046803607, 9.999999999998899e-05, 9.999999999998899e-05, 0.006952676757286613, 0.08126625265416099, 0.04693102804946592, 0.13960589863782757, 0.08092467938038572, 0.01587329502272128, 0.029586013009299306, 0.08081287545257276, 0.04160172243209015, 0.07633529380252235, 0.09080715134952921, 0.09211130564220293, 0.08259318424716844, 0.05467884999003092, 0.10154794783529197, 0.08491567249236465, 0.05443355581989073, 0.07177142487190635, 0.05318299963138484, 0.1134355685695908, 0.08637912579158114, 0.14852157582770087, 0.05403702963093693, 0.08027397956484839, 0.14003725214357887, 0.09218618965283965, 0.09123790703611134, 0.053959031174112715, 0.47068348002649063, 0.4498986636437142, 0.5091869620192073, 0.4154949180175972, 0.4387127368936562, 0.4998334950898202, 0.5087029654541956, 0.4296238912883097, 0.48884081971850324, 0.04325903177175727, 0.04264116040813182, 0.08505405647057507, 0.07020301315415178, 0.06068105311138294, 0.09687184432344365, 0.06148967271807637, 0.06590267040512876, 0.06463149235259658, 0.20409014143938808, 0.19405942524455866, 0.2595297967910932, 0.1989169960643784, 0.1350499452361018, 0.15172791744611946, 0.15660371703802922, 0.1961294127446357, 0.16605389056134323, 0.1128400673172184, 0.22475066041449898, 0.21581978618210884, 0.25886881639646075, 0.14612265059898233, 0.3324978454110221, 0.1496532759696424, 0.1679410609723111, 0.10280709686255995, 0.08689028289042422, 0.19539121360389478, 0.09855239629425472, 0.15090544035052678, 0.14187104921120153, 0.13767505775634714, 0.18364013274355195, 0.17745742734055625, 0.14100709583867288, 0.20487454751667633, 0.16519613391151855, 0.22540432411777933, 0.1877824083044427, 0.14527423198762224, 0.21383596432564378, 0.20434444235601712, 0.17355039482729373, 0.20334383215187146, 0.21157769895084233, 0.2040224265545575, 0.2525199325765971, 0.18087812498412548, 0.18428842490784902, 0.17956121973458306, 0.1872321962684188, 0.18768858835219393, 0.18624692897729722, 0.18742614721902529, 0.07668645086704196, 0.0904324105793779, 0.7932626672165899, 0.20181807940480556, 0.15176204388552306, 0.14888948631915644, 0.16790427142298991, 0.15394776567536606, 0.0825404568001612, 0.3990476715324699, 0.49694814213686034, 0.47332324847751384, 0.6952682458586426, 0.210816762766613, 0.6551883504524223, 0.09435438001183793, 0.30943052372578195, 0.23030125360728904, 0.22691675642164477, 0.1981048494548201, 0.18943868880218928, 0.2052544286455572, 0.2179694237478994, 0.20189887598149436, 0.2263966389950257, 0.23736464366048327, 0.04841534830038763, 0.07063306143380776, 0.06304555792034239, 0.04556095186897213, 0.07437512360039311, 0.07811470237936413, 0.15666423004257157, 0.0418115958163191, 0.07130038275924466]}, "mutation_prompt": null}
{"id": "4d37905c-b43f-4cd2-9dd2-5a9270d7e9bf", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "d6b2c708-4226-48a7-9c66-c08ad7adf6c2", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "69f318e2-7543-43fd-8d3e-23f3b2ecb1cd", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "ad3705b9-f0be-4688-8845-10ae220d0d41", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
{"id": "c9775d8a-0c8c-4ea0-a79f-f9c7fe4db5dd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.initial_mutation_prob = 0.1\n        self.initial_crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_prob = np.full(self.population_size, self.initial_mutation_prob)\n        crossover_rate = np.full(self.population_size, self.initial_crossover_rate)\n\n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n\n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_prob[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_prob[i] * (parent2 - parent3)\n\n                if np.random.uniform() < mutation_prob[i]:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n\n                if np.random.uniform() < crossover_rate[i]:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n\n                new_population.append(child)\n\n                # Update mutation and crossover rates based on individual performance\n                if i > 1:\n                    mutation_prob[i] = np.clip(mutation_prob[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n                    crossover_rate[i] = np.clip(crossover_rate[i] + np.random.normal(0, 0.1), 0.7, 0.99)\n\n            population = np.array(new_population)\n\n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "EnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce adaptive selection of mutation and crossover rates based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 98, "fitness": 0.21963310578789497, "feedback": "The algorithm EnhancedAdaptiveMutationGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5639942032193802, 0.5666701267271403, 0.5695294852196575, 0.5466377723888275, 0.541501691360216, 0.5551517800785828, 0.5465739577714759, 0.5472623786465316, 0.5386561798777277, 0.20306505604235603, 0.24102992818481916, 0.15386584816836402, 0.14830385860429685, 0.10878797505901805, 0.11859615174038374, 0.15886771702288427, 0.10801779923649224, 0.12679597637075568, 0.12788889462589392, 0.16355564550537105, 0.11047409091530758, 0.12653775663059552, 0.10595650827116276, 0.1602387374750831, 0.09144557531332353, 0.1394677094431056, 0.09533216911554931, 0.12281701620642438, 0.11075730115549343, 0.10997701964155038, 0.14071816783793745, 0.10202223859493365, 0.12188507761621825, 0.13775820409791106, 0.2509101539585511, 0.09317651269933702, 0.9470619058146088, 0.9377971633902533, 0.9435370477988844, 0.9496466645038701, 0.9368132671712202, 0.9463146276079477, 0.9408327308018434, 0.957178787494891, 0.926024476746687, 0.3412881722397325, 0.2744995218977414, 0.2666755111244191, 0.3289766105121913, 0.30169043256274186, 0.3149615295348297, 0.3418590594774903, 0.31313888582860705, 0.2461765819006526, 0.32039988682436304, 0.18367084512993448, 0.2236329034240322, 0.6352617860928981, 0.2063314674753024, 0.20538548924794364, 0.2950689592855511, 0.2014619203051271, 0.21987440450487927, 0.14663494031261093, 0.1440497356455862, 0.20518764015008184, 0.17572189480346356, 0.20196162425997333, 0.14229429500706592, 0.13230268463933104, 0.11851283695734127, 0.12734377119791118, 0.15389604603876528, 0.08588451361201055, 0.13315549000573934, 0.2699624809428819, 0.14441434186891078, 0.13291721522723932, 0.16671056217789026, 0.024856842426509096, 0.1492247856850123, 0.01000178369165483, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019131140352035558, 9.999999999998899e-05, 0.021411516535325026, 9.999999999998899e-05, 9.999999999998899e-05, 0.003866114741618687, 0.13699727397200656, 0.03488251323388902, 0.08475456392064429, 0.1276519188860924, 0.03545819854425736, 0.008094614466134908, 0.0769332328224478, 0.07195337388983358, 0.05789920176346186, 0.023452718186547816, 0.06405467742667625, 0.06784217654682467, 0.04965097403875551, 0.049570073273357385, 0.04212371768722967, 0.04374256743659788, 0.06716792545903083, 0.018618563591137338, 0.07352677543394148, 0.0720735590450775, 0.03833733455734234, 0.0874697277744001, 0.08881074231360031, 0.06284494145440278, 0.17668791001963002, 0.06613494675248166, 0.11184493606445522, 0.423300200415352, 0.4306069919623756, 0.4667614502127001, 0.47597221486383245, 0.43877521599268055, 0.42535040877038177, 0.4475381641337294, 0.41726462590978175, 0.4264866014141848, 0.09150631264171916, 0.12150669501302858, 0.07235715728572178, 0.0960390409828471, 0.052194676472563706, 0.08319006256006489, 0.06294648923437507, 0.08376617114474538, 0.09834221497336204, 0.19783577711689881, 0.16987464222290205, 0.290114419544233, 0.1801140128329809, 0.19259894269452138, 0.21533806443934367, 0.13693215561331928, 0.17554676345716147, 0.22581531294177193, 0.22963427567796124, 0.25604618192507755, 0.18389225618453997, 0.188537146277165, 0.2230995293247997, 0.26604765759520443, 0.17269222836051867, 0.17076791731406915, 0.17082835195789936, 0.2113903102012641, 0.180549885667301, 0.11579973011066957, 0.1750137582142277, 0.15769776518399192, 0.254694449637918, 0.1539496126157528, 0.17901001380471493, 0.09449524333443993, 0.21486020639416514, 0.18394517333603566, 0.19208241828195505, 0.19036582305402527, 0.18277872870077483, 0.19972676206758144, 0.207566070739864, 0.18813668907681624, 0.20605646929357013, 0.20531117001707788, 0.18489019895925707, 0.1899427327886024, 0.21988609856061314, 0.2127157829022296, 0.2093158780312646, 0.21304084179545502, 0.19508456315024947, 0.1858962391912783, 0.74244429889886, 0.12603531821066372, 0.678708654811732, 0.5422399732691754, 0.2018673719015881, 0.18457602090586744, 0.16622899450847195, 0.11509040599622455, 0.1626899279047369, 0.14209981653802095, 0.11244543383616479, 0.3262959282070086, 0.4190924641177728, 0.14675962127803632, 0.20885237679666524, 0.10347191018188895, 0.15471949293119813, 0.10499239279253525, 0.2022756589680298, 0.18932566182358124, 0.17500935428512643, 0.1812553142203518, 0.17915255835047972, 0.19434074172117466, 0.2099938792667746, 0.2027113620867672, 0.18647754283727325, 0.09122248021339907, 0.06058846417656372, 0.08723155413080808, 0.08502141169930333, 0.08982489119328929, 0.07725034668272712, 0.08954467140304334, 0.07622952650684511, 0.07149319354624573]}, "mutation_prompt": null}
{"id": "a418ede0-e8ab-4546-a184-5166a7c1bff9", "solution": "import numpy as np\n\nclass RefinedEnhancedAdaptiveMutationGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.mutation_prob = 0.1\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        mutation_rate = np.full(self.population_size, 0.1)\n        \n        for _ in range(self.budget):\n            fitness = np.array([func(individual) for individual in population])\n            fitness_sorted_idx = np.argsort(fitness)\n            fittest_individual = population[fitness_sorted_idx[0]]\n            \n            new_population = [fittest_individual]\n            for i in range(1, self.population_size):\n                parents_idx = np.random.choice(self.population_size, 3, replace=False)\n                parent1, parent2, parent3 = population[parents_idx]\n                if i == 1:  # Elitism - Keep the best individual\n                    child = fittest_individual + mutation_rate[i] * np.random.uniform(-1, 1, self.dim)\n                else:\n                    child = parent1 + mutation_rate[i] * (parent2 - parent3)\n                    \n                if np.random.uniform() < self.mutation_prob:\n                    child += np.random.normal(0, 1, self.dim) * (1 - 0.99 * (_ / self.budget))\n                \n                if np.random.uniform() < self.crossover_rate:\n                    cross_points = np.random.randint(0, 2, self.dim).astype(bool)\n                    child[cross_points] = parent1[cross_points]\n                    \n                new_population.append(child)\n                \n                # Update mutation rate for each individual\n                if i > 1:\n                    mutation_rate[i] = np.clip(mutation_rate[i] + np.random.normal(0, 0.1), 0.01, 0.5)\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin([func(individual) for individual in population])\n        return population[best_idx]", "name": "RefinedEnhancedAdaptiveMutationGeneticAlgorithm", "description": "Introduce dynamic mutation based on fitness to enhance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32e45924-c835-4584-890c-0d9e89283cef", "metadata": {"aucs": [0.5813565458401848, 0.6093669732715793, 0.6166023294190353, 0.5456992681757183, 0.655455201573139, 0.5778973262238556, 0.6549355944436484, 0.6547766687498526, 0.5785801828210887, 0.1939239372227799, 0.14420383815555415, 0.14873017080999307, 0.2192885999086086, 0.12436640439170099, 0.24085789033580973, 0.13884079050840514, 0.23259529377295163, 0.2470434553954779, 0.0855040132650754, 0.14599105271480695, 0.13828005872253035, 0.14842282998117262, 0.07106642421183673, 0.13494129259656296, 0.09056688809411062, 0.11387700699341963, 0.12149252980835468, 0.1169298935959423, 0.06846782692068065, 0.09906784011221914, 0.16897491817043186, 0.05695851733336854, 0.11327968537234734, 0.1370462207495995, 0.13911280384098268, 0.13815279928901514, 0.9406062705488432, 0.943823715879428, 0.9772731904234185, 0.9327658305017537, 0.9202812113046125, 0.9313499950297477, 0.9219161428359176, 0.9293823234534648, 0.9311240974526898, 0.3225854280500178, 0.36696904046173473, 0.3656827229759829, 0.2754406392493933, 0.3431595021529711, 0.3577824026676001, 0.3237743758336169, 0.32970277571196127, 0.3576505872567114, 0.3429016846639491, 0.1978304661968776, 0.17312171519169495, 0.4513690324867504, 0.245866348661416, 0.30110267896083187, 0.29500965915383615, 0.17321695913621604, 0.7254814362929078, 0.13897852219165163, 0.12999345645140892, 0.14359494885443325, 0.13475231365692475, 0.13377206419497578, 0.16362188317036175, 0.22437839812613558, 0.19683832840862314, 0.18234036918010932, 0.179315320996425, 0.10730099448251096, 0.1709022140190184, 0.14364867691583638, 0.12222180582588171, 0.14746326833010936, 0.15978689588234773, 0.04513141842657242, 0.18236141936772365, 9.999999999998899e-05, 9.999999999998899e-05, 0.02008682079222268, 9.999999999998899e-05, 0.0787684261664986, 0.05324603088655111, 9.999999999998899e-05, 9.999999999998899e-05, 0.09496261313046583, 0.05210766414457335, 0.04704343171573033, 0.08754068703437312, 0.09620809330348734, 0.00962894182835572, 0.028300119755377273, 0.10049046802877382, 0.08122046535938121, 0.13931146343181877, 0.050736728449991664, 0.053460598845174845, 0.05291765047925434, 0.0616442794781793, 0.10073975207634134, 0.05835836373677461, 0.023831318977581728, 0.09231143628134686, 0.010168349192718251, 0.06599580220733281, 0.08028944990280029, 0.10307983747080396, 0.10738538460127733, 0.06654522266309226, 0.14652107617788102, 0.16038783209253105, 0.11755584824918575, 0.018073132718637863, 0.44588406691623106, 0.43791513313773744, 0.4281584087708119, 0.47668149598268295, 0.4545212203807001, 0.44748509945660675, 0.45363214529381934, 0.5012079090751812, 0.4857293076643787, 0.08319400170554492, 0.12070129894002257, 0.0937611078048678, 0.06352442121441293, 0.063074958079118, 0.15827098792062988, 0.06567553293761574, 0.06925233534246089, 0.08160941833829982, 0.28430101068989533, 0.19671240815947355, 0.13712813367495924, 0.1944713401091579, 0.1272569007359583, 0.1876569357779866, 0.18660273317929033, 0.23058420173221772, 0.26636169367428897, 0.2521691466145479, 0.3158090024247091, 0.1400479972308183, 0.1768575797924581, 0.162405079542688, 0.3073057200857773, 0.16972310427177673, 0.18507443309909766, 0.15512861891191077, 0.20937194082630495, 0.25150560646608366, 0.1329532012462854, 0.25214755173487435, 0.14545893263960696, 0.19580726691299866, 0.11678578564701925, 0.15135296315020064, 0.14030055628495008, 0.28057572754088644, 0.15892896368684017, 0.19955918277847084, 0.20432829583941958, 0.17460481003039718, 0.19766778352387282, 0.2078692028468634, 0.16388578857324976, 0.19195826351682288, 0.18870792107004186, 0.19140542851815312, 0.1992819449308646, 0.21172743546341644, 0.19889208449992335, 0.18229350764735996, 0.19403865219817584, 0.2115105059490675, 0.19046872210810284, 0.15704048332916498, 0.10049199065997894, 0.18751584567686264, 0.4185290085443327, 0.20224925024991713, 0.14758520913111006, 0.15162332487612207, 0.12501334000387943, 0.16362277124982882, 0.38913789718190095, 0.4539172987051162, 0.2068833390653222, 0.40607119249631374, 0.6775454440254705, 0.20744801645701716, 0.15948265988370347, 0.1548763079146558, 0.3407119926881703, 0.24654224608336273, 0.22881722084516565, 0.2014742322443671, 0.19745795114572007, 0.20868881196186595, 0.20186710231418747, 0.19920278086181487, 0.21004059111027795, 0.19196211297753518, 0.07622658395965831, 0.07746721800918821, 0.06640093990641094, 0.0679378424756325, 0.0914185389309019, 0.06528670110283197, 0.09817426236363025, 0.06697899445482214, 0.07545917125971646]}, "mutation_prompt": null}
