{"id": "e9ba5a1c-efb0-4d8e-83ce-28b0b68235d9", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "349e13b3-1e22-49ef-abc6-44c781c1a13d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e9ba5a1c-efb0-4d8e-83ce-28b0b68235d9", "metadata": {}, "mutation_prompt": null}
{"id": "9537b3ba-5d20-459a-81ae-cad93aaa5eb8", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e9ba5a1c-efb0-4d8e-83ce-28b0b68235d9", "metadata": {}, "mutation_prompt": null}
{"id": "93105e93-345c-49eb-965b-02c290b02af9", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e9ba5a1c-efb0-4d8e-83ce-28b0b68235d9", "metadata": {}, "mutation_prompt": null}
{"id": "74a29ad0-0b9b-447f-b8bb-3f76c0036e43", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e9ba5a1c-efb0-4d8e-83ce-28b0b68235d9", "metadata": {}, "mutation_prompt": null}
{"id": "03bf34f4-73cc-47df-882e-cc6d84d89aef", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.particle_count = 30\n        self.max_iter = budget // self.particle_count\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "HybridPSODE", "description": "Utilizing a hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 5, "fitness": 0.1196317409850203, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.08.", "error": "", "parent_id": "e9ba5a1c-efb0-4d8e-83ce-28b0b68235d9", "metadata": {"aucs": [0.23008190891295166, 0.2630334983809788, 0.23000600411978467, 0.23430936815646308, 0.21535865738117466, 0.2665692250752171, 0.2168830627818843, 0.24299466475967513, 0.22528860203831869, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06750055365702279, 0.06478101155655602, 0.05779355605586445, 0.06621170817049316, 0.06633302072738645, 0.07334183193812438, 0.06059989879273597, 0.07830498628246985, 0.06634691355989875, 0.07664824349235966, 0.06332506693692519, 0.05708735759953143, 0.06345249925953211, 0.053123397298712516, 0.06305797986630202, 0.06323939021781011, 0.061019913286328165, 0.052756827457449806, 0.09284656940478508, 0.08373424147755215, 0.07307287910941418, 0.06993322518247713, 0.07362556696117228, 0.08484511803306904, 0.07206113700830497, 0.07055469736899833, 0.0862756365970554, 0.11439271887868929, 0.11283812447863006, 0.13236286301442557, 0.11362023084900097, 0.17371210789469627, 0.11751000369055442, 0.16199003509262744, 0.11246416131127845, 0.11236294595271268, 0.20233887187366895, 0.16767662392732996, 0.19729133734007398, 0.1715093902229028, 0.1632826073254502, 0.15873691354924102, 0.18728359594002664, 0.17376363404914297, 0.19253007966499514, 0.0643301548440317, 0.06407603798054717, 0.07153221406105659, 0.07965466274380817, 0.03370516456177797, 0.0509360798514934, 0.07379826301865255, 0.04062513985845162, 0.0430587695271919, 0.04948279826218549, 0.05007001572522585, 0.03986731379115549, 0.07971779203878981, 0.05624734277871701, 0.10528793650053636, 0.060261936868935884, 0.07108948222415767, 0.040869593459042286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07337032626566364, 0.10336811316259031, 0.08901669582852423, 0.10839881915875338, 0.04041557853252542, 0.09917448395460471, 0.09651185548371866, 0.09631559133533318, 0.08506225646532695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004695297756840744, 0.008989099785183696, 0.005923149231575775, 0.007821943228388029, 0.0048385888330682025, 0.008866339136432533, 0.0076605577318756835, 0.024093741439158323, 0.023739181788623553, 0.23832441942579619, 0.24362394427291134, 0.26625630276875556, 0.24972284148300983, 0.27314976361677423, 0.24689100723027402, 0.2760181075390882, 0.24881598722360632, 0.24324413076719786, 0.06407498089742225, 0.05517357258696576, 0.06415099602233532, 0.06775405715680805, 0.05700479888286625, 0.06984867290919361, 0.0625600086656164, 0.07510580842084125, 0.0706969816833285, 0.13239604966542173, 0.2018109053103574, 0.13678731521374743, 0.12992717824522626, 0.13410928047375614, 0.13235498252564226, 0.12938720945061855, 0.1265082467048293, 0.13833182984217762, 0.1879875594799697, 0.22484000635936618, 0.20451795024968855, 0.2138618218431949, 0.19121168735203398, 0.20687808363628768, 0.2034499270073491, 0.190697106897058, 0.19783126903888681, 0.12568083253956264, 0.14594342300842, 0.1259635778365097, 0.14802836679347742, 0.12897313764073282, 0.14392679432052558, 0.1718933296354913, 0.14090723845385422, 0.13283166457236073, 0.18953059717144694, 0.22215310719751324, 0.20368463335694054, 0.21877169744766456, 0.19177366280759678, 0.18638582395737213, 0.2240001956264197, 0.20886688205514625, 0.17230540393460136, 0.17141647351400568, 0.17665362399895967, 0.17178185758114672, 0.1733917053759002, 0.16480885200716333, 0.1807892329970291, 0.18277320610474235, 0.1603529786998351, 0.18074734695525363, 0.16795298131355052, 0.1706533577287488, 0.1682789472180699, 0.3702914089659952, 0.23324184308397378, 0.2706992181190865, 0.2442544711488196, 0.2988167070490817, 0.2739238602905302, 0.2593746271027584, 0.2380343485798433, 0.35029222135511806, 0.17251226909480322, 0.17145673712436105, 0.12838373512652945, 0.23384907876807104, 0.187160877349689, 0.2792650759872023, 0.18012346149804093, 0.18991790412368026, 0.19114651661165782, 0.18299095385409403, 0.18594733240737338, 0.18014719151159608, 0.18292583022505737, 0.20616200230642912, 0.19251921562282437, 0.07361768320047157, 0.06275125022833838, 0.07395484534155805, 0.06596574340522765, 0.06707945673477367, 0.06206749002414513, 0.06554353698793114, 0.05851004378286484, 0.08606661187984332]}, "mutation_prompt": null}
{"id": "b5def24c-ecd2-4e6e-a548-4f04633a5609", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.particle_count = 30\n        self.max_iter = budget // self.particle_count\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "HybridPSODE", "description": "Utilizing a hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03bf34f4-73cc-47df-882e-cc6d84d89aef", "metadata": {"aucs": [0.23008190891295166, 0.2630334983809788, 0.23000600411978467, 0.23430936815646308, 0.21535865738117466, 0.2665692250752171, 0.2168830627818843, 0.24299466475967513, 0.22528860203831869, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06750055365702279, 0.06478101155655602, 0.05779355605586445, 0.06621170817049316, 0.06633302072738645, 0.07334183193812438, 0.06059989879273597, 0.07830498628246985, 0.06634691355989875, 0.07664824349235966, 0.06332506693692519, 0.05708735759953143, 0.06345249925953211, 0.053123397298712516, 0.06305797986630202, 0.06323939021781011, 0.061019913286328165, 0.052756827457449806, 0.09284656940478508, 0.08373424147755215, 0.07307287910941418, 0.06993322518247713, 0.07362556696117228, 0.08484511803306904, 0.07206113700830497, 0.07055469736899833, 0.0862756365970554, 0.11439271887868929, 0.11283812447863006, 0.13236286301442557, 0.11362023084900097, 0.17371210789469627, 0.11751000369055442, 0.16199003509262744, 0.11246416131127845, 0.11236294595271268, 0.20233887187366895, 0.16767662392732996, 0.19729133734007398, 0.1715093902229028, 0.1632826073254502, 0.15873691354924102, 0.18728359594002664, 0.17376363404914297, 0.19253007966499514, 0.0643301548440317, 0.06407603798054717, 0.07153221406105659, 0.07965466274380817, 0.03370516456177797, 0.0509360798514934, 0.07379826301865255, 0.04062513985845162, 0.0430587695271919, 0.04948279826218549, 0.05007001572522585, 0.03986731379115549, 0.07971779203878981, 0.05624734277871701, 0.10528793650053636, 0.060261936868935884, 0.07108948222415767, 0.040869593459042286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07337032626566364, 0.10336811316259031, 0.08901669582852423, 0.10839881915875338, 0.04041557853252542, 0.09917448395460471, 0.09651185548371866, 0.09631559133533318, 0.08506225646532695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004695297756840744, 0.008989099785183696, 0.005923149231575775, 0.007821943228388029, 0.0048385888330682025, 0.008866339136432533, 0.0076605577318756835, 0.024093741439158323, 0.023739181788623553, 0.23832441942579619, 0.24362394427291134, 0.26625630276875556, 0.24972284148300983, 0.27314976361677423, 0.24689100723027402, 0.2760181075390882, 0.24881598722360632, 0.24324413076719786, 0.06407498089742225, 0.05517357258696576, 0.06415099602233532, 0.06775405715680805, 0.05700479888286625, 0.06984867290919361, 0.0625600086656164, 0.07510580842084125, 0.0706969816833285, 0.13239604966542173, 0.2018109053103574, 0.13678731521374743, 0.12992717824522626, 0.13410928047375614, 0.13235498252564226, 0.12938720945061855, 0.1265082467048293, 0.13833182984217762, 0.1879875594799697, 0.22484000635936618, 0.20451795024968855, 0.2138618218431949, 0.19121168735203398, 0.20687808363628768, 0.2034499270073491, 0.190697106897058, 0.19783126903888681, 0.12568083253956264, 0.14594342300842, 0.1259635778365097, 0.14802836679347742, 0.12897313764073282, 0.14392679432052558, 0.1718933296354913, 0.14090723845385422, 0.13283166457236073, 0.18953059717144694, 0.22215310719751324, 0.20368463335694054, 0.21877169744766456, 0.19177366280759678, 0.18638582395737213, 0.2240001956264197, 0.20886688205514625, 0.17230540393460136, 0.17141647351400568, 0.17665362399895967, 0.17178185758114672, 0.1733917053759002, 0.16480885200716333, 0.1807892329970291, 0.18277320610474235, 0.1603529786998351, 0.18074734695525363, 0.16795298131355052, 0.1706533577287488, 0.1682789472180699, 0.3702914089659952, 0.23324184308397378, 0.2706992181190865, 0.2442544711488196, 0.2988167070490817, 0.2739238602905302, 0.2593746271027584, 0.2380343485798433, 0.35029222135511806, 0.17251226909480322, 0.17145673712436105, 0.12838373512652945, 0.23384907876807104, 0.187160877349689, 0.2792650759872023, 0.18012346149804093, 0.18991790412368026, 0.19114651661165782, 0.18299095385409403, 0.18594733240737338, 0.18014719151159608, 0.18292583022505737, 0.20616200230642912, 0.19251921562282437, 0.07361768320047157, 0.06275125022833838, 0.07395484534155805, 0.06596574340522765, 0.06707945673477367, 0.06206749002414513, 0.06554353698793114, 0.05851004378286484, 0.08606661187984332]}, "mutation_prompt": null}
{"id": "e8a77627-1874-49e0-bbf1-af13a29c9f88", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.particle_count = 30\n        self.max_iter = budget // self.particle_count\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "HybridPSODE", "description": "Utilizing a hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03bf34f4-73cc-47df-882e-cc6d84d89aef", "metadata": {"aucs": [0.23008190891295166, 0.2630334983809788, 0.23000600411978467, 0.23430936815646308, 0.21535865738117466, 0.2665692250752171, 0.2168830627818843, 0.24299466475967513, 0.22528860203831869, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06750055365702279, 0.06478101155655602, 0.05779355605586445, 0.06621170817049316, 0.06633302072738645, 0.07334183193812438, 0.06059989879273597, 0.07830498628246985, 0.06634691355989875, 0.07664824349235966, 0.06332506693692519, 0.05708735759953143, 0.06345249925953211, 0.053123397298712516, 0.06305797986630202, 0.06323939021781011, 0.061019913286328165, 0.052756827457449806, 0.09284656940478508, 0.08373424147755215, 0.07307287910941418, 0.06993322518247713, 0.07362556696117228, 0.08484511803306904, 0.07206113700830497, 0.07055469736899833, 0.0862756365970554, 0.11439271887868929, 0.11283812447863006, 0.13236286301442557, 0.11362023084900097, 0.17371210789469627, 0.11751000369055442, 0.16199003509262744, 0.11246416131127845, 0.11236294595271268, 0.20233887187366895, 0.16767662392732996, 0.19729133734007398, 0.1715093902229028, 0.1632826073254502, 0.15873691354924102, 0.18728359594002664, 0.17376363404914297, 0.19253007966499514, 0.0643301548440317, 0.06407603798054717, 0.07153221406105659, 0.07965466274380817, 0.03370516456177797, 0.0509360798514934, 0.07379826301865255, 0.04062513985845162, 0.0430587695271919, 0.04948279826218549, 0.05007001572522585, 0.03986731379115549, 0.07971779203878981, 0.05624734277871701, 0.10528793650053636, 0.060261936868935884, 0.07108948222415767, 0.040869593459042286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07337032626566364, 0.10336811316259031, 0.08901669582852423, 0.10839881915875338, 0.04041557853252542, 0.09917448395460471, 0.09651185548371866, 0.09631559133533318, 0.08506225646532695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004695297756840744, 0.008989099785183696, 0.005923149231575775, 0.007821943228388029, 0.0048385888330682025, 0.008866339136432533, 0.0076605577318756835, 0.024093741439158323, 0.023739181788623553, 0.23832441942579619, 0.24362394427291134, 0.26625630276875556, 0.24972284148300983, 0.27314976361677423, 0.24689100723027402, 0.2760181075390882, 0.24881598722360632, 0.24324413076719786, 0.06407498089742225, 0.05517357258696576, 0.06415099602233532, 0.06775405715680805, 0.05700479888286625, 0.06984867290919361, 0.0625600086656164, 0.07510580842084125, 0.0706969816833285, 0.13239604966542173, 0.2018109053103574, 0.13678731521374743, 0.12992717824522626, 0.13410928047375614, 0.13235498252564226, 0.12938720945061855, 0.1265082467048293, 0.13833182984217762, 0.1879875594799697, 0.22484000635936618, 0.20451795024968855, 0.2138618218431949, 0.19121168735203398, 0.20687808363628768, 0.2034499270073491, 0.190697106897058, 0.19783126903888681, 0.12568083253956264, 0.14594342300842, 0.1259635778365097, 0.14802836679347742, 0.12897313764073282, 0.14392679432052558, 0.1718933296354913, 0.14090723845385422, 0.13283166457236073, 0.18953059717144694, 0.22215310719751324, 0.20368463335694054, 0.21877169744766456, 0.19177366280759678, 0.18638582395737213, 0.2240001956264197, 0.20886688205514625, 0.17230540393460136, 0.17141647351400568, 0.17665362399895967, 0.17178185758114672, 0.1733917053759002, 0.16480885200716333, 0.1807892329970291, 0.18277320610474235, 0.1603529786998351, 0.18074734695525363, 0.16795298131355052, 0.1706533577287488, 0.1682789472180699, 0.3702914089659952, 0.23324184308397378, 0.2706992181190865, 0.2442544711488196, 0.2988167070490817, 0.2739238602905302, 0.2593746271027584, 0.2380343485798433, 0.35029222135511806, 0.17251226909480322, 0.17145673712436105, 0.12838373512652945, 0.23384907876807104, 0.187160877349689, 0.2792650759872023, 0.18012346149804093, 0.18991790412368026, 0.19114651661165782, 0.18299095385409403, 0.18594733240737338, 0.18014719151159608, 0.18292583022505737, 0.20616200230642912, 0.19251921562282437, 0.07361768320047157, 0.06275125022833838, 0.07395484534155805, 0.06596574340522765, 0.06707945673477367, 0.06206749002414513, 0.06554353698793114, 0.05851004378286484, 0.08606661187984332]}, "mutation_prompt": null}
{"id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 8, "fitness": 0.1302577958973202, "feedback": "The algorithm DynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "03bf34f4-73cc-47df-882e-cc6d84d89aef", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "b4c0ec68-9bb0-4138-b0ec-77ffc12a3ca3", "solution": "import numpy as np\n\nclass ImprovedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    self.w = max(0.1, min(0.9, self.w + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.w * velocity\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "ImprovedDynamicHybridPSODE", "description": "Improving parameter adaptation by incorporating a dynamic inertia weight to balance exploration and exploitation.", "configspace": "", "generation": 9, "fitness": 0.12839952724407877, "feedback": "The algorithm ImprovedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.299870613688074, 0.28013347636017627, 0.276312703918309, 0.22135054557828604, 0.23761558120139725, 0.2504691641823603, 0.25944252992837846, 0.27863965542998814, 0.2680193131223858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08062873309352525, 0.05861732882370729, 0.070309395784236, 0.07778381357062703, 0.07413254681742387, 0.06328654808786671, 0.06644668743019067, 0.07822394668168453, 0.07251573705345271, 0.0690432152369318, 0.0704268559617951, 0.050623620484152365, 0.06979730101002335, 0.04787733182489917, 0.06013100122534221, 0.049748128519967794, 0.060368312945695335, 0.06960946369688681, 0.10212996462244228, 0.08978891580095294, 0.09600358574564538, 0.09579116837980606, 0.11056994644960993, 0.09227817551610884, 0.09108077072915288, 0.09019185732691004, 0.10600662344240341, 0.13935664991119068, 0.15584547842669128, 0.1337885080993414, 0.14870397936949886, 0.1503816277185528, 0.12082263077381317, 0.15614345645643246, 0.15188098944462802, 0.13751983818140412, 0.21086297136169774, 0.20894242010034958, 0.20299147170822252, 0.1847686196822247, 0.16365178229388444, 0.20514270413200153, 0.19872639752756538, 0.24003734281652778, 0.1917810406757453, 0.0343599296504159, 0.0935572062377682, 0.074504483102104, 0.049815265679112763, 0.08622442966376753, 0.06779371513958377, 0.07492225728220292, 0.07974424411240721, 0.08915775662719172, 0.0938652416606357, 0.10861156853719911, 0.11353985103193498, 0.11833821803599953, 0.08687147084118518, 0.07848030108366821, 0.09337125268351887, 0.08783372342990936, 0.09286083581844706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09411549768255956, 0.07850470013805477, 0.08776799297493432, 0.06469400696151428, 0.05780233310246752, 0.06699425857524677, 0.09784699599222035, 0.07322866381818893, 0.05260421226546208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.035828777974620474, 0.03780634105796821, 0.012242067443821392, 0.018154850412814283, 0.05300993905611173, 0.03561018790292525, 0.013092433953869831, 0.022253908404809453, 0.01288091250437351, 0.3026069520133394, 0.280244247164974, 0.30517213198304116, 0.25770148832892914, 0.2777073622156292, 0.2508003192897176, 0.3247407542024727, 0.2966546579793131, 0.29380483109300626, 0.07122308608124672, 0.05351701781904161, 0.06144953161776989, 0.06647711050113014, 0.06822632669447737, 0.04798323606959387, 0.05994461683412777, 0.05936135356201466, 0.07479334812511862, 0.16241286998218962, 0.12195561055087689, 0.16225322427665034, 0.13642901496545567, 0.13819299030084697, 0.1406869539693698, 0.16166037296232172, 0.12560187000016698, 0.16176775211791228, 0.18872875633795994, 0.207310985871635, 0.2314001906576869, 0.2128397135485387, 0.20297090948875962, 0.21282785835804885, 0.20088475784546878, 0.20446399806551807, 0.19557549210325176, 0.13740538376460554, 0.14371201794995336, 0.14074375104189019, 0.15566781107507854, 0.17966782764567202, 0.1671764291882173, 0.1373035247260026, 0.16283537947690563, 0.13806395516518566, 0.1840007360115543, 0.21636856177926223, 0.17752542880912292, 0.19519865048651863, 0.17143931387767808, 0.18103147575335776, 0.19822532522266878, 0.17640186475730757, 0.18724074602733498, 0.16650799747081146, 0.1706179595610915, 0.16613078197533326, 0.17056940846222368, 0.16229150036137685, 0.16680453058352707, 0.16659943834947222, 0.16277091430920376, 0.1610756704358044, 0.1695590776681618, 0.15972132086948, 0.23978833176128378, 0.32617589221362897, 0.2964578058286784, 0.31372280385911777, 0.375383137916507, 0.34516197132729365, 0.32145321350889644, 0.30837872435997593, 0.22924590181147375, 0.22773666347433386, 0.1693278941141947, 0.22701927674691003, 0.1930223921895139, 0.30736440674148935, 0.17914348019569348, 0.20266722440927232, 0.18562612710753112, 0.18830791354651888, 0.18207037485595512, 0.18243676434521816, 0.1891826918386339, 0.20232975238343154, 0.18059263199351283, 0.17986966121508863, 0.20082565943750819, 0.07812472220833644, 0.06819977640849195, 0.06653961705931266, 0.0619311863000197, 0.07061635246468212, 0.06499260644454785, 0.06693657644801365, 0.06710688617917071, 0.06862868905479302]}, "mutation_prompt": null}
{"id": "937e98af-5805-4fd8-b118-e84809acb6cc", "solution": "import numpy as np\n\nclass ImprovedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.population_size = 10\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.population_size):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.population_size)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n\n            # Dynamic population size adaptation\n            improvement_ratio = (best_fitness - self.F_prev_best) / (self.F_prev_best + 1e-8)\n            if improvement_ratio > 0.1 and self.population_size < self.max_population_size:\n                self.population_size += 1\n            elif improvement_ratio < 0.01 and self.population_size > self.min_population_size:\n                self.population_size -= 1\n\n            self.F_prev_best = best_fitness\n\n        return best_solution", "name": "ImprovedDynamicHybridPSODE", "description": "Improving convergence by introducing a dynamic population size adaptation mechanism to balance exploration and exploitation.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSODE' object has no attribute 'F_prev_best'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSODE' object has no attribute 'F_prev_best'\")", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {}, "mutation_prompt": null}
{"id": "f464743e-d128-4a6c-996b-2ea71b36ff2c", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "565913f5-c50e-48f7-923e-5edff9f420e3", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    distance = np.linalg.norm(particle - best_solution)\n                    scaling_factor = np.exp(-distance)\n                    \n                    mutated_particle = particle + self.F * scaling_factor * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing the exploration capability by incorporating a dynamic scaling factor based on particle distance to improve convergence diversity.", "configspace": "", "generation": 12, "fitness": 0.09126361618791203, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.1693851206246032, 0.1745037171131082, 0.17303453324713447, 0.17457120171462015, 0.17824342837532148, 0.16277089210769757, 0.17020507393349127, 0.17516498696056182, 0.21003933833492017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0634421308543408, 0.04800319916816265, 0.06718241253063373, 0.035640417859832296, 0.04540970268955602, 0.0409776503286432, 0.0469855053517334, 0.041849326080850235, 0.04152309786170938, 0.03649812578181222, 0.026998588311997973, 0.05955507611227295, 0.03700343396317063, 0.043321393357412696, 0.048852620618012765, 0.03359191057077293, 0.03799109931437683, 0.0370900396747873, 0.07804284022653452, 0.08315124932635931, 0.07481905885029905, 0.0846478034557624, 0.07634710873005479, 0.08634204725918737, 0.0819593452987949, 0.0815982603886336, 0.11196210054139533, 0.08116084410730817, 0.10166930790551032, 0.08001910827326297, 0.06637111573758392, 0.08322078465850336, 0.09085550126122599, 0.0694571187982661, 0.051754837557373534, 0.057644809435749456, 0.10595325099709896, 0.11179964033414858, 0.10689879293534954, 0.1430626263775735, 0.10632392215617581, 0.13730308272679836, 0.11822819955320951, 0.13138372405962095, 0.1130826586437601, 0.017366202903680406, 0.0038606459864864995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0035872305540196603, 0.018854988342700718, 0.0, 0.008330653881699068, 0.0, 0.015106550563547483, 0.017471846352403397, 0.0, 0.0, 0.01443234735805965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0483406310681368, 0.04436961902432923, 0.05900242745364326, 0.05535149581426935, 0.06308083603834824, 0.06415296439371554, 0.05273806358813693, 0.04213992798964006, 0.05812046204959187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02951106092136413, 0.19835352016405483, 0.19169067750510316, 0.20702919704994116, 0.2022391716311498, 0.2225459488359014, 0.2054395436337465, 0.2069580336030573, 0.22120989132977809, 0.20404848190521774, 0.03658525275072444, 0.04901770214029744, 0.051784059369973545, 0.07608456461796054, 0.050342278102236016, 0.05215978259740839, 0.04319125905829535, 0.04451501751773124, 0.05377222946022464, 0.14526913470720992, 0.16153646730080795, 0.18478565919401257, 0.1371979973802927, 0.13678722400310506, 0.13474604378637012, 0.1465933454040691, 0.14377839354243138, 0.14195274272682523, 0.17110754127040473, 0.1625067999347911, 0.1488247324707792, 0.16327618807960098, 0.16589519556716203, 0.16370292934931874, 0.1715151110758355, 0.1605075353768829, 0.16536906738734158, 0.10938429886325796, 0.10930442441956201, 0.10193666708156013, 0.10690306675200612, 0.11008212398404071, 0.11403943539800043, 0.10963897866682526, 0.11490107631806745, 0.10940331647172985, 0.15626356299990152, 0.16523322389811546, 0.16519694859135836, 0.16278605502879295, 0.1390510723414613, 0.2268875794945313, 0.1487272799332624, 0.15556267521303468, 0.16039265387690083, 0.15360929678970336, 0.14178073403189884, 0.15959941790634347, 0.14539376572594898, 0.14762574690918973, 0.15209731698383344, 0.1569394149658574, 0.14349117673875555, 0.15230079990795842, 0.15853568278858332, 0.19361797901581834, 0.1909816700117012, 0.17133300101611726, 0.15149347106813948, 0.16456988147386076, 0.1514658160070258, 0.18961139962467866, 0.16681990315029094, 0.17617094116413778, 0.13640054574051597, 0.14940881438673403, 0.15033681385576858, 0.19473066878202194, 0.25318452628705623, 0.21576345091082016, 0.15228843817407067, 0.14766420356992782, 0.17661564378474337, 0.18642344325798865, 0.17638944237295417, 0.19426779357563473, 0.18061047202466762, 0.19346026159567997, 0.18292981590226232, 0.18476573010320685, 0.18726120489178633, 0.05321341220067077, 0.06608959171033235, 0.06302109516754151, 0.04837762008481439, 0.05093323862682697, 0.04524513115220452, 0.050559980123318415, 0.05096491217891419, 0.05587315496539125]}, "mutation_prompt": null}
{"id": "89b5c75f-0b56-4fa9-a716-52823cdf4f73", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "df99cffe-6281-4e63-80bc-353a19f61b60", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "c8e935e4-e0f0-4d0c-bbc8-609d11853a99", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "8e16f0cb-c469-486b-8ee5-c38189623da8", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Implementing a dynamic behavioral adjustment mechanism in the mutation and crossover operators based on particle fitness evaluations to better balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 16, "fitness": 0.1302577958973202, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "4101bc02-a373-413d-be9a-4000e2a29bb6", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                        self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                        self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Implementing a dynamic update mechanism for mutation and crossover parameters based on particle fitness to enhance exploration and exploitation in optimization.", "configspace": "", "generation": 17, "fitness": 0.12980870942618952, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.28839997666837247, 0.26597475738264686, 0.2818498958848078, 0.23314955652062808, 0.25430106525648366, 0.20383142584443292, 0.2463944131991902, 0.22298615999033078, 0.24589189954357993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.061605218381304616, 0.06697063736441666, 0.06951465667731205, 0.07100640909308553, 0.06701320448856696, 0.06009132392063765, 0.06415288656305307, 0.07244527190165007, 0.06580199998779412, 0.06501783005634898, 0.05927559401182936, 0.06929090941615357, 0.05035624315110421, 0.06693288881802095, 0.0578633434023621, 0.06425702856849203, 0.07064793757671595, 0.0553175463333051, 0.08510522069194904, 0.09286352306432144, 0.08297053312146674, 0.08071049152518062, 0.08367818602379773, 0.08381658931506353, 0.08525954140569791, 0.08962253544940901, 0.10003196177820506, 0.19384346921450746, 0.16251317932655207, 0.1203092095297088, 0.16378468082106978, 0.1187118594623705, 0.13877570985679755, 0.156443024415981, 0.16999496588177188, 0.12191852122372526, 0.19725360381007995, 0.2204205560565421, 0.1706467594394664, 0.1687122076216383, 0.22543851822905958, 0.1960954450970045, 0.18818903490241723, 0.21229177517594677, 0.1696309346654583, 0.07817023158642078, 0.07487637847748596, 0.12366400198240213, 0.09997158758592617, 0.06257958491355586, 0.07796383528656081, 0.09173921857746248, 0.06084678522615161, 0.09300234706859589, 0.10833912261353329, 0.10688815815879316, 0.09513105641454545, 0.11849806362137827, 0.1279947055013596, 0.0934955309508343, 0.08705862406236486, 0.10324524420748149, 0.059872437981608684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06869329512553846, 0.06537018518713356, 0.08193611364243769, 0.10327546129454801, 0.0875331260500345, 0.04972965710503141, 0.06190899554747098, 0.08307238299152997, 0.13216820685013642, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02720597388214896, 0.018852646421343544, 0.026387913891602, 0.030848683781297237, 0.01914092780185439, 0.028434449325879685, 0.0050639370648921656, 0.011815386093943059, 0.028969587888435178, 0.2937837413678349, 0.28346923355587206, 0.2650711367587266, 0.26237306120174875, 0.25327606795310287, 0.2658647189524812, 0.29827661378887793, 0.2752601705140054, 0.28292836572773183, 0.06332196670899304, 0.05860277436116501, 0.04897272571444877, 0.07639141227806301, 0.06423840793516666, 0.07301781674148022, 0.06770688327500551, 0.07051365402567189, 0.06344024855736441, 0.16104981036204769, 0.15891751366934237, 0.16145638623656833, 0.16675242628120246, 0.1883875251120226, 0.152270215390378, 0.16984047940113522, 0.15409219241530858, 0.13591986506337161, 0.2141112609887872, 0.21735601667803595, 0.21125286925154574, 0.20847967951992785, 0.23757428525976199, 0.2192796016884616, 0.18859542839045818, 0.22594599302084184, 0.17902463560457405, 0.1397386882872752, 0.14936058513852457, 0.14864497521052122, 0.1686853108223202, 0.16895595655546203, 0.18903440369751, 0.13958250383235737, 0.16635372745411892, 0.1444733292280478, 0.1868467275253607, 0.1849782418184034, 0.17441922105628527, 0.18656445176499314, 0.19582329430237355, 0.1743361918340497, 0.18183332337140035, 0.16452274381165533, 0.17796706538674512, 0.1710769463199453, 0.16410133481808098, 0.16785663741821244, 0.16624886573868536, 0.1746214863823723, 0.16793570271085612, 0.17290957862724066, 0.16771290271405814, 0.16470113065328373, 0.31172227176231193, 0.17994910913095297, 0.22768265018837996, 0.4279140800456135, 0.3259130024616307, 0.20323430780213392, 0.17448734811799882, 0.35718485763981345, 0.38399775697242233, 0.21569043168284918, 0.34445795738380547, 0.26217663359324006, 0.333203137497027, 0.27462222022594673, 0.2558910124706487, 0.21241893199273032, 0.1805088804861914, 0.2014474917316823, 0.1764001490952034, 0.17428319062308906, 0.18586741554777408, 0.1898196736699026, 0.18857438308068608, 0.1956931285314195, 0.19119975808388867, 0.18604333567113152, 0.1793916709854424, 0.08418789568971718, 0.056946443595379814, 0.06912337963627213, 0.07443177929639644, 0.07087088593026802, 0.07171486889547873, 0.06286153190700083, 0.0960096516637301, 0.06354354146759866]}, "mutation_prompt": null}
{"id": "b58c66af-7918-41cc-a8fa-cee90430aa3d", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "b3009f0a-ae9e-431f-9f06-30a5bc3eeb4e", "solution": "import numpy as np\n\nclass ImprovedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (best_solution - particle)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1) * (best_solution - particle)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "ImprovedDynamicHybridPSODE", "description": "Improving parameter update by incorporating a dynamic adaptation mechanism based on individual particle success.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {}, "mutation_prompt": null}
{"id": "d46ce93b-0b2f-48e4-8a9d-3d7ab6ebfbae", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "2b797296-30c7-4cd4-b8e8-a3ee5b68547b", "solution": "import numpy as np\n\nclass DiversePopulationDynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DiversePopulationDynamicHybridPSODE", "description": "Utilizing a diverse population initialization strategy to enhance exploration and avoid premature convergence in the optimization process.", "configspace": "", "generation": 21, "fitness": 0.1302577958973202, "feedback": "The algorithm DiversePopulationDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "1d740a92-6b06-4063-a815-89f6a282f378", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "d45f4657-e8d9-439d-838d-e0abe86d4060", "solution": "import numpy as np\n\nclass DynamicHybridPSODEMutation(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n        mutation_step = 0.1\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + mutation_step * (best_solution - particle) + mutation_step * (particle - particle) + mutation_step * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        mutation_step = max(0.01, min(0.5, mutation_step * 1.2)) if particle_fitness <= best_fitness else max(0.01, min(0.5, mutation_step * 0.8))\n        return best_solution", "name": "DynamicHybridPSODEMutation", "description": "Implementing a self-adaptive mutation strategy to dynamically adjust the mutation step size based on the fitness improvement of the particles.", "configspace": "", "generation": 23, "fitness": 0.10690561721826111, "feedback": "The algorithm DynamicHybridPSODEMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.1940870479765643, 0.22298612564017317, 0.2106929625331121, 0.21818301801390727, 0.19123279428106377, 0.20159908404315385, 0.18456098079111305, 0.2311243404673835, 0.20983538598317353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04981594092352348, 0.057721725800090495, 0.05771527876035687, 0.04524898845990266, 0.057948364974055755, 0.0699399988876046, 0.04227295218203364, 0.05067133350091624, 0.04799471379973186, 0.06646589526699098, 0.03543298642865211, 0.04986186411925342, 0.06652559396142255, 0.05110482006391326, 0.06160320958991106, 0.058456728305621986, 0.05161255052429348, 0.04530224649854042, 0.0800663888279809, 0.07721419310338828, 0.07553867038860951, 0.07542853966209351, 0.08351140448166483, 0.08159687333470012, 0.07219823408371007, 0.07940400456786989, 0.09182941500786124, 0.12372367769238224, 0.1253119888829315, 0.1277112094264723, 0.1007348206300569, 0.09957378038825859, 0.10706977076877922, 0.07827145834656679, 0.10062086383155033, 0.10807373011390353, 0.14004117759826618, 0.17226178423093774, 0.16110068368633368, 0.13950973473068884, 0.1482201624865238, 0.18830398980475094, 0.12096723253178876, 0.1753625080948401, 0.1540314858645363, 0.06976563016005854, 0.03733775670727968, 0.03129892268822165, 0.033369337839132984, 0.017307795898039102, 0.03972323844708714, 0.03147323623716258, 0.06907179128914998, 0.007463636311162203, 0.036599580500740525, 0.0872285855783137, 0.024493963369540905, 0.014601353360077729, 0.02145360484089398, 0.03500298698363635, 0.031015170287355787, 0.025395420058353158, 0.02942467650610381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08428098087327529, 0.07214651906237235, 0.04036545656169088, 0.05063046180460662, 0.05425398100243761, 0.0513156606200329, 0.07479438829432095, 0.06749326400202293, 0.0584456068985324, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004890209633115261, 0.029346147950048196, 0.005925138252836359, 0.0028182644240805077, 0.03368127589266512, 0.0011267496179024894, 0.0009843048907121066, 0.0010580757867466595, 0.0, 0.23029917370679198, 0.2212774123223228, 0.22040770792624254, 0.2318565060731027, 0.2337185551287655, 0.22384796634600457, 0.2282531755075342, 0.24835647583799159, 0.24848566961166074, 0.052225192645598884, 0.052332995511770064, 0.05066272855820275, 0.048167267309838335, 0.06244637620169613, 0.0560012301310302, 0.061621010912039864, 0.04392458401315347, 0.06185766787624747, 0.13201977389931385, 0.18939450250857182, 0.15968913428097076, 0.1592254853807431, 0.15059724965673538, 0.14558961975560125, 0.11949227354106728, 0.1397877968230823, 0.16366543023745472, 0.1857453805647098, 0.18660474665665294, 0.17895368474847695, 0.17247722442316915, 0.18831836466390905, 0.1850413997835353, 0.18877602423041595, 0.17223293544637086, 0.17856181717089525, 0.10994119658283596, 0.11550369713070319, 0.13672012366134745, 0.1301176453943228, 0.1300274466644582, 0.13859590416695644, 0.12838492867819273, 0.13687165520582711, 0.12072380012936879, 0.16352271190305478, 0.1831771017294015, 0.18585321184553283, 0.1530123492940031, 0.18144407164427, 0.18992967032118846, 0.17715662205086669, 0.171191698118064, 0.16384293079696632, 0.18001582125300553, 0.16073634513842694, 0.16745175549198776, 0.15943161584141452, 0.19070240464991361, 0.1620597965931383, 0.15399653573881056, 0.16560799184323682, 0.17440920022715, 0.2891017783123889, 0.16428816152667713, 0.20655998187328894, 0.14236594475538844, 0.2198935336429001, 0.18404553034831417, 0.21981081489625864, 0.23236493826377458, 0.215728383686555, 0.22512503578726917, 0.221956372424992, 0.21696100913720884, 0.26830912485238834, 0.24034260043669198, 0.18815849394349926, 0.16752791808606549, 0.23769463452553286, 0.1760593592843226, 0.1900755064870937, 0.18601774353212408, 0.21000519722084388, 0.18216209242836934, 0.20096787540923322, 0.1895480566024922, 0.1843024998033076, 0.20776815077123512, 0.17386507410690044, 0.05591759378715577, 0.06230387854474251, 0.06690668436410763, 0.07130590288393746, 0.06327028772462384, 0.057824958141146854, 0.053293526275690395, 0.05833562088152744, 0.0658483959366244]}, "mutation_prompt": null}
{"id": "1da68a17-e9ab-47bf-b5f1-a41ff0566b35", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "152eccac-e80d-473e-b044-6b42ee06718b", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "1b3550e3-59cb-460b-a89a-a6d2e6d77d37", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "01f7ef06-f642-46ba-8b1c-a9d1269bd70b", "solution": "import numpy as np\n\nclass AdaptiveDynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n        inertia_weight = 0.5\n        \n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    inertia_weight = 0.5 + 0.5 * np.exp(-0.1 * (particle_fitness - best_fitness))\n                    velocity = inertia_weight * velocity + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    particle += velocity\n        return best_solution", "name": "AdaptiveDynamicHybridPSODE", "description": "Incorporating adaptive inertia weight to dynamically adjust the particle's velocity based on the historical performance.", "configspace": "", "generation": 27, "fitness": 0.119689469424963, "feedback": "The algorithm AdaptiveDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.08.", "error": "", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2492802533231394, 0.2528139298825095, 0.22348359131569584, 0.21105867646521004, 0.21600767414852795, 0.21159900730351733, 0.23119077204756922, 0.22037223834508568, 0.21439505943359982, 0.0, 0.0, 0.0, 0.00443012490545569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06475636671696172, 0.06800759980250459, 0.05195751076731725, 0.05915187116274834, 0.05831847528775147, 0.07780922473856755, 0.07721184052571606, 0.07353473569457669, 0.05645147983636434, 0.0658677385334151, 0.06408048427661794, 0.09877348858432755, 0.06932920514912877, 0.04576759859773849, 0.046555876696742104, 0.062292324795368725, 0.07332296849471875, 0.07713323780930859, 0.08808835644859114, 0.0990423565316576, 0.07733100121886272, 0.09398202679632528, 0.10482130342956975, 0.07885449787638588, 0.08389941611007612, 0.07705048559892291, 0.10362146755939661, 0.11843062905731405, 0.15466494583503354, 0.11801429179991152, 0.14672911510705144, 0.11261375545491392, 0.12043617306064136, 0.1199731814127184, 0.1427954612975696, 0.11327623055542191, 0.15575847240798724, 0.20538615892253087, 0.15512749788382318, 0.1833922102047929, 0.1949867578507143, 0.16585681172180955, 0.2123383260267916, 0.17033085851227148, 0.17866681474584545, 0.06868882607278992, 0.08799907622871328, 0.05782821020573958, 0.0015909226209296357, 0.0548772954980119, 0.022292583452821813, 0.06291278985043136, 0.08500792795000811, 0.06276790904151908, 0.07504221770226782, 0.06636603463757984, 0.06929376981793212, 0.09131560913470549, 0.0787861656936466, 0.06297558097805955, 0.06185597801599774, 0.08128587373989249, 0.07820503533649303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10014288220078438, 0.09580269950125297, 0.08715071827251808, 0.0756208141599134, 0.03293994125540589, 0.06978582889507434, 0.060741438945951076, 0.10931392853447175, 0.040698865716468524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0015116077648713588, 0.0, 0.009427620588208785, 0.015615015870733773, 0.036258971879868485, 0.0006046672614147264, 0.0022152715235673748, 0.00010842984264147759, 0.0, 0.24012289007006304, 0.24454621768495877, 0.21628725811930494, 0.22904540540916396, 0.23655488787312207, 0.27672454059007334, 0.23914302249203367, 0.2620121644039515, 0.27885500471688074, 0.05282131035415971, 0.05738026569892751, 0.0594681553519284, 0.07776343809087283, 0.06024068830761986, 0.060362066064383324, 0.06454034165829037, 0.06750307637485709, 0.0570812758970598, 0.1604122555032984, 0.12944621036370296, 0.13928449936286558, 0.14867324240614976, 0.14165873886003277, 0.15129777258239752, 0.1753260956298507, 0.11989368958715241, 0.16762490887625336, 0.19692414081218268, 0.22678390037444374, 0.18895279082444116, 0.20216762235005503, 0.1942248988377795, 0.2238238289654798, 0.17545648500773636, 0.17723220331643041, 0.1867664936371064, 0.14375785567207044, 0.16485754932380392, 0.13464303861184523, 0.1589290759420916, 0.1332532792566855, 0.15560835741056633, 0.12265656103560796, 0.11713807647672314, 0.12975609635907315, 0.172002821489596, 0.1751310515228297, 0.17437978651986885, 0.18865536505289038, 0.18574646412159845, 0.17620434204390878, 0.18836081706303298, 0.17007450356275244, 0.19785203358161263, 0.16225285548363677, 0.1602042789679835, 0.17874647503315755, 0.1693964170809058, 0.16927457626778886, 0.16804854229712496, 0.1659979005354626, 0.16022938197276293, 0.16180122371403394, 0.2325481335019849, 0.16141426041124285, 0.1686152631207326, 0.2413777612796998, 0.3603222264535949, 0.2020744831476644, 0.2387906958514706, 0.34942018129962027, 0.27388132820681443, 0.2347068633981264, 0.3233587765770868, 0.1724521959055597, 0.2831932744558612, 0.20302332253125577, 0.3493772755933664, 0.22798907156228643, 0.238320787657185, 0.28470611801788925, 0.1925898906640956, 0.17554757130075138, 0.18484368185075495, 0.19127958293683756, 0.1768653985437666, 0.18030265740797857, 0.18201391684158053, 0.21598417394110825, 0.1930948300226457, 0.06209606724856953, 0.0708083859921318, 0.06913946872647991, 0.07021698783379382, 0.07546271483035727, 0.0709107313039049, 0.07436303508966469, 0.0750971295178835, 0.06792417365603864]}, "mutation_prompt": null}
{"id": "a06373ad-3bfa-4e81-b811-895993b3647a", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "9031a860-bd3a-46db-9ef1-db2caada18e0", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "303f7d69-8383-4268-b9ed-e2b255d25189", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "97aa0555-8f42-48e4-9484-c9f61cae621d", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "988a6230-a086-4243-b8dd-6bf2e361b33a", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "3a208ab8-28d8-4ca9-ba98-b9d7db81d44d", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "a9c57012-96af-48a3-9d16-85f8913502b1", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n            # Dynamic adjustment of population size based on fitness improvements\n            if best_fitness < np.mean(self.best_fitnesses):\n                self.particle_count = min(100, self.particle_count + 5)\n            else:\n                self.particle_count = max(5, self.particle_count - 5)\n            self.best_fitnesses.append(best_fitness)\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Incorporating a dynamic adjustment of population size based on fitness improvements to enhance exploration and exploitation in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicHybridPSODE' object has no attribute 'best_fitnesses'\").", "error": "AttributeError(\"'DynamicHybridPSODE' object has no attribute 'best_fitnesses'\")", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {}, "mutation_prompt": null}
{"id": "41c09f43-e5fb-4d24-98b7-de155e0e81f4", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "d2bdd2a8-c45e-49b0-bc08-4230d417b91a", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "07c95456-5284-4c26-b18e-ea056c33067a", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n        return best_solution", "name": "DynamicHybridPSODE", "description": "Introducing a dynamic adjustment of mutation and crossover parameters based on fitness improvements to enhance convergence speed and exploration in the optimization process.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2715133285994388, 0.2767794546186725, 0.2899305059339986, 0.21587938186729083, 0.22894472340977468, 0.22295462197452087, 0.265895405978368, 0.24524365410406113, 0.254656783629127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022319284445622145, 0.0, 0.0, 0.0, 0.0773148675558355, 0.07533773556031464, 0.08309551363733603, 0.07173990654283646, 0.08384055522190736, 0.0753076097330273, 0.06670234283848298, 0.06685734033941404, 0.0649330931959825, 0.06194633492469925, 0.05971672052458088, 0.06099945101862192, 0.053047114132387274, 0.05581238649988096, 0.08558071242634269, 0.05434621822951724, 0.05022165391149214, 0.04492838623589379, 0.08470642349347435, 0.09135211368101681, 0.08093922873280013, 0.08069107831019717, 0.09753067042649177, 0.08166922031747703, 0.08300586472793925, 0.08947468940580205, 0.09818164257309947, 0.15437834710205356, 0.12051383376497471, 0.12267268606064352, 0.13070736202833544, 0.1263237306311863, 0.124644758216095, 0.13833561290995966, 0.14026512543583902, 0.13068522449608266, 0.1951972303565611, 0.16589836683180315, 0.21349034432639113, 0.19061301864295654, 0.22436047831950678, 0.16400279546188234, 0.20559911161550604, 0.17305548616149957, 0.21931492825539767, 0.10974554055803876, 0.10467401184560765, 0.0885175022175041, 0.04886790590194301, 0.09284544903716974, 0.0790531126898053, 0.10289165575960402, 0.08407042445601054, 0.11613205789503167, 0.10947413359779334, 0.09186908917075909, 0.1093642076061847, 0.10903821422481286, 0.11450434058154191, 0.10502181834166513, 0.11053387429539197, 0.1016362200092521, 0.09906962290981769, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07102629544861416, 0.07284249726790804, 0.16868299029868372, 0.12250049244056149, 0.07274251954845645, 0.049083976051562006, 0.12793246665462354, 0.08149135335612556, 0.08150925608529636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027489872209414012, 0.014491208945409895, 0.01172860606131143, 0.02306009169307177, 0.02683850026727974, 0.027127276194271133, 0.008847754874539926, 0.0028272704514072933, 0.0380941303391219, 0.2799380579660883, 0.3084745063080401, 0.2706249161546901, 0.26332009859697714, 0.30244337693007173, 0.283803524230837, 0.3242700570903383, 0.30385871214369997, 0.30023741523888237, 0.0624794629933384, 0.06950550618711893, 0.05518275504918713, 0.07718488514625621, 0.057356959576223, 0.0733634371327827, 0.07425406848092753, 0.07611074575055188, 0.06740388724514557, 0.1441557081046958, 0.1528096697609631, 0.15715637075455158, 0.1521324739778347, 0.15843072693990035, 0.1276268780270049, 0.13491110814542406, 0.14851387882064715, 0.14739842442294504, 0.20351798025382972, 0.21687309115612663, 0.20727297628565133, 0.22236092961555598, 0.22520371111187365, 0.21650700405028556, 0.21216350015921193, 0.191448041683151, 0.19201125191599988, 0.13578551791729765, 0.157212315252504, 0.1349024642191453, 0.18800482517829598, 0.1628596291866381, 0.15466496524107787, 0.1474889086796527, 0.13832448340407577, 0.1298206819165838, 0.18065063858108732, 0.1707802867823759, 0.17911819181842947, 0.1864942835914538, 0.19060977060778572, 0.19914783374333744, 0.2008261200390269, 0.22469469476864956, 0.1825910805016494, 0.16646702153349002, 0.16277729318015277, 0.16727462352738365, 0.1736575456569288, 0.16585706918013932, 0.17763103266673808, 0.1623178290515993, 0.1685018325670944, 0.16771131039277776, 0.29865220570142725, 0.2613318469277994, 0.18064825701705722, 0.3467945237013824, 0.18382435269124475, 0.22114357865356382, 0.2925872750785742, 0.380407946084394, 0.2133021173832269, 0.41071640802341025, 0.3700997608767409, 0.2408395334597495, 0.1930446993211279, 0.22519728568038877, 0.20438808749195247, 0.2209282200778564, 0.24382132799426703, 0.27188238823246313, 0.199654831314388, 0.18308809091873834, 0.18909907881966115, 0.18905480238786587, 0.1860179787329056, 0.1868619581445905, 0.18158556007745663, 0.18572757062347123, 0.2004110311748103, 0.0651025110461344, 0.06492579006919097, 0.06889684399247986, 0.07920928056233911, 0.06505101505499367, 0.07667160580983112, 0.06555812773790148, 0.06192342085625624, 0.07167605684935263]}, "mutation_prompt": null}
{"id": "3f6f6a95-9583-4ee8-ab09-3cbf92384dd0", "solution": "import numpy as np\n\nclass ImprovedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "ImprovedDynamicHybridPSODE", "description": "Implementing a dynamic mutation strategy based on particle fitness for enhanced exploration and exploitation in the optimization process.", "configspace": "", "generation": 38, "fitness": 0.13693009892129304, "feedback": "The algorithm ImprovedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "2974f55a-5dd5-4b8d-9e4e-ba2bce6f7ded", "metadata": {"aucs": [0.2884547511314457, 0.2991905370218969, 0.30378473292311003, 0.2577451271411969, 0.2534578268953983, 0.28372891916868215, 0.2561006951231667, 0.2511501649391302, 0.25013481147494954, 0.0, 0.0, 0.0, 0.01699851039471323, 0.0, 0.018921571592216968, 0.0086990556435661, 0.0, 0.0, 0.07765391803378074, 0.07489480676089588, 0.0685221721950886, 0.07451795656354332, 0.06298455890062926, 0.07228890082026718, 0.06723119669199185, 0.08631254717937009, 0.06984394142252437, 0.08946117475914539, 0.05977576187276301, 0.0683073998364977, 0.057495583674728956, 0.05448281988287218, 0.06087961706732692, 0.05119217899391515, 0.07231387893939645, 0.06782000485950301, 0.09150303402899829, 0.09289217084995505, 0.0959540341417291, 0.08711324546666, 0.08656081482770273, 0.13033663380794946, 0.09014261712579441, 0.08935779006426803, 0.09002941072414161, 0.14651411792968538, 0.1425059590548421, 0.12014151138468532, 0.14838970380617866, 0.17577161494385252, 0.1586273448273312, 0.1397940373141211, 0.17012697022058854, 0.18260126072652316, 0.16563321048188373, 0.2058898806206324, 0.1939180768197184, 0.21963205987918333, 0.2046167486099062, 0.1631438521062064, 0.2043583185398058, 0.2223992593048677, 0.2271728447139948, 0.1158333466642274, 0.11445717270107203, 0.10290939500963836, 0.06158066099795323, 0.08943164800924219, 0.04163053241464809, 0.10668016869890362, 0.08667544813838413, 0.07504488206036986, 0.117727335694371, 0.15208925443955612, 0.11539143196897272, 0.11164456345534457, 0.13007162514642912, 0.12136430427617906, 0.13836955176125798, 0.11480935669073367, 0.12121017175336546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015621279929609044, 0.0, 0.08976220422404313, 0.09155552021700131, 0.07294785094390976, 0.0822426031300767, 0.11910943069556124, 0.05515463925225028, 0.10025239431851607, 0.12546198661305352, 0.1194396448717091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.033608903639004706, 0.03888976227453855, 0.059783620516146385, 0.022211271597934124, 0.03176804716078718, 0.038698768364647695, 0.02526439885144971, 0.008396823544741028, 0.009480899402064091, 0.2730328232507303, 0.3100980784823869, 0.2976001144784798, 0.27977462263739494, 0.2770437746637019, 0.2470710794193357, 0.29444843271226473, 0.33130704949897094, 0.2904833424949166, 0.0714696828565633, 0.07645365954622152, 0.0442974016014267, 0.054117748801901455, 0.06782545420821406, 0.06849776440881394, 0.0620829913399894, 0.07082571787298475, 0.06986256013094794, 0.1455641709072748, 0.16346154742418006, 0.14966414155165242, 0.17026605292157415, 0.13044115319373306, 0.14888026916889485, 0.16765857098895742, 0.13298637678521086, 0.15737385154835848, 0.19787947543557105, 0.2057320538787436, 0.21810943011154138, 0.2268957579279579, 0.22272242368478457, 0.2135272570521366, 0.22982396322941756, 0.2277700587534326, 0.18036206799170917, 0.14689285964044396, 0.1583984473255221, 0.15235481672527673, 0.16882716367649742, 0.15415289918361763, 0.16816632944781473, 0.138917059422501, 0.15905414034524457, 0.15583548882459708, 0.20980108024829947, 0.22339448069171441, 0.1996272490148664, 0.2119087130412125, 0.17950046187563673, 0.19246782699428444, 0.23649090859015964, 0.19107833824743214, 0.23977229460837268, 0.1735565728212105, 0.17637160185995449, 0.17135105586713695, 0.16287217270499932, 0.18395586497788652, 0.16893770380420847, 0.1714810342881521, 0.17245182243108337, 0.16558368341953533, 0.22576180607358198, 0.2454458498562977, 0.2201593967650396, 0.42044251230924123, 0.17606535690312908, 0.3958749196897786, 0.36968660970014355, 0.34422877807022656, 0.1688855965422883, 0.3165349713962403, 0.4108384791964832, 0.31812774166194346, 0.16574828569121214, 0.3095647725344338, 0.19746336586354996, 0.27844440800207526, 0.266789377861983, 0.2150811788855962, 0.19697751880424652, 0.19147789348234923, 0.2045282746929209, 0.1884482285825323, 0.18726279521290246, 0.18529342870704235, 0.19189881438416112, 0.19346721301503533, 0.19118481100326257, 0.07837971505381214, 0.07186390056776693, 0.07024482544909405, 0.07502249088391344, 0.07989642712583667, 0.07197125529674564, 0.07883342133485727, 0.06913348963677601, 0.07121792207214894]}, "mutation_prompt": null}
{"id": "f518cb87-3626-46ec-8b3b-21ad7b7dd963", "solution": "import numpy as np\n\nclass ImprovedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n                    \n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "ImprovedDynamicHybridPSODE", "description": "Implementing a dynamic mutation strategy based on particle fitness for enhanced exploration and exploitation in the optimization process.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f6f6a95-9583-4ee8-ab09-3cbf92384dd0", "metadata": {"aucs": [0.2884547511314457, 0.2991905370218969, 0.30378473292311003, 0.2577451271411969, 0.2534578268953983, 0.28372891916868215, 0.2561006951231667, 0.2511501649391302, 0.25013481147494954, 0.0, 0.0, 0.0, 0.01699851039471323, 0.0, 0.018921571592216968, 0.0086990556435661, 0.0, 0.0, 0.07765391803378074, 0.07489480676089588, 0.0685221721950886, 0.07451795656354332, 0.06298455890062926, 0.07228890082026718, 0.06723119669199185, 0.08631254717937009, 0.06984394142252437, 0.08946117475914539, 0.05977576187276301, 0.0683073998364977, 0.057495583674728956, 0.05448281988287218, 0.06087961706732692, 0.05119217899391515, 0.07231387893939645, 0.06782000485950301, 0.09150303402899829, 0.09289217084995505, 0.0959540341417291, 0.08711324546666, 0.08656081482770273, 0.13033663380794946, 0.09014261712579441, 0.08935779006426803, 0.09002941072414161, 0.14651411792968538, 0.1425059590548421, 0.12014151138468532, 0.14838970380617866, 0.17577161494385252, 0.1586273448273312, 0.1397940373141211, 0.17012697022058854, 0.18260126072652316, 0.16563321048188373, 0.2058898806206324, 0.1939180768197184, 0.21963205987918333, 0.2046167486099062, 0.1631438521062064, 0.2043583185398058, 0.2223992593048677, 0.2271728447139948, 0.1158333466642274, 0.11445717270107203, 0.10290939500963836, 0.06158066099795323, 0.08943164800924219, 0.04163053241464809, 0.10668016869890362, 0.08667544813838413, 0.07504488206036986, 0.117727335694371, 0.15208925443955612, 0.11539143196897272, 0.11164456345534457, 0.13007162514642912, 0.12136430427617906, 0.13836955176125798, 0.11480935669073367, 0.12121017175336546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015621279929609044, 0.0, 0.08976220422404313, 0.09155552021700131, 0.07294785094390976, 0.0822426031300767, 0.11910943069556124, 0.05515463925225028, 0.10025239431851607, 0.12546198661305352, 0.1194396448717091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.033608903639004706, 0.03888976227453855, 0.059783620516146385, 0.022211271597934124, 0.03176804716078718, 0.038698768364647695, 0.02526439885144971, 0.008396823544741028, 0.009480899402064091, 0.2730328232507303, 0.3100980784823869, 0.2976001144784798, 0.27977462263739494, 0.2770437746637019, 0.2470710794193357, 0.29444843271226473, 0.33130704949897094, 0.2904833424949166, 0.0714696828565633, 0.07645365954622152, 0.0442974016014267, 0.054117748801901455, 0.06782545420821406, 0.06849776440881394, 0.0620829913399894, 0.07082571787298475, 0.06986256013094794, 0.1455641709072748, 0.16346154742418006, 0.14966414155165242, 0.17026605292157415, 0.13044115319373306, 0.14888026916889485, 0.16765857098895742, 0.13298637678521086, 0.15737385154835848, 0.19787947543557105, 0.2057320538787436, 0.21810943011154138, 0.2268957579279579, 0.22272242368478457, 0.2135272570521366, 0.22982396322941756, 0.2277700587534326, 0.18036206799170917, 0.14689285964044396, 0.1583984473255221, 0.15235481672527673, 0.16882716367649742, 0.15415289918361763, 0.16816632944781473, 0.138917059422501, 0.15905414034524457, 0.15583548882459708, 0.20980108024829947, 0.22339448069171441, 0.1996272490148664, 0.2119087130412125, 0.17950046187563673, 0.19246782699428444, 0.23649090859015964, 0.19107833824743214, 0.23977229460837268, 0.1735565728212105, 0.17637160185995449, 0.17135105586713695, 0.16287217270499932, 0.18395586497788652, 0.16893770380420847, 0.1714810342881521, 0.17245182243108337, 0.16558368341953533, 0.22576180607358198, 0.2454458498562977, 0.2201593967650396, 0.42044251230924123, 0.17606535690312908, 0.3958749196897786, 0.36968660970014355, 0.34422877807022656, 0.1688855965422883, 0.3165349713962403, 0.4108384791964832, 0.31812774166194346, 0.16574828569121214, 0.3095647725344338, 0.19746336586354996, 0.27844440800207526, 0.266789377861983, 0.2150811788855962, 0.19697751880424652, 0.19147789348234923, 0.2045282746929209, 0.1884482285825323, 0.18726279521290246, 0.18529342870704235, 0.19189881438416112, 0.19346721301503533, 0.19118481100326257, 0.07837971505381214, 0.07186390056776693, 0.07024482544909405, 0.07502249088391344, 0.07989642712583667, 0.07197125529674564, 0.07883342133485727, 0.06913348963677601, 0.07121792207214894]}, "mutation_prompt": null}
{"id": "f0ebbc86-fe21-4e23-b0d6-5ca7186dfd79", "solution": "import numpy as np\n\nclass ImprovedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # New mutation mechanism based on adaptive differential evolution\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < 0.5 or i == np.random.randint(0, self.dim):\n                            particle[i] = particle[i] + np.random.uniform(-0.5, 0.5) * np.linalg.norm(particle - best_solution)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "ImprovedDynamicHybridPSODE", "description": "Introducing a new mutation mechanism based on adaptive differential evolution to enhance population diversity and convergence speed.", "configspace": "", "generation": 40, "fitness": 0.13830584759365935, "feedback": "The algorithm ImprovedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "3f6f6a95-9583-4ee8-ab09-3cbf92384dd0", "metadata": {"aucs": [0.2964837285766788, 0.3074076117103577, 0.30362647180830993, 0.23665908902950816, 0.25652464562129385, 0.22224865698125762, 0.3129699321538362, 0.26441463627261197, 0.26238008268192314, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06831954459992162, 0.0685290671771539, 0.07854581493041513, 0.07953897173961888, 0.07037400654131798, 0.0824857717172447, 0.06351707457670841, 0.08135718354435795, 0.06327264558750156, 0.05856156474670493, 0.07285861025968354, 0.06638984020562, 0.05456449862139401, 0.051684723266309684, 0.05310423770411765, 0.06762977599297593, 0.06578614027279672, 0.06451185927142211, 0.1283768080207499, 0.139512350176337, 0.1591174885410166, 0.12451552265110188, 0.11523151258418052, 0.1363842815985007, 0.12045874944172896, 0.11979009019501574, 0.11768062633330212, 0.15569594758012884, 0.19326934888499414, 0.15133709614789148, 0.17831563503024572, 0.16256121943988855, 0.1775605892163269, 0.14251531302883902, 0.16782103267179738, 0.15134319547516084, 0.18099264586339991, 0.21169929114020491, 0.20993565477326437, 0.24724153120322057, 0.2320189480436211, 0.26463231693252387, 0.2138197690941086, 0.20267801909793826, 0.17776211849746248, 0.05531152096001912, 0.11835168021082776, 0.10898397179375441, 0.0433596368383804, 0.09653749412464041, 0.06882857768336037, 0.11210379486436084, 0.10238791151640303, 0.08723833380742108, 0.1359038943111227, 0.1173682111160298, 0.12083945659645556, 0.11227820879742356, 0.1078578708380108, 0.12200193905714296, 0.10754123133283933, 0.11421261511051795, 0.13923935687236244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07685813671757846, 0.07638442848091909, 0.08397577508093601, 0.08766290967305645, 0.061066373382614114, 0.09482508948973667, 0.06826333398421225, 0.19814054464900355, 0.05375559548007547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02859369990784455, 0.037595672066241814, 0.04573864935324423, 0.04563793466429211, 0.06274330716399523, 0.021004467493727086, 0.007493885957542301, 0.020733916113033768, 0.01521462872046686, 0.2809589595015731, 0.29945400504990505, 0.28076465787345073, 0.2930388345185502, 0.3364219127823035, 0.29401553011555714, 0.3139905659957921, 0.31472343949611703, 0.294509962150187, 0.06769705501486312, 0.06534626104651942, 0.06412623595570222, 0.07795699381134269, 0.08024286638115807, 0.09684844956777416, 0.0824740500600124, 0.06033920567880757, 0.07381653485035744, 0.13938398801930107, 0.15807681079458202, 0.1414272747296922, 0.1392246738756201, 0.1586159265012217, 0.12756104268430557, 0.13241860446041887, 0.15153282878492336, 0.165404815072129, 0.23701882036932753, 0.20796738354366906, 0.21161919093201365, 0.23768882518099588, 0.23289136570532454, 0.2204744279774492, 0.17594954257122886, 0.20688656801284222, 0.18066775885906805, 0.147711695178947, 0.16260625476837143, 0.15551517796638759, 0.18259885282124722, 0.1664336521104115, 0.1655878558344075, 0.14474107630863398, 0.14262085043119754, 0.1603277479796147, 0.1988814419181183, 0.17613393692911028, 0.19987463555453533, 0.18796403126021222, 0.1980496764823153, 0.22979318152907757, 0.19072139413921163, 0.23173509773080836, 0.23170353169155522, 0.17663032001793488, 0.16879252488425622, 0.17294103272256967, 0.16562685963039636, 0.16679068181921208, 0.16955575319226646, 0.1729367205899065, 0.1645327913635658, 0.16664565674732346, 0.1834511398430152, 0.29331089442082103, 0.2764032606074167, 0.40667025785144983, 0.1898269569540063, 0.28190162101595884, 0.37110864691279954, 0.33510302122572266, 0.37201037004353166, 0.32156927703170646, 0.34065885307206667, 0.2652260231987349, 0.16848322891002643, 0.1842753902324199, 0.36179287302561147, 0.17324898729491633, 0.2141688115555569, 0.18780435838626086, 0.1919618878943561, 0.17749631353500628, 0.18811077750106153, 0.17466503227070318, 0.1959997243633601, 0.19142694840659835, 0.20132816498820016, 0.16885020987175847, 0.19078965833362416, 0.05908851557807271, 0.0656377705866531, 0.0731929767850863, 0.07698244325093051, 0.08368210330674797, 0.07185788242748692, 0.08259922910858841, 0.08056160951079872, 0.061782719940098985]}, "mutation_prompt": null}
{"id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 41, "fitness": 0.17721500955897374, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "f0ebbc86-fe21-4e23-b0d6-5ca7186dfd79", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "447bc008-c2fc-4b5a-9f04-9375e62eae34", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "c961671d-d156-4afe-b54e-c2dd8190eb37", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "f89605ad-290f-42f2-af0b-fd26eb2f33f9", "solution": "import numpy as np\n\nclass DynamicImprovedHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1) * (1 - best_fitness / func(best_solution))\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "DynamicImprovedHybridPSODE", "description": "Improving exploration by incorporating a dynamic mutation strategy based on individual particle fitness.", "configspace": "", "generation": 44, "fitness": 0.015748054474031062, "feedback": "The algorithm DynamicImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.03.", "error": "", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.07004820631194686, 0.03307244247115704, 0.059680722467107095, 0.008313623462374742, 0.00424845738598667, 0.02519121602214769, 0.03212835352013377, 0.046223021063309555, 0.02975661868124313, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004529016054958479, 0.0016235449300194826, 0.0, 0.0, 0.013935605478583635, 0.001200375565353351, 0.0, 0.01494056462266491, 0.0017756910057896702, 0.0, 0.0, 0.0, 0.0, 0.0002155180953176128, 0.0, 0.0, 0.0, 0.0, 0.032323622760345616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008518338443395446, 0.0, 0.12383033797694099, 0.06701850967147294, 0.0, 0.0, 0.09452415868628128, 0.04255978571034025, 0.015873222109947904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006189359082932611, 0.03859639884753929, 0.05459392587746714, 0.003752043920743575, 0.007152562049659195, 0.04260258319586141, 0.008828119269461032, 0.025779377491590982, 0.0, 0.09116171693594755, 0.0699308042573411, 0.05534564673217934, 0.10264986706466339, 0.04177859725983113, 0.06565932771017324, 0.11411347464494936, 0.06601984023591301, 0.04972461584719734, 0.020322385246613672, 0.0, 0.0, 0.044555131067093634, 0.0, 0.028339450902277852, 0.05639263182634424, 0.005196255819053697, 0.0, 0.0915437797502816, 0.014684602823718751, 0.06795011122385053, 0.09121143776313201, 0.01713681109810239, 0.0423020421047533, 0.12237199858748082, 0.02407568193321552, 0.07544914227299482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027918465338367282, 0.0119858013967592, 0.01491295006491733, 0.04506913840181803, 0.012967245647967918, 0.016667973895937216, 0.033822674886284765, 0.056521377751778124, 0.020548299014808813, 0.01335574241962445, 0.039577986282941624, 0.007974131442669896, 0.010932072046338392, 0.009660401758079917, 0.012800890258605424, 0.011910539142263366, 0.011396183061189502, 0.015870266677088907, 0.05787468216457914, 0.1200870343934679, 0.0809959487176728, 0.10726544462823862, 0.06953050036808295, 0.12456358843519488, 0.05182654953770338, 0.047689025539561, 0.07268714549093314, 0.0, 0.0, 0.009878077649961625, 0.0, 0.0, 0.0, 0.0036880858595579324, 0.0, 0.004660868779134408]}, "mutation_prompt": null}
{"id": "5cb505b1-9a87-4029-8ba3-c1cebe688f79", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Improving exploration and exploitation balance by incorporating a dynamic adaptive mechanism for adjusting mutation and crossover rates.", "configspace": "", "generation": 45, "fitness": 0.17721500955897374, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "c49fe6eb-7237-4ccd-b613-0341f3baf432", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "4ba3a0ed-db18-40c9-b856-8c18c995e4d7", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - best_fitness / particle_fitness)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration and exploitation by incorporating a dynamic adaptation of mutation and crossover probabilities.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'particle_fitness' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'particle_fitness' referenced before assignment\")", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {}, "mutation_prompt": null}
{"id": "914f3be8-393d-4dd2-a79e-6f680506fbd9", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "c359ec66-3f6c-40d1-9680-e53332fdcb79", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "b8d6a7d3-b637-4e21-85d4-b276f74719f6", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "ca5c5629-d7bf-46ff-8249-2f1a49775005", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - best_fitness / particle_fitness)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1) * particle_fitness / best_fitness))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Incorporating a dynamic adaptation mechanism for the mutation and crossover rates to enhance exploration and exploitation trade-off.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'particle_fitness' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'particle_fitness' referenced before assignment\")", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {}, "mutation_prompt": null}
{"id": "37a0ef40-f2e4-411b-83bb-ec289e43a981", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "793a2d47-33f0-4c09-9ae1-8f6a568cf1ae", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "4dd14f1c-e6a5-4a0f-9def-65b32c2eb9e9", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "592b2ec6-bd2f-4335-a3ec-9b367205d11f", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "7190a0ed-fadd-4ecd-84fc-83a9af06c055", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by introducing a velocity update mechanism based on particle's best position.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3350509164993668, 0.31779119581406634, 0.34063328856486563, 0.3635292310544178, 0.33337094052070515, 0.31633696949405143, 0.31239157259745287, 0.31774896542236053, 0.31730230615844235, 0.0, 0.0, 0.0, 0.0, 0.0003066375595144333, 0.0, 0.0, 0.0, 0.0, 0.0582919618578257, 0.07351782161545017, 0.08401266361777993, 0.07545027026058893, 0.07143900902282585, 0.08669903560363779, 0.08144945658228042, 0.06921705186717009, 0.06406546312023509, 0.06620624425890398, 0.055830454144959685, 0.08511152150166612, 0.06341420695146005, 0.07456314958073984, 0.07668600019802652, 0.0653947055238312, 0.0673674463785936, 0.08118249901328434, 0.857446277198338, 0.667546601655126, 0.7442807095408943, 0.554187943903458, 0.6246137374339233, 0.7531308117054543, 0.8631399371681443, 0.64241646013914, 0.6702798634278747, 0.1856780071200198, 0.23004601044984418, 0.1996505783153989, 0.19530290733066769, 0.2361628669550594, 0.20496365283712337, 0.21474267821526094, 0.196018691764268, 0.2129065209913763, 0.21683187569678541, 0.22225468172816776, 0.21626798104822786, 0.25405015028701716, 0.2623672783156208, 0.2570058107167883, 0.21641395872173175, 0.22471641858912184, 0.22903891197989268, 0.08723845169250455, 0.1115535044340844, 0.08678694672025011, 0.1267054281028127, 0.12104624085949545, 0.1205726321160191, 0.11319294805779267, 0.11191731411721395, 0.1146171760096586, 0.12679622376926725, 0.13329544299688456, 0.1388113009229115, 0.16742299852529308, 0.11868171197484134, 0.11689729182716635, 0.13295667789557752, 0.13203916275117322, 0.13981143867348234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07362362295352265, 0.14702446091017718, 0.08628137116092927, 0.07706963223672192, 0.07992804717155977, 0.06517722321808939, 0.08108789232039837, 0.11473909080156641, 0.10370160052909905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03821553944344547, 0.04298645160481862, 0.029807540144669242, 0.051608695513164826, 0.08102880834312987, 0.07484988595946229, 0.03296767189845595, 0.024683124715342952, 0.02519976835211568, 0.3352462116602699, 0.34919069182304496, 0.33307553819207214, 0.31936945767901903, 0.3084733136132759, 0.34026782751740403, 0.32584053939574864, 0.34637079646454005, 0.32445247653913023, 0.06250680306583467, 0.05846421042068217, 0.06682569519963344, 0.07494356402560975, 0.08987740743502182, 0.07793115772763759, 0.07736905609414657, 0.08926773731574522, 0.08586008824794722, 0.1354046906096339, 0.16509179485818282, 0.16466041690728794, 0.18915669603723861, 0.13865500039737833, 0.16766639807934647, 0.1630985134750419, 0.18720175150047558, 0.17641707704101905, 0.2433054377987911, 0.22827490290314656, 0.23174850631927468, 0.24044180595252018, 0.2596276365931701, 0.2482479996094925, 0.20515093264118922, 0.20246790752531973, 0.20772474141272623, 0.1623212988676802, 0.1606245119505938, 0.16016699525466416, 0.17156760518565684, 0.18835255017674468, 0.2123070962618857, 0.14983991366096305, 0.13861873741547825, 0.16025480932293246, 0.19132590158926588, 0.17976983181590944, 0.19101271218039273, 0.19848898947831817, 0.20579274926445157, 0.22398761433957493, 0.2077278667452812, 0.21570765527424496, 0.2159201091773879, 0.18479949382286054, 0.1818858569099724, 0.1764224383012446, 0.18043476657866597, 0.17637676087310716, 0.1722211045220009, 0.1710386584757776, 0.17682543004840023, 0.17920859959171254, 0.1748380678096162, 0.157327856907981, 0.17461458476278713, 0.3226057828997039, 0.44001830864741165, 0.38685899576731386, 0.3493324155696763, 0.3194685207385156, 0.47421910326678696, 0.42294852276492323, 0.20071086995420706, 0.3662669587641523, 0.43178447543100607, 0.2397335830470695, 0.2670061795464329, 0.36447532787071124, 0.3498396935987771, 0.2567473191673364, 0.19059822810905203, 0.2040201876568718, 0.1793409718412644, 0.17878964703690725, 0.17936115505943617, 0.1814072396811255, 0.18963583174439147, 0.18492480431581626, 0.17481907732661062, 0.07977986234552248, 0.07159831584438636, 0.07751227016312257, 0.08355726249008855, 0.08906240595511083, 0.0984219287421293, 0.07875503308595, 0.07691886341456888, 0.07232194750607268]}, "mutation_prompt": null}
{"id": "bed3230a-e249-48ac-8de4-afbd21ae0621", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive inertia weight\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    # Differential evolution crossover\n                    crossed_particle = np.where(np.random.uniform(0, 1, self.dim) < self.CR, mutated_particle, particle)\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Improving convergence through adaptive inertia weight and differential evolution crossover.", "configspace": "", "generation": 57, "fitness": 0.17763602568152523, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "4c611da3-d45e-4e00-9d2f-2d528f2eec71", "metadata": {"aucs": [0.3715904826840971, 0.3277538103336718, 0.32442196342257257, 0.34109645744163486, 0.30609748921099433, 0.3180241901051022, 0.3307516530611515, 0.3208047245074399, 0.3087803686873636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09121598401306996, 0.09503997584162893, 0.0676510522821887, 0.11770276705747074, 0.09825666222659601, 0.07145402890178176, 0.07898574390930535, 0.0803707519643505, 0.07505610321742773, 0.10032109594514582, 0.08211319774007064, 0.08382875584266003, 0.047182772674162154, 0.07175669270349139, 0.06501338457226424, 0.07779225119445565, 0.08947538583640091, 0.07510259019914212, 0.664095792086371, 0.4999560832453329, 0.5551641865968513, 0.7141227670618628, 0.7125478234693681, 0.6354235433290002, 0.7139782844649891, 0.6860031803524265, 0.5849431319245105, 0.21937760861246614, 0.20865233574650333, 0.1968079884662901, 0.2010493544736861, 0.22362011583523922, 0.22720052089617104, 0.2253198304293904, 0.2132219149851865, 0.19040475406402446, 0.21723637267348828, 0.2201270453747336, 0.21417559120158303, 0.25525720132953456, 0.23477958542621413, 0.2560562498882788, 0.2914075675610238, 0.2705229789500543, 0.2246422696882444, 0.1385785220643878, 0.13411151830894963, 0.06773349904758563, 0.11654943693257735, 0.18564662689369316, 0.08267407600912613, 0.12308598728559372, 0.1265886032481296, 0.11568143618929483, 0.12296371675127027, 0.11345412533654287, 0.11573693038455313, 0.1264502144084768, 0.12405922069687492, 0.13006717753645258, 0.13463831598194942, 0.13089441931820034, 0.10957477545391303, 0.0, 0.0, 0.0, 0.0, 0.02974707281877531, 0.0, 0.0, 0.004149287448091177, 0.0, 0.08031480018440396, 0.1035739026072855, 0.11976241661362508, 0.05410832259076326, 0.12633552975242368, 0.07319639975606351, 0.1004661880344131, 0.062131795649381094, 0.07074566352987022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05321065731631136, 0.04325165057514446, 0.05065365379987197, 0.0476313503390795, 0.026258992215888233, 0.05550030118444249, 0.023404750206856062, 0.04952620849060152, 0.047247379105992304, 0.32737285541842953, 0.31527168809379913, 0.3261442711236563, 0.3418267038691034, 0.3171628934694758, 0.3055457668116198, 0.33881617506087947, 0.3250254295549708, 0.3098965968841626, 0.07128910534928146, 0.08641141125425233, 0.05842753292811942, 0.08465464048514948, 0.07056616186553255, 0.08103545848469862, 0.06793249953144187, 0.10165849783616265, 0.08595753744546908, 0.1592176586509091, 0.15686484202576834, 0.16045335900564772, 0.16040748747696543, 0.17193472814566302, 0.16169420210820595, 0.1738609654777723, 0.1705391872847697, 0.14244888412812562, 0.22529216524654783, 0.22476646977545867, 0.2368425602552261, 0.2375220964554099, 0.23689809278411722, 0.24023206994291535, 0.18723626214809164, 0.2261209930412451, 0.2216764120030421, 0.16765944516156595, 0.17024719160317103, 0.16894519148567666, 0.17969823202488822, 0.18459064904389966, 0.14785251904713936, 0.15862744785012817, 0.1610059984301503, 0.19115124480180934, 0.21562408498762353, 0.21185944314310168, 0.19401611342651526, 0.18489644730517807, 0.1929891892178628, 0.1931422028564591, 0.2006907032509947, 0.18855200468428535, 0.19908972584607587, 0.17636847036588932, 0.18273054627823915, 0.17255206675246337, 0.17833221432234492, 0.18973306733726547, 0.1728223054546223, 0.1748781011693562, 0.1845728744445646, 0.16575808893441557, 0.4233550025577135, 0.3701513602718305, 0.1874362365938962, 0.4244103353699782, 0.5019199456535361, 0.5842275647469881, 0.39414200795744936, 0.43754978810119727, 0.20284938521457574, 0.379888353082807, 0.367519201008187, 0.3644856269499014, 0.236820780820318, 0.20569896850869063, 0.456213815837185, 0.27463136006482514, 0.15503774417731497, 0.2666730378320561, 0.18630683776493784, 0.17315003458432898, 0.20221341509240542, 0.17944292177317567, 0.19368702922990366, 0.18742234815137937, 0.19027033215798117, 0.18461760595792798, 0.18369932205594774, 0.08497132027209187, 0.08020284066498495, 0.09409442217996544, 0.0879336654760573, 0.08328693499080342, 0.07017456653476273, 0.08511277784615501, 0.07561434632814856, 0.0833417429769523]}, "mutation_prompt": null}
{"id": "b7b3811e-3787-435c-b773-f1a65aabbd03", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive inertia weight\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    # Differential evolution crossover\n                    crossed_particle = np.where(np.random.uniform(0, 1, self.dim) < self.CR, mutated_particle, particle)\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Improving convergence through adaptive inertia weight and differential evolution crossover.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bed3230a-e249-48ac-8de4-afbd21ae0621", "metadata": {"aucs": [0.3715904826840971, 0.3277538103336718, 0.32442196342257257, 0.34109645744163486, 0.30609748921099433, 0.3180241901051022, 0.3307516530611515, 0.3208047245074399, 0.3087803686873636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09121598401306996, 0.09503997584162893, 0.0676510522821887, 0.11770276705747074, 0.09825666222659601, 0.07145402890178176, 0.07898574390930535, 0.0803707519643505, 0.07505610321742773, 0.10032109594514582, 0.08211319774007064, 0.08382875584266003, 0.047182772674162154, 0.07175669270349139, 0.06501338457226424, 0.07779225119445565, 0.08947538583640091, 0.07510259019914212, 0.664095792086371, 0.4999560832453329, 0.5551641865968513, 0.7141227670618628, 0.7125478234693681, 0.6354235433290002, 0.7139782844649891, 0.6860031803524265, 0.5849431319245105, 0.21937760861246614, 0.20865233574650333, 0.1968079884662901, 0.2010493544736861, 0.22362011583523922, 0.22720052089617104, 0.2253198304293904, 0.2132219149851865, 0.19040475406402446, 0.21723637267348828, 0.2201270453747336, 0.21417559120158303, 0.25525720132953456, 0.23477958542621413, 0.2560562498882788, 0.2914075675610238, 0.2705229789500543, 0.2246422696882444, 0.1385785220643878, 0.13411151830894963, 0.06773349904758563, 0.11654943693257735, 0.18564662689369316, 0.08267407600912613, 0.12308598728559372, 0.1265886032481296, 0.11568143618929483, 0.12296371675127027, 0.11345412533654287, 0.11573693038455313, 0.1264502144084768, 0.12405922069687492, 0.13006717753645258, 0.13463831598194942, 0.13089441931820034, 0.10957477545391303, 0.0, 0.0, 0.0, 0.0, 0.02974707281877531, 0.0, 0.0, 0.004149287448091177, 0.0, 0.08031480018440396, 0.1035739026072855, 0.11976241661362508, 0.05410832259076326, 0.12633552975242368, 0.07319639975606351, 0.1004661880344131, 0.062131795649381094, 0.07074566352987022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05321065731631136, 0.04325165057514446, 0.05065365379987197, 0.0476313503390795, 0.026258992215888233, 0.05550030118444249, 0.023404750206856062, 0.04952620849060152, 0.047247379105992304, 0.32737285541842953, 0.31527168809379913, 0.3261442711236563, 0.3418267038691034, 0.3171628934694758, 0.3055457668116198, 0.33881617506087947, 0.3250254295549708, 0.3098965968841626, 0.07128910534928146, 0.08641141125425233, 0.05842753292811942, 0.08465464048514948, 0.07056616186553255, 0.08103545848469862, 0.06793249953144187, 0.10165849783616265, 0.08595753744546908, 0.1592176586509091, 0.15686484202576834, 0.16045335900564772, 0.16040748747696543, 0.17193472814566302, 0.16169420210820595, 0.1738609654777723, 0.1705391872847697, 0.14244888412812562, 0.22529216524654783, 0.22476646977545867, 0.2368425602552261, 0.2375220964554099, 0.23689809278411722, 0.24023206994291535, 0.18723626214809164, 0.2261209930412451, 0.2216764120030421, 0.16765944516156595, 0.17024719160317103, 0.16894519148567666, 0.17969823202488822, 0.18459064904389966, 0.14785251904713936, 0.15862744785012817, 0.1610059984301503, 0.19115124480180934, 0.21562408498762353, 0.21185944314310168, 0.19401611342651526, 0.18489644730517807, 0.1929891892178628, 0.1931422028564591, 0.2006907032509947, 0.18855200468428535, 0.19908972584607587, 0.17636847036588932, 0.18273054627823915, 0.17255206675246337, 0.17833221432234492, 0.18973306733726547, 0.1728223054546223, 0.1748781011693562, 0.1845728744445646, 0.16575808893441557, 0.4233550025577135, 0.3701513602718305, 0.1874362365938962, 0.4244103353699782, 0.5019199456535361, 0.5842275647469881, 0.39414200795744936, 0.43754978810119727, 0.20284938521457574, 0.379888353082807, 0.367519201008187, 0.3644856269499014, 0.236820780820318, 0.20569896850869063, 0.456213815837185, 0.27463136006482514, 0.15503774417731497, 0.2666730378320561, 0.18630683776493784, 0.17315003458432898, 0.20221341509240542, 0.17944292177317567, 0.19368702922990366, 0.18742234815137937, 0.19027033215798117, 0.18461760595792798, 0.18369932205594774, 0.08497132027209187, 0.08020284066498495, 0.09409442217996544, 0.0879336654760573, 0.08328693499080342, 0.07017456653476273, 0.08511277784615501, 0.07561434632814856, 0.0833417429769523]}, "mutation_prompt": null}
{"id": "8e1662ac-1e5d-4d13-bad5-3527fb6c59e9", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive inertia weight\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    # Differential evolution crossover\n                    crossed_particle = np.where(np.random.uniform(0, 1, self.dim) < self.CR, mutated_particle, particle)\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Improving convergence through adaptive inertia weight and differential evolution crossover.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bed3230a-e249-48ac-8de4-afbd21ae0621", "metadata": {"aucs": [0.3715904826840971, 0.3277538103336718, 0.32442196342257257, 0.34109645744163486, 0.30609748921099433, 0.3180241901051022, 0.3307516530611515, 0.3208047245074399, 0.3087803686873636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09121598401306996, 0.09503997584162893, 0.0676510522821887, 0.11770276705747074, 0.09825666222659601, 0.07145402890178176, 0.07898574390930535, 0.0803707519643505, 0.07505610321742773, 0.10032109594514582, 0.08211319774007064, 0.08382875584266003, 0.047182772674162154, 0.07175669270349139, 0.06501338457226424, 0.07779225119445565, 0.08947538583640091, 0.07510259019914212, 0.664095792086371, 0.4999560832453329, 0.5551641865968513, 0.7141227670618628, 0.7125478234693681, 0.6354235433290002, 0.7139782844649891, 0.6860031803524265, 0.5849431319245105, 0.21937760861246614, 0.20865233574650333, 0.1968079884662901, 0.2010493544736861, 0.22362011583523922, 0.22720052089617104, 0.2253198304293904, 0.2132219149851865, 0.19040475406402446, 0.21723637267348828, 0.2201270453747336, 0.21417559120158303, 0.25525720132953456, 0.23477958542621413, 0.2560562498882788, 0.2914075675610238, 0.2705229789500543, 0.2246422696882444, 0.1385785220643878, 0.13411151830894963, 0.06773349904758563, 0.11654943693257735, 0.18564662689369316, 0.08267407600912613, 0.12308598728559372, 0.1265886032481296, 0.11568143618929483, 0.12296371675127027, 0.11345412533654287, 0.11573693038455313, 0.1264502144084768, 0.12405922069687492, 0.13006717753645258, 0.13463831598194942, 0.13089441931820034, 0.10957477545391303, 0.0, 0.0, 0.0, 0.0, 0.02974707281877531, 0.0, 0.0, 0.004149287448091177, 0.0, 0.08031480018440396, 0.1035739026072855, 0.11976241661362508, 0.05410832259076326, 0.12633552975242368, 0.07319639975606351, 0.1004661880344131, 0.062131795649381094, 0.07074566352987022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05321065731631136, 0.04325165057514446, 0.05065365379987197, 0.0476313503390795, 0.026258992215888233, 0.05550030118444249, 0.023404750206856062, 0.04952620849060152, 0.047247379105992304, 0.32737285541842953, 0.31527168809379913, 0.3261442711236563, 0.3418267038691034, 0.3171628934694758, 0.3055457668116198, 0.33881617506087947, 0.3250254295549708, 0.3098965968841626, 0.07128910534928146, 0.08641141125425233, 0.05842753292811942, 0.08465464048514948, 0.07056616186553255, 0.08103545848469862, 0.06793249953144187, 0.10165849783616265, 0.08595753744546908, 0.1592176586509091, 0.15686484202576834, 0.16045335900564772, 0.16040748747696543, 0.17193472814566302, 0.16169420210820595, 0.1738609654777723, 0.1705391872847697, 0.14244888412812562, 0.22529216524654783, 0.22476646977545867, 0.2368425602552261, 0.2375220964554099, 0.23689809278411722, 0.24023206994291535, 0.18723626214809164, 0.2261209930412451, 0.2216764120030421, 0.16765944516156595, 0.17024719160317103, 0.16894519148567666, 0.17969823202488822, 0.18459064904389966, 0.14785251904713936, 0.15862744785012817, 0.1610059984301503, 0.19115124480180934, 0.21562408498762353, 0.21185944314310168, 0.19401611342651526, 0.18489644730517807, 0.1929891892178628, 0.1931422028564591, 0.2006907032509947, 0.18855200468428535, 0.19908972584607587, 0.17636847036588932, 0.18273054627823915, 0.17255206675246337, 0.17833221432234492, 0.18973306733726547, 0.1728223054546223, 0.1748781011693562, 0.1845728744445646, 0.16575808893441557, 0.4233550025577135, 0.3701513602718305, 0.1874362365938962, 0.4244103353699782, 0.5019199456535361, 0.5842275647469881, 0.39414200795744936, 0.43754978810119727, 0.20284938521457574, 0.379888353082807, 0.367519201008187, 0.3644856269499014, 0.236820780820318, 0.20569896850869063, 0.456213815837185, 0.27463136006482514, 0.15503774417731497, 0.2666730378320561, 0.18630683776493784, 0.17315003458432898, 0.20221341509240542, 0.17944292177317567, 0.19368702922990366, 0.18742234815137937, 0.19027033215798117, 0.18461760595792798, 0.18369932205594774, 0.08497132027209187, 0.08020284066498495, 0.09409442217996544, 0.0879336654760573, 0.08328693499080342, 0.07017456653476273, 0.08511277784615501, 0.07561434632814856, 0.0833417429769523]}, "mutation_prompt": null}
{"id": "56f58ea1-9c46-4532-a18a-a2101b138fb3", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1) + np.random.normal(0, 0.1, self.dim)  # Improved velocity update\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive inertia weight\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    # Differential evolution crossover\n                    crossed_particle = np.where(np.random.uniform(0, 1, self.dim) < self.CR, mutated_particle, particle)\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "EnhancedDynamicHybridPSODE with improved velocity update mechanism", "configspace": "", "generation": 60, "fitness": 0.17645372347980434, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "bed3230a-e249-48ac-8de4-afbd21ae0621", "metadata": {"aucs": [0.3633815112397293, 0.356980126601816, 0.35067109948129926, 0.3058205612322208, 0.2943657256169868, 0.3401542161748421, 0.31876873812397866, 0.33168353342398493, 0.32169122443566733, 0.019185038782923436, 0.0, 0.0, 0.0, 0.0, 0.004217602810750787, 0.0, 0.0, 0.0, 0.08333081581687618, 0.11696937713784594, 0.11196437989459351, 0.07449774028180234, 0.09171031318141287, 0.08012127931416269, 0.10582391872910679, 0.08557113138922123, 0.08913675734890125, 0.06187746363842417, 0.06697974339890667, 0.06296019263641606, 0.07973775685770346, 0.07474183337406626, 0.07124059611508238, 0.05916333516602501, 0.07381794865078739, 0.07902456090079757, 0.8276741965948138, 0.60131316289648, 0.7958130161579217, 0.7438854721383219, 0.5188229956405338, 0.7381293557538638, 0.8753727924657279, 0.596575511846217, 0.7473463735194448, 0.20183311740312193, 0.1985637613916018, 0.20900369413002806, 0.2073284887711121, 0.19948734325412232, 0.2094929172624591, 0.20103420282582873, 0.1884070711206216, 0.17769557613669118, 0.24515985250254058, 0.2174898543189171, 0.20246436178622085, 0.2606648692228538, 0.22772662766487906, 0.2892165780597402, 0.2318271369884899, 0.2597541455129241, 0.22828475828502448, 0.16379965395071228, 0.0720843373140635, 0.09963123650513206, 0.12160432151658718, 0.12177381259141706, 0.12799505904554986, 0.11607184374216228, 0.1299417200005848, 0.12249003931669211, 0.13057554622598022, 0.13070019923127496, 0.14014167611398987, 0.12995850487561178, 0.13121263666675453, 0.12442746073230448, 0.1476267135514967, 0.12768498510933168, 0.11813125030076133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05999935450597971, 0.11119072587331669, 0.11095765759709919, 0.08104409745301488, 0.10682151829082431, 0.05138425770446642, 0.14843015532851278, 0.08559171260199638, 0.06561089041114632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04861169577185065, 0.05537949968092837, 0.036679404096249923, 0.05641490648627567, 0.05564898632114068, 0.04803572020354241, 0.0425036075066042, 0.07110492560993575, 0.03814134367705024, 0.3213958995949382, 0.30854087950610243, 0.33126895238791076, 0.31862372459776445, 0.31914427598345974, 0.3224693112365503, 0.3602501358545208, 0.33633559235428423, 0.3253834124927202, 0.06178713451236817, 0.061667845357383344, 0.06675526103496088, 0.058157868980050265, 0.08077032973560705, 0.08189994659515976, 0.08910261015020804, 0.08073058715456805, 0.07124265865392077, 0.15959153322620345, 0.17148933285885337, 0.15331625854340525, 0.17501147501921277, 0.16451524498685433, 0.17686079859582993, 0.1612864706392354, 0.16665311200671729, 0.14233398853169854, 0.2166439062999339, 0.21168512728599387, 0.21000340852844446, 0.2489480040126032, 0.2664791690920306, 0.242022277926621, 0.21543200234391835, 0.20742165932414103, 0.21808441757696206, 0.18037060670151062, 0.1606734581852277, 0.19660273134776796, 0.195992304121548, 0.20976408930957768, 0.18819063690247562, 0.15258771829440265, 0.17221251318525432, 0.1546137829494757, 0.23741472483607773, 0.20571125245560729, 0.19250413996579063, 0.22540127370987095, 0.19655894282668995, 0.18667235912886793, 0.20253675624759993, 0.20949396848540014, 0.19343928743349792, 0.16976576484689399, 0.19376200418697453, 0.17086736896697907, 0.18412993946233958, 0.1782509684673369, 0.18413933257047188, 0.22688445247251499, 0.1808615048972284, 0.17666853646668002, 0.16710245243796984, 0.18622299957062205, 0.32824102206986794, 0.4453665852216393, 0.1597281036793351, 0.4375735751171945, 0.5469608584678811, 0.4275699910219143, 0.17273939259532378, 0.4118716162232253, 0.21081184999120217, 0.20595961446001398, 0.2055451991154219, 0.16829046561855232, 0.20344599567898713, 0.16532210989909002, 0.2668181821683202, 0.2967446383614176, 0.1859569485052559, 0.18668673336254138, 0.1890369421669641, 0.1726299769118328, 0.18871975200617497, 0.20048336413723367, 0.1951424976475774, 0.1874440213874251, 0.1830989051693408, 0.06623451751504494, 0.08064738215170708, 0.066929438314555, 0.0981244932487334, 0.0806834388437172, 0.09094292109661872, 0.12461611554309548, 0.09430776928247053, 0.0812721599271008]}, "mutation_prompt": null}
{"id": "ecaa1e29-001a-45d1-bd2e-134856da404f", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    # Levy flight behavior\n                    beta = 1.5\n                    sigma = (math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n                    s = np.random.normal(0, sigma, self.dim)\n                    u = np.random.normal(0, 1, self.dim)\n                    v = np.random.normal(0, 1, self.dim)\n                    step = 0.01 * s / ((abs(u) ** (1 / beta)) * v)\n\n                    mutated_particle = particle + step * (best_solution - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive inertia weight\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    # Differential evolution crossover\n                    crossed_particle = np.where(np.random.uniform(0, 1, self.dim) < self.CR, mutated_particle, particle)\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration by incorporating Levy flight behavior for improved global search capability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'math' is not defined\").", "error": "NameError(\"name 'math' is not defined\")", "parent_id": "bed3230a-e249-48ac-8de4-afbd21ae0621", "metadata": {}, "mutation_prompt": null}
{"id": "e70e8ad7-9e46-45d6-bdb3-b611f3acdd57", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive inertia weight\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    # Differential evolution crossover\n                    crossed_particle = np.where(np.random.uniform(0, 1, self.dim) < self.CR, mutated_particle, particle)\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Improving convergence through adaptive inertia weight and differential evolution crossover.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bed3230a-e249-48ac-8de4-afbd21ae0621", "metadata": {"aucs": [0.3715904826840971, 0.3277538103336718, 0.32442196342257257, 0.34109645744163486, 0.30609748921099433, 0.3180241901051022, 0.3307516530611515, 0.3208047245074399, 0.3087803686873636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09121598401306996, 0.09503997584162893, 0.0676510522821887, 0.11770276705747074, 0.09825666222659601, 0.07145402890178176, 0.07898574390930535, 0.0803707519643505, 0.07505610321742773, 0.10032109594514582, 0.08211319774007064, 0.08382875584266003, 0.047182772674162154, 0.07175669270349139, 0.06501338457226424, 0.07779225119445565, 0.08947538583640091, 0.07510259019914212, 0.664095792086371, 0.4999560832453329, 0.5551641865968513, 0.7141227670618628, 0.7125478234693681, 0.6354235433290002, 0.7139782844649891, 0.6860031803524265, 0.5849431319245105, 0.21937760861246614, 0.20865233574650333, 0.1968079884662901, 0.2010493544736861, 0.22362011583523922, 0.22720052089617104, 0.2253198304293904, 0.2132219149851865, 0.19040475406402446, 0.21723637267348828, 0.2201270453747336, 0.21417559120158303, 0.25525720132953456, 0.23477958542621413, 0.2560562498882788, 0.2914075675610238, 0.2705229789500543, 0.2246422696882444, 0.1385785220643878, 0.13411151830894963, 0.06773349904758563, 0.11654943693257735, 0.18564662689369316, 0.08267407600912613, 0.12308598728559372, 0.1265886032481296, 0.11568143618929483, 0.12296371675127027, 0.11345412533654287, 0.11573693038455313, 0.1264502144084768, 0.12405922069687492, 0.13006717753645258, 0.13463831598194942, 0.13089441931820034, 0.10957477545391303, 0.0, 0.0, 0.0, 0.0, 0.02974707281877531, 0.0, 0.0, 0.004149287448091177, 0.0, 0.08031480018440396, 0.1035739026072855, 0.11976241661362508, 0.05410832259076326, 0.12633552975242368, 0.07319639975606351, 0.1004661880344131, 0.062131795649381094, 0.07074566352987022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05321065731631136, 0.04325165057514446, 0.05065365379987197, 0.0476313503390795, 0.026258992215888233, 0.05550030118444249, 0.023404750206856062, 0.04952620849060152, 0.047247379105992304, 0.32737285541842953, 0.31527168809379913, 0.3261442711236563, 0.3418267038691034, 0.3171628934694758, 0.3055457668116198, 0.33881617506087947, 0.3250254295549708, 0.3098965968841626, 0.07128910534928146, 0.08641141125425233, 0.05842753292811942, 0.08465464048514948, 0.07056616186553255, 0.08103545848469862, 0.06793249953144187, 0.10165849783616265, 0.08595753744546908, 0.1592176586509091, 0.15686484202576834, 0.16045335900564772, 0.16040748747696543, 0.17193472814566302, 0.16169420210820595, 0.1738609654777723, 0.1705391872847697, 0.14244888412812562, 0.22529216524654783, 0.22476646977545867, 0.2368425602552261, 0.2375220964554099, 0.23689809278411722, 0.24023206994291535, 0.18723626214809164, 0.2261209930412451, 0.2216764120030421, 0.16765944516156595, 0.17024719160317103, 0.16894519148567666, 0.17969823202488822, 0.18459064904389966, 0.14785251904713936, 0.15862744785012817, 0.1610059984301503, 0.19115124480180934, 0.21562408498762353, 0.21185944314310168, 0.19401611342651526, 0.18489644730517807, 0.1929891892178628, 0.1931422028564591, 0.2006907032509947, 0.18855200468428535, 0.19908972584607587, 0.17636847036588932, 0.18273054627823915, 0.17255206675246337, 0.17833221432234492, 0.18973306733726547, 0.1728223054546223, 0.1748781011693562, 0.1845728744445646, 0.16575808893441557, 0.4233550025577135, 0.3701513602718305, 0.1874362365938962, 0.4244103353699782, 0.5019199456535361, 0.5842275647469881, 0.39414200795744936, 0.43754978810119727, 0.20284938521457574, 0.379888353082807, 0.367519201008187, 0.3644856269499014, 0.236820780820318, 0.20569896850869063, 0.456213815837185, 0.27463136006482514, 0.15503774417731497, 0.2666730378320561, 0.18630683776493784, 0.17315003458432898, 0.20221341509240542, 0.17944292177317567, 0.19368702922990366, 0.18742234815137937, 0.19027033215798117, 0.18461760595792798, 0.18369932205594774, 0.08497132027209187, 0.08020284066498495, 0.09409442217996544, 0.0879336654760573, 0.08328693499080342, 0.07017456653476273, 0.08511277784615501, 0.07561434632814856, 0.0833417429769523]}, "mutation_prompt": null}
{"id": "465fda0a-de79-490f-a583-7f1370cf9e67", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive inertia weight\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    # Differential evolution crossover\n                    crossed_particle = np.where(np.random.uniform(0, 1, self.dim) < self.CR, mutated_particle, particle)\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Improving convergence through adaptive inertia weight and differential evolution crossover.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bed3230a-e249-48ac-8de4-afbd21ae0621", "metadata": {"aucs": [0.3715904826840971, 0.3277538103336718, 0.32442196342257257, 0.34109645744163486, 0.30609748921099433, 0.3180241901051022, 0.3307516530611515, 0.3208047245074399, 0.3087803686873636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09121598401306996, 0.09503997584162893, 0.0676510522821887, 0.11770276705747074, 0.09825666222659601, 0.07145402890178176, 0.07898574390930535, 0.0803707519643505, 0.07505610321742773, 0.10032109594514582, 0.08211319774007064, 0.08382875584266003, 0.047182772674162154, 0.07175669270349139, 0.06501338457226424, 0.07779225119445565, 0.08947538583640091, 0.07510259019914212, 0.664095792086371, 0.4999560832453329, 0.5551641865968513, 0.7141227670618628, 0.7125478234693681, 0.6354235433290002, 0.7139782844649891, 0.6860031803524265, 0.5849431319245105, 0.21937760861246614, 0.20865233574650333, 0.1968079884662901, 0.2010493544736861, 0.22362011583523922, 0.22720052089617104, 0.2253198304293904, 0.2132219149851865, 0.19040475406402446, 0.21723637267348828, 0.2201270453747336, 0.21417559120158303, 0.25525720132953456, 0.23477958542621413, 0.2560562498882788, 0.2914075675610238, 0.2705229789500543, 0.2246422696882444, 0.1385785220643878, 0.13411151830894963, 0.06773349904758563, 0.11654943693257735, 0.18564662689369316, 0.08267407600912613, 0.12308598728559372, 0.1265886032481296, 0.11568143618929483, 0.12296371675127027, 0.11345412533654287, 0.11573693038455313, 0.1264502144084768, 0.12405922069687492, 0.13006717753645258, 0.13463831598194942, 0.13089441931820034, 0.10957477545391303, 0.0, 0.0, 0.0, 0.0, 0.02974707281877531, 0.0, 0.0, 0.004149287448091177, 0.0, 0.08031480018440396, 0.1035739026072855, 0.11976241661362508, 0.05410832259076326, 0.12633552975242368, 0.07319639975606351, 0.1004661880344131, 0.062131795649381094, 0.07074566352987022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05321065731631136, 0.04325165057514446, 0.05065365379987197, 0.0476313503390795, 0.026258992215888233, 0.05550030118444249, 0.023404750206856062, 0.04952620849060152, 0.047247379105992304, 0.32737285541842953, 0.31527168809379913, 0.3261442711236563, 0.3418267038691034, 0.3171628934694758, 0.3055457668116198, 0.33881617506087947, 0.3250254295549708, 0.3098965968841626, 0.07128910534928146, 0.08641141125425233, 0.05842753292811942, 0.08465464048514948, 0.07056616186553255, 0.08103545848469862, 0.06793249953144187, 0.10165849783616265, 0.08595753744546908, 0.1592176586509091, 0.15686484202576834, 0.16045335900564772, 0.16040748747696543, 0.17193472814566302, 0.16169420210820595, 0.1738609654777723, 0.1705391872847697, 0.14244888412812562, 0.22529216524654783, 0.22476646977545867, 0.2368425602552261, 0.2375220964554099, 0.23689809278411722, 0.24023206994291535, 0.18723626214809164, 0.2261209930412451, 0.2216764120030421, 0.16765944516156595, 0.17024719160317103, 0.16894519148567666, 0.17969823202488822, 0.18459064904389966, 0.14785251904713936, 0.15862744785012817, 0.1610059984301503, 0.19115124480180934, 0.21562408498762353, 0.21185944314310168, 0.19401611342651526, 0.18489644730517807, 0.1929891892178628, 0.1931422028564591, 0.2006907032509947, 0.18855200468428535, 0.19908972584607587, 0.17636847036588932, 0.18273054627823915, 0.17255206675246337, 0.17833221432234492, 0.18973306733726547, 0.1728223054546223, 0.1748781011693562, 0.1845728744445646, 0.16575808893441557, 0.4233550025577135, 0.3701513602718305, 0.1874362365938962, 0.4244103353699782, 0.5019199456535361, 0.5842275647469881, 0.39414200795744936, 0.43754978810119727, 0.20284938521457574, 0.379888353082807, 0.367519201008187, 0.3644856269499014, 0.236820780820318, 0.20569896850869063, 0.456213815837185, 0.27463136006482514, 0.15503774417731497, 0.2666730378320561, 0.18630683776493784, 0.17315003458432898, 0.20221341509240542, 0.17944292177317567, 0.19368702922990366, 0.18742234815137937, 0.19027033215798117, 0.18461760595792798, 0.18369932205594774, 0.08497132027209187, 0.08020284066498495, 0.09409442217996544, 0.0879336654760573, 0.08328693499080342, 0.07017456653476273, 0.08511277784615501, 0.07561434632814856, 0.0833417429769523]}, "mutation_prompt": null}
{"id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 64, "fitness": 0.17982326356271033, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "bed3230a-e249-48ac-8de4-afbd21ae0621", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "86864787-75da-44bb-9ffd-ce778d5d75d8", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "a978a6dc-db9b-457c-ae10-885ade7a9189", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "74e62075-91d2-4767-b433-8206aa471168", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "ecb3e28c-91d4-409a-b81f-d3fd2fcc6b01", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n                    # Dimension-wise learning\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < 0.5:\n                            particle[i] += np.random.normal(0, 0.1)\n\n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy, diversity promotion, and dimension-wise learning in particle swarm optimization.", "configspace": "", "generation": 68, "fitness": 0.17660074442246756, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.35942320306311726, 0.32827479887360844, 0.3594322736913069, 0.3099321572329433, 0.35386337233265563, 0.3254073661828488, 0.33240007748112677, 0.3120940935570419, 0.30923987242599993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06001493396549307, 0.07932012054121984, 0.08740213650708306, 0.08355136134215135, 0.08563973408375825, 0.07429890935344907, 0.08143453862171923, 0.08397279369583721, 0.08355474211577008, 0.07061414890863982, 0.06868852772470979, 0.08974393763647148, 0.08209824608174221, 0.065694820103404, 0.07118771166121063, 0.05797003506846399, 0.08433052982891387, 0.08785841670502736, 0.6699211735097031, 0.7929010075009257, 0.6598197401066004, 0.5818969566159078, 0.6860075178618608, 0.6966236862787678, 0.8163330289763594, 0.7184423518481409, 0.7533511798839508, 0.20967137220633714, 0.20211188757120513, 0.23021444377626743, 0.24340766105756373, 0.18226450060943844, 0.2124450458703251, 0.1935308593034093, 0.23318525652489963, 0.22033675364785754, 0.21847431412796803, 0.2494895691352379, 0.2852103357424204, 0.2316564949448321, 0.2484072075864482, 0.20939551839251203, 0.2214308564836015, 0.23629510916123986, 0.21402249778772364, 0.10733911664025875, 0.111537006996271, 0.13844466605033945, 0.13563724562417023, 0.12308749135551755, 0.08104397965871302, 0.12243391455597052, 0.1349166183690198, 0.139313207071039, 0.13407273336968484, 0.10565115873610142, 0.13531163713546124, 0.13910573913938462, 0.12666193396168435, 0.1312128304854574, 0.129847603302791, 0.11446216411432819, 0.10412803453309238, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0032251311571077634, 0.0, 0.15641638663590618, 0.10708689628038826, 0.09623392732726965, 0.102993611722479, 0.06850870369854023, 0.09079990734070398, 0.10639246244950551, 0.0843333585752738, 0.08758927759578816, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040446682764661124, 0.04705572460757157, 0.04827631231657559, 0.057147656187970686, 0.04326547927989177, 0.06946151461238337, 0.07013521175883652, 0.049122492715503174, 0.03362959486934847, 0.32768182703079873, 0.3327362699916353, 0.3127279655356494, 0.3206271365158374, 0.3166261141795579, 0.3487553026584165, 0.32548647101683637, 0.36279235124958387, 0.323633143335613, 0.07372586331987263, 0.059089226290463204, 0.05463588556780263, 0.06206973305046326, 0.09885239662957135, 0.07604884845662907, 0.08087273917505533, 0.07584885593361446, 0.08755737430018906, 0.19060124837006798, 0.19509911356957077, 0.15067734648103037, 0.1410091490132407, 0.14684207169208152, 0.16517074662052733, 0.13636107348424065, 0.1672993322480184, 0.1588391506190846, 0.2395702227867088, 0.22535042539119288, 0.23458593437073072, 0.243580822646692, 0.22991361337662242, 0.2681784594976434, 0.19026636262916152, 0.22426580562625253, 0.23302430354197556, 0.18491149201873802, 0.17254303653738046, 0.15690712430682963, 0.185668967564389, 0.15214327599321864, 0.15775568469821522, 0.1600408194516223, 0.17115728948911002, 0.19762968664242753, 0.2042965919285562, 0.22223710902707838, 0.20961147895186327, 0.2018331131904746, 0.2070932678041092, 0.20546915563338408, 0.20344520766724006, 0.21404283204559926, 0.21996158199928806, 0.17597222359090936, 0.16567172075661396, 0.17472983460368363, 0.18348572749432668, 0.17696287236363184, 0.17320722715850456, 0.17633938048641118, 0.1973323314232477, 0.18951027134916099, 0.40056155472395705, 0.1823947027028443, 0.17490193975750679, 0.43288199701288355, 0.4798958868335812, 0.1573681804773287, 0.17000718144986837, 0.5078306066878808, 0.24452575830814793, 0.41297647618252975, 0.4058945661504255, 0.3535419537666399, 0.20837530902479473, 0.1962366477991051, 0.2869941046458968, 0.16908644356879265, 0.16822115298588447, 0.2239890815241128, 0.17613969583411615, 0.1823393687805065, 0.17453403855812866, 0.18740607698164835, 0.18511737261878858, 0.19047545335854332, 0.18050221885835416, 0.20062123070826143, 0.21178449562436008, 0.07111667549541068, 0.08301419217925798, 0.07560727808342615, 0.0720593494730456, 0.07653647456915968, 0.08461786246648229, 0.07111595928519832, 0.07718491240504377, 0.06892600770043666]}, "mutation_prompt": null}
{"id": "cf537938-b095-4b3d-ad9d-0924137846cb", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "673a4246-ef2b-4eda-a0df-858060f06209", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "ee9acadf-d660-4886-9d4f-f5e42772775c", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "9690ed1b-fa99-4845-b61c-f38c8e8b51ae", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n\n                    # Local Search\n                    for _ in range(3):\n                        local_particle = np.clip(particle + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n                        local_fitness = func(local_particle)\n                        if local_fitness < particle_fitness:\n                            particle = local_particle\n                            particle_fitness = local_fitness\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy, diversity promotion, and local search in particle swarm optimization.", "configspace": "", "generation": 72, "fitness": 0.1333341434498422, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.34410207331980414, 0.2965938243424966, 0.34399798471947995, 0.23227054774173417, 0.2856961095433911, 0.32513764434282666, 0.27265679951318234, 0.323019530092587, 0.29443763734065465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0470149835006608, 0.0705313586837083, 0.09016263339122343, 0.06764177140653227, 0.074722822595359, 0.09018259804367423, 0.08129567730963294, 0.0705028782948881, 0.08649661140315112, 0.08203907427805113, 0.0655756262907582, 0.07023131246744074, 0.08765194128321496, 0.057305871811943354, 0.08148655856713527, 0.07826750064174248, 0.07393356924595196, 0.05145256623615513, 0.1412001475606508, 0.14107005406518325, 0.11653387841843854, 0.11838693026954916, 0.12115940687410798, 0.10140758539951289, 0.125823115666297, 0.11304198011718836, 0.09959338300180409, 0.16085198768105802, 0.13777579531619377, 0.20682559870888606, 0.17846966970728606, 0.1669807067629725, 0.14881818400500246, 0.1358296251400648, 0.15562901871147294, 0.18729237356074468, 0.17913348444514265, 0.15683519062930684, 0.1782082210470406, 0.19015111271384355, 0.21578064908663352, 0.24629472270493047, 0.21526181579554104, 0.1990659773296044, 0.1662636763296016, 0.03379055839810896, 0.10001038634840731, 0.08720070976872263, 0.11220195333096294, 0.15253862333024137, 0.11090187119316852, 0.09412515292492296, 0.10817826209420256, 0.11631784220059194, 0.1444037133904349, 0.11257706823833835, 0.1383397198469395, 0.12761335262047246, 0.13740742185441102, 0.1222211209293349, 0.11682784661855161, 0.11671716795454357, 0.1747976499684084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07868660155696905, 0.07583653491414755, 0.07575939945784371, 0.11842632270192333, 0.04949485849628654, 0.05170061945849336, 0.07377526844603433, 0.10278720275019682, 0.08427885571141125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018867565174741308, 0.023799108158240267, 0.06412913656845232, 0.04687101216587575, 0.053136174781796, 0.0201100029226694, 0.027766220771979544, 0.04203848409873989, 0.06419135159683176, 0.30314760962425624, 0.3162709006418769, 0.2952851786283083, 0.29902554653289426, 0.26706318908433224, 0.271540305180591, 0.306762227938539, 0.3274139837833311, 0.30857768802397745, 0.05786582231248594, 0.06091817030479474, 0.06976432625554174, 0.05553416676026701, 0.07364337334801074, 0.0858060961093241, 0.07491341570165222, 0.06771570191818832, 0.07270657399806024, 0.15339191951430442, 0.14101681425116985, 0.16775449966866274, 0.1615298503829774, 0.12185247472530303, 0.13997910037109118, 0.142512092556356, 0.133988226698044, 0.14415196543669317, 0.21930357917287224, 0.19788370512366382, 0.17343389020218292, 0.22808039067150543, 0.21732607609685983, 0.21370064284137802, 0.19215065949660814, 0.19265013352508298, 0.2160770492302534, 0.170245789841728, 0.1611251887638595, 0.180044391944707, 0.17746274230741454, 0.18917843500696618, 0.1670089231094023, 0.15446501204214969, 0.1470026908458687, 0.16874974584220548, 0.18483039161053094, 0.21008605187121, 0.2237177257481544, 0.18655184302807148, 0.2056611574057775, 0.19389113550457338, 0.1834913007706961, 0.19959817955982784, 0.16114854895217612, 0.18141791024044285, 0.17001582636873458, 0.16023593884980813, 0.16550784427853527, 0.1714350921153851, 0.19282994121141472, 0.16774726878577695, 0.18172046651799045, 0.17273048702386817, 0.17932278461339213, 0.18069672487111643, 0.1770959079030403, 0.3309752666484691, 0.15229634216663268, 0.19182663156961588, 0.3885125461003919, 0.16585746237257282, 0.16407807108768158, 0.3455404088627899, 0.15900971035225853, 0.11369926995686297, 0.16528996477598668, 0.20530512341528773, 0.194702733637105, 0.1392980847081321, 0.15659090132214992, 0.21918705898223967, 0.19283981524537486, 0.1780823875036036, 0.18494123990090772, 0.17447627507936359, 0.1921002375766615, 0.18082289296827447, 0.18537214423924464, 0.1784057790621546, 0.18150322036500244, 0.07001973635783032, 0.06303374829010078, 0.1094376884087318, 0.07936164176937932, 0.06337379333673288, 0.07317642514337352, 0.07980531166468974, 0.08082371624901774, 0.07605962480219619]}, "mutation_prompt": null}
{"id": "52527226-c74c-4319-ae5b-0c0987fee77d", "solution": "import numpy as np\n\nclass RefinedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Improved dynamic mutation strategy based on particle performance and diversity\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * particle_fitness))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "RefinedDynamicHybridPSODE", "description": "Enhancing exploration and exploitation by introducing a dynamic mutation strategy based on particle performance and population diversity.", "configspace": "", "generation": 73, "fitness": 0.17982326356271033, "feedback": "The algorithm RefinedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "7dd1b848-e9fa-4ba2-b1e1-f9a9a611a474", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Dynamic population update\n                    if np.random.uniform(0, 1) < 0.1:\n                        best_solution = particle\n                        best_fitness = func(particle)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy, diversity promotion, and dynamic population update in particle swarm optimization.", "configspace": "", "generation": 74, "fitness": 0.11892735958705875, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.10.", "error": "", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.2276114120626257, 0.24157580303010628, 0.23763425226002377, 0.16963311349128163, 0.2022282638770766, 0.21260171823786367, 0.18522474991053905, 0.20850102956932925, 0.2181033280705036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06398790564116408, 0.06687651277663265, 0.07684768791245111, 0.062390922019128436, 0.08007212218183446, 0.06011666608110877, 0.06419763418583768, 0.07304735356168512, 0.07061362876206878, 0.05545955799367652, 0.048909286290488074, 0.046411477627699926, 0.0456042345548654, 0.054368393456748154, 0.04752204105353974, 0.05046461192353635, 0.05288545701076941, 0.0501510731042254, 0.11148817590251636, 0.9726348643552927, 0.08655620848841661, 0.15934036891088232, 0.10899444121059587, 0.14344328967365982, 0.15512808185952087, 0.100346352628217, 0.10016367911456492, 0.08992580702238484, 0.11930935435796186, 0.10483737284216077, 0.08641707392693809, 0.09961713779171955, 0.07053182597231822, 0.09481656970736618, 0.11159194903399017, 0.10449815916362237, 0.16545466391597707, 0.18634549370226527, 0.1997459453091588, 0.16838384998253664, 0.13437184919927436, 0.13779248011609901, 0.15782871779885976, 0.16524852467068818, 0.1638961671156992, 0.04674002790005072, 0.04434258444598449, 0.040761606298082786, 0.04051832451649173, 0.08975055092419193, 0.02754897643391141, 0.0835555061751756, 0.06325367495769096, 0.07949392656691923, 0.08616840031012885, 0.09986081363474164, 0.09688969781651446, 0.07157784178841597, 0.08165432693374153, 0.10164137122724737, 0.08246252643560348, 0.07088001612836548, 0.062310164748561325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014547102080490926, 9.999999999998899e-05, 0.08763894674229544, 0.0941967780422206, 0.09386863010262947, 0.09633649866411198, 0.06793542878449865, 0.053545174936615925, 0.09811523240272857, 0.07502746797285764, 0.07699314605315155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010384581691136319, 0.00015387173920611286, 0.014753925164887383, 9.999999999998899e-05, 0.02071280196561287, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005280894578165718, 9.999999999998899e-05, 0.2497486997315933, 0.24254002942855168, 0.26327503567716926, 0.2204490387547322, 0.21252003448923962, 0.23187561412410962, 0.25485797980842395, 0.26058448657261946, 0.267348158426164, 0.04711720009715259, 0.04876799546035815, 0.05607566757739846, 0.052278545654128705, 0.048060725312441765, 0.07573659433585167, 0.061580434226948255, 0.05318431965988624, 0.07336866383500495, 0.15766986598689714, 0.12850749027217767, 0.15629773581859663, 0.1417009092539262, 0.13528016058741665, 0.1419504797669804, 0.13933388442756856, 0.1589364223166242, 0.14220617043976913, 0.17647691952581157, 0.1862738227468015, 0.1778060176947993, 0.21765441756946358, 0.20319460626021424, 0.20216027362003275, 0.17733804320767577, 0.1714632246774207, 0.18718775914700148, 0.14688046784709696, 0.11489690813855491, 0.12926232531032, 0.15450274583479806, 0.1329528850955065, 0.1395390373796217, 0.13130572787218264, 0.1456288283521191, 0.11420193631854259, 0.2031301760867129, 0.1961467356819555, 0.20171091019658483, 0.1893985873040469, 0.20777120528790116, 0.19711227730016712, 0.18818413688437052, 0.17887751667212137, 0.20410042107018556, 0.1660885306264026, 0.16428576763792624, 0.16042742484341965, 0.17621498686916315, 0.16731147062876595, 0.1719564950521324, 0.1695577711761903, 0.16976686217888148, 0.16938050818480244, 0.1782744896857521, 0.180157074906371, 0.17133341754026044, 0.23702895066907326, 0.3283825248360299, 0.1988196383856754, 0.23590849527929636, 0.21294090807703658, 0.3271812357804623, 0.23072857140594782, 0.18170559770572714, 0.22403455071026446, 0.19827002389915094, 0.16776401317208278, 0.18030324824562272, 0.18246342408580507, 0.22780564626990363, 0.21523457141230407, 0.19187645909631657, 0.17622751808544035, 0.17678144121199457, 0.1880331759120698, 0.17362716345416318, 0.1835669376928265, 0.18315407985258758, 0.1836925464400201, 0.18605439667922985, 0.0688838296265305, 0.07234631271599667, 0.0661977888221712, 0.06953728134419612, 0.06485976484376843, 0.07077867738772692, 0.07718349783456413, 0.06277585321442003, 0.0643805746151287]}, "mutation_prompt": null}
{"id": "8aec9b3f-ae4a-40ff-9c66-acb678e83c6a", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "b39a0bce-1517-49d8-92b7-ddd0b3211d65", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "f1366b91-4c14-4171-874f-6d78d238f5d8", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "bfd57953-dc5b-4102-b752-38014d4dc77d", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "0ccdbadc-c3fe-4222-af40-a003d9b39ed5", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "a97596c3-490e-422a-bb85-f230bf7ddedc", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "79934d7c-2381-426b-bbbe-d7f35e739a86", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + 0.5 * (best_solution - particle) * np.random.uniform(0, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Improved adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _) * (1 - particle_fitness / best_fitness))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "EnhancedDynamicHybridPSODE with improved adaptive mutation strategy and velocity update mechanism.", "configspace": "", "generation": 81, "fitness": 0.14730605282604323, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.10.", "error": "", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.3241832651406633, 0.3221527455529014, 0.29985930852508413, 0.2758054881225829, 0.2602745100124467, 0.28836577797596963, 0.3058700619880056, 0.27223619042672087, 0.2852238910893986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07430475250498603, 0.06096374189172871, 0.08249494808712421, 0.0869490566554103, 0.07262849703208374, 0.08796654892127898, 0.0814763450782846, 0.08774127508422003, 0.07685514300575347, 0.06414204804412216, 0.08381116889103646, 0.06771762717188579, 0.06034841734486074, 0.08569321342044856, 0.05902024621180679, 0.07152090297577274, 0.07015747592149035, 0.05398318180014139, 0.14806309240528626, 0.11917242023239305, 0.12839876315039622, 0.10070807299066586, 0.11350323589576494, 0.12105115395283861, 0.10441427256175595, 0.11740041952974356, 0.13113195314145454, 0.21741331218846616, 0.17498236120049437, 0.1697510101382732, 0.2048919984033637, 0.17047898617486135, 0.16914279337486537, 0.17108869530682513, 0.1688989435819661, 0.21711080783868497, 0.2334353351010452, 0.20475749514303976, 0.19106326289148767, 0.2188122033411074, 0.242563348803293, 0.24970073772774382, 0.2138371361964504, 0.21308019212207618, 0.22305869960633706, 0.10411461938932787, 0.11609246240152193, 0.10450465862633851, 0.04617545282288971, 0.11980520889093349, 0.10936180841085386, 0.11293328355317045, 0.10426829030179763, 0.11905067055474972, 0.11984126504833714, 0.11518166797868912, 0.1213411719901456, 0.13651190610296582, 0.09560351050298, 0.12945549871218487, 0.1197913512764528, 0.12034692590799678, 0.13077630617250635, 0.0, 0.003073185322892691, 5.055694761180174e-05, 0.0, 0.0, 0.0, 0.0013669156978205477, 0.0, 0.0, 0.11517033964144108, 0.11460359987698354, 0.13310296192635163, 0.0917215266284035, 0.08711251710577783, 0.10968025297037998, 0.14079094722965113, 0.11365529365520777, 0.07607116547861803, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04577300523224481, 0.03325214584619718, 0.04636360534686368, 0.03393877323919681, 0.07020658939731417, 0.06310080181928857, 0.04457862888966413, 0.03561243081510368, 0.05342671650481223, 0.33228201180711314, 0.3234271692598325, 0.3071006060501338, 0.3099161754335903, 0.27410814126930927, 0.2894835861543613, 0.3007530614515077, 0.3051844504104033, 0.28778127362782147, 0.06328201551621548, 0.07659745933898665, 0.0602966026578029, 0.08053871974512061, 0.06476078984283173, 0.07708316530230164, 0.08106680348204587, 0.07401094795694574, 0.07714330538580083, 0.1547961293733573, 0.16557428147936026, 0.14078514282662202, 0.13850976470306686, 0.1563450386547518, 0.1510342032469496, 0.15824168432839636, 0.15586013777750574, 0.16672024857761913, 0.213273222206673, 0.22817574172111876, 0.20336627822529219, 0.24452062048034462, 0.22177206545084915, 0.22434110694727583, 0.22207893936346057, 0.2067432698074788, 0.1973542726853431, 0.1701653710998413, 0.19998077135141634, 0.179390576945889, 0.1766930683238528, 0.16541796856825297, 0.1865620741989774, 0.13804257848507095, 0.15124632956462047, 0.13774332267349232, 0.18863722880302225, 0.19023056354427847, 0.2098397435286251, 0.1933207524179983, 0.17751290227672145, 0.23165484838589145, 0.22031328482542112, 0.2069355292358951, 0.2509584365026869, 0.17129488421827355, 0.1665611936450343, 0.17311653435801544, 0.171841600119907, 0.18328591505667868, 0.1782047925146062, 0.19323870112105357, 0.16518547163397557, 0.1715552366983818, 0.36891408584006924, 0.17898079403143552, 0.18142650341806388, 0.3955981321057598, 0.39258696163463824, 0.43126747880366934, 0.3823471371071371, 0.39310320307311475, 0.3257152185741874, 0.38967347907838146, 0.30689800745792495, 0.2801917049075804, 0.33297428882788405, 0.3212269852507966, 0.1995943858518694, 0.2562357723990226, 0.2376813573421933, 0.2651144099337399, 0.18094740341944893, 0.19438446420287114, 0.1843932479384106, 0.1742676605977289, 0.18784187901082672, 0.18562594970874502, 0.17941929722642913, 0.1850037012397322, 0.20477681021261618, 0.08650705508080647, 0.07497066568512023, 0.08147168639333902, 0.07227081716168249, 0.06715233149917188, 0.08209689068715831, 0.06930837261663214, 0.07876586676728803, 0.06867074260183292]}, "mutation_prompt": null}
{"id": "660f07a4-5424-41b6-bd22-37b95a2403aa", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "329e6ddb-449d-4fd0-bb4e-eb3d442a5492", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "09bea90f-8e40-41e7-8485-fb5b43418633", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "864e0c74-5687-456b-8841-dcdf141c89bb", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "d17a9913-af81-4a45-991c-e580b8e8b43c", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "4de34df8-784e-4565-876c-f81bf886077e", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "1aab812a-0e9b-4b4f-b5a9-73d63a30d13a", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "faaff8af-ee74-4bff-81c7-6525b191bd26", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Enhanced velocity update\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1) + 0.5 * np.random.uniform(-1, 1, self.dim)\n                    particle += velocity\n                    particle = np.clip(particle, -5.0, 5.0)\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion with enhanced velocity update in particle swarm optimization for improved convergence.", "configspace": "", "generation": 89, "fitness": 0.16234504458346702, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.12.", "error": "", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.3216334368249103, 0.3273409236869047, 0.3385395843000042, 0.28844471595904375, 0.30502116093916154, 0.3069399479611774, 0.304770282422254, 0.3698835962686652, 0.3104107666713065, 0.0, 0.0, 0.0, 0.0, 0.010706801018899204, 0.0, 0.0, 0.0, 0.0, 0.0934503474578634, 0.09588586345458006, 0.06887525899978286, 0.09164860348094395, 0.08198623088954815, 0.07309953666335023, 0.07846937498877105, 0.08322885003886238, 0.06706178342050972, 0.08194024037951564, 0.06830848849504123, 0.061771481984817855, 0.07935763407774754, 0.068813369143502, 0.08138831909641864, 0.07352803791844686, 0.0658689166071883, 0.06817337019945169, 0.18578213534503207, 0.46873678857332735, 0.36005586961703984, 0.7649457902828991, 0.20044375858916963, 0.14825501209119407, 0.1619403187301508, 0.8850474071408672, 0.429517265932048, 0.19990879776960346, 0.1945154002895073, 0.19269991884183268, 0.2146293474285118, 0.2015182729877043, 0.20217964081702466, 0.18067961968452162, 0.16548516122693369, 0.1760978511458512, 0.2001708100381535, 0.22281920796213794, 0.22914663929849222, 0.2492661658056855, 0.25984394574049385, 0.25241444607979857, 0.23266052909034296, 0.22465543765418095, 0.24218194050909858, 0.12239254742878425, 0.11785383456677612, 0.09480388479895041, 0.08420264366047481, 0.09232862929046493, 0.11154049860186954, 0.12923492946432202, 0.14576070511784, 0.1206018682147123, 0.12293885496928669, 0.14769180820593697, 0.13457476748540576, 0.10320701786526965, 0.1253424266100348, 0.10531723884249644, 0.11128812705066016, 0.12160590927588855, 0.13035608711849977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0013593034908498947, 0.0, 0.0, 0.0, 0.11135537636297865, 0.0771390844750014, 0.10639582931304614, 0.04169254163180336, 0.08674512732285944, 0.10424069101852806, 0.15826327269675933, 0.11652120546797684, 0.06540408985253265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04606982118370018, 0.03662164495860065, 0.050458240426940804, 0.051017646153150076, 0.05663779777944289, 0.030312766348358, 0.033479636662208545, 0.03828446294490351, 0.04617519778646584, 0.32670265065449644, 0.32680288527416423, 0.324926000101451, 0.30808745376436475, 0.2995910778585944, 0.3076319153924678, 0.3189949239604045, 0.30300460248107464, 0.3243156690432958, 0.060475827702983986, 0.09100151528885614, 0.07391710634566773, 0.08894529444315791, 0.0858095668131853, 0.06503099592185824, 0.08276798827639031, 0.10943415141110946, 0.08818592899825928, 0.1433781154534095, 0.15955922821334756, 0.19361234469928246, 0.1446823902593225, 0.17398235721090982, 0.17721001265477043, 0.18001398546147795, 0.1801386122064963, 0.20534594580053145, 0.22402462300412895, 0.23664550332397327, 0.2196284714090213, 0.2534929691046157, 0.22946845431737306, 0.25751869935981075, 0.22930693530177948, 0.21404324796934915, 0.22474764112092804, 0.18491923688546175, 0.1625749517668843, 0.15561529486915548, 0.16937481790823172, 0.16656996521358036, 0.1651637067203916, 0.20513325529572424, 0.15448263697481635, 0.1724267509560774, 0.20210998723603846, 0.2100899923689924, 0.18939203394919324, 0.2160938017587286, 0.21072981264524138, 0.22320241671928642, 0.18346649573296658, 0.19663163468597544, 0.19302719564320836, 0.17761359093450102, 0.1744579553060941, 0.17225283077615605, 0.20284780814320436, 0.18239357529412326, 0.18935723461648835, 0.17721352979468397, 0.1763312553542402, 0.21017098752931906, 0.2577825073754554, 0.18439163520424717, 0.173064062950551, 0.4983479427625047, 0.24839600111143878, 0.4072356024099869, 0.40007808319802507, 0.1580434208375584, 0.33328752921669624, 0.31151427025755374, 0.39389718243661176, 0.40368895906140545, 0.3938417161398986, 0.1950664522094815, 0.2076422017573165, 0.17859983687795689, 0.3903592182947845, 0.21089351588143468, 0.1839635702736342, 0.1821445611155006, 0.20304486745970263, 0.1877775575940116, 0.18842373555070668, 0.1793224941272059, 0.19150047312266305, 0.1780757361089278, 0.18690251969038263, 0.07020792884556026, 0.07677505263874951, 0.07960371569191316, 0.07718195285581875, 0.08494903265696963, 0.06926429407416257, 0.07973879022897723, 0.08114384673150887, 0.07295160113445132]}, "mutation_prompt": null}
{"id": "b522ac9f-c306-4818-a6f6-c24501d34f40", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "894bbb20-0888-43ba-8dbf-5ccfb08e5086", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "da8cd7fd-5512-42f9-8c07-4fc9499856e0", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * _))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.32341844841582745, 0.3186843139973946, 0.3074994491272961, 0.31955171010141614, 0.33397781872286747, 0.32806539074483254, 0.3181537008924319, 0.31890095752006087, 0.3459760863441682, 0.0, 0.0, 0.0, 0.016619629351264487, 0.0, 0.0, 0.0, 0.002094585322229059, 0.0, 0.08026884538639201, 0.062296303610478776, 0.06476442424624096, 0.08255754154569717, 0.09828450613907624, 0.08851103919632719, 0.06715761038266754, 0.07098253562246615, 0.08654219639496874, 0.05811983338510618, 0.06792610388616194, 0.08646238506159554, 0.07304567430683362, 0.08889455199578256, 0.0716268450301002, 0.06791920342861013, 0.09507063021697415, 0.10719004419942935, 0.6693155318519124, 0.6952267581968128, 0.6503405415552654, 0.8270646887246933, 0.7119711396161132, 0.817249357816856, 0.7131005451887041, 0.691693372506118, 0.787981377961041, 0.2055085329622357, 0.18466280329650386, 0.1788875288162428, 0.21160057422907996, 0.2152824022209452, 0.19144750104298724, 0.17998057861715222, 0.22098082598339608, 0.20564892271907642, 0.21251888307308286, 0.2265609780434905, 0.21936115421886815, 0.22459741909636743, 0.2434379023880674, 0.20164943496208187, 0.2287761991241236, 0.20969649213684072, 0.24285443699019293, 0.1315773535214153, 0.09647545373942035, 0.1202139132152239, 0.07506836537214856, 0.10582403504546767, 0.1056200421456297, 0.1380161402838086, 0.11925573149036861, 0.13064464694644118, 0.11360137644270107, 0.14188018401119007, 0.12319906008788617, 0.13255113539348273, 0.1496163599039826, 0.12435498752077767, 0.14990757180014003, 0.1023171063852325, 0.12676050218650858, 0.0, 0.0, 0.0, 0.007675058164779203, 0.0, 0.0, 0.0, 0.010038923770569252, 0.0, 0.08214171967313122, 0.10983494595204413, 0.07637553963842714, 0.04540957537472312, 0.07214342452472888, 0.06775010428775985, 0.1252532413279559, 0.17887096657762647, 0.11055008143457634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04121675907444711, 0.055352091203198506, 0.05686033714311467, 0.06664833009945503, 0.059662981384148606, 0.05483653923086018, 0.04783351183686824, 0.05553919788824824, 0.047824040063970785, 0.31911035366214957, 0.35036138223600843, 0.310490817717737, 0.31642656147671155, 0.3213810857641095, 0.38744631559651466, 0.32686572827057603, 0.3087979087459106, 0.41823904990531524, 0.0677242635631039, 0.04957093926933809, 0.062084997182368484, 0.0926634943045117, 0.08577293835682809, 0.06445048994338176, 0.06405804606822241, 0.06922062125137474, 0.08347560658673336, 0.14350805340093742, 0.19755201710991965, 0.17002897303897224, 0.16803438058988873, 0.19850465548528395, 0.18328828609659875, 0.14006778834844458, 0.1913108399398371, 0.15785308439641665, 0.22779530445089746, 0.2197912096314253, 0.23592486321914552, 0.24459150935204943, 0.2190227030408496, 0.22260876973798982, 0.2307925049167363, 0.20020444161255324, 0.1824474982912594, 0.17899538996089537, 0.17433381620938093, 0.15755093726632308, 0.19065286126927972, 0.18040408717448775, 0.17248585381665982, 0.14588453643030885, 0.15228188533905251, 0.19867115580105343, 0.20483516726591966, 0.2146354821583234, 0.1930936489019095, 0.197406540114067, 0.19408674820631555, 0.2062572718642608, 0.2042342623984813, 0.18432258568239313, 0.19163979308896828, 0.1687610164648231, 0.1698730615665267, 0.17490661130802587, 0.1772631421496249, 0.17385269377780366, 0.19440919959012448, 0.17818191225604552, 0.1655383976028988, 0.16886834654385352, 0.18541736589906033, 0.4243452925659018, 0.1858862054889373, 0.4559532168129913, 0.3226125398516124, 0.1654952805490877, 0.49053307722710027, 0.44282141515243656, 0.39816481312943275, 0.38324884331835063, 0.4936065411247226, 0.4125667044922827, 0.2020424259321557, 0.31493814743317994, 0.20454417006919368, 0.377247041528861, 0.26417216474371386, 0.37158775846146397, 0.1860315299591846, 0.17300195238045002, 0.17130769556658454, 0.18097992791489137, 0.18160273591824738, 0.2054143384622089, 0.17228848261372298, 0.17773468030188455, 0.1929860607007433, 0.0853536518741852, 0.071179232488352, 0.07726494193311717, 0.06573379499215992, 0.08428087637929005, 0.07391899185595119, 0.07604153293478721, 0.07715821505883091, 0.07280981560704136]}, "mutation_prompt": null}
{"id": "c5fca8cb-0e4f-4dd3-b242-ce6765a0506e", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = 0.5 * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy with dynamic control parameters\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * np.random.uniform(0, 1)))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing exploration through adaptive mutation strategy and diversity promotion in particle swarm optimization with dynamic control parameters.", "configspace": "", "generation": 93, "fitness": 0.1827326124009089, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "de559ec7-f9ab-4014-a52a-7ba7e9872391", "metadata": {"aucs": [0.3293902385768197, 0.3348959056862296, 0.32728447554125406, 0.32919354555632874, 0.3079972117232346, 0.29195025473237746, 0.28948918179310845, 0.33128683850157437, 0.3598281212290748, 0.001257836792240452, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09261155335177518, 0.08270217831374738, 0.09158033511056418, 0.0790265635949714, 0.07307939983614364, 0.09909422895444187, 0.07977295931938355, 0.09406119423171544, 0.07120056818548381, 0.07409774684049464, 0.07709050619763658, 0.07199418382745937, 0.07247432867084369, 0.06695021074549046, 0.07111075922765964, 0.07955824516101606, 0.07528842646755707, 0.07498538364382712, 0.7804769851675464, 0.7619924810048769, 0.827259147233938, 0.7221942910066783, 0.7264970722067714, 0.7628266211811974, 0.8205253891978138, 0.661433255414348, 0.7149163002180341, 0.20107811679465348, 0.20410808608088937, 0.19828945523722064, 0.2096740763354965, 0.2201746894319283, 0.23116901702027903, 0.19098304851223014, 0.201389330653164, 0.213347204514313, 0.24747204573942527, 0.26871295651526383, 0.21569151597096015, 0.2993533733912418, 0.25043496776668495, 0.24630811731821867, 0.24441977220197675, 0.2091940677546874, 0.2249991240370024, 0.13071418701110493, 0.10635527288824653, 0.13224439747834116, 0.09583527221978105, 0.08051042244321327, 0.07837368120359967, 0.128456313114218, 0.13270815179409057, 0.12523895884120173, 0.12089851826756925, 0.1740720187133178, 0.12552775688050188, 0.11788270440186333, 0.12858479963022496, 0.13299545595847573, 0.14202062099425783, 0.09894871702916008, 0.1365930299897078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1101941663137086, 0.06416474057168475, 0.09784755261409905, 0.053466814028176435, 0.0779158230877165, 0.06541468048738153, 0.11956762051716197, 0.09616724924300246, 0.12934767706456407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06019991495298094, 0.046712524352948814, 0.045964104561951546, 0.05613553786165559, 0.06687682012953866, 0.04879774749989685, 0.051530144183577264, 0.06213577554486238, 0.042547748260638785, 0.32708928106738355, 0.3582627115819309, 0.33756234666438945, 0.3265223413006565, 0.3166047988963667, 0.3408821488533007, 0.3452704203309638, 0.33935112592954575, 0.32681649363818754, 0.07864165426439818, 0.0787667039553609, 0.09298663177745858, 0.08137715307532178, 0.07884389836004757, 0.10212777129409734, 0.09004978837814137, 0.1404830039683247, 0.07595430505828116, 0.20551822287365085, 0.2073018508244855, 0.13912375328512483, 0.1337391849983025, 0.19259047437643062, 0.16643543710931974, 0.19342337202980464, 0.15638160172694515, 0.17644625418089022, 0.23930880718379532, 0.21336087288321437, 0.2303403637194833, 0.2444061443896196, 0.2253702830024159, 0.23393197528461807, 0.2299717476992772, 0.2069190404846688, 0.22100678214882674, 0.17428578551898932, 0.17797981551515019, 0.1702817010782517, 0.18304108621202209, 0.1892431246870908, 0.17973594703755058, 0.1741861070043651, 0.1695482671545484, 0.16579246387695257, 0.21752173347823123, 0.19420073977556906, 0.19938196575293932, 0.2067064939810237, 0.19028883582359846, 0.21589880957092122, 0.24657463238868527, 0.21960025956366136, 0.21769223862804743, 0.17781168027016592, 0.1732536500061964, 0.18415339749353177, 0.1716994703216611, 0.16632864439691586, 0.1700437930545382, 0.1666080562809975, 0.17036000966364284, 0.16981137089752862, 0.18183933214938297, 0.19568108480162683, 0.1822374163188032, 0.19275735399753757, 0.43037442765223344, 0.5003306563020707, 0.4671470932367672, 0.3664441221190513, 0.43982316370247754, 0.33233202808152595, 0.34390280700756326, 0.4252815610100008, 0.4265268492187676, 0.3643386837970771, 0.20072308541785677, 0.33270862019927705, 0.32675565927752614, 0.16806964224996668, 0.1811275803750635, 0.17784175542724812, 0.1786448188251366, 0.19677089722491847, 0.21358374005453984, 0.1776472593793973, 0.17774842183170003, 0.17208214566371882, 0.18198963749604247, 0.07895894991973551, 0.08877973213265211, 0.08137561282124184, 0.09067989490483819, 0.07995445194329298, 0.10938424372817313, 0.07768701538977874, 0.08432579279448382, 0.082070106263335]}, "mutation_prompt": null}
{"id": "449a3647-e9bf-4700-a4f0-ba55aa93fdf3", "solution": "class EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n        inertia_weight = 0.5  # Initialize dynamic inertia weight\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = inertia_weight * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    inertia_weight = max(0.1, min(0.9, inertia_weight + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy with dynamic control parameters\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * np.random.uniform(0, 1)))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Introducing a dynamic inertia weight adaptation mechanism to enhance exploitation and exploration balance in the algorithm.", "configspace": "", "generation": 94, "fitness": 0.19283271158623586, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "c5fca8cb-0e4f-4dd3-b242-ce6765a0506e", "metadata": {"aucs": [0.34335415453298024, 0.36716907113020514, 0.35994556159363056, 0.3567464386492848, 0.311577573108885, 0.32270957315943205, 0.3781766206697196, 0.3747149911010953, 0.37597904371194923, 0.0, 0.006318133930945269, 0.02365494535283108, 0.0, 0.010663692112033663, 0.002458870098913546, 0.014617915908050949, 0.0, 0.0, 0.1193752671356264, 0.08606737700857725, 0.09929874397715033, 0.09189041582931456, 0.08525633326949922, 0.08309027047219841, 0.08729121902614789, 0.08016579808691005, 0.06852062331891995, 0.08572409343793064, 0.07668038270407485, 0.07828066131597466, 0.08517383830551284, 0.0719307446423132, 0.09168282506216097, 0.07372033460419714, 0.07414833810944932, 0.0760914515515333, 0.5932604276573631, 0.7410518249026545, 0.7467976107381868, 0.7587506691748864, 0.7436224160307111, 0.847308656884834, 0.7979492315719829, 0.7010163575454459, 0.6924663660642888, 0.24115184293768155, 0.21213446093893817, 0.23168119773444606, 0.18927145508214394, 0.20597490678500685, 0.19477019077338487, 0.20171076753604178, 0.20277172937317423, 0.22780244971782382, 0.22967460445327925, 0.27478635090493353, 0.24320071876381222, 0.27055828259066084, 0.20713687930531954, 0.2759068835343782, 0.21602888684811306, 0.23192858801397176, 0.19014182488372278, 0.11945540094944895, 0.11921277276156594, 0.13968923193319405, 0.1372432767055659, 0.16529894867324035, 0.1389882557806411, 0.1756741711513361, 0.15404989308972017, 0.15792887750777995, 0.18774549784446248, 0.1493098294793932, 0.12234014218973843, 0.13147505845154428, 0.13380735790973286, 0.14944622791227524, 0.1621678475717474, 0.14952831349442053, 0.21708412490025863, 0.0, 0.0, 0.02344382753161678, 0.0022168724647084748, 0.01193253393738325, 0.0, 0.005889138508495817, 0.014943695609343721, 0.00603697553298721, 0.08207530811051933, 0.09846455980984559, 0.07462928545767555, 0.08899537622562015, 0.054424744823823534, 0.13653899169412964, 0.1300787037194313, 0.08385817716180177, 0.1035704536069032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09844849744004291, 0.0767492958496181, 0.06481813667524805, 0.08230364875761953, 0.07857536936513465, 0.051243914719991124, 0.08351210357154282, 0.043619719079198704, 0.06163163486631096, 0.33646673877252653, 0.35038482593608644, 0.33007161631712545, 0.39372487796343136, 0.3305866768529836, 0.3214648605285112, 0.39606550829441733, 0.3348085529031467, 0.3782846497919352, 0.08260937174706828, 0.0819357177256772, 0.06705204558299538, 0.11925772056742023, 0.0680017961902688, 0.08597305541185529, 0.1088324891028517, 0.07709902512873301, 0.08920152754103494, 0.24068612177062676, 0.20116805083008382, 0.16638377681210514, 0.15773361593601642, 0.2002697265731549, 0.2399639736982172, 0.14811826426411667, 0.18710126518763837, 0.1923039458470377, 0.24052874696978122, 0.2537727437118341, 0.21341966119853728, 0.2596659807134243, 0.25759456491087795, 0.25141200636821004, 0.2092342939822962, 0.2024878508030059, 0.21611065815755193, 0.18314180633505106, 0.18018621009103497, 0.1547177158126567, 0.18970872618781398, 0.191502980993014, 0.1519899297730175, 0.15439430630292916, 0.14794260774244306, 0.17349965730357564, 0.2107234333979442, 0.1976355252398937, 0.2133557257243982, 0.1822392627989632, 0.21293590882046454, 0.19562652211617293, 0.21031419324569411, 0.20925236492772814, 0.20209259578325944, 0.17729440802561913, 0.17472858097074373, 0.17741484842383992, 0.18128155565780657, 0.19280003382848898, 0.1864337870466587, 0.1804945102572144, 0.16914654484099534, 0.20494074892617842, 0.1854296279892772, 0.18548972770482974, 0.40219454393774434, 0.4042516555631859, 0.4865468496083921, 0.5193430454394545, 0.5151350294534993, 0.43398022878607057, 0.5709257296191582, 0.430941261119443, 0.442972271982617, 0.424542626585394, 0.4563197033233848, 0.27560586556128286, 0.3630856746674278, 0.2519699552008726, 0.3346676787084647, 0.1673942450453464, 0.1750668166175534, 0.1892013599306226, 0.18947183238178045, 0.1794515090750698, 0.18781293608304828, 0.19472142168284257, 0.17923014787807445, 0.1786307731143454, 0.17808575996488019, 0.06612004863812904, 0.07462799568928713, 0.0590837163492981, 0.08323858332666967, 0.072883383129558, 0.07377971395637484, 0.06492920386768586, 0.0882385900498821, 0.07114831944011912]}, "mutation_prompt": null}
{"id": "c9a89caa-01a4-4c97-81eb-9a42f3e11f41", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n        inertia_weight = 0.5  # Initialize dynamic inertia weight\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = inertia_weight * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    inertia_weight = max(0.1, min(0.9, inertia_weight + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy with dynamic control parameters - incorporating adaptive differential evolution\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * np.random.uniform(0, 1)))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim) + self.F * (particle - best_solution)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing the mutation strategy by incorporating adaptive differential evolution with dynamic control parameters.", "configspace": "", "generation": 95, "fitness": 0.19283271158623586, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "449a3647-e9bf-4700-a4f0-ba55aa93fdf3", "metadata": {"aucs": [0.34335415453298024, 0.36716907113020514, 0.35994556159363056, 0.3567464386492848, 0.311577573108885, 0.32270957315943205, 0.3781766206697196, 0.3747149911010953, 0.37597904371194923, 0.0, 0.006318133930945269, 0.02365494535283108, 0.0, 0.010663692112033663, 0.002458870098913546, 0.014617915908050949, 0.0, 0.0, 0.1193752671356264, 0.08606737700857725, 0.09929874397715033, 0.09189041582931456, 0.08525633326949922, 0.08309027047219841, 0.08729121902614789, 0.08016579808691005, 0.06852062331891995, 0.08572409343793064, 0.07668038270407485, 0.07828066131597466, 0.08517383830551284, 0.0719307446423132, 0.09168282506216097, 0.07372033460419714, 0.07414833810944932, 0.0760914515515333, 0.5932604276573631, 0.7410518249026545, 0.7467976107381868, 0.7587506691748864, 0.7436224160307111, 0.847308656884834, 0.7979492315719829, 0.7010163575454459, 0.6924663660642888, 0.24115184293768155, 0.21213446093893817, 0.23168119773444606, 0.18927145508214394, 0.20597490678500685, 0.19477019077338487, 0.20171076753604178, 0.20277172937317423, 0.22780244971782382, 0.22967460445327925, 0.27478635090493353, 0.24320071876381222, 0.27055828259066084, 0.20713687930531954, 0.2759068835343782, 0.21602888684811306, 0.23192858801397176, 0.19014182488372278, 0.11945540094944895, 0.11921277276156594, 0.13968923193319405, 0.1372432767055659, 0.16529894867324035, 0.1389882557806411, 0.1756741711513361, 0.15404989308972017, 0.15792887750777995, 0.18774549784446248, 0.1493098294793932, 0.12234014218973843, 0.13147505845154428, 0.13380735790973286, 0.14944622791227524, 0.1621678475717474, 0.14952831349442053, 0.21708412490025863, 0.0, 0.0, 0.02344382753161678, 0.0022168724647084748, 0.01193253393738325, 0.0, 0.005889138508495817, 0.014943695609343721, 0.00603697553298721, 0.08207530811051933, 0.09846455980984559, 0.07462928545767555, 0.08899537622562015, 0.054424744823823534, 0.13653899169412964, 0.1300787037194313, 0.08385817716180177, 0.1035704536069032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09844849744004291, 0.0767492958496181, 0.06481813667524805, 0.08230364875761953, 0.07857536936513465, 0.051243914719991124, 0.08351210357154282, 0.043619719079198704, 0.06163163486631096, 0.33646673877252653, 0.35038482593608644, 0.33007161631712545, 0.39372487796343136, 0.3305866768529836, 0.3214648605285112, 0.39606550829441733, 0.3348085529031467, 0.3782846497919352, 0.08260937174706828, 0.0819357177256772, 0.06705204558299538, 0.11925772056742023, 0.0680017961902688, 0.08597305541185529, 0.1088324891028517, 0.07709902512873301, 0.08920152754103494, 0.24068612177062676, 0.20116805083008382, 0.16638377681210514, 0.15773361593601642, 0.2002697265731549, 0.2399639736982172, 0.14811826426411667, 0.18710126518763837, 0.1923039458470377, 0.24052874696978122, 0.2537727437118341, 0.21341966119853728, 0.2596659807134243, 0.25759456491087795, 0.25141200636821004, 0.2092342939822962, 0.2024878508030059, 0.21611065815755193, 0.18314180633505106, 0.18018621009103497, 0.1547177158126567, 0.18970872618781398, 0.191502980993014, 0.1519899297730175, 0.15439430630292916, 0.14794260774244306, 0.17349965730357564, 0.2107234333979442, 0.1976355252398937, 0.2133557257243982, 0.1822392627989632, 0.21293590882046454, 0.19562652211617293, 0.21031419324569411, 0.20925236492772814, 0.20209259578325944, 0.17729440802561913, 0.17472858097074373, 0.17741484842383992, 0.18128155565780657, 0.19280003382848898, 0.1864337870466587, 0.1804945102572144, 0.16914654484099534, 0.20494074892617842, 0.1854296279892772, 0.18548972770482974, 0.40219454393774434, 0.4042516555631859, 0.4865468496083921, 0.5193430454394545, 0.5151350294534993, 0.43398022878607057, 0.5709257296191582, 0.430941261119443, 0.442972271982617, 0.424542626585394, 0.4563197033233848, 0.27560586556128286, 0.3630856746674278, 0.2519699552008726, 0.3346676787084647, 0.1673942450453464, 0.1750668166175534, 0.1892013599306226, 0.18947183238178045, 0.1794515090750698, 0.18781293608304828, 0.19472142168284257, 0.17923014787807445, 0.1786307731143454, 0.17808575996488019, 0.06612004863812904, 0.07462799568928713, 0.0590837163492981, 0.08323858332666967, 0.072883383129558, 0.07377971395637484, 0.06492920386768586, 0.0882385900498821, 0.07114831944011912]}, "mutation_prompt": null}
{"id": "4523b1b7-343d-43cd-8def-d7ce57d527c7", "solution": "class EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n        inertia_weight = 0.5  # Initialize dynamic inertia weight\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = inertia_weight * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    inertia_weight = max(0.1, min(0.9, inertia_weight + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy with dynamic control parameters\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * np.random.uniform(0, 1)))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Introducing a dynamic inertia weight adaptation mechanism to enhance exploitation and exploration balance in the algorithm.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "449a3647-e9bf-4700-a4f0-ba55aa93fdf3", "metadata": {"aucs": [0.34335415453298024, 0.36716907113020514, 0.35994556159363056, 0.3567464386492848, 0.311577573108885, 0.32270957315943205, 0.3781766206697196, 0.3747149911010953, 0.37597904371194923, 0.0, 0.006318133930945269, 0.02365494535283108, 0.0, 0.010663692112033663, 0.002458870098913546, 0.014617915908050949, 0.0, 0.0, 0.1193752671356264, 0.08606737700857725, 0.09929874397715033, 0.09189041582931456, 0.08525633326949922, 0.08309027047219841, 0.08729121902614789, 0.08016579808691005, 0.06852062331891995, 0.08572409343793064, 0.07668038270407485, 0.07828066131597466, 0.08517383830551284, 0.0719307446423132, 0.09168282506216097, 0.07372033460419714, 0.07414833810944932, 0.0760914515515333, 0.5932604276573631, 0.7410518249026545, 0.7467976107381868, 0.7587506691748864, 0.7436224160307111, 0.847308656884834, 0.7979492315719829, 0.7010163575454459, 0.6924663660642888, 0.24115184293768155, 0.21213446093893817, 0.23168119773444606, 0.18927145508214394, 0.20597490678500685, 0.19477019077338487, 0.20171076753604178, 0.20277172937317423, 0.22780244971782382, 0.22967460445327925, 0.27478635090493353, 0.24320071876381222, 0.27055828259066084, 0.20713687930531954, 0.2759068835343782, 0.21602888684811306, 0.23192858801397176, 0.19014182488372278, 0.11945540094944895, 0.11921277276156594, 0.13968923193319405, 0.1372432767055659, 0.16529894867324035, 0.1389882557806411, 0.1756741711513361, 0.15404989308972017, 0.15792887750777995, 0.18774549784446248, 0.1493098294793932, 0.12234014218973843, 0.13147505845154428, 0.13380735790973286, 0.14944622791227524, 0.1621678475717474, 0.14952831349442053, 0.21708412490025863, 0.0, 0.0, 0.02344382753161678, 0.0022168724647084748, 0.01193253393738325, 0.0, 0.005889138508495817, 0.014943695609343721, 0.00603697553298721, 0.08207530811051933, 0.09846455980984559, 0.07462928545767555, 0.08899537622562015, 0.054424744823823534, 0.13653899169412964, 0.1300787037194313, 0.08385817716180177, 0.1035704536069032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09844849744004291, 0.0767492958496181, 0.06481813667524805, 0.08230364875761953, 0.07857536936513465, 0.051243914719991124, 0.08351210357154282, 0.043619719079198704, 0.06163163486631096, 0.33646673877252653, 0.35038482593608644, 0.33007161631712545, 0.39372487796343136, 0.3305866768529836, 0.3214648605285112, 0.39606550829441733, 0.3348085529031467, 0.3782846497919352, 0.08260937174706828, 0.0819357177256772, 0.06705204558299538, 0.11925772056742023, 0.0680017961902688, 0.08597305541185529, 0.1088324891028517, 0.07709902512873301, 0.08920152754103494, 0.24068612177062676, 0.20116805083008382, 0.16638377681210514, 0.15773361593601642, 0.2002697265731549, 0.2399639736982172, 0.14811826426411667, 0.18710126518763837, 0.1923039458470377, 0.24052874696978122, 0.2537727437118341, 0.21341966119853728, 0.2596659807134243, 0.25759456491087795, 0.25141200636821004, 0.2092342939822962, 0.2024878508030059, 0.21611065815755193, 0.18314180633505106, 0.18018621009103497, 0.1547177158126567, 0.18970872618781398, 0.191502980993014, 0.1519899297730175, 0.15439430630292916, 0.14794260774244306, 0.17349965730357564, 0.2107234333979442, 0.1976355252398937, 0.2133557257243982, 0.1822392627989632, 0.21293590882046454, 0.19562652211617293, 0.21031419324569411, 0.20925236492772814, 0.20209259578325944, 0.17729440802561913, 0.17472858097074373, 0.17741484842383992, 0.18128155565780657, 0.19280003382848898, 0.1864337870466587, 0.1804945102572144, 0.16914654484099534, 0.20494074892617842, 0.1854296279892772, 0.18548972770482974, 0.40219454393774434, 0.4042516555631859, 0.4865468496083921, 0.5193430454394545, 0.5151350294534993, 0.43398022878607057, 0.5709257296191582, 0.430941261119443, 0.442972271982617, 0.424542626585394, 0.4563197033233848, 0.27560586556128286, 0.3630856746674278, 0.2519699552008726, 0.3346676787084647, 0.1673942450453464, 0.1750668166175534, 0.1892013599306226, 0.18947183238178045, 0.1794515090750698, 0.18781293608304828, 0.19472142168284257, 0.17923014787807445, 0.1786307731143454, 0.17808575996488019, 0.06612004863812904, 0.07462799568928713, 0.0590837163492981, 0.08323858332666967, 0.072883383129558, 0.07377971395637484, 0.06492920386768586, 0.0882385900498821, 0.07114831944011912]}, "mutation_prompt": null}
{"id": "6eb4c2cc-349c-45f3-9efb-b5350c57f147", "solution": "import numpy as np\n\nclass RefinedEnhancedDynamicHybridPSODE(EnhancedDynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n        inertia_weight = 0.5  # Initialize dynamic inertia weight\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = inertia_weight * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    inertia_weight = max(0.1, min(0.9, inertia_weight + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Self-adaptive differential evolution strategy\n                    diff_weight = np.random.uniform(0, 2)\n                    mutated_particle = particle + diff_weight * (best_solution - particle) + diff_weight * (particle - particle)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution\n", "name": "RefinedEnhancedDynamicHybridPSODE", "description": "Incorporating a self-adaptive differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 97, "fitness": 0.18953562235155202, "feedback": "The algorithm RefinedEnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "449a3647-e9bf-4700-a4f0-ba55aa93fdf3", "metadata": {"aucs": [0.3887595178044677, 0.39213212272629805, 0.3720413723543906, 0.3476614615601433, 0.36443199205063737, 0.3416424824934323, 0.3454223924931875, 0.3304114900719044, 0.3762501337243267, 0.0, 0.0, 0.0, 0.047426496386312245, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11729387828885429, 0.08952133157201858, 0.10545448201772123, 0.0858935537644111, 0.09115905124599033, 0.08549374025901002, 0.08737045852596093, 0.09085406966915999, 0.10086955632463179, 0.09169010251484122, 0.07386422850245833, 0.09244114164028028, 0.07034201977262144, 0.06331928743122173, 0.08465073323844041, 0.0664074587537753, 0.08664489000252174, 0.06844768437498894, 0.8289870984300289, 0.7328770997823417, 0.750655365129048, 0.7778545836957093, 0.7435555715833627, 0.6822601944351865, 0.8153029460670354, 0.8543558904208142, 0.8605176464877078, 0.2020183919880728, 0.20810541767940682, 0.19604783662727654, 0.17427668276250952, 0.22679401142407984, 0.19663929501619237, 0.1892775750718274, 0.20252530216108167, 0.17934098746908367, 0.24776422279541066, 0.18172608709832572, 0.17662471380763856, 0.31414074901594546, 0.26655946282695453, 0.2429415715101606, 0.28154113158831884, 0.3152782398289604, 0.2262728634075526, 0.15614850310733186, 0.18385808486438193, 0.12725325780699837, 0.1519461836777697, 0.13447621409862642, 0.10762863934259004, 0.15380662104579335, 0.1248564445338417, 0.15441973918773533, 0.13966539863836258, 0.13834375787175235, 0.14984790356724165, 0.13083387905047017, 0.16162820872588834, 0.1443622669024759, 0.1468688957534141, 0.18408313396596232, 0.12806445670947453, 0.0, 0.0, 0.0, 0.0002878004250205235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07258280809128315, 0.10785233192762245, 0.08840428905174891, 0.08040629739187077, 0.10771281479727912, 0.05485961578089649, 0.15226047874738524, 0.07821986672011239, 0.1324742513493795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06841789921080932, 0.06140054345873891, 0.08236065256340985, 0.06841857903928228, 0.08588334887966598, 0.07057748915682083, 0.04781235871345757, 0.07971984835224033, 0.06649784260272484, 0.3576992452481276, 0.3432720697192341, 0.3804815405988565, 0.30988987246816035, 0.3447993216786115, 0.3780073621768306, 0.3547005319170784, 0.3616339715726764, 0.3803736617498338, 0.09931230394249146, 0.06437535358177138, 0.08136480358120557, 0.07046489997691496, 0.08196885585560254, 0.06894048234726413, 0.09038381114557892, 0.08488199625939996, 0.0999786121975762, 0.15381440194710283, 0.16446252415071905, 0.2473461746227379, 0.2011001549483742, 0.12592223805100589, 0.15964187304017796, 0.2085085404611715, 0.1777460423500803, 0.16090986691299092, 0.23636220017363307, 0.242795418614409, 0.21987313606338343, 0.25823528398720186, 0.2610525694582947, 0.24105506043200509, 0.22616718644573952, 0.20488848309489238, 0.18799824023784595, 0.19321678390147112, 0.16167828816066832, 0.13192053076738264, 0.21350068312767867, 0.18946141099686253, 0.19080934329336718, 0.16377990778895368, 0.15741001968579627, 0.16567581607717352, 0.2219811866313529, 0.2078522897789591, 0.21827180992183992, 0.22173133140266377, 0.19744979338501067, 0.2483722586494762, 0.20440768773812978, 0.20234525569191975, 0.20974134962598978, 0.16850227634607617, 0.18462812210172797, 0.1775919990043201, 0.16668419006673452, 0.17390767212432368, 0.18972913334284214, 0.17424685883632063, 0.18827336561457741, 0.17385934906564726, 0.23412706638182113, 0.1868418383804098, 0.30304373483196434, 0.431820177157363, 0.4543270021360778, 0.1945659122776764, 0.4938733717946526, 0.5460572477165466, 0.3555573640518245, 0.333620975292512, 0.5312261664016724, 0.34114550954622924, 0.15728736585894443, 0.2070411913289767, 0.1955452302444527, 0.27788594820809154, 0.347319911715504, 0.15269550854182512, 0.18423739494347002, 0.17429121883187637, 0.18511243794806698, 0.18956905898331566, 0.1963158037923025, 0.17926197165597602, 0.19575665193900138, 0.1703378822411098, 0.1788633028494181, 0.09803969061448536, 0.0820417451400508, 0.10150325376667646, 0.08774556770951825, 0.07596237085891921, 0.09110792167559445, 0.0832386153254765, 0.06640940348783586, 0.07210303738545243]}, "mutation_prompt": null}
{"id": "b6ff9be5-230b-4046-aab2-d957e9596b08", "solution": "class ImprovedHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n        inertia_weight = 0.5  # Initialize dynamic inertia weight\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n\n                    velocity = inertia_weight * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n\n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n\n                    inertia_weight = max(0.1, min(0.9, inertia_weight + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * np.random.uniform(0, 1)))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n\n                    # Additional exploration via Gaussian mutation\n                    particle += np.random.normal(0, 0.1, self.dim)\n\n        return best_solution", "name": "ImprovedHybridPSODE", "description": "Improved hybrid PSO and DE algorithm with adaptive mutation and diversity promotion mechanisms to enhance convergence and exploration.", "configspace": "", "generation": 98, "fitness": 0.1801905330410071, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "449a3647-e9bf-4700-a4f0-ba55aa93fdf3", "metadata": {"aucs": [0.38435445870283513, 0.3968752454655218, 0.3919088195694135, 0.37425636276290863, 0.3646916689654287, 0.3298730669545398, 0.3527723499820429, 0.3354137353368113, 0.3567125461139009, 0.001305748363664816, 0.0, 0.0, 0.0019798691737267227, 0.011788321628818266, 0.0, 0.0, 0.0, 0.0, 0.09451610879954819, 0.08414789826571045, 0.07035923857235904, 0.09179587337361494, 0.09722282903801605, 0.08800180877897712, 0.07702813545483111, 0.10906505646863773, 0.07962467643653703, 0.08394756045599205, 0.07093738722870258, 0.060803123842596674, 0.07494773406141853, 0.08565763552468797, 0.07894509772019953, 0.0925986637181051, 0.07319144808382394, 0.06560522778034938, 0.8086775171307496, 0.5561445736186044, 0.6082114078734542, 0.4896303852863222, 0.6263429808283778, 0.7454123979970619, 0.6195160628549029, 0.2963504626229784, 0.7351407056522306, 0.1826857205986, 0.19321200930502058, 0.22275233091415714, 0.22218914936403822, 0.1732132317136389, 0.22479366853703542, 0.17397418102825757, 0.18493593745641335, 0.19923202629950554, 0.27415976921569873, 0.22648500604272737, 0.22097226257363056, 0.26843982308212, 0.26573289229588803, 0.25388278647128093, 0.22429114552224338, 0.21867829449920262, 0.22824008017145547, 0.14862830154917883, 0.14777853749036585, 0.18613362028985925, 0.16586263045781124, 0.16043784487050672, 0.12774346630494415, 0.16812953962632404, 0.10898423239420241, 0.15463645129244885, 0.12256161522460918, 0.15292416167428968, 0.17170864487818094, 0.17246839901966637, 0.1527705007788034, 0.13730009850233382, 0.17173077189509423, 0.1596724722015035, 0.20325601051700437, 0.0, 0.000926996453721407, 0.0, 0.0, 3.0834838553150945e-05, 0.0, 0.0, 0.0, 0.0, 0.0762622304226368, 0.12784669924477543, 0.08777722117692177, 0.07578465562876502, 0.03972656255220863, 0.06839368209349816, 0.13157798804059917, 0.12944299710557206, 0.12009716742096843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04477843050208741, 0.060420594260621185, 0.053723311265747586, 0.0714954349191892, 0.07663314428889245, 0.04454505564478717, 0.054852547052993916, 0.08096543121589439, 0.021017927660392344, 0.3301527062741285, 0.33443092594627244, 0.3394146040249144, 0.33097944315062944, 0.330569858459017, 0.3623543438789665, 0.3439299729146583, 0.3640539168055422, 0.3473269273259193, 0.06358496065032726, 0.05239237418539855, 0.09065840854880702, 0.0751626733910975, 0.08753846566184198, 0.08061676510776328, 0.0817554354075608, 0.08602328373364287, 0.07275868683743081, 0.18912672755199278, 0.19564775609725038, 0.14680071151947816, 0.17281733998913185, 0.1799880598758049, 0.140431885825115, 0.19295708572649029, 0.1525115773563761, 0.16305681589000665, 0.23551244659234183, 0.24222081033915943, 0.23624481731977698, 0.2549571284184503, 0.26166452841538734, 0.2726001945210753, 0.20793332231561956, 0.16780596170246065, 0.18825331002577927, 0.1962985521336631, 0.15465738496963732, 0.19792651901080704, 0.20370594873817616, 0.21553880218804244, 0.16639919247429757, 0.17598088369709786, 0.16104707130123785, 0.13598303855314442, 0.21054030555805126, 0.2039712675865356, 0.19322661759558657, 0.19035364082317308, 0.19166288438390444, 0.19435180177788802, 0.20167673092689797, 0.22916520680010444, 0.20812718632883886, 0.1845921939323778, 0.19127328862343818, 0.16600580401901466, 0.17699741593484253, 0.19200342240575896, 0.1925601499513243, 0.16613904274569924, 0.17294235041246897, 0.17679580443803355, 0.18776456802433683, 0.18192645908289418, 0.1852994951073169, 0.4751756278106123, 0.15222600201506942, 0.3725959917003121, 0.2290727155433233, 0.5192971055703909, 0.26715089919476, 0.4528080992814032, 0.28375360677372974, 0.43342275271569874, 0.14947217386528533, 0.4925941513432177, 0.2849114218019755, 0.267672915490062, 0.4547727095302435, 0.2345529086488527, 0.18213637847070074, 0.19433796240895285, 0.18432778631455315, 0.20023870113957032, 0.18233983078144478, 0.19422217371991757, 0.17958773210834167, 0.20423863224753835, 0.1878483444116359, 0.09225487334180849, 0.08174274134489057, 0.09930543970943251, 0.08954752245616604, 0.08510756743133174, 0.09056755506379832, 0.06707844138489438, 0.08287539251282017, 0.07212100307933311]}, "mutation_prompt": null}
{"id": "f6e9f9e7-58f6-42d9-8a80-9b554829a6b2", "solution": "class EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = np.inf\n        inertia_weight = 0.5  # Initialize dynamic inertia weight\n\n        for _ in range(self.max_iter):\n            for _ in range(self.particle_count):\n                particle = np.random.uniform(-5.0, 5.0, self.dim)\n                velocity = np.random.uniform(-1, 1, self.dim)\n                for _ in range(self.budget // (self.max_iter * self.particle_count)):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n\n                    self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n                    self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n                    mutated_particle = particle + self.F * (best_solution - particle) + self.F * (particle - particle) + self.F * (particle - particle)\n                    crossed_particle = []\n                    for i in range(self.dim):\n                        if np.random.uniform(0, 1) < self.CR or i == np.random.randint(0, self.dim):\n                            crossed_particle.append(mutated_particle[i])\n                        else:\n                            crossed_particle.append(particle[i])\n                    particle = np.clip(crossed_particle, -5.0, 5.0)\n                    \n                    # Update velocity based on particle's best position\n                    velocity = inertia_weight * velocity + (best_solution - particle) * np.random.uniform(-1, 1)\n                    particle += velocity\n                    \n                    particle_fitness = func(particle)\n                    if particle_fitness < best_fitness:\n                        best_solution = particle\n                        best_fitness = particle_fitness\n                        \n                    inertia_weight = max(0.1, min(0.9, inertia_weight + np.random.normal(0, 0.1) * (1 - particle_fitness / best_fitness)))\n                    \n                    # Adaptive mutation strategy with dynamic control parameters\n                    mutation_strength = 0.1 + 0.8 * (1 - np.exp(-self.F * np.random.uniform(0, 1)))\n                    mutated_particle = particle + mutation_strength * np.random.uniform(-1, 1, self.dim)\n                    \n                    # Diversity promotion\n                    delta = np.random.uniform(0, 1, self.dim) * (particle - best_solution)\n                    particle = np.clip(particle + delta, -5.0, 5.0)\n                    \n        return best_solution", "name": "EnhancedDynamicHybridPSODE", "description": "Introducing a dynamic inertia weight adaptation mechanism to enhance exploitation and exploration balance in the algorithm.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "449a3647-e9bf-4700-a4f0-ba55aa93fdf3", "metadata": {"aucs": [0.34335415453298024, 0.36716907113020514, 0.35994556159363056, 0.3567464386492848, 0.311577573108885, 0.32270957315943205, 0.3781766206697196, 0.3747149911010953, 0.37597904371194923, 0.0, 0.006318133930945269, 0.02365494535283108, 0.0, 0.010663692112033663, 0.002458870098913546, 0.014617915908050949, 0.0, 0.0, 0.1193752671356264, 0.08606737700857725, 0.09929874397715033, 0.09189041582931456, 0.08525633326949922, 0.08309027047219841, 0.08729121902614789, 0.08016579808691005, 0.06852062331891995, 0.08572409343793064, 0.07668038270407485, 0.07828066131597466, 0.08517383830551284, 0.0719307446423132, 0.09168282506216097, 0.07372033460419714, 0.07414833810944932, 0.0760914515515333, 0.5932604276573631, 0.7410518249026545, 0.7467976107381868, 0.7587506691748864, 0.7436224160307111, 0.847308656884834, 0.7979492315719829, 0.7010163575454459, 0.6924663660642888, 0.24115184293768155, 0.21213446093893817, 0.23168119773444606, 0.18927145508214394, 0.20597490678500685, 0.19477019077338487, 0.20171076753604178, 0.20277172937317423, 0.22780244971782382, 0.22967460445327925, 0.27478635090493353, 0.24320071876381222, 0.27055828259066084, 0.20713687930531954, 0.2759068835343782, 0.21602888684811306, 0.23192858801397176, 0.19014182488372278, 0.11945540094944895, 0.11921277276156594, 0.13968923193319405, 0.1372432767055659, 0.16529894867324035, 0.1389882557806411, 0.1756741711513361, 0.15404989308972017, 0.15792887750777995, 0.18774549784446248, 0.1493098294793932, 0.12234014218973843, 0.13147505845154428, 0.13380735790973286, 0.14944622791227524, 0.1621678475717474, 0.14952831349442053, 0.21708412490025863, 0.0, 0.0, 0.02344382753161678, 0.0022168724647084748, 0.01193253393738325, 0.0, 0.005889138508495817, 0.014943695609343721, 0.00603697553298721, 0.08207530811051933, 0.09846455980984559, 0.07462928545767555, 0.08899537622562015, 0.054424744823823534, 0.13653899169412964, 0.1300787037194313, 0.08385817716180177, 0.1035704536069032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09844849744004291, 0.0767492958496181, 0.06481813667524805, 0.08230364875761953, 0.07857536936513465, 0.051243914719991124, 0.08351210357154282, 0.043619719079198704, 0.06163163486631096, 0.33646673877252653, 0.35038482593608644, 0.33007161631712545, 0.39372487796343136, 0.3305866768529836, 0.3214648605285112, 0.39606550829441733, 0.3348085529031467, 0.3782846497919352, 0.08260937174706828, 0.0819357177256772, 0.06705204558299538, 0.11925772056742023, 0.0680017961902688, 0.08597305541185529, 0.1088324891028517, 0.07709902512873301, 0.08920152754103494, 0.24068612177062676, 0.20116805083008382, 0.16638377681210514, 0.15773361593601642, 0.2002697265731549, 0.2399639736982172, 0.14811826426411667, 0.18710126518763837, 0.1923039458470377, 0.24052874696978122, 0.2537727437118341, 0.21341966119853728, 0.2596659807134243, 0.25759456491087795, 0.25141200636821004, 0.2092342939822962, 0.2024878508030059, 0.21611065815755193, 0.18314180633505106, 0.18018621009103497, 0.1547177158126567, 0.18970872618781398, 0.191502980993014, 0.1519899297730175, 0.15439430630292916, 0.14794260774244306, 0.17349965730357564, 0.2107234333979442, 0.1976355252398937, 0.2133557257243982, 0.1822392627989632, 0.21293590882046454, 0.19562652211617293, 0.21031419324569411, 0.20925236492772814, 0.20209259578325944, 0.17729440802561913, 0.17472858097074373, 0.17741484842383992, 0.18128155565780657, 0.19280003382848898, 0.1864337870466587, 0.1804945102572144, 0.16914654484099534, 0.20494074892617842, 0.1854296279892772, 0.18548972770482974, 0.40219454393774434, 0.4042516555631859, 0.4865468496083921, 0.5193430454394545, 0.5151350294534993, 0.43398022878607057, 0.5709257296191582, 0.430941261119443, 0.442972271982617, 0.424542626585394, 0.4563197033233848, 0.27560586556128286, 0.3630856746674278, 0.2519699552008726, 0.3346676787084647, 0.1673942450453464, 0.1750668166175534, 0.1892013599306226, 0.18947183238178045, 0.1794515090750698, 0.18781293608304828, 0.19472142168284257, 0.17923014787807445, 0.1786307731143454, 0.17808575996488019, 0.06612004863812904, 0.07462799568928713, 0.0590837163492981, 0.08323858332666967, 0.072883383129558, 0.07377971395637484, 0.06492920386768586, 0.0882385900498821, 0.07114831944011912]}, "mutation_prompt": null}
