{"id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "solution": "import numpy as np\n\nclass MPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            new_population = population + np.random.normal(0, 0.1, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "MPHS", "description": "Multi-Phase Harmony Search (MPHS) algorithm that combines harmony search with multiple exploration and exploitation phases to efficiently optimize black box functions.", "configspace": "", "generation": 0, "fitness": 0.0915718702577289, "feedback": "The algorithm MPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "9c18b0b7-6a70-433b-83ae-d94f2bea60e9", "solution": "import numpy as np\n\nclass EnhancedMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            new_population = population + np.random.normal(0, 0.1, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                de_population = population + 0.5 * (np.random.uniform(-1, 1, population.shape) + np.random.uniform(-1, 1, population.shape))\n                new_population = np.where(np.random.rand(population.shape[0], self.dim) < 0.1, de_population, population)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedMPHS", "description": "Enhance exploration by incorporating a differential evolution component to generate diverse solutions for better global search.", "configspace": "", "generation": 1, "fitness": 0.0915718702577289, "feedback": "The algorithm EnhancedMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "6ef98b96-6811-4a16-81e8-29414d142674", "solution": "import numpy as np\n\nclass MPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            new_population = population + np.random.normal(0, 0.1, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "MPHS", "description": "Multi-Phase Harmony Search (MPHS) algorithm that combines harmony search with multiple exploration and exploitation phases to efficiently optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "9c364c4d-838c-4776-9744-8c477a84c47a", "solution": "import numpy as np\n\nclass MPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            new_population = population + np.random.normal(0, 0.1, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "MPHS", "description": "Multi-Phase Harmony Search (MPHS) algorithm that combines harmony search with multiple exploration and exploitation phases to efficiently optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "b1a58f2f-b678-4e01-a513-71702e6bb2d6", "solution": "import numpy as np\n\nclass MPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            new_population = population + np.random.normal(0, 0.1, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "MPHS", "description": "Multi-Phase Harmony Search (MPHS) algorithm that combines harmony search with multiple exploration and exploitation phases to efficiently optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "596885b2-9292-4eab-ae8f-c0c9497fa449", "solution": "import numpy as np\n\nclass EMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            new_population = population + np.random.normal(0, 0.1, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                step_size = 0.1 / np.sqrt(_ + 1)  # Adaptive step size\n                new_population = population + np.random.uniform(-step_size, step_size, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "EMPHS", "description": "Enhanced Multi-Phase Harmony Search (EMPHS) algorithm with adaptive step size in the exploitation phase to improve local search capabilities.", "configspace": "", "generation": 5, "fitness": 0.0915718702577289, "feedback": "The algorithm EMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "79705982-40e8-4244-b61c-54bb70e00488", "solution": "import numpy as np\n\nclass MPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            new_population = population + np.random.normal(0, 0.1, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "MPHS", "description": "Multi-Phase Harmony Search (MPHS) algorithm that combines harmony search with multiple exploration and exploitation phases to efficiently optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "9f728f98-90b5-48b1-8b77-eaa64263a535", "solution": "import numpy as np\n\nclass EnhancedMPHS(MPHS):\n    def __call__(self, func):\n        def evaluate_population(population):\n            fitness_values = np.array([func(individual) for individual in population])\n            fitness_order = np.argsort(fitness_values)\n            return population[fitness_order], fitness_values\n\n        def adapt_phase(population, fitness_values):\n            diversity = np.std(population, axis=0)\n            exploration_prob = np.clip(0.1 * np.mean(diversity), 0.1, 0.9)\n            exploitation_prob = 1 - exploration_prob\n            return exploration_prob, exploitation_prob\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            sorted_population, sorted_fitness = evaluate_population(population)\n            exploration_prob, exploitation_prob = adapt_phase(sorted_population, sorted_fitness)\n            if np.random.rand() < exploration_prob:\n                population = explore_phase(sorted_population)\n            else:\n                population = exploit_phase(sorted_population)\n        best_individual = sorted_population[np.argmin(sorted_fitness)]\n        return best_individual", "name": "EnhancedMPHS", "description": "Introducing dynamic adaptation of exploration and exploitation based on fitness landscape characteristics.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "metadata": {}, "mutation_prompt": null}
{"id": "9148f6c1-1063-4e27-b660-ec8b76625448", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            new_population = population + np.random.normal(0, 0.1, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                learning_rate = 0.1 / np.sqrt(_ + 1)\n                new_population = population + np.random.uniform(-learning_rate, learning_rate, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances exploitation by applying a dynamic learning rate during the exploitation phase to adaptively adjust the step size for better exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": 0.0915718702577289, "feedback": "The algorithm IMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 9, "fitness": 0.0917360855397902, "feedback": "The algorithm IMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "145e446f-22b8-4b33-9063-27f3fa13e0ca", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "b81fc552-998c-4122-a6df-1597cc03a639", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def explore_phase(population):\n            fitness_values = evaluate_population(population)\n            min_fitness, max_fitness = np.min(fitness_values), np.max(fitness_values)\n            norm_fitness = (fitness_values - min_fitness) / (max_fitness - min_fitness)\n            mutation_rates = 0.05 + 0.15 * (1 - norm_fitness)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution\n\ndynamic_imphs = DynamicIMPHS(budget=1000, dim=10)", "name": "DynamicIMPHS", "description": "Introducing a dynamic adaptation mechanism to adjust the mutation rates based on the population performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "0316e7f9-4f1a-4a6e-ad54-753f5733e7c0", "solution": "import numpy as np\n\nclass AdaptiveIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population, mutation_rates):\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, mutation_rates):\n            best_idx = np.argmin(evaluate_population(population))\n            best_individual = population[best_idx]\n            new_population = population + np.random.uniform(-mutation_rates, mutation_rates, population.shape)\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n            return new_population\n\n        population = initialize_population()\n        mutation_rates = np.full(self.dim, 0.1)\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population, mutation_rates), mutation_rates)\n            best_idx = np.argmin(evaluate_population(population))\n            best_solution = population[best_idx]\n            mutation_rates = np.clip(mutation_rates * 0.95, 0.01, 0.2)\n        return best_solution", "name": "AdaptiveIMPHS", "description": "Introduce a dynamic mutation strategy based on individual performance to adaptively adjust exploration rates during the search process.", "configspace": "", "generation": 11, "fitness": 0.0915718702577289, "feedback": "The algorithm AdaptiveIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "0c801eed-c383-47b6-9f07-6980f56cb4fb", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "00788008-5ea4-4538-b736-e3a74ccd5f5c", "solution": "import numpy as np\n\nclass E_IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.normal(0.1, 0.1, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.normal(0, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "E_IMPHS", "description": "Enhanced Improved Multi-Phase Harmony Search (E-IMP-HS) algorithm improves population diversity by dynamically adjusting mutation rates and incorporates a novel adaptive exploitation mechanism.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "ddf6b680-4832-48df-9761-f12fe9c12fbe", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "e0d3b541-dc5a-44cd-acf7-33661edcc00f", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "0933ce3c-03c7-4348-ab9b-b6ae5757cfeb", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "afe5e28b-0e03-4058-b334-4bb5e6efaf59", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population, mutation_pool):\n            new_population = population + np.random.normal(0, mutation_pool, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        mutation_pool = np.random.uniform(0.05, 0.2, self.dim)\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population, mutation_pool))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Introduce a mutation pool to dynamically adjust mutation rates based on individual performance.", "configspace": "", "generation": 17, "fitness": 0.09154033133728576, "feedback": "The algorithm IMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1805655223045073, 0.17049986317966015, 0.16130188256139466, 0.17673965008920134, 0.17781310844920095, 0.17652358878886587, 0.1829058164717985, 0.1657747386573094, 0.1870723823822954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0516565839740748, 0.04168686215020556, 0.050485548604438324, 0.03988673424982703, 0.043399458339760666, 0.05706013376203389, 0.048665236936389245, 0.05172281539606138, 0.03467678083591785, 0.039244145823233656, 0.03285658371901756, 0.04092930670522854, 0.024456393257341946, 0.03809943497265067, 0.05490147070172302, 0.037477383090209315, 0.0508771604224767, 0.030412460826758747, 0.08708448768928534, 0.07588668122673226, 0.08725392533220688, 0.08823316273432524, 0.08277566990210694, 0.08530846156239891, 0.08416817066610982, 0.08893684723525208, 0.08344555869091219, 0.07014028316752341, 0.10747070091226596, 0.10579836345493765, 0.06456456552123091, 0.06284546272639269, 0.05989702730169777, 0.11201579935904771, 0.07716410585038025, 0.08380091707273296, 0.15059068698634515, 0.20951834343158016, 0.14871819852952628, 0.11135231986770378, 0.09799115060004004, 0.13785165228079754, 0.11774435774370284, 0.14103487826238847, 0.13659683889314989, 0.004519618441650497, 0.007860150684795397, 0.015955141062609646, 0.0012702624079676816, 9.999999999998899e-05, 0.016217434920796636, 9.999999999998899e-05, 9.999999999998899e-05, 0.02470690616397153, 0.0201401145976724, 0.05369599100016398, 9.999999999998899e-05, 0.015431246841905666, 0.04422591903584894, 9.999999999998899e-05, 0.006299908087871842, 0.011111807408576868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03159422824969682, 0.08365627898720673, 0.03937423020230013, 0.07291333150368651, 0.07399317247723736, 0.04738330205076724, 0.06552955055307119, 0.04999524453515991, 0.06073316532554107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008954873362281401, 0.00014159023876469945, 0.21595451480635486, 0.19602729825084753, 0.20039743556632617, 0.21678158103122447, 0.19132893520622385, 0.19572448981973434, 0.20328226730788246, 0.18038946428983094, 0.20239880577142644, 0.04237179548535319, 0.04342349205704832, 0.03987982478401586, 0.04563812353515462, 0.042136630560269284, 0.040922760462756, 0.04706595612586029, 0.040036879024995864, 0.047378789426039125, 0.13964756539553946, 0.1230322199837166, 0.13925288206498665, 0.15173858741923174, 0.13052371197747958, 0.15947492111932593, 0.14355870980441143, 0.12222413431486057, 0.14441620446141046, 0.16972548789482278, 0.1683563684777618, 0.1740319080822701, 0.175121051534334, 0.1974908188218102, 0.17233254346421778, 0.16184338380116714, 0.17045139809391108, 0.1632189686536314, 0.1136791774905258, 0.1126872137700391, 0.12810835756952588, 0.10826356967945139, 0.13372456960563506, 0.12012969124548689, 0.10749075235518646, 0.11209703363922996, 0.12274378028761823, 0.13740921455295885, 0.15676761130416994, 0.17065298967327092, 0.15567491771799047, 0.1536378806844324, 0.158642505150019, 0.15020135847229654, 0.15222029520385316, 0.166214304343541, 0.14055721235817686, 0.1495378940912886, 0.14380752794993368, 0.13400042717538485, 0.14813644104929824, 0.1576077016562034, 0.13801497780426308, 0.14190772453125777, 0.1531688451553258, 0.15514736702683896, 0.18905688655952546, 0.16395269160814274, 0.16495570975286478, 0.1510094525987712, 0.15481923024032274, 0.16067391641296325, 0.1600359646568611, 0.16663542366177775, 0.14086871027738557, 0.1434275869570647, 0.15902192368397794, 0.15942165779077355, 0.16129322440008764, 0.14839725793208036, 0.27168361396112783, 0.17818855813607715, 0.18841691275454808, 0.19438715027367348, 0.19111487372525926, 0.17351775795181146, 0.17912702055472995, 0.1862835320852173, 0.18169598195492365, 0.17769523772665674, 0.18617208702005106, 0.17916525643753634, 0.05006414945921189, 0.05742421486147942, 0.049069658189415555, 0.060995689426988076, 0.04919580278928393, 0.04954613510282657, 0.046952869490472726, 0.060848112583397396, 0.052202935625104696]}, "mutation_prompt": null}
{"id": "a44a8d5d-fedb-4979-bbc3-ae8ff60baa6e", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "f068d6df-689b-44b5-97c7-159ac58fc895", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def explore_phase(population, mutation_rates):\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, mutation_rates, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-mutation_rates, mutation_rates, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        mutation_rates = np.full(self.dim, 0.1)  # Initial mutation rates\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population, mutation_rates), mutation_rates)\n            mutation_rates = np.maximum(mutation_rates * 0.95, 0.01)  # Update mutation rates adaptively\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "DynamicIMPHS", "description": "Enhance IMPHS by introducing a dynamic mutation strategy that adapts mutation rates based on individual performance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "de3019a1-edd0-4521-b134-09bececeb9db", "solution": "import numpy as np\n\nclass IMPHS_refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                for i in range(len(population)):\n                    candidates = np.random.choice(np.delete(population, i, axis=0), 2, replace=False)\n                    mutant = candidates[0] + 0.5 * (candidates[1] - population[i])\n                    trial = np.where(np.random.uniform(size=self.dim) < 0.5, mutant, population[i])\n                    if func(trial) < func(population[i]):\n                        population[i] = trial\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS_refined", "description": "Enhancing the exploitation phase by incorporating a differential evolution strategy to improve local search capabilities.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "273d338b-1676-4d2a-890c-4920c7ec393c", "solution": "import numpy as np\n\nclass DynamicIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            fitness_values = evaluate_population(population)\n            normalized_fitness = (fitness_values - np.min(fitness_values)) / (np.max(fitness_values) - np.min(fitness_values))\n            mutation_rates = 0.05 + 0.15 * (1 - normalized_fitness)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "DynamicIMPHS", "description": "Introducing a dynamic mutation strategy where mutation rates are adaptively adjusted based on the fitness landscape to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (10000, 5) and arg 2 with shape (10000,).').", "error": "ValueError('shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (10000, 5) and arg 2 with shape (10000,).')", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "24ae7d8c-7b6d-4ab4-8589-450b87b238e8", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "4c46a988-350c-4c3b-90b5-a3bea029998e", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "d34b43ab-8b1a-4b50-9eed-7efecccf7824", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "596be7ec-c0b9-446c-8ad7-edb44c335862", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "a43ade50-f465-4d0b-b99b-725c0707164d", "solution": "import numpy as np\n\nclass AdaptiveIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def explore_phase(population, mutation_rates):\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                mutation_rates = np.clip(mutation_rates * 0.95, 0.05, 0.2)  # Dynamic adaptation\n                new_population = population + np.random.normal(0, mutation_rates, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population, mutation_rates))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "AdaptiveIMPHS", "description": "Introducing a dynamic adaptation mechanism for the mutation rates based on the convergence behavior of the population.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "23cc7951-635d-4d57-b537-c74b526d983d", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def explore_phase(population, best_idx):\n        mutation_rates = np.random.uniform(0.05, 0.2, self.dim) * np.abs(best_idx - np.arange(self.dim))\n        new_population = population + np.random.normal(0, mutation_rates, population.shape)\n        return np.clip(new_population, self.lower_bound, self.upper_bound)", "name": "DynamicIMPHS", "description": "Enhanced IMPHS algorithm with dynamic adaptation of mutation rates based on individual performance to improve exploration and exploitation balance.", "configspace": "", "generation": 27, "fitness": 0.09154033133728576, "feedback": "The algorithm DynamicIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1805655223045073, 0.17049986317966015, 0.16130188256139466, 0.17673965008920134, 0.17781310844920095, 0.17652358878886587, 0.1829058164717985, 0.1657747386573094, 0.1870723823822954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0516565839740748, 0.04168686215020556, 0.050485548604438324, 0.03988673424982703, 0.043399458339760666, 0.05706013376203389, 0.048665236936389245, 0.05172281539606138, 0.03467678083591785, 0.039244145823233656, 0.03285658371901756, 0.04092930670522854, 0.024456393257341946, 0.03809943497265067, 0.05490147070172302, 0.037477383090209315, 0.0508771604224767, 0.030412460826758747, 0.08708448768928534, 0.07588668122673226, 0.08725392533220688, 0.08823316273432524, 0.08277566990210694, 0.08530846156239891, 0.08416817066610982, 0.08893684723525208, 0.08344555869091219, 0.07014028316752341, 0.10747070091226596, 0.10579836345493765, 0.06456456552123091, 0.06284546272639269, 0.05989702730169777, 0.11201579935904771, 0.07716410585038025, 0.08380091707273296, 0.15059068698634515, 0.20951834343158016, 0.14871819852952628, 0.11135231986770378, 0.09799115060004004, 0.13785165228079754, 0.11774435774370284, 0.14103487826238847, 0.13659683889314989, 0.004519618441650497, 0.007860150684795397, 0.015955141062609646, 0.0012702624079676816, 9.999999999998899e-05, 0.016217434920796636, 9.999999999998899e-05, 9.999999999998899e-05, 0.02470690616397153, 0.0201401145976724, 0.05369599100016398, 9.999999999998899e-05, 0.015431246841905666, 0.04422591903584894, 9.999999999998899e-05, 0.006299908087871842, 0.011111807408576868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03159422824969682, 0.08365627898720673, 0.03937423020230013, 0.07291333150368651, 0.07399317247723736, 0.04738330205076724, 0.06552955055307119, 0.04999524453515991, 0.06073316532554107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008954873362281401, 0.00014159023876469945, 0.21595451480635486, 0.19602729825084753, 0.20039743556632617, 0.21678158103122447, 0.19132893520622385, 0.19572448981973434, 0.20328226730788246, 0.18038946428983094, 0.20239880577142644, 0.04237179548535319, 0.04342349205704832, 0.03987982478401586, 0.04563812353515462, 0.042136630560269284, 0.040922760462756, 0.04706595612586029, 0.040036879024995864, 0.047378789426039125, 0.13964756539553946, 0.1230322199837166, 0.13925288206498665, 0.15173858741923174, 0.13052371197747958, 0.15947492111932593, 0.14355870980441143, 0.12222413431486057, 0.14441620446141046, 0.16972548789482278, 0.1683563684777618, 0.1740319080822701, 0.175121051534334, 0.1974908188218102, 0.17233254346421778, 0.16184338380116714, 0.17045139809391108, 0.1632189686536314, 0.1136791774905258, 0.1126872137700391, 0.12810835756952588, 0.10826356967945139, 0.13372456960563506, 0.12012969124548689, 0.10749075235518646, 0.11209703363922996, 0.12274378028761823, 0.13740921455295885, 0.15676761130416994, 0.17065298967327092, 0.15567491771799047, 0.1536378806844324, 0.158642505150019, 0.15020135847229654, 0.15222029520385316, 0.166214304343541, 0.14055721235817686, 0.1495378940912886, 0.14380752794993368, 0.13400042717538485, 0.14813644104929824, 0.1576077016562034, 0.13801497780426308, 0.14190772453125777, 0.1531688451553258, 0.15514736702683896, 0.18905688655952546, 0.16395269160814274, 0.16495570975286478, 0.1510094525987712, 0.15481923024032274, 0.16067391641296325, 0.1600359646568611, 0.16663542366177775, 0.14086871027738557, 0.1434275869570647, 0.15902192368397794, 0.15942165779077355, 0.16129322440008764, 0.14839725793208036, 0.27168361396112783, 0.17818855813607715, 0.18841691275454808, 0.19438715027367348, 0.19111487372525926, 0.17351775795181146, 0.17912702055472995, 0.1862835320852173, 0.18169598195492365, 0.17769523772665674, 0.18617208702005106, 0.17916525643753634, 0.05006414945921189, 0.05742421486147942, 0.049069658189415555, 0.060995689426988076, 0.04919580278928393, 0.04954613510282657, 0.046952869490472726, 0.060848112583397396, 0.052202935625104696]}, "mutation_prompt": null}
{"id": "ecef20dd-a14b-47d9-84e8-8abdda6eec6b", "solution": "import numpy as np\n\nclass OppIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        def opposition_based_learning(population):\n            return np.concatenate((population, -1 * population))\n\n        population = initialize_population()\n        population = explore_phase(population)\n        population = exploit_phase(population)\n        population = opposition_based_learning(population)\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "OppIMPHS", "description": "Improved Multi-Phase Harmony Search variant incorporating opposition-based learning to enhance exploration and exploitation.", "configspace": "", "generation": 28, "fitness": 0.0917360855397902, "feedback": "The algorithm OppIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "efd1f415-1d24-47e4-9251-540e05ec15e5", "solution": "import numpy as np\n\nclass EnhancedIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def local_search(self, population):\n        for i, individual in enumerate(population):\n            new_individual = individual + np.random.uniform(-0.05, 0.05, self.dim)\n            new_individual = np.clip(new_individual, self.lower_bound, self.upper_bound)\n            if func(new_individual) < func(individual):\n                population[i] = new_individual\n        return population\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(local_search(population)))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedIMPHS", "description": "Enhance IMPHS algorithm by incorporating a local search mechanism to exploit promising regions in the search space.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'local_search' is not defined\").", "error": "NameError(\"name 'local_search' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "fc066899-26d5-42f8-a210-73eb27e0c590", "solution": "import numpy as np\n\nclass IMPHSRefined(IMPHS):\n    def exploit_phase(self, population, num_iterations=5):\n        for _ in range(num_iterations):\n            best_idx = np.argmin(self.evaluate_population(population))\n            best_individual = population[best_idx]\n            for i in range(len(population)):\n                idxs = np.random.choice(len(population), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                crossover_prob = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover_prob, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n            population[best_idx] = best_individual\n        return population", "name": "IMPHSRefined", "description": "Enhance the exploitation phase by incorporating a differential evolution strategy to exploit promising solutions in the population efficiently.", "configspace": "", "generation": 30, "fitness": 0.09154033133728576, "feedback": "The algorithm IMPHSRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1805655223045073, 0.17049986317966015, 0.16130188256139466, 0.17673965008920134, 0.17781310844920095, 0.17652358878886587, 0.1829058164717985, 0.1657747386573094, 0.1870723823822954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0516565839740748, 0.04168686215020556, 0.050485548604438324, 0.03988673424982703, 0.043399458339760666, 0.05706013376203389, 0.048665236936389245, 0.05172281539606138, 0.03467678083591785, 0.039244145823233656, 0.03285658371901756, 0.04092930670522854, 0.024456393257341946, 0.03809943497265067, 0.05490147070172302, 0.037477383090209315, 0.0508771604224767, 0.030412460826758747, 0.08708448768928534, 0.07588668122673226, 0.08725392533220688, 0.08823316273432524, 0.08277566990210694, 0.08530846156239891, 0.08416817066610982, 0.08893684723525208, 0.08344555869091219, 0.07014028316752341, 0.10747070091226596, 0.10579836345493765, 0.06456456552123091, 0.06284546272639269, 0.05989702730169777, 0.11201579935904771, 0.07716410585038025, 0.08380091707273296, 0.15059068698634515, 0.20951834343158016, 0.14871819852952628, 0.11135231986770378, 0.09799115060004004, 0.13785165228079754, 0.11774435774370284, 0.14103487826238847, 0.13659683889314989, 0.004519618441650497, 0.007860150684795397, 0.015955141062609646, 0.0012702624079676816, 9.999999999998899e-05, 0.016217434920796636, 9.999999999998899e-05, 9.999999999998899e-05, 0.02470690616397153, 0.0201401145976724, 0.05369599100016398, 9.999999999998899e-05, 0.015431246841905666, 0.04422591903584894, 9.999999999998899e-05, 0.006299908087871842, 0.011111807408576868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03159422824969682, 0.08365627898720673, 0.03937423020230013, 0.07291333150368651, 0.07399317247723736, 0.04738330205076724, 0.06552955055307119, 0.04999524453515991, 0.06073316532554107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008954873362281401, 0.00014159023876469945, 0.21595451480635486, 0.19602729825084753, 0.20039743556632617, 0.21678158103122447, 0.19132893520622385, 0.19572448981973434, 0.20328226730788246, 0.18038946428983094, 0.20239880577142644, 0.04237179548535319, 0.04342349205704832, 0.03987982478401586, 0.04563812353515462, 0.042136630560269284, 0.040922760462756, 0.04706595612586029, 0.040036879024995864, 0.047378789426039125, 0.13964756539553946, 0.1230322199837166, 0.13925288206498665, 0.15173858741923174, 0.13052371197747958, 0.15947492111932593, 0.14355870980441143, 0.12222413431486057, 0.14441620446141046, 0.16972548789482278, 0.1683563684777618, 0.1740319080822701, 0.175121051534334, 0.1974908188218102, 0.17233254346421778, 0.16184338380116714, 0.17045139809391108, 0.1632189686536314, 0.1136791774905258, 0.1126872137700391, 0.12810835756952588, 0.10826356967945139, 0.13372456960563506, 0.12012969124548689, 0.10749075235518646, 0.11209703363922996, 0.12274378028761823, 0.13740921455295885, 0.15676761130416994, 0.17065298967327092, 0.15567491771799047, 0.1536378806844324, 0.158642505150019, 0.15020135847229654, 0.15222029520385316, 0.166214304343541, 0.14055721235817686, 0.1495378940912886, 0.14380752794993368, 0.13400042717538485, 0.14813644104929824, 0.1576077016562034, 0.13801497780426308, 0.14190772453125777, 0.1531688451553258, 0.15514736702683896, 0.18905688655952546, 0.16395269160814274, 0.16495570975286478, 0.1510094525987712, 0.15481923024032274, 0.16067391641296325, 0.1600359646568611, 0.16663542366177775, 0.14086871027738557, 0.1434275869570647, 0.15902192368397794, 0.15942165779077355, 0.16129322440008764, 0.14839725793208036, 0.27168361396112783, 0.17818855813607715, 0.18841691275454808, 0.19438715027367348, 0.19111487372525926, 0.17351775795181146, 0.17912702055472995, 0.1862835320852173, 0.18169598195492365, 0.17769523772665674, 0.18617208702005106, 0.17916525643753634, 0.05006414945921189, 0.05742421486147942, 0.049069658189415555, 0.060995689426988076, 0.04919580278928393, 0.04954613510282657, 0.046952869490472726, 0.060848112583397396, 0.052202935625104696]}, "mutation_prompt": null}
{"id": "3fd3ed06-b663-4166-a8c7-a23a76c5c8d3", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "b0fa2000-2416-42fc-90c6-09611a6aa6e1", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def __call__(self, func):\n        def explore_phase(population, mutation_rates):\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                fitness_values = evaluate_population(population)\n                best_idx = np.argmin(fitness_values)\n                mutation_rates = np.clip(0.05 + 0.1 * (1 - fitness_values / np.max(fitness_values)), 0.05, 0.2)\n                best_individual = population[best_idx]\n                new_population = population + np.random.normal(0, mutation_rates, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            population = exploit_phase(explore_phase(population, mutation_rates))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "DynamicIMPHS", "description": "Enhance IMPHS by incorporating a dynamic adaptive mutation strategy based on individual performance to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "56bd3ca2-6b64-4547-bc0b-63436cfb47d1", "solution": "import numpy as np\n\nclass E_IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        def refine_population(population):\n            for idx in range(len(population)):\n                candidates = [individual for individual in population if individual is not population[idx]]\n                selected_indices = np.random.choice(len(candidates), 3, replace=False)\n                a, b, c = candidates[selected_indices]\n                mutant = population[idx] + 0.5 * (a - b) + 0.5 * (c - population[idx])\n                trial = np.where(np.random.rand(self.dim) < 0.8, mutant, population[idx])\n                if func(trial) < func(population[idx]):\n                    population[idx] = trial\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(refine_population(explore_phase(population)))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "E_IMPHS", "description": "Enhanced Improved Multi-Phase Harmony Search (E-IMP-HS) algorithm improves exploitation by incorporating a differential evolution strategy to refine population solutions.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('only integer scalar arrays can be converted to a scalar index').", "error": "TypeError('only integer scalar arrays can be converted to a scalar index')", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "308cb0e9-e387-4144-a8fa-137a0daec0cb", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "bafb5522-ec23-46e7-822d-22f8e3c4a831", "solution": "import numpy as np\n\nclass EnhancedIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        def local_search(population):\n            for idx in range(len(population)):\n                new_individual = population[idx] + np.random.uniform(-0.1, 0.1, self.dim)\n                new_individual = np.clip(new_individual, self.lower_bound, self.upper_bound)\n                if func(new_individual) < func(population[idx]):\n                    population[idx] = new_individual\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = local_search(exploit_phase(explore_phase(population)))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedIMPHS", "description": "Enhanced IMP-HS algorithm with dynamic mutation rates and local search for exploitation.", "configspace": "", "generation": 35, "fitness": 0.0917360855397902, "feedback": "The algorithm EnhancedIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "4fcb33d2-0e1e-4d4f-a05a-7d948e61cb1d", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "3265b234-1ef5-4674-bce0-f3dda6d2ff79", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "9692dd4d-12ba-4375-ab08-8977e5a48c0a", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "94973b85-264b-4acf-9b9d-d080b492fb14", "solution": "import numpy as np\n\nclass EnhancedIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                mutation_rates = 0.1 / np.sqrt(_ + 1)  # Dynamic learning rate\n                new_population = population + np.random.normal(0, mutation_rates, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedIMPHS", "description": "Enhance IMPHS algorithm by incorporating a dynamic learning rate for mutation in the exploit phase.", "configspace": "", "generation": 39, "fitness": 0.0917360855397902, "feedback": "The algorithm EnhancedIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "67c25a77-9582-4c35-878c-b57031101dba", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def exploit_phase(self, population, num_iterations=5):\n        mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n        for _ in range(num_iterations):\n            best_idx = np.argmin(self.evaluate_population(population))\n            best_individual = population[best_idx]\n            mutation_factors = np.random.uniform(0.9, 1.1, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates * mutation_factors, population.shape)\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n            population = new_population\n        return population", "name": "DynamicIMPHS", "description": "Enhance IMPHS by incorporating a dynamic adaptation of mutation rates during the exploitation phase to improve convergence speed and solution quality.", "configspace": "", "generation": 40, "fitness": 0.09154033133728576, "feedback": "The algorithm DynamicIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1805655223045073, 0.17049986317966015, 0.16130188256139466, 0.17673965008920134, 0.17781310844920095, 0.17652358878886587, 0.1829058164717985, 0.1657747386573094, 0.1870723823822954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0516565839740748, 0.04168686215020556, 0.050485548604438324, 0.03988673424982703, 0.043399458339760666, 0.05706013376203389, 0.048665236936389245, 0.05172281539606138, 0.03467678083591785, 0.039244145823233656, 0.03285658371901756, 0.04092930670522854, 0.024456393257341946, 0.03809943497265067, 0.05490147070172302, 0.037477383090209315, 0.0508771604224767, 0.030412460826758747, 0.08708448768928534, 0.07588668122673226, 0.08725392533220688, 0.08823316273432524, 0.08277566990210694, 0.08530846156239891, 0.08416817066610982, 0.08893684723525208, 0.08344555869091219, 0.07014028316752341, 0.10747070091226596, 0.10579836345493765, 0.06456456552123091, 0.06284546272639269, 0.05989702730169777, 0.11201579935904771, 0.07716410585038025, 0.08380091707273296, 0.15059068698634515, 0.20951834343158016, 0.14871819852952628, 0.11135231986770378, 0.09799115060004004, 0.13785165228079754, 0.11774435774370284, 0.14103487826238847, 0.13659683889314989, 0.004519618441650497, 0.007860150684795397, 0.015955141062609646, 0.0012702624079676816, 9.999999999998899e-05, 0.016217434920796636, 9.999999999998899e-05, 9.999999999998899e-05, 0.02470690616397153, 0.0201401145976724, 0.05369599100016398, 9.999999999998899e-05, 0.015431246841905666, 0.04422591903584894, 9.999999999998899e-05, 0.006299908087871842, 0.011111807408576868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03159422824969682, 0.08365627898720673, 0.03937423020230013, 0.07291333150368651, 0.07399317247723736, 0.04738330205076724, 0.06552955055307119, 0.04999524453515991, 0.06073316532554107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008954873362281401, 0.00014159023876469945, 0.21595451480635486, 0.19602729825084753, 0.20039743556632617, 0.21678158103122447, 0.19132893520622385, 0.19572448981973434, 0.20328226730788246, 0.18038946428983094, 0.20239880577142644, 0.04237179548535319, 0.04342349205704832, 0.03987982478401586, 0.04563812353515462, 0.042136630560269284, 0.040922760462756, 0.04706595612586029, 0.040036879024995864, 0.047378789426039125, 0.13964756539553946, 0.1230322199837166, 0.13925288206498665, 0.15173858741923174, 0.13052371197747958, 0.15947492111932593, 0.14355870980441143, 0.12222413431486057, 0.14441620446141046, 0.16972548789482278, 0.1683563684777618, 0.1740319080822701, 0.175121051534334, 0.1974908188218102, 0.17233254346421778, 0.16184338380116714, 0.17045139809391108, 0.1632189686536314, 0.1136791774905258, 0.1126872137700391, 0.12810835756952588, 0.10826356967945139, 0.13372456960563506, 0.12012969124548689, 0.10749075235518646, 0.11209703363922996, 0.12274378028761823, 0.13740921455295885, 0.15676761130416994, 0.17065298967327092, 0.15567491771799047, 0.1536378806844324, 0.158642505150019, 0.15020135847229654, 0.15222029520385316, 0.166214304343541, 0.14055721235817686, 0.1495378940912886, 0.14380752794993368, 0.13400042717538485, 0.14813644104929824, 0.1576077016562034, 0.13801497780426308, 0.14190772453125777, 0.1531688451553258, 0.15514736702683896, 0.18905688655952546, 0.16395269160814274, 0.16495570975286478, 0.1510094525987712, 0.15481923024032274, 0.16067391641296325, 0.1600359646568611, 0.16663542366177775, 0.14086871027738557, 0.1434275869570647, 0.15902192368397794, 0.15942165779077355, 0.16129322440008764, 0.14839725793208036, 0.27168361396112783, 0.17818855813607715, 0.18841691275454808, 0.19438715027367348, 0.19111487372525926, 0.17351775795181146, 0.17912702055472995, 0.1862835320852173, 0.18169598195492365, 0.17769523772665674, 0.18617208702005106, 0.17916525643753634, 0.05006414945921189, 0.05742421486147942, 0.049069658189415555, 0.060995689426988076, 0.04919580278928393, 0.04954613510282657, 0.046952869490472726, 0.060848112583397396, 0.052202935625104696]}, "mutation_prompt": null}
{"id": "5a9346c0-667a-4513-bb66-bff66a3e3220", "solution": "import numpy as np\n\nclass IMPHS_Refined(IMPHS):\n    def exploit_phase(self, population, num_iterations=5):\n        for _ in range(num_iterations):\n            best_idx = np.argmin(self.evaluate_population(population))\n            best_individual = population[best_idx]\n            for i in range(len(population)):\n                candidates = [ind for idx, ind in enumerate(population) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = np.clip(a + 0.5 * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < 0.9\n                new_individual = np.where(crossover_mask, mutant, population[i])\n                if func(new_individual) < func(population[i]):\n                    population[i] = new_individual\n        return population", "name": "IMPHS_Refined", "description": "Enhance the exploitation phase by incorporating a differential evolution strategy to improve convergence and exploration capabilities.", "configspace": "", "generation": 41, "fitness": 0.09154033133728576, "feedback": "The algorithm IMPHS_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1805655223045073, 0.17049986317966015, 0.16130188256139466, 0.17673965008920134, 0.17781310844920095, 0.17652358878886587, 0.1829058164717985, 0.1657747386573094, 0.1870723823822954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0516565839740748, 0.04168686215020556, 0.050485548604438324, 0.03988673424982703, 0.043399458339760666, 0.05706013376203389, 0.048665236936389245, 0.05172281539606138, 0.03467678083591785, 0.039244145823233656, 0.03285658371901756, 0.04092930670522854, 0.024456393257341946, 0.03809943497265067, 0.05490147070172302, 0.037477383090209315, 0.0508771604224767, 0.030412460826758747, 0.08708448768928534, 0.07588668122673226, 0.08725392533220688, 0.08823316273432524, 0.08277566990210694, 0.08530846156239891, 0.08416817066610982, 0.08893684723525208, 0.08344555869091219, 0.07014028316752341, 0.10747070091226596, 0.10579836345493765, 0.06456456552123091, 0.06284546272639269, 0.05989702730169777, 0.11201579935904771, 0.07716410585038025, 0.08380091707273296, 0.15059068698634515, 0.20951834343158016, 0.14871819852952628, 0.11135231986770378, 0.09799115060004004, 0.13785165228079754, 0.11774435774370284, 0.14103487826238847, 0.13659683889314989, 0.004519618441650497, 0.007860150684795397, 0.015955141062609646, 0.0012702624079676816, 9.999999999998899e-05, 0.016217434920796636, 9.999999999998899e-05, 9.999999999998899e-05, 0.02470690616397153, 0.0201401145976724, 0.05369599100016398, 9.999999999998899e-05, 0.015431246841905666, 0.04422591903584894, 9.999999999998899e-05, 0.006299908087871842, 0.011111807408576868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03159422824969682, 0.08365627898720673, 0.03937423020230013, 0.07291333150368651, 0.07399317247723736, 0.04738330205076724, 0.06552955055307119, 0.04999524453515991, 0.06073316532554107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008954873362281401, 0.00014159023876469945, 0.21595451480635486, 0.19602729825084753, 0.20039743556632617, 0.21678158103122447, 0.19132893520622385, 0.19572448981973434, 0.20328226730788246, 0.18038946428983094, 0.20239880577142644, 0.04237179548535319, 0.04342349205704832, 0.03987982478401586, 0.04563812353515462, 0.042136630560269284, 0.040922760462756, 0.04706595612586029, 0.040036879024995864, 0.047378789426039125, 0.13964756539553946, 0.1230322199837166, 0.13925288206498665, 0.15173858741923174, 0.13052371197747958, 0.15947492111932593, 0.14355870980441143, 0.12222413431486057, 0.14441620446141046, 0.16972548789482278, 0.1683563684777618, 0.1740319080822701, 0.175121051534334, 0.1974908188218102, 0.17233254346421778, 0.16184338380116714, 0.17045139809391108, 0.1632189686536314, 0.1136791774905258, 0.1126872137700391, 0.12810835756952588, 0.10826356967945139, 0.13372456960563506, 0.12012969124548689, 0.10749075235518646, 0.11209703363922996, 0.12274378028761823, 0.13740921455295885, 0.15676761130416994, 0.17065298967327092, 0.15567491771799047, 0.1536378806844324, 0.158642505150019, 0.15020135847229654, 0.15222029520385316, 0.166214304343541, 0.14055721235817686, 0.1495378940912886, 0.14380752794993368, 0.13400042717538485, 0.14813644104929824, 0.1576077016562034, 0.13801497780426308, 0.14190772453125777, 0.1531688451553258, 0.15514736702683896, 0.18905688655952546, 0.16395269160814274, 0.16495570975286478, 0.1510094525987712, 0.15481923024032274, 0.16067391641296325, 0.1600359646568611, 0.16663542366177775, 0.14086871027738557, 0.1434275869570647, 0.15902192368397794, 0.15942165779077355, 0.16129322440008764, 0.14839725793208036, 0.27168361396112783, 0.17818855813607715, 0.18841691275454808, 0.19438715027367348, 0.19111487372525926, 0.17351775795181146, 0.17912702055472995, 0.1862835320852173, 0.18169598195492365, 0.17769523772665674, 0.18617208702005106, 0.17916525643753634, 0.05006414945921189, 0.05742421486147942, 0.049069658189415555, 0.060995689426988076, 0.04919580278928393, 0.04954613510282657, 0.046952869490472726, 0.060848112583397396, 0.052202935625104696]}, "mutation_prompt": null}
{"id": "b4c92490-fe4b-482d-a0ca-3e5320ad2e2d", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def explore_phase(population, mutation_rates):\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def update_mutation_rates(mutation_rates, fitness_values):\n            max_fitness = max(fitness_values)\n            min_fitness = min(fitness_values)\n            diff_fitness = max_fitness - min_fitness\n            if diff_fitness != 0:\n                adapt_ratio = 0.5 * np.log((max_fitness - fitness_values) / diff_fitness)\n                mutation_rates = np.maximum(0.05, np.minimum(0.2, mutation_rates * np.exp(adapt_ratio)))\n            return mutation_rates\n\n        population = initialize_population()\n        mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n        for _ in range(self.budget // 2):\n            fitness_values = evaluate_population(population)\n            mutation_rates = update_mutation_rates(mutation_rates, fitness_values)\n            population = exploit_phase(explore_phase(population, mutation_rates))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "DynamicIMPHS", "description": "Enhance IMPHS algorithm by incorporating a dynamic adaptation mechanism for mutation rates based on individual performance to improve exploration and exploitation.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "88651084-d372-4cdb-8555-ed010f905695", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "1c6c6916-f8ce-4886-b4b1-a89224ce9622", "solution": "import numpy as np\n\nclass ENHMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def evolve_population(population, mutation_rate):\n            return np.clip(population + np.random.normal(0, mutation_rate, population.shape), self.lower_bound, self.upper_bound)\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            mutation_rate = np.random.uniform(0.05, 0.2, self.dim)\n            population = evolve_population(population, mutation_rate)\n            best_idx = np.argmin(evaluate_population(population))\n            best_individual = population[best_idx]\n            population = evolve_population(population, np.random.uniform(0, 0.1))\n            population[best_idx] = best_individual\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "ENHMPHS", "description": "Enhanced Multi-Phase Harmony Search (ENH-MPHS) algorithm improves population diversity by dynamically adjusting mutation rates in both exploration and exploitation phases.", "configspace": "", "generation": 44, "fitness": 0.0917360855397902, "feedback": "The algorithm ENHMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "5040ed84-5878-4a43-b331-243eb7d9971e", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "d1c7aba1-b9d9-4bd6-9df4-f48daf0d72c1", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "b76527b9-c93b-433e-b81b-418bca2c55d1", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "cccb52f0-484d-4470-933f-e103997a721f", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "c17aaf68-3c8a-42ae-a53e-fb34ced101a1", "solution": "import numpy as np\n\nclass EnhancedIMPHS(IMPHS):\n    def exploit_phase(population, num_iterations=5):\n        for _ in range(num_iterations):\n            performance = evaluate_population(population)\n            diversity = np.std(population, axis=0)\n            diversity = diversity / np.max(diversity)\n            mutation_rates = np.clip(0.1 * diversity, 0.01, 0.2)\n            best_idx = np.argmin(performance)\n            best_individual = population[best_idx]\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n            population = new_population\n        return population", "name": "EnhancedIMPHS", "description": "Introducing a dynamic mutation strategy based on individual performance diversity during exploitation phase.", "configspace": "", "generation": 49, "fitness": 0.09154033133728576, "feedback": "The algorithm EnhancedIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1805655223045073, 0.17049986317966015, 0.16130188256139466, 0.17673965008920134, 0.17781310844920095, 0.17652358878886587, 0.1829058164717985, 0.1657747386573094, 0.1870723823822954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0516565839740748, 0.04168686215020556, 0.050485548604438324, 0.03988673424982703, 0.043399458339760666, 0.05706013376203389, 0.048665236936389245, 0.05172281539606138, 0.03467678083591785, 0.039244145823233656, 0.03285658371901756, 0.04092930670522854, 0.024456393257341946, 0.03809943497265067, 0.05490147070172302, 0.037477383090209315, 0.0508771604224767, 0.030412460826758747, 0.08708448768928534, 0.07588668122673226, 0.08725392533220688, 0.08823316273432524, 0.08277566990210694, 0.08530846156239891, 0.08416817066610982, 0.08893684723525208, 0.08344555869091219, 0.07014028316752341, 0.10747070091226596, 0.10579836345493765, 0.06456456552123091, 0.06284546272639269, 0.05989702730169777, 0.11201579935904771, 0.07716410585038025, 0.08380091707273296, 0.15059068698634515, 0.20951834343158016, 0.14871819852952628, 0.11135231986770378, 0.09799115060004004, 0.13785165228079754, 0.11774435774370284, 0.14103487826238847, 0.13659683889314989, 0.004519618441650497, 0.007860150684795397, 0.015955141062609646, 0.0012702624079676816, 9.999999999998899e-05, 0.016217434920796636, 9.999999999998899e-05, 9.999999999998899e-05, 0.02470690616397153, 0.0201401145976724, 0.05369599100016398, 9.999999999998899e-05, 0.015431246841905666, 0.04422591903584894, 9.999999999998899e-05, 0.006299908087871842, 0.011111807408576868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03159422824969682, 0.08365627898720673, 0.03937423020230013, 0.07291333150368651, 0.07399317247723736, 0.04738330205076724, 0.06552955055307119, 0.04999524453515991, 0.06073316532554107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008954873362281401, 0.00014159023876469945, 0.21595451480635486, 0.19602729825084753, 0.20039743556632617, 0.21678158103122447, 0.19132893520622385, 0.19572448981973434, 0.20328226730788246, 0.18038946428983094, 0.20239880577142644, 0.04237179548535319, 0.04342349205704832, 0.03987982478401586, 0.04563812353515462, 0.042136630560269284, 0.040922760462756, 0.04706595612586029, 0.040036879024995864, 0.047378789426039125, 0.13964756539553946, 0.1230322199837166, 0.13925288206498665, 0.15173858741923174, 0.13052371197747958, 0.15947492111932593, 0.14355870980441143, 0.12222413431486057, 0.14441620446141046, 0.16972548789482278, 0.1683563684777618, 0.1740319080822701, 0.175121051534334, 0.1974908188218102, 0.17233254346421778, 0.16184338380116714, 0.17045139809391108, 0.1632189686536314, 0.1136791774905258, 0.1126872137700391, 0.12810835756952588, 0.10826356967945139, 0.13372456960563506, 0.12012969124548689, 0.10749075235518646, 0.11209703363922996, 0.12274378028761823, 0.13740921455295885, 0.15676761130416994, 0.17065298967327092, 0.15567491771799047, 0.1536378806844324, 0.158642505150019, 0.15020135847229654, 0.15222029520385316, 0.166214304343541, 0.14055721235817686, 0.1495378940912886, 0.14380752794993368, 0.13400042717538485, 0.14813644104929824, 0.1576077016562034, 0.13801497780426308, 0.14190772453125777, 0.1531688451553258, 0.15514736702683896, 0.18905688655952546, 0.16395269160814274, 0.16495570975286478, 0.1510094525987712, 0.15481923024032274, 0.16067391641296325, 0.1600359646568611, 0.16663542366177775, 0.14086871027738557, 0.1434275869570647, 0.15902192368397794, 0.15942165779077355, 0.16129322440008764, 0.14839725793208036, 0.27168361396112783, 0.17818855813607715, 0.18841691275454808, 0.19438715027367348, 0.19111487372525926, 0.17351775795181146, 0.17912702055472995, 0.1862835320852173, 0.18169598195492365, 0.17769523772665674, 0.18617208702005106, 0.17916525643753634, 0.05006414945921189, 0.05742421486147942, 0.049069658189415555, 0.060995689426988076, 0.04919580278928393, 0.04954613510282657, 0.046952869490472726, 0.060848112583397396, 0.052202935625104696]}, "mutation_prompt": null}
{"id": "3827a465-7713-4f9c-8777-ebb24e3cc0c2", "solution": "import numpy as np\n\nclass EnhancedIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population, mutation_rates):\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, mutation_rates, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-mutation_rates, mutation_rates, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        mutation_rates = np.full(self.dim, 0.1)\n        for _ in range(self.budget // 2):\n            mutation_rates = np.clip(mutation_rates * 0.95 + 0.05 * np.std(evaluate_population(population)), 0.01, 0.2)\n            population = exploit_phase(explore_phase(population, mutation_rates), mutation_rates)\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedIMPHS", "description": "Enhancing IMPHS algorithm by incorporating a dynamic mutation strategy that adapts based on individual fitness evaluations to improve exploration and exploitation balance.", "configspace": "", "generation": 50, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "4fa1cb04-7219-47c9-a139-b848041eea90", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "2211aa34-9a74-44fd-880d-26c474ed3dc8", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                dynamic_mutation_rates = np.random.uniform(0.05, 0.2, self.dim)  # Introducing dynamic mutation rates\n                new_population = population + np.random.normal(0, dynamic_mutation_rates, population.shape)  # Using dynamic mutation rates\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Enhancing population diversity by introducing adaptive mutation rates in the exploitation phase through a dynamic mechanism.", "configspace": "", "generation": 52, "fitness": 0.0917360855397902, "feedback": "The algorithm IMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "c69cf178-d580-4c49-a639-e4b206583df4", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "95aad733-3bea-4230-97b9-504c55b86fa2", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "05e4756d-1190-4fb0-996a-ad1b60c1afb6", "solution": "import numpy as np\n\nclass EnhancedIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            step_size = 0.1\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-step_size, step_size, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n                step_size *= 0.9\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedIMPHS", "description": "Enhancing IMPHS algorithm by incorporating a dynamic adaptive step size adjustment mechanism during the exploitation phase for better convergence and improved exploration-exploitation balance.", "configspace": "", "generation": 55, "fitness": 0.0917360855397902, "feedback": "The algorithm EnhancedIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "c5031928-eff8-4c7a-b4aa-65809b2c5e82", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "878c1aa5-98da-4a0d-9f8d-1dc7c57afb04", "solution": "import numpy as np\n\nclass IMPHS_Refined(IMPHS):\n    def exploit_phase(self, population, num_iterations=5):\n        F = 0.5\n        CR = 0.9\n        for _ in range(num_iterations):\n            best_idx = np.argmin(self.evaluate_population(population))\n            best_individual = population[best_idx]\n            for i in range(len(population)):\n                a, b, c = np.random.choice(np.delete(np.arange(len(population)), i, axis=0), 3, replace=False)\n                trial_vector = population[a] + F * (population[b] - population[c])\n                mask = np.random.rand(self.dim) < CR\n                trial_vector = np.where(mask, trial_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                if func(trial_vector) < func(population[i]):\n                    population[i] = trial_vector\n            population[best_idx] = best_individual\n        return population", "name": "IMPHS_Refined", "description": "Enhance the exploitation phase by incorporating a differential evolution strategy to exploit promising solutions more effectively.", "configspace": "", "generation": 57, "fitness": 0.0917360855397902, "feedback": "The algorithm IMPHS_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "fb58e4d7-cff6-455e-861c-fd4cfdea49d8", "solution": "import numpy as np\n\nclass EnhancedIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            new_population_size = int(1.2 * self.budget / (np.min(evaluate_population(population)) + 1))\n            population = np.vstack([population, np.random.uniform(self.lower_bound, self.upper_bound, (new_population_size, self.dim))])\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedIMPHS", "description": "Enhance IMPHS algorithm by incorporating a dynamic population size adaptation mechanism during the exploitation phase.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "fa92de6a-9376-4c81-90da-9262fb7a6dea", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "e4e96648-03f7-45ba-b974-71874f642646", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "8ed3813f-8849-40d8-91c8-1f7d280c6061", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "ed29811f-ce53-4287-bd54-d5cb0378db1b", "solution": "import numpy as np\n\nclass AdaptiveIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population, mutation_rates):\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, mutation_rates):\n            best_idx = np.argmin(evaluate_population(population))\n            best_individual = population[best_idx]\n            new_population = population + np.random.uniform(-mutation_rates, mutation_rates, population.shape)\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n            return new_population\n\n        population = initialize_population()\n        mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population, mutation_rates), mutation_rates)\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "AdaptiveIMPHS", "description": "Introducing a dynamic adaptation of mutation rates based on individual performance to enhance exploration-exploitation balance.", "configspace": "", "generation": 62, "fitness": 0.0917360855397902, "feedback": "The algorithm AdaptiveIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "5f8dd553-02d2-4297-94ec-1586a8c28fcf", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                mutation_rates = np.random.uniform(0.01, 0.1, self.dim)\n                new_population = population + np.random.normal(0, mutation_rates, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm with dynamic adaptation of mutation rates during the exploitation phase to enhance local search capabilities.", "configspace": "", "generation": 63, "fitness": 0.0917360855397902, "feedback": "The algorithm IMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "ef9bea90-f151-4a12-aa61-f587242661c9", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "c59cc45f-5ee9-4017-a0ae-c5ff38e0e9a4", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "27731bbd-0bea-489a-beee-28f5f1ba1ef8", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "de1c82d6-4288-4673-a8ec-155b143c729c", "solution": "# import numpy as np\n\nclass DynamicIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.1\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population, mutation_rates):\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, mutation_rates, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-mutation_rates, mutation_rates, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        mutation_rates = np.full(self.dim, 0.1)\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population, mutation_rates), mutation_rates)\n            fitness_values = evaluate_population(population)\n            max_fitness_idx = np.argmax(fitness_values)\n            min_fitness_idx = np.argmin(fitness_values)\n            mutation_rates = mutation_rates + self.alpha * (population[max_fitness_idx] - population[min_fitness_idx])\n\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "DynamicIMPHS", "description": "Introducing a dynamic adaptation mechanism to adjust mutation rates based on individual performance to enhance exploration-exploitation balance.", "configspace": "", "generation": 67, "fitness": 0.0915718702577289, "feedback": "The algorithm DynamicIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1813267284886797, 0.1685254892536041, 0.17256308889114402, 0.17436519478607426, 0.18375014124765143, 0.17358439540249293, 0.18435623414664615, 0.15851344495588404, 0.19977797607553727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043920886912891755, 0.05000816708151634, 0.037967768931981616, 0.0443994657771416, 0.040977248572483194, 0.03450058512953513, 0.04213392264356808, 0.05553329963953524, 0.048846038312783446, 0.02806396205881223, 0.03835029285312086, 0.03551902084242753, 0.03687573274304301, 0.03509734693418709, 0.04065813263786244, 0.03825095405815793, 0.04857815664712639, 0.02565862050376433, 0.09015688107782094, 0.07630883666947907, 0.08886031004918915, 0.08901381555909993, 0.08056153215382145, 0.08808008012705337, 0.08506606696606522, 0.08807967143254847, 0.0801023919025654, 0.07872218168778855, 0.08560094028286769, 0.10749184774700116, 0.06808626118226335, 0.06418154916883234, 0.06035331182269388, 0.10181745587490698, 0.11530463234586019, 0.08439639887205463, 0.12867754037044454, 0.1737446327801654, 0.11142511134127453, 0.11108404169334285, 0.10667788256446586, 0.1356919038221307, 0.12416415625679655, 0.1390603346213859, 0.1181804654887113, 0.0036353604071533985, 0.0042399577474315775, 9.999999999998899e-05, 0.012340033677529338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021943049814549753, 0.014990622979366153, 0.07862461926074216, 9.999999999998899e-05, 0.008462914335988225, 0.02939851451566977, 0.024569399908695, 0.04549855474088704, 9.999999999998899e-05, 0.0033868699700211335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050741552849555394, 0.06060826888954196, 0.05212912074038356, 0.0382238156089435, 0.05263319507363462, 0.06839073073736779, 0.08880512619970926, 0.035505864643968765, 0.04481265507809096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006468753400636129, 9.999999999998899e-05, 0.2143895349859326, 0.20222855090268899, 0.19810188831280418, 0.20830250062543465, 0.18853774971448778, 0.20511006227294348, 0.20904192772066577, 0.17768562862651271, 0.20341800220276873, 0.04519986979461443, 0.047763742288930766, 0.0516024810224337, 0.044668554271012906, 0.03848521539220218, 0.04000125822153566, 0.08976985586804354, 0.06812677441049708, 0.05160626376263466, 0.14356844718156003, 0.13119999620989042, 0.1365158992347113, 0.15186661007409408, 0.15048007945609243, 0.1610247049519059, 0.13663667091849385, 0.14456742628152475, 0.1245616988971211, 0.17095687927186354, 0.15824598773555476, 0.170985216748341, 0.16285921545703008, 0.19929942008164958, 0.16894142980162719, 0.16299073921299145, 0.15417420431377848, 0.16807283341655732, 0.11386298133892592, 0.10801352716312451, 0.12129622213800084, 0.10595865668909588, 0.13418750615250286, 0.11255394066210378, 0.10372419388044907, 0.11344003587935891, 0.10307588154570935, 0.15296373356911974, 0.15802818492220738, 0.1534816553190943, 0.17631018712222413, 0.16098139829658453, 0.19198620757940832, 0.1554754643207954, 0.1529059422854383, 0.171303696900738, 0.13416975035435774, 0.1490303063937949, 0.14833302886564548, 0.14003303840827452, 0.15886819455918266, 0.15099975293198098, 0.14495290939491845, 0.14167654928079043, 0.14850870135106364, 0.18661037614867848, 0.15627462463914876, 0.1707707236478091, 0.15821739369022947, 0.15216388166549222, 0.13913292955502565, 0.16132125349530602, 0.16098653458510614, 0.1544504151064744, 0.19268810932513059, 0.1544231242464279, 0.1671849733977373, 0.1532703682469848, 0.15289575305667624, 0.20328738464559915, 0.17347432094284, 0.18711427414795279, 0.18373743432283995, 0.18849571706401147, 0.19260765743898867, 0.1920452591475338, 0.17465415009586227, 0.18055060553931312, 0.1980197645837849, 0.19178103982067674, 0.1768832504342689, 0.17935823838753784, 0.050976992631369455, 0.04928672434501491, 0.05324975785037389, 0.051365485077098705, 0.04705013441063677, 0.04558764786470093, 0.056833967454920864, 0.06002923028720475, 0.043034001456715876]}, "mutation_prompt": null}
{"id": "65a2fa4f-c8e8-4912-8456-310b64ce49ef", "solution": "import numpy as np\n\nclass DynamicMutIMP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population, mutation_rates):\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, mutation_rates):\n            best_idx = np.argmin(evaluate_population(population))\n            best_individual = population[best_idx]\n            new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n            return new_population, mutation_rates\n\n        population = initialize_population()\n        mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n        for _ in range(self.budget // 2):\n            population = explore_phase(*exploit_phase(population, mutation_rates))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "DynamicMutIMP", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm with dynamic mutation rates that adjust based on individual performance to enhance exploration and exploitation phases.", "configspace": "", "generation": 68, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutIMP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6ceeaeb0-528e-4211-80b4-3ab524f852df", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "3f4c71b7-797d-4f8e-8cea-5cda21431efc", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "4871475b-0597-48a8-bc61-e133778eb081", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "31362c1b-cb4c-4f3d-b0d8-190762944305", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "84b26cd7-cfd2-4df9-b72a-6ea336744a80", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def explore_phase(population):\n            diversity = np.std(population, axis=0)\n            mutation_rates = np.where(diversity < 0.1, 0.1, 0.2)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "DynamicIMPHS", "description": "Utilize a dynamic mutation strategy based on population diversity to enhance exploration and exploitation phases.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "d1aeca08-c3cd-45c9-85f8-ca51782504d0", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "a4b8a076-ebbb-4420-ba34-28e3dd4e8c76", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "5c0c04c0-7b8b-4763-b885-819ab4d2ff47", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "b627b4e9-c96e-40ce-a6be-f6ccb48a4730", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "78d8bea6-783c-4c4c-94ac-f873c4509792", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "2687524a-9227-49c8-9ec6-e515d9bc98fc", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "e95be724-2ac0-47c0-98e4-099967d4b722", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "cccba297-b747-4a78-8695-e9a64da32fee", "solution": "import numpy as np\n\nclass IMPHSPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population, mutation_rate):\n            new_population = population + np.random.normal(0, mutation_rate, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            mutation_rate = np.clip(0.05 + 0.15 * (1 - np.min(evaluate_population(population))), 0.05, 0.2)\n            population = exploit_phase(explore_phase(population, mutation_rate))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHSPlus", "description": "In IMPHS+, an adaptive mutation strategy is introduced based on individual performance to enhance exploration and exploitation phases.", "configspace": "", "generation": 81, "fitness": 0.09144843562834938, "feedback": "The algorithm IMPHSPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "10d81da7-2ebd-458a-bf1c-9285f012dafd", "solution": "import numpy as np\n\nclass EnhancedIMPHS(IMPHS):\n    def exploit_phase(self, population, num_iterations=5):\n        for _ in range(num_iterations):\n            best_idx = np.argmin(self.evaluate_population(population))\n            best_individual = population[best_idx]\n            new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n\n            trial_population = population + 0.5 * (population - new_population[np.random.choice(len(new_population))])\n            trial_population = np.clip(trial_population, self.lower_bound, self.upper_bound)\n            trial_evaluations = self.evaluate_population(trial_population)\n\n            population[trial_evaluations < self.evaluate_population(population)] = trial_population[trial_evaluations < self.evaluate_population(population)]\n\n        return population", "name": "EnhancedIMPHS", "description": "Enhance the exploitation phase by incorporating a differential evolution strategy to improve population convergence towards the best solutions.", "configspace": "", "generation": 82, "fitness": 0.0917360855397902, "feedback": "The algorithm EnhancedIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "d904490f-4643-40bc-82b5-b55d4ad7547b", "solution": "import numpy as np\n\nclass EnhancedIMPHS(IMPHS):\n    def exploit_phase(self, population, num_iterations=5):\n        for _ in range(num_iterations):\n            best_idx = np.argmin(self.evaluate_population(population))\n            best_individual = population[best_idx]\n            new_population = population + np.random.normal(0, 0.1, population.shape) * np.random.uniform(0.1, 0.5, (1, self.dim))\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n            population = new_population\n        return population", "name": "EnhancedIMPHS", "description": "Enhanced IMP-HS algorithm with adaptive step sizes in exploitation phase to improve convergence speed.", "configspace": "", "generation": 83, "fitness": 0.0917360855397902, "feedback": "The algorithm EnhancedIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "58f2ca83-c169-4e40-ab8e-114243f174d9", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def exploit_phase(population, num_iterations=5):\n        mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n        for _ in range(num_iterations):\n            best_idx = np.argmin(evaluate_population(population))\n            best_individual = population[best_idx]\n            mutation_rates = np.clip(mutation_rates + np.random.normal(0, 0.02, self.dim), 0.05, 0.2)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n            population = new_population\n        return population", "name": "DynamicIMPHS", "description": "Enhancing IMPHS algorithm by incorporating dynamic adjustment of mutation rates during exploitation phase to improve convergence.", "configspace": "", "generation": 84, "fitness": 0.0917360855397902, "feedback": "The algorithm DynamicIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "3f4ea845-4409-4631-a021-6e0783d07ff3", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "90ee5eb9-29e5-4412-b0af-537a6e37f3aa", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "3ba39103-36cb-4c22-84cf-5975cbacbe85", "solution": "import numpy as np\n\nclass EnhancedIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_lower_bound = 0.05\n        self.mutation_upper_bound = 0.2\n        self.exploit_iterations = 5\n\n    def __call__(self, func):\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(self.mutation_lower_bound, self.mutation_upper_bound, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population):\n            mutation_rates = np.random.uniform(self.mutation_lower_bound, self.mutation_upper_bound, self.dim)\n            for _ in range(self.exploit_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.normal(0, mutation_rates, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedIMPHS", "description": "Enhanced IMPHS algorithm with adaptive mutation rates in both exploration and exploitation phases to improve convergence and exploration capabilities.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "6052f04f-437c-4c2d-8214-ce23b82cb7b1", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "58316158-2341-4262-80e4-452e9f1e54a6", "solution": "import numpy as np\n\nclass AdaptiveIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            performance = evaluate_population(population)\n            for i in range(self.dim):\n                mutation_rates[i] *= np.mean(np.abs(population[:, i] - np.mean(population[:, i]))) / (np.std(population[:, i]) + 1e-6)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "AdaptiveIMPHS", "description": "Enhance IMPHS by incorporating a novel adaptive mutation mechanism that adjusts mutation rates based on individual performance.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "cad3ba98-0a32-4d9d-bdca-193ad2ba76bd", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def __call__(self, func):\n        def dynamic_population_update(population, func_evaluations):\n            if func_evaluations % 100 == 0 and len(population) > 2:\n                keep_indices = np.argsort(evaluate_population(population))[:len(population)//2]\n                return population[keep_indices]\n            return population\n\n        population = initialize_population()\n        func_evaluations = 0\n        for _ in range(self.budget // 2):\n            population = dynamic_population_update(population, func_evaluations)\n            population = exploit_phase(explore_phase(population))\n            func_evaluations += len(population)\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "DynamicIMPHS", "description": "Enhance IMPHS algorithm by incorporating a dynamic population sizing strategy to adapt the population size during optimization.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "d483669a-ff53-4961-ab70-7f7ee49fedf7", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "05fc12ee-a4df-4d36-bde8-cb6c1f23f4cc", "solution": "import numpy as np\n\nclass ImprovedIMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n\n                # Differential Evolution Step\n                crossover_rate = 0.5\n                for idx, ind in enumerate(population):\n                    a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n                    trial = np.where(np.random.uniform(0, 1, self.dim) < crossover_rate, a + 0.5 * (b - c), ind)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                    if func(trial) < func(ind):\n                        population[idx] = trial\n\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "ImprovedIMPHS", "description": "Enhancing IMPHS algorithm by incorporating a differential evolution step for improved exploitation of promising solutions.", "configspace": "", "generation": 92, "fitness": 0.0917360855397902, "feedback": "The algorithm ImprovedIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "e63bf63c-7ecf-48a4-92cd-5f23321dfdd2", "solution": "import numpy as np\n\nclass DynamicIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.min_population = int(0.5 * budget)\n        self.max_population = int(1.5 * budget)\n\n    def __call__(self, func):\n        def adjust_population_size(population):\n            evals = evaluate_population(population)\n            avg_eval = np.mean(evals)\n            std_eval = np.std(evals)\n            if len(population) < self.max_population and std_eval < 0.1 * avg_eval:\n                new_individual = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                return np.vstack((population, new_individual))\n            elif len(population) > self.min_population and std_eval > 0.3 * avg_eval:\n                idx = np.argmax(evals)\n                return np.delete(population, idx, axis=0)\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n            population = adjust_population_size(population)\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "DynamicIMPHS", "description": "Enhancing IMPHS by incorporating a dynamic population size adjustment mechanism to balance exploration and exploitation.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {}, "mutation_prompt": null}
{"id": "634136ae-14a5-4cfc-a9f7-5d215138c158", "solution": "import numpy as np\n\nclass IMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            new_population = population + np.random.normal(0, mutation_rates, population.shape)\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "IMPHS", "description": "Improved Multi-Phase Harmony Search (IMP-HS) algorithm enhances population diversity by introducing adaptive mutation rates in the exploration phase.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "f86987b1-40ce-4b9d-8d0c-f29a3b9be153", "solution": "import numpy as np\n\nclass EnhancedIMPHS(IMPHS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def exploit_phase(population, num_iterations=5):\n        for _ in range(num_iterations):\n            scores = evaluate_population(population)\n            best_idx = np.argmin(scores)\n            best_individual = population[best_idx]\n            new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n            population = new_population\n\n            # Dynamic adaptation mechanism\n            for i in range(len(population)):\n                if np.random.rand() < 0.1:\n                    population[i] = population[i] + np.random.uniform(-0.1, 0.1, population.shape[i])\n\n        return population", "name": "EnhancedIMPHS", "description": "Enhance IMPHS algorithm by incorporating a dynamic adaptation mechanism in the exploitation phase to leverage individual performances.", "configspace": "", "generation": 95, "fitness": 0.0917360855397902, "feedback": "The algorithm EnhancedIMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.1852614055051205, 0.17915555079331225, 0.17606504797495015, 0.1747438815761423, 0.1878171209315388, 0.17625461181208868, 0.17149979940176585, 0.16113146005949752, 0.19308581193177954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04040078585589457, 0.04493805091113079, 0.04431225503582625, 0.049735675014624725, 0.05579910357298745, 0.04003803978341891, 0.04679975796157576, 0.04422219064367128, 0.05593817546697977, 0.021754915189571844, 0.041766056439939026, 0.06330154593683568, 0.041904374429456714, 0.029318241981990845, 0.03546385359408433, 0.03787959741997127, 0.0310873797564869, 0.02869051298071812, 0.09749207746755983, 0.07416966474425535, 0.09310927919905732, 0.08720431213240332, 0.08075163555232334, 0.08730756251675154, 0.0814076509529208, 0.09135649276497437, 0.08295530709511845, 0.08990488961643639, 0.0737107199547199, 0.11235664761372588, 0.0900629402119364, 0.06774800521177349, 0.060751158181356346, 0.1131922994480421, 0.06381930796508917, 0.10158023500027336, 0.11028035661537428, 0.1754384172005493, 0.14813395520714534, 0.11245505613885798, 0.1046738247925999, 0.12615827922157818, 0.11907746636646754, 0.13139852775079253, 0.15453161073339816, 0.010279890361882482, 0.01076493713614346, 9.999999999998899e-05, 0.011149582048507689, 9.999999999998899e-05, 0.00018674314129163427, 0.0006909570344689753, 9.999999999998899e-05, 0.02693006521272623, 0.005796820727656304, 0.08334858983577798, 0.026216691446200646, 0.029693232899026034, 0.021368129317120843, 0.007994201461488437, 0.007202221872659509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568701338410298, 0.06002560734841067, 0.057680392710012685, 0.05480039318084129, 0.06632861369516518, 0.045835009882264965, 0.04752594356355, 0.07544676562569275, 0.04807150687998074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21180450321764666, 0.1937366948279189, 0.19526063916869074, 0.20055760667011668, 0.18833716133120693, 0.1988001454329612, 0.19861568844894617, 0.17797978214891463, 0.20340123284052491, 0.043407622885374475, 0.05547564589871723, 0.04040174432329602, 0.04302812547013368, 0.03812996776674915, 0.04012872568348247, 0.03924546170284793, 0.04296029032137372, 0.040908235090874046, 0.12795740154545232, 0.12525784124235584, 0.13843228183579126, 0.13680319165078292, 0.13692815477029685, 0.15941699569547585, 0.14392792292887258, 0.1656057142952071, 0.12165763820226183, 0.16664426781007968, 0.1577018560275708, 0.17511528213073035, 0.17056668150722476, 0.19976039440870252, 0.16309511838591584, 0.16467371884857962, 0.16850103377032777, 0.16034823645346807, 0.10974025064192505, 0.1029967070283705, 0.11281847945015266, 0.11232249995729127, 0.146143351056376, 0.11592733540066824, 0.10903453754705583, 0.1109517351768402, 0.11699455878937282, 0.1454102868375221, 0.15066398544518322, 0.14967589736223186, 0.17376347918646484, 0.14800816719048981, 0.15466761052306188, 0.153132090561515, 0.18762745024631977, 0.18159683004137483, 0.1375459691404718, 0.14328897767473736, 0.16512922726895363, 0.15329912662255774, 0.14956003067363777, 0.14910435233247066, 0.14219842411747252, 0.1395214851755574, 0.16276280885152905, 0.17960036396663037, 0.16446877029072948, 0.1654052951494519, 0.1620529159211228, 0.144849844083905, 0.1483622451154153, 0.16271650604363297, 0.16469555599688923, 0.15009542760245642, 0.15323925027770324, 0.20833745643720714, 0.14676143112772388, 0.152177550164047, 0.19111473159430103, 0.15795957213526401, 0.1664330400596391, 0.16714666917574672, 0.1751550556796594, 0.19137003512460038, 0.194358390207652, 0.18223087024070284, 0.207404940082909, 0.20058852912085046, 0.1802707424379687, 0.18758652639050488, 0.19462072869802183, 0.20308126737915222, 0.054825539294570125, 0.045799875380065025, 0.05179715310028932, 0.05472246490302801, 0.05474019165053523, 0.051162329142801166, 0.06142229480392403, 0.058318180917093954, 0.07514788747820023]}, "mutation_prompt": null}
{"id": "cc5ab966-dacf-496b-8ed4-0ae43a9df376", "solution": "import numpy as np\n\nclass ENHMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            mutation_strategies = [np.random.choice([np.random.normal, np.random.uniform], p=[0.7, 0.3]) for _ in range(self.dim)]\n            new_population = population.copy()\n            for i in range(self.dim):\n                new_population[:, i] = mutation_strategies[i](population[:, i], mutation_rates[i])\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "ENHMPHS", "description": "Enhanced Multi-Phase Harmony Search (ENH-MPHS) algorithm incorporates a dynamic ensemble of mutation strategies during the exploration phase to improve population diversity and convergence speed.", "configspace": "", "generation": 96, "fitness": 0.09578529828210992, "feedback": "The algorithm ENHMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "554599a1-e240-49fd-ae5d-7a05b0d87981", "metadata": {"aucs": [0.18615587269343448, 0.20224711260547978, 0.18167207639494776, 0.17083806167841098, 0.18859280536151557, 0.17252648963959016, 0.18953258245937665, 0.15694950060657775, 0.15654561127326017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06683380031565589, 0.0406865915847735, 0.05649742502903066, 0.050088880783772605, 0.041753513180106894, 0.04867170777764518, 0.052329093194484644, 0.04263479395228953, 0.04274591445568077, 0.03921971708492589, 0.028767458058971407, 0.05329870719988372, 0.03184518190848051, 0.06535255337920665, 0.054797037418575334, 0.028910239184321673, 0.04146723800656871, 0.031088229938578515, 0.07358833870111159, 0.052448809062326074, 0.08247855706793639, 0.07747328543540388, 0.05717658129902703, 0.08057150983985117, 0.08228593421606234, 0.059055094385584206, 0.07829571110960765, 0.07986310724828782, 0.1128941458595798, 0.09008849568642996, 0.10696354078629189, 0.050723640489227506, 0.09127513700344791, 0.08721059778657214, 0.04167917805627863, 0.09868466396196196, 0.15107233122433172, 0.14221067976362556, 0.14094116414002533, 0.11879453866557776, 0.12041534429462863, 0.13269501406723427, 0.15750126116476204, 0.1272099488290923, 0.09615133490679217, 0.009949821773010847, 0.005405934317517347, 0.0276111060183466, 0.007373985101633895, 0.005444421364582341, 9.999999999998899e-05, 0.03888317298610677, 0.003121964397972965, 0.04519761962212521, 0.03133258177914011, 0.08822088798160244, 0.004723515598850647, 0.01093467411144522, 0.0269294839611266, 0.02688472777441453, 0.02657356403963662, 0.03936645017724627, 0.029678837372062894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0429261277857691, 0.05569948472731523, 0.08506444366098609, 0.06673707572100551, 0.03563346002651668, 0.052663548972686436, 0.0662655473953706, 0.08035334673881267, 0.1043472465067321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22620823404147083, 0.18248078788081878, 0.19568703735263748, 0.22398780283850128, 0.1830064117262412, 0.20262327005902292, 0.2125992705830949, 0.19074894126618325, 0.2137866771882465, 0.04953058637286234, 0.04255094503360857, 0.04039376930789185, 0.04335084116036947, 0.04308050998939361, 0.05124118977371983, 0.04593628400995364, 0.02649690532735871, 0.041377620878716104, 0.1267806478399447, 0.14463259065206768, 0.13915516570525488, 0.14186787233106113, 0.1215118513900979, 0.12425794557715342, 0.16972695395942705, 0.15765332604561022, 0.143758940528942, 0.16958986123291375, 0.1631481868978344, 0.1538042419103034, 0.18694129690636152, 0.19607368417687687, 0.17582655029586258, 0.14504974401905002, 0.17164780839295612, 0.15703420212697095, 0.13251121901417207, 0.11862131647462759, 0.1029846294744946, 0.116882455751941, 0.1428861096144205, 0.13200171446370568, 0.09425987768579858, 0.11312434823244732, 0.10700400483786221, 0.16206782604630732, 0.21614598302729093, 0.17703507676917474, 0.1742023135042986, 0.17442484098191813, 0.1858327931230035, 0.17021202493897036, 0.16794909118922663, 0.15859547769179427, 0.14573186835377216, 0.1547653946411498, 0.16518846432278333, 0.15356573700076037, 0.14808177710688253, 0.15145560080789533, 0.14953180298450897, 0.16047319454366293, 0.1552525778664372, 0.16186504213717579, 0.1667525563133071, 0.1490995358906756, 0.17617883791693734, 0.20775641274362266, 0.1570947557361687, 0.21014677974650453, 0.2638554202321839, 0.19152126477899678, 0.157486824629249, 0.14947777468113255, 0.2139068411351912, 0.20264363295536858, 0.2284801579978396, 0.2923037618787986, 0.15533474535616665, 0.1778727396231139, 0.1522022077579922, 0.21746903823416264, 0.18308641617759192, 0.17693206499647018, 0.18228160197881593, 0.18517383723150893, 0.18571341611889725, 0.21114781532129723, 0.1817552440686393, 0.1802487726765617, 0.05990943001320792, 0.06157231524080431, 0.04888925139138678, 0.05232107122912677, 0.05914317104788702, 0.06145982834710173, 0.054915259004657546, 0.05627590991650944, 0.05019604907398789]}, "mutation_prompt": null}
{"id": "03ec1c2f-bd71-4725-a8ce-1451b9badcac", "solution": "import numpy as np\n\nclass AdaptiveENHMPHS(ENHMPHS):\n    def explore_phase(population):\n        mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n        fitness_values = evaluate_population(population)\n        avg_fitness = np.mean(fitness_values)\n        std_fitness = np.std(fitness_values)\n        adaptive_rates = np.where(fitness_values < avg_fitness, mutation_rates * np.exp(-0.1 * (avg_fitness - fitness_values) / std_fitness), mutation_rates)\n        mutation_strategies = [np.random.choice([np.random.normal, np.random.uniform], p=[0.7, 0.3]) for _ in range(self.dim)]\n        new_population = population.copy()\n        for i in range(self.dim):\n            new_population[:, i] = mutation_strategies[i](population[:, i], adaptive_rates[i])\n        return np.clip(new_population, self.lower_bound, self.upper_bound)", "name": "AdaptiveENHMPHS", "description": "Introducing adaptive mutation rates based on individual performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 97, "fitness": 0.09578529828210992, "feedback": "The algorithm AdaptiveENHMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "cc5ab966-dacf-496b-8ed4-0ae43a9df376", "metadata": {"aucs": [0.18615587269343448, 0.20224711260547978, 0.18167207639494776, 0.17083806167841098, 0.18859280536151557, 0.17252648963959016, 0.18953258245937665, 0.15694950060657775, 0.15654561127326017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06683380031565589, 0.0406865915847735, 0.05649742502903066, 0.050088880783772605, 0.041753513180106894, 0.04867170777764518, 0.052329093194484644, 0.04263479395228953, 0.04274591445568077, 0.03921971708492589, 0.028767458058971407, 0.05329870719988372, 0.03184518190848051, 0.06535255337920665, 0.054797037418575334, 0.028910239184321673, 0.04146723800656871, 0.031088229938578515, 0.07358833870111159, 0.052448809062326074, 0.08247855706793639, 0.07747328543540388, 0.05717658129902703, 0.08057150983985117, 0.08228593421606234, 0.059055094385584206, 0.07829571110960765, 0.07986310724828782, 0.1128941458595798, 0.09008849568642996, 0.10696354078629189, 0.050723640489227506, 0.09127513700344791, 0.08721059778657214, 0.04167917805627863, 0.09868466396196196, 0.15107233122433172, 0.14221067976362556, 0.14094116414002533, 0.11879453866557776, 0.12041534429462863, 0.13269501406723427, 0.15750126116476204, 0.1272099488290923, 0.09615133490679217, 0.009949821773010847, 0.005405934317517347, 0.0276111060183466, 0.007373985101633895, 0.005444421364582341, 9.999999999998899e-05, 0.03888317298610677, 0.003121964397972965, 0.04519761962212521, 0.03133258177914011, 0.08822088798160244, 0.004723515598850647, 0.01093467411144522, 0.0269294839611266, 0.02688472777441453, 0.02657356403963662, 0.03936645017724627, 0.029678837372062894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0429261277857691, 0.05569948472731523, 0.08506444366098609, 0.06673707572100551, 0.03563346002651668, 0.052663548972686436, 0.0662655473953706, 0.08035334673881267, 0.1043472465067321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22620823404147083, 0.18248078788081878, 0.19568703735263748, 0.22398780283850128, 0.1830064117262412, 0.20262327005902292, 0.2125992705830949, 0.19074894126618325, 0.2137866771882465, 0.04953058637286234, 0.04255094503360857, 0.04039376930789185, 0.04335084116036947, 0.04308050998939361, 0.05124118977371983, 0.04593628400995364, 0.02649690532735871, 0.041377620878716104, 0.1267806478399447, 0.14463259065206768, 0.13915516570525488, 0.14186787233106113, 0.1215118513900979, 0.12425794557715342, 0.16972695395942705, 0.15765332604561022, 0.143758940528942, 0.16958986123291375, 0.1631481868978344, 0.1538042419103034, 0.18694129690636152, 0.19607368417687687, 0.17582655029586258, 0.14504974401905002, 0.17164780839295612, 0.15703420212697095, 0.13251121901417207, 0.11862131647462759, 0.1029846294744946, 0.116882455751941, 0.1428861096144205, 0.13200171446370568, 0.09425987768579858, 0.11312434823244732, 0.10700400483786221, 0.16206782604630732, 0.21614598302729093, 0.17703507676917474, 0.1742023135042986, 0.17442484098191813, 0.1858327931230035, 0.17021202493897036, 0.16794909118922663, 0.15859547769179427, 0.14573186835377216, 0.1547653946411498, 0.16518846432278333, 0.15356573700076037, 0.14808177710688253, 0.15145560080789533, 0.14953180298450897, 0.16047319454366293, 0.1552525778664372, 0.16186504213717579, 0.1667525563133071, 0.1490995358906756, 0.17617883791693734, 0.20775641274362266, 0.1570947557361687, 0.21014677974650453, 0.2638554202321839, 0.19152126477899678, 0.157486824629249, 0.14947777468113255, 0.2139068411351912, 0.20264363295536858, 0.2284801579978396, 0.2923037618787986, 0.15533474535616665, 0.1778727396231139, 0.1522022077579922, 0.21746903823416264, 0.18308641617759192, 0.17693206499647018, 0.18228160197881593, 0.18517383723150893, 0.18571341611889725, 0.21114781532129723, 0.1817552440686393, 0.1802487726765617, 0.05990943001320792, 0.06157231524080431, 0.04888925139138678, 0.05232107122912677, 0.05914317104788702, 0.06145982834710173, 0.054915259004657546, 0.05627590991650944, 0.05019604907398789]}, "mutation_prompt": null}
{"id": "ceb2ef4b-0ace-4f4f-a3d2-749ae108ce80", "solution": "import numpy as np\n\nclass ENHMPHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def explore_phase(population):\n            mutation_rates = np.random.uniform(0.05, 0.2, self.dim)\n            mutation_strategies = [np.random.choice([np.random.normal, np.random.uniform], p=[0.7, 0.3]) for _ in range(self.dim)]\n            new_population = population.copy()\n            for i in range(self.dim):\n                new_population[:, i] = mutation_strategies[i](population[:, i], mutation_rates[i])\n            return np.clip(new_population, self.lower_bound, self.upper_bound)\n\n        def exploit_phase(population, num_iterations=5):\n            for _ in range(num_iterations):\n                best_idx = np.argmin(evaluate_population(population))\n                best_individual = population[best_idx]\n                new_population = population + np.random.uniform(-0.1, 0.1, population.shape)\n                new_population[best_idx] = best_individual\n                new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n                population = new_population\n            return population\n\n        population = initialize_population()\n        for _ in range(self.budget // 2):\n            population = exploit_phase(explore_phase(population))\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "ENHMPHS", "description": "Enhanced Multi-Phase Harmony Search (ENH-MPHS) algorithm incorporates a dynamic ensemble of mutation strategies during the exploration phase to improve population diversity and convergence speed.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "cc5ab966-dacf-496b-8ed4-0ae43a9df376", "metadata": {"aucs": [0.18615587269343448, 0.20224711260547978, 0.18167207639494776, 0.17083806167841098, 0.18859280536151557, 0.17252648963959016, 0.18953258245937665, 0.15694950060657775, 0.15654561127326017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06683380031565589, 0.0406865915847735, 0.05649742502903066, 0.050088880783772605, 0.041753513180106894, 0.04867170777764518, 0.052329093194484644, 0.04263479395228953, 0.04274591445568077, 0.03921971708492589, 0.028767458058971407, 0.05329870719988372, 0.03184518190848051, 0.06535255337920665, 0.054797037418575334, 0.028910239184321673, 0.04146723800656871, 0.031088229938578515, 0.07358833870111159, 0.052448809062326074, 0.08247855706793639, 0.07747328543540388, 0.05717658129902703, 0.08057150983985117, 0.08228593421606234, 0.059055094385584206, 0.07829571110960765, 0.07986310724828782, 0.1128941458595798, 0.09008849568642996, 0.10696354078629189, 0.050723640489227506, 0.09127513700344791, 0.08721059778657214, 0.04167917805627863, 0.09868466396196196, 0.15107233122433172, 0.14221067976362556, 0.14094116414002533, 0.11879453866557776, 0.12041534429462863, 0.13269501406723427, 0.15750126116476204, 0.1272099488290923, 0.09615133490679217, 0.009949821773010847, 0.005405934317517347, 0.0276111060183466, 0.007373985101633895, 0.005444421364582341, 9.999999999998899e-05, 0.03888317298610677, 0.003121964397972965, 0.04519761962212521, 0.03133258177914011, 0.08822088798160244, 0.004723515598850647, 0.01093467411144522, 0.0269294839611266, 0.02688472777441453, 0.02657356403963662, 0.03936645017724627, 0.029678837372062894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0429261277857691, 0.05569948472731523, 0.08506444366098609, 0.06673707572100551, 0.03563346002651668, 0.052663548972686436, 0.0662655473953706, 0.08035334673881267, 0.1043472465067321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22620823404147083, 0.18248078788081878, 0.19568703735263748, 0.22398780283850128, 0.1830064117262412, 0.20262327005902292, 0.2125992705830949, 0.19074894126618325, 0.2137866771882465, 0.04953058637286234, 0.04255094503360857, 0.04039376930789185, 0.04335084116036947, 0.04308050998939361, 0.05124118977371983, 0.04593628400995364, 0.02649690532735871, 0.041377620878716104, 0.1267806478399447, 0.14463259065206768, 0.13915516570525488, 0.14186787233106113, 0.1215118513900979, 0.12425794557715342, 0.16972695395942705, 0.15765332604561022, 0.143758940528942, 0.16958986123291375, 0.1631481868978344, 0.1538042419103034, 0.18694129690636152, 0.19607368417687687, 0.17582655029586258, 0.14504974401905002, 0.17164780839295612, 0.15703420212697095, 0.13251121901417207, 0.11862131647462759, 0.1029846294744946, 0.116882455751941, 0.1428861096144205, 0.13200171446370568, 0.09425987768579858, 0.11312434823244732, 0.10700400483786221, 0.16206782604630732, 0.21614598302729093, 0.17703507676917474, 0.1742023135042986, 0.17442484098191813, 0.1858327931230035, 0.17021202493897036, 0.16794909118922663, 0.15859547769179427, 0.14573186835377216, 0.1547653946411498, 0.16518846432278333, 0.15356573700076037, 0.14808177710688253, 0.15145560080789533, 0.14953180298450897, 0.16047319454366293, 0.1552525778664372, 0.16186504213717579, 0.1667525563133071, 0.1490995358906756, 0.17617883791693734, 0.20775641274362266, 0.1570947557361687, 0.21014677974650453, 0.2638554202321839, 0.19152126477899678, 0.157486824629249, 0.14947777468113255, 0.2139068411351912, 0.20264363295536858, 0.2284801579978396, 0.2923037618787986, 0.15533474535616665, 0.1778727396231139, 0.1522022077579922, 0.21746903823416264, 0.18308641617759192, 0.17693206499647018, 0.18228160197881593, 0.18517383723150893, 0.18571341611889725, 0.21114781532129723, 0.1817552440686393, 0.1802487726765617, 0.05990943001320792, 0.06157231524080431, 0.04888925139138678, 0.05232107122912677, 0.05914317104788702, 0.06145982834710173, 0.054915259004657546, 0.05627590991650944, 0.05019604907398789]}, "mutation_prompt": null}
{"id": "491f9a10-c493-47ce-9d48-b50265562885", "solution": "import numpy as np\n\nclass ImprovedENHMPHS(ENHMPHS):\n    def exploit_phase(self, population, num_iterations=5):\n        for _ in range(num_iterations):\n            best_idx = np.argmin(self.evaluate_population(population))\n            best_individual = population[best_idx]\n            mutation_scale = np.clip(0.1 / np.sqrt(np.mean((population - best_individual) ** 2, axis=0)), 0.05, 0.2)\n            new_population = population + np.random.uniform(-mutation_scale, mutation_scale, population.shape)\n            new_population[best_idx] = best_individual\n            new_population = np.clip(new_population, self.lower_bound, self.upper_bound)\n            population = new_population\n        return population", "name": "ImprovedENHMPHS", "description": "Implement a dynamic mutation scaling factor in the exploit phase to adaptively adjust the exploration range based on population performance.", "configspace": "", "generation": 99, "fitness": 0.09578529828210992, "feedback": "The algorithm ImprovedENHMPHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "cc5ab966-dacf-496b-8ed4-0ae43a9df376", "metadata": {"aucs": [0.18615587269343448, 0.20224711260547978, 0.18167207639494776, 0.17083806167841098, 0.18859280536151557, 0.17252648963959016, 0.18953258245937665, 0.15694950060657775, 0.15654561127326017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06683380031565589, 0.0406865915847735, 0.05649742502903066, 0.050088880783772605, 0.041753513180106894, 0.04867170777764518, 0.052329093194484644, 0.04263479395228953, 0.04274591445568077, 0.03921971708492589, 0.028767458058971407, 0.05329870719988372, 0.03184518190848051, 0.06535255337920665, 0.054797037418575334, 0.028910239184321673, 0.04146723800656871, 0.031088229938578515, 0.07358833870111159, 0.052448809062326074, 0.08247855706793639, 0.07747328543540388, 0.05717658129902703, 0.08057150983985117, 0.08228593421606234, 0.059055094385584206, 0.07829571110960765, 0.07986310724828782, 0.1128941458595798, 0.09008849568642996, 0.10696354078629189, 0.050723640489227506, 0.09127513700344791, 0.08721059778657214, 0.04167917805627863, 0.09868466396196196, 0.15107233122433172, 0.14221067976362556, 0.14094116414002533, 0.11879453866557776, 0.12041534429462863, 0.13269501406723427, 0.15750126116476204, 0.1272099488290923, 0.09615133490679217, 0.009949821773010847, 0.005405934317517347, 0.0276111060183466, 0.007373985101633895, 0.005444421364582341, 9.999999999998899e-05, 0.03888317298610677, 0.003121964397972965, 0.04519761962212521, 0.03133258177914011, 0.08822088798160244, 0.004723515598850647, 0.01093467411144522, 0.0269294839611266, 0.02688472777441453, 0.02657356403963662, 0.03936645017724627, 0.029678837372062894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0429261277857691, 0.05569948472731523, 0.08506444366098609, 0.06673707572100551, 0.03563346002651668, 0.052663548972686436, 0.0662655473953706, 0.08035334673881267, 0.1043472465067321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22620823404147083, 0.18248078788081878, 0.19568703735263748, 0.22398780283850128, 0.1830064117262412, 0.20262327005902292, 0.2125992705830949, 0.19074894126618325, 0.2137866771882465, 0.04953058637286234, 0.04255094503360857, 0.04039376930789185, 0.04335084116036947, 0.04308050998939361, 0.05124118977371983, 0.04593628400995364, 0.02649690532735871, 0.041377620878716104, 0.1267806478399447, 0.14463259065206768, 0.13915516570525488, 0.14186787233106113, 0.1215118513900979, 0.12425794557715342, 0.16972695395942705, 0.15765332604561022, 0.143758940528942, 0.16958986123291375, 0.1631481868978344, 0.1538042419103034, 0.18694129690636152, 0.19607368417687687, 0.17582655029586258, 0.14504974401905002, 0.17164780839295612, 0.15703420212697095, 0.13251121901417207, 0.11862131647462759, 0.1029846294744946, 0.116882455751941, 0.1428861096144205, 0.13200171446370568, 0.09425987768579858, 0.11312434823244732, 0.10700400483786221, 0.16206782604630732, 0.21614598302729093, 0.17703507676917474, 0.1742023135042986, 0.17442484098191813, 0.1858327931230035, 0.17021202493897036, 0.16794909118922663, 0.15859547769179427, 0.14573186835377216, 0.1547653946411498, 0.16518846432278333, 0.15356573700076037, 0.14808177710688253, 0.15145560080789533, 0.14953180298450897, 0.16047319454366293, 0.1552525778664372, 0.16186504213717579, 0.1667525563133071, 0.1490995358906756, 0.17617883791693734, 0.20775641274362266, 0.1570947557361687, 0.21014677974650453, 0.2638554202321839, 0.19152126477899678, 0.157486824629249, 0.14947777468113255, 0.2139068411351912, 0.20264363295536858, 0.2284801579978396, 0.2923037618787986, 0.15533474535616665, 0.1778727396231139, 0.1522022077579922, 0.21746903823416264, 0.18308641617759192, 0.17693206499647018, 0.18228160197881593, 0.18517383723150893, 0.18571341611889725, 0.21114781532129723, 0.1817552440686393, 0.1802487726765617, 0.05990943001320792, 0.06157231524080431, 0.04888925139138678, 0.05232107122912677, 0.05914317104788702, 0.06145982834710173, 0.054915259004657546, 0.05627590991650944, 0.05019604907398789]}, "mutation_prompt": null}
