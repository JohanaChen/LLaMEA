{"id": "f55aa537-9ad0-4421-a801-d1616054ba3a", "solution": "import numpy as np\n\nclass NovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "NovelDEAlgorithm", "description": "Evolutionary Algorithm with Novel Adaptive Differential Evolution Strategy", "configspace": "", "generation": 0, "fitness": 0.2562922977897801, "feedback": "The algorithm NovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.42369040892239695, 0.6031359236887237, 0.949214042124711, 0.3074520636736384, 0.2912305169126548, 0.09809920225320234, 0.9487041905025918, 0.5857569330161232, 0.2148724393322171, 0.23326454667897478, 0.6121830931990205, 0.8978819086008102, 0.21350169047917344, 0.9115327314013157, 0.26602942739182367, 0.8976039411835254, 9.999999999998899e-05, 0.28289042895112315, 0.16816192762977467, 0.16393747348690135, 0.16150991927518243, 0.8188718704508359, 0.19302004579901832, 0.16181409840920846, 0.18420571486593473, 0.12077872665689282, 0.10714092506837536, 0.16365635341749907, 0.18548544564818925, 0.14367627813908201, 0.14561489338898792, 0.12650709467622634, 0.10664116821054614, 0.11163966515798784, 0.14755327948145092, 0.10536470366910233, 0.14811911675965528, 0.9807202750507379, 0.966589401711483, 0.14581935771565824, 0.9852175270714649, 0.12862365689942812, 0.16293102332139753, 0.1580974252388212, 0.13362293957434468, 0.20585765509973653, 0.12075431521890823, 0.303053108281362, 0.09441235952757343, 0.2819954503846004, 0.16827115394888115, 0.14331421607334816, 0.14949434618580293, 0.059034425387557765, 0.16299656113473227, 0.17111849620264352, 0.6377863404445905, 0.859495460015826, 0.8725453990177494, 0.3854715760469799, 0.1486526842936693, 0.22972613273394493, 0.160009068638592, 0.1350996026504323, 0.18862381151476948, 0.5813766251889039, 0.2341661680472441, 0.35185760991780257, 9.999999999998899e-05, 0.29965647777849, 0.2573953369073614, 0.23901859017439941, 0.3025346830289358, 0.13953725103837133, 0.27337236360047046, 0.13688019171913457, 0.14144006045467572, 0.15343286880247853, 0.1586840293119698, 0.20588359352488983, 0.16112629652495447, 0.14454368006451535, 9.999999999998899e-05, 9.999999999998899e-05, 0.043091513784792146, 0.049235229809480585, 0.030952581653407862, 0.046584793897113896, 0.09568844974371549, 0.2320838375767862, 0.16427599200911935, 0.09814648468757747, 0.11356012098031665, 0.06847354053350863, 0.11483798331894046, 0.0890725046079367, 0.3180678975749516, 0.16283453684108717, 0.22780528364928887, 0.2233159019085308, 0.20589743389446047, 0.3006062898962334, 0.09055419688351118, 0.09239169978274275, 0.17188022351063625, 9.999999999998899e-05, 0.143159642258205, 9.999999999998899e-05, 0.08780297231395195, 0.3519720334716502, 9.999999999998899e-05, 0.3030334744735417, 0.23510114253215664, 0.22019090879389835, 0.09267030182235447, 0.28101624641900735, 0.061755585412187064, 0.4187534196332534, 0.45105151359626694, 0.5926613275117252, 0.3944311894591964, 0.5604037682087287, 0.46884801048492664, 0.5698184158523156, 0.3553041986419283, 0.4270494969302233, 0.14093389780873333, 0.12131734483263223, 0.10297317064999245, 0.12664776508823727, 0.12561766994038737, 0.09377731623388486, 0.13417032310763244, 0.13804266075514438, 0.08230477566919814, 0.17019101607356169, 0.13841532527180822, 0.1611805369895144, 0.17738774410007518, 0.16252873205332585, 0.17666106481253374, 0.22676592255502603, 0.17861462796714545, 0.1745513167058138, 0.2481966587694776, 0.3576579055583705, 0.40730204316737995, 0.3224200164141834, 0.45676726735218653, 0.30932242022212264, 0.3902840498223068, 0.6784899395374757, 0.216180569512598, 0.26206260696365746, 0.20869011604491472, 0.263433883622329, 0.20167535138835602, 0.3485749262798963, 0.33518604322414225, 0.24251596223684346, 0.2744661521768025, 0.24228390316795223, 0.23253128315431248, 0.22840671812462232, 0.22134871624102326, 0.21999322853754788, 0.25752328188804663, 0.22899359946612174, 0.2634858071891093, 0.19278267922628545, 0.230208001046324, 0.1943491211718178, 0.24042268059655403, 0.22222167555310546, 0.24177386283432567, 0.32299927399133266, 0.22454645705293164, 0.20914407642262656, 0.22338591916982398, 0.2483210706195298, 0.1869885861739402, 0.18599616811349695, 0.2798039788746449, 0.49255853175424846, 0.19439442960402653, 0.20015604292427247, 0.5830881467020719, 0.20687101298245114, 0.8322414517675977, 0.5827453479367526, 0.7007678672581197, 0.31341251986477303, 0.20706002494341658, 0.24192138627804094, 0.15598091408918024, 0.1789354405469472, 0.23370532969116897, 0.2953593325399503, 0.19097608943302113, 0.2022848448593636, 0.18547768003269038, 0.19765116886463951, 0.2094393776471476, 0.18874277144515605, 0.18812582637016118, 0.19128618069101644, 0.1823174131901596, 0.08842138285068357, 0.1102778398300519, 0.12366289215303239, 0.10242970238574345, 0.09326240750583947, 0.1086762621920212, 0.08651493460159576, 0.08196492968497282, 0.07954770011684464]}, "mutation_prompt": null}
{"id": "986bc81f-865d-42a7-89b8-b2c8cd3afdc5", "solution": "import numpy as np\n\nclass NovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "NovelDEAlgorithm", "description": "Evolutionary Algorithm with Novel Adaptive Differential Evolution Strategy", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f55aa537-9ad0-4421-a801-d1616054ba3a", "metadata": {"aucs": [0.42369040892239695, 0.6031359236887237, 0.949214042124711, 0.3074520636736384, 0.2912305169126548, 0.09809920225320234, 0.9487041905025918, 0.5857569330161232, 0.2148724393322171, 0.23326454667897478, 0.6121830931990205, 0.8978819086008102, 0.21350169047917344, 0.9115327314013157, 0.26602942739182367, 0.8976039411835254, 9.999999999998899e-05, 0.28289042895112315, 0.16816192762977467, 0.16393747348690135, 0.16150991927518243, 0.8188718704508359, 0.19302004579901832, 0.16181409840920846, 0.18420571486593473, 0.12077872665689282, 0.10714092506837536, 0.16365635341749907, 0.18548544564818925, 0.14367627813908201, 0.14561489338898792, 0.12650709467622634, 0.10664116821054614, 0.11163966515798784, 0.14755327948145092, 0.10536470366910233, 0.14811911675965528, 0.9807202750507379, 0.966589401711483, 0.14581935771565824, 0.9852175270714649, 0.12862365689942812, 0.16293102332139753, 0.1580974252388212, 0.13362293957434468, 0.20585765509973653, 0.12075431521890823, 0.303053108281362, 0.09441235952757343, 0.2819954503846004, 0.16827115394888115, 0.14331421607334816, 0.14949434618580293, 0.059034425387557765, 0.16299656113473227, 0.17111849620264352, 0.6377863404445905, 0.859495460015826, 0.8725453990177494, 0.3854715760469799, 0.1486526842936693, 0.22972613273394493, 0.160009068638592, 0.1350996026504323, 0.18862381151476948, 0.5813766251889039, 0.2341661680472441, 0.35185760991780257, 9.999999999998899e-05, 0.29965647777849, 0.2573953369073614, 0.23901859017439941, 0.3025346830289358, 0.13953725103837133, 0.27337236360047046, 0.13688019171913457, 0.14144006045467572, 0.15343286880247853, 0.1586840293119698, 0.20588359352488983, 0.16112629652495447, 0.14454368006451535, 9.999999999998899e-05, 9.999999999998899e-05, 0.043091513784792146, 0.049235229809480585, 0.030952581653407862, 0.046584793897113896, 0.09568844974371549, 0.2320838375767862, 0.16427599200911935, 0.09814648468757747, 0.11356012098031665, 0.06847354053350863, 0.11483798331894046, 0.0890725046079367, 0.3180678975749516, 0.16283453684108717, 0.22780528364928887, 0.2233159019085308, 0.20589743389446047, 0.3006062898962334, 0.09055419688351118, 0.09239169978274275, 0.17188022351063625, 9.999999999998899e-05, 0.143159642258205, 9.999999999998899e-05, 0.08780297231395195, 0.3519720334716502, 9.999999999998899e-05, 0.3030334744735417, 0.23510114253215664, 0.22019090879389835, 0.09267030182235447, 0.28101624641900735, 0.061755585412187064, 0.4187534196332534, 0.45105151359626694, 0.5926613275117252, 0.3944311894591964, 0.5604037682087287, 0.46884801048492664, 0.5698184158523156, 0.3553041986419283, 0.4270494969302233, 0.14093389780873333, 0.12131734483263223, 0.10297317064999245, 0.12664776508823727, 0.12561766994038737, 0.09377731623388486, 0.13417032310763244, 0.13804266075514438, 0.08230477566919814, 0.17019101607356169, 0.13841532527180822, 0.1611805369895144, 0.17738774410007518, 0.16252873205332585, 0.17666106481253374, 0.22676592255502603, 0.17861462796714545, 0.1745513167058138, 0.2481966587694776, 0.3576579055583705, 0.40730204316737995, 0.3224200164141834, 0.45676726735218653, 0.30932242022212264, 0.3902840498223068, 0.6784899395374757, 0.216180569512598, 0.26206260696365746, 0.20869011604491472, 0.263433883622329, 0.20167535138835602, 0.3485749262798963, 0.33518604322414225, 0.24251596223684346, 0.2744661521768025, 0.24228390316795223, 0.23253128315431248, 0.22840671812462232, 0.22134871624102326, 0.21999322853754788, 0.25752328188804663, 0.22899359946612174, 0.2634858071891093, 0.19278267922628545, 0.230208001046324, 0.1943491211718178, 0.24042268059655403, 0.22222167555310546, 0.24177386283432567, 0.32299927399133266, 0.22454645705293164, 0.20914407642262656, 0.22338591916982398, 0.2483210706195298, 0.1869885861739402, 0.18599616811349695, 0.2798039788746449, 0.49255853175424846, 0.19439442960402653, 0.20015604292427247, 0.5830881467020719, 0.20687101298245114, 0.8322414517675977, 0.5827453479367526, 0.7007678672581197, 0.31341251986477303, 0.20706002494341658, 0.24192138627804094, 0.15598091408918024, 0.1789354405469472, 0.23370532969116897, 0.2953593325399503, 0.19097608943302113, 0.2022848448593636, 0.18547768003269038, 0.19765116886463951, 0.2094393776471476, 0.18874277144515605, 0.18812582637016118, 0.19128618069101644, 0.1823174131901596, 0.08842138285068357, 0.1102778398300519, 0.12366289215303239, 0.10242970238574345, 0.09326240750583947, 0.1086762621920212, 0.08651493460159576, 0.08196492968497282, 0.07954770011684464]}, "mutation_prompt": null}
{"id": "cb43fae2-85db-422e-9ff2-5dc92f559187", "solution": "import numpy as np\n\nclass NovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "NovelDEAlgorithm", "description": "Evolutionary Algorithm with Novel Adaptive Differential Evolution Strategy", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f55aa537-9ad0-4421-a801-d1616054ba3a", "metadata": {"aucs": [0.42369040892239695, 0.6031359236887237, 0.949214042124711, 0.3074520636736384, 0.2912305169126548, 0.09809920225320234, 0.9487041905025918, 0.5857569330161232, 0.2148724393322171, 0.23326454667897478, 0.6121830931990205, 0.8978819086008102, 0.21350169047917344, 0.9115327314013157, 0.26602942739182367, 0.8976039411835254, 9.999999999998899e-05, 0.28289042895112315, 0.16816192762977467, 0.16393747348690135, 0.16150991927518243, 0.8188718704508359, 0.19302004579901832, 0.16181409840920846, 0.18420571486593473, 0.12077872665689282, 0.10714092506837536, 0.16365635341749907, 0.18548544564818925, 0.14367627813908201, 0.14561489338898792, 0.12650709467622634, 0.10664116821054614, 0.11163966515798784, 0.14755327948145092, 0.10536470366910233, 0.14811911675965528, 0.9807202750507379, 0.966589401711483, 0.14581935771565824, 0.9852175270714649, 0.12862365689942812, 0.16293102332139753, 0.1580974252388212, 0.13362293957434468, 0.20585765509973653, 0.12075431521890823, 0.303053108281362, 0.09441235952757343, 0.2819954503846004, 0.16827115394888115, 0.14331421607334816, 0.14949434618580293, 0.059034425387557765, 0.16299656113473227, 0.17111849620264352, 0.6377863404445905, 0.859495460015826, 0.8725453990177494, 0.3854715760469799, 0.1486526842936693, 0.22972613273394493, 0.160009068638592, 0.1350996026504323, 0.18862381151476948, 0.5813766251889039, 0.2341661680472441, 0.35185760991780257, 9.999999999998899e-05, 0.29965647777849, 0.2573953369073614, 0.23901859017439941, 0.3025346830289358, 0.13953725103837133, 0.27337236360047046, 0.13688019171913457, 0.14144006045467572, 0.15343286880247853, 0.1586840293119698, 0.20588359352488983, 0.16112629652495447, 0.14454368006451535, 9.999999999998899e-05, 9.999999999998899e-05, 0.043091513784792146, 0.049235229809480585, 0.030952581653407862, 0.046584793897113896, 0.09568844974371549, 0.2320838375767862, 0.16427599200911935, 0.09814648468757747, 0.11356012098031665, 0.06847354053350863, 0.11483798331894046, 0.0890725046079367, 0.3180678975749516, 0.16283453684108717, 0.22780528364928887, 0.2233159019085308, 0.20589743389446047, 0.3006062898962334, 0.09055419688351118, 0.09239169978274275, 0.17188022351063625, 9.999999999998899e-05, 0.143159642258205, 9.999999999998899e-05, 0.08780297231395195, 0.3519720334716502, 9.999999999998899e-05, 0.3030334744735417, 0.23510114253215664, 0.22019090879389835, 0.09267030182235447, 0.28101624641900735, 0.061755585412187064, 0.4187534196332534, 0.45105151359626694, 0.5926613275117252, 0.3944311894591964, 0.5604037682087287, 0.46884801048492664, 0.5698184158523156, 0.3553041986419283, 0.4270494969302233, 0.14093389780873333, 0.12131734483263223, 0.10297317064999245, 0.12664776508823727, 0.12561766994038737, 0.09377731623388486, 0.13417032310763244, 0.13804266075514438, 0.08230477566919814, 0.17019101607356169, 0.13841532527180822, 0.1611805369895144, 0.17738774410007518, 0.16252873205332585, 0.17666106481253374, 0.22676592255502603, 0.17861462796714545, 0.1745513167058138, 0.2481966587694776, 0.3576579055583705, 0.40730204316737995, 0.3224200164141834, 0.45676726735218653, 0.30932242022212264, 0.3902840498223068, 0.6784899395374757, 0.216180569512598, 0.26206260696365746, 0.20869011604491472, 0.263433883622329, 0.20167535138835602, 0.3485749262798963, 0.33518604322414225, 0.24251596223684346, 0.2744661521768025, 0.24228390316795223, 0.23253128315431248, 0.22840671812462232, 0.22134871624102326, 0.21999322853754788, 0.25752328188804663, 0.22899359946612174, 0.2634858071891093, 0.19278267922628545, 0.230208001046324, 0.1943491211718178, 0.24042268059655403, 0.22222167555310546, 0.24177386283432567, 0.32299927399133266, 0.22454645705293164, 0.20914407642262656, 0.22338591916982398, 0.2483210706195298, 0.1869885861739402, 0.18599616811349695, 0.2798039788746449, 0.49255853175424846, 0.19439442960402653, 0.20015604292427247, 0.5830881467020719, 0.20687101298245114, 0.8322414517675977, 0.5827453479367526, 0.7007678672581197, 0.31341251986477303, 0.20706002494341658, 0.24192138627804094, 0.15598091408918024, 0.1789354405469472, 0.23370532969116897, 0.2953593325399503, 0.19097608943302113, 0.2022848448593636, 0.18547768003269038, 0.19765116886463951, 0.2094393776471476, 0.18874277144515605, 0.18812582637016118, 0.19128618069101644, 0.1823174131901596, 0.08842138285068357, 0.1102778398300519, 0.12366289215303239, 0.10242970238574345, 0.09326240750583947, 0.1086762621920212, 0.08651493460159576, 0.08196492968497282, 0.07954770011684464]}, "mutation_prompt": null}
{"id": "db6eb586-0a37-4b5a-900f-1f0baceb5a0b", "solution": "import numpy as np\n\nclass NovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "NovelDEAlgorithm", "description": "Evolutionary Algorithm with Novel Adaptive Differential Evolution Strategy", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f55aa537-9ad0-4421-a801-d1616054ba3a", "metadata": {"aucs": [0.42369040892239695, 0.6031359236887237, 0.949214042124711, 0.3074520636736384, 0.2912305169126548, 0.09809920225320234, 0.9487041905025918, 0.5857569330161232, 0.2148724393322171, 0.23326454667897478, 0.6121830931990205, 0.8978819086008102, 0.21350169047917344, 0.9115327314013157, 0.26602942739182367, 0.8976039411835254, 9.999999999998899e-05, 0.28289042895112315, 0.16816192762977467, 0.16393747348690135, 0.16150991927518243, 0.8188718704508359, 0.19302004579901832, 0.16181409840920846, 0.18420571486593473, 0.12077872665689282, 0.10714092506837536, 0.16365635341749907, 0.18548544564818925, 0.14367627813908201, 0.14561489338898792, 0.12650709467622634, 0.10664116821054614, 0.11163966515798784, 0.14755327948145092, 0.10536470366910233, 0.14811911675965528, 0.9807202750507379, 0.966589401711483, 0.14581935771565824, 0.9852175270714649, 0.12862365689942812, 0.16293102332139753, 0.1580974252388212, 0.13362293957434468, 0.20585765509973653, 0.12075431521890823, 0.303053108281362, 0.09441235952757343, 0.2819954503846004, 0.16827115394888115, 0.14331421607334816, 0.14949434618580293, 0.059034425387557765, 0.16299656113473227, 0.17111849620264352, 0.6377863404445905, 0.859495460015826, 0.8725453990177494, 0.3854715760469799, 0.1486526842936693, 0.22972613273394493, 0.160009068638592, 0.1350996026504323, 0.18862381151476948, 0.5813766251889039, 0.2341661680472441, 0.35185760991780257, 9.999999999998899e-05, 0.29965647777849, 0.2573953369073614, 0.23901859017439941, 0.3025346830289358, 0.13953725103837133, 0.27337236360047046, 0.13688019171913457, 0.14144006045467572, 0.15343286880247853, 0.1586840293119698, 0.20588359352488983, 0.16112629652495447, 0.14454368006451535, 9.999999999998899e-05, 9.999999999998899e-05, 0.043091513784792146, 0.049235229809480585, 0.030952581653407862, 0.046584793897113896, 0.09568844974371549, 0.2320838375767862, 0.16427599200911935, 0.09814648468757747, 0.11356012098031665, 0.06847354053350863, 0.11483798331894046, 0.0890725046079367, 0.3180678975749516, 0.16283453684108717, 0.22780528364928887, 0.2233159019085308, 0.20589743389446047, 0.3006062898962334, 0.09055419688351118, 0.09239169978274275, 0.17188022351063625, 9.999999999998899e-05, 0.143159642258205, 9.999999999998899e-05, 0.08780297231395195, 0.3519720334716502, 9.999999999998899e-05, 0.3030334744735417, 0.23510114253215664, 0.22019090879389835, 0.09267030182235447, 0.28101624641900735, 0.061755585412187064, 0.4187534196332534, 0.45105151359626694, 0.5926613275117252, 0.3944311894591964, 0.5604037682087287, 0.46884801048492664, 0.5698184158523156, 0.3553041986419283, 0.4270494969302233, 0.14093389780873333, 0.12131734483263223, 0.10297317064999245, 0.12664776508823727, 0.12561766994038737, 0.09377731623388486, 0.13417032310763244, 0.13804266075514438, 0.08230477566919814, 0.17019101607356169, 0.13841532527180822, 0.1611805369895144, 0.17738774410007518, 0.16252873205332585, 0.17666106481253374, 0.22676592255502603, 0.17861462796714545, 0.1745513167058138, 0.2481966587694776, 0.3576579055583705, 0.40730204316737995, 0.3224200164141834, 0.45676726735218653, 0.30932242022212264, 0.3902840498223068, 0.6784899395374757, 0.216180569512598, 0.26206260696365746, 0.20869011604491472, 0.263433883622329, 0.20167535138835602, 0.3485749262798963, 0.33518604322414225, 0.24251596223684346, 0.2744661521768025, 0.24228390316795223, 0.23253128315431248, 0.22840671812462232, 0.22134871624102326, 0.21999322853754788, 0.25752328188804663, 0.22899359946612174, 0.2634858071891093, 0.19278267922628545, 0.230208001046324, 0.1943491211718178, 0.24042268059655403, 0.22222167555310546, 0.24177386283432567, 0.32299927399133266, 0.22454645705293164, 0.20914407642262656, 0.22338591916982398, 0.2483210706195298, 0.1869885861739402, 0.18599616811349695, 0.2798039788746449, 0.49255853175424846, 0.19439442960402653, 0.20015604292427247, 0.5830881467020719, 0.20687101298245114, 0.8322414517675977, 0.5827453479367526, 0.7007678672581197, 0.31341251986477303, 0.20706002494341658, 0.24192138627804094, 0.15598091408918024, 0.1789354405469472, 0.23370532969116897, 0.2953593325399503, 0.19097608943302113, 0.2022848448593636, 0.18547768003269038, 0.19765116886463951, 0.2094393776471476, 0.18874277144515605, 0.18812582637016118, 0.19128618069101644, 0.1823174131901596, 0.08842138285068357, 0.1102778398300519, 0.12366289215303239, 0.10242970238574345, 0.09326240750583947, 0.1086762621920212, 0.08651493460159576, 0.08196492968497282, 0.07954770011684464]}, "mutation_prompt": null}
{"id": "8faf9365-cbcc-4312-bd03-06c38b97c39c", "solution": "import numpy as np\n\nclass NovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "NovelDEAlgorithm", "description": "Evolutionary Algorithm with Novel Adaptive Differential Evolution Strategy", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f55aa537-9ad0-4421-a801-d1616054ba3a", "metadata": {"aucs": [0.42369040892239695, 0.6031359236887237, 0.949214042124711, 0.3074520636736384, 0.2912305169126548, 0.09809920225320234, 0.9487041905025918, 0.5857569330161232, 0.2148724393322171, 0.23326454667897478, 0.6121830931990205, 0.8978819086008102, 0.21350169047917344, 0.9115327314013157, 0.26602942739182367, 0.8976039411835254, 9.999999999998899e-05, 0.28289042895112315, 0.16816192762977467, 0.16393747348690135, 0.16150991927518243, 0.8188718704508359, 0.19302004579901832, 0.16181409840920846, 0.18420571486593473, 0.12077872665689282, 0.10714092506837536, 0.16365635341749907, 0.18548544564818925, 0.14367627813908201, 0.14561489338898792, 0.12650709467622634, 0.10664116821054614, 0.11163966515798784, 0.14755327948145092, 0.10536470366910233, 0.14811911675965528, 0.9807202750507379, 0.966589401711483, 0.14581935771565824, 0.9852175270714649, 0.12862365689942812, 0.16293102332139753, 0.1580974252388212, 0.13362293957434468, 0.20585765509973653, 0.12075431521890823, 0.303053108281362, 0.09441235952757343, 0.2819954503846004, 0.16827115394888115, 0.14331421607334816, 0.14949434618580293, 0.059034425387557765, 0.16299656113473227, 0.17111849620264352, 0.6377863404445905, 0.859495460015826, 0.8725453990177494, 0.3854715760469799, 0.1486526842936693, 0.22972613273394493, 0.160009068638592, 0.1350996026504323, 0.18862381151476948, 0.5813766251889039, 0.2341661680472441, 0.35185760991780257, 9.999999999998899e-05, 0.29965647777849, 0.2573953369073614, 0.23901859017439941, 0.3025346830289358, 0.13953725103837133, 0.27337236360047046, 0.13688019171913457, 0.14144006045467572, 0.15343286880247853, 0.1586840293119698, 0.20588359352488983, 0.16112629652495447, 0.14454368006451535, 9.999999999998899e-05, 9.999999999998899e-05, 0.043091513784792146, 0.049235229809480585, 0.030952581653407862, 0.046584793897113896, 0.09568844974371549, 0.2320838375767862, 0.16427599200911935, 0.09814648468757747, 0.11356012098031665, 0.06847354053350863, 0.11483798331894046, 0.0890725046079367, 0.3180678975749516, 0.16283453684108717, 0.22780528364928887, 0.2233159019085308, 0.20589743389446047, 0.3006062898962334, 0.09055419688351118, 0.09239169978274275, 0.17188022351063625, 9.999999999998899e-05, 0.143159642258205, 9.999999999998899e-05, 0.08780297231395195, 0.3519720334716502, 9.999999999998899e-05, 0.3030334744735417, 0.23510114253215664, 0.22019090879389835, 0.09267030182235447, 0.28101624641900735, 0.061755585412187064, 0.4187534196332534, 0.45105151359626694, 0.5926613275117252, 0.3944311894591964, 0.5604037682087287, 0.46884801048492664, 0.5698184158523156, 0.3553041986419283, 0.4270494969302233, 0.14093389780873333, 0.12131734483263223, 0.10297317064999245, 0.12664776508823727, 0.12561766994038737, 0.09377731623388486, 0.13417032310763244, 0.13804266075514438, 0.08230477566919814, 0.17019101607356169, 0.13841532527180822, 0.1611805369895144, 0.17738774410007518, 0.16252873205332585, 0.17666106481253374, 0.22676592255502603, 0.17861462796714545, 0.1745513167058138, 0.2481966587694776, 0.3576579055583705, 0.40730204316737995, 0.3224200164141834, 0.45676726735218653, 0.30932242022212264, 0.3902840498223068, 0.6784899395374757, 0.216180569512598, 0.26206260696365746, 0.20869011604491472, 0.263433883622329, 0.20167535138835602, 0.3485749262798963, 0.33518604322414225, 0.24251596223684346, 0.2744661521768025, 0.24228390316795223, 0.23253128315431248, 0.22840671812462232, 0.22134871624102326, 0.21999322853754788, 0.25752328188804663, 0.22899359946612174, 0.2634858071891093, 0.19278267922628545, 0.230208001046324, 0.1943491211718178, 0.24042268059655403, 0.22222167555310546, 0.24177386283432567, 0.32299927399133266, 0.22454645705293164, 0.20914407642262656, 0.22338591916982398, 0.2483210706195298, 0.1869885861739402, 0.18599616811349695, 0.2798039788746449, 0.49255853175424846, 0.19439442960402653, 0.20015604292427247, 0.5830881467020719, 0.20687101298245114, 0.8322414517675977, 0.5827453479367526, 0.7007678672581197, 0.31341251986477303, 0.20706002494341658, 0.24192138627804094, 0.15598091408918024, 0.1789354405469472, 0.23370532969116897, 0.2953593325399503, 0.19097608943302113, 0.2022848448593636, 0.18547768003269038, 0.19765116886463951, 0.2094393776471476, 0.18874277144515605, 0.18812582637016118, 0.19128618069101644, 0.1823174131901596, 0.08842138285068357, 0.1102778398300519, 0.12366289215303239, 0.10242970238574345, 0.09326240750583947, 0.1086762621920212, 0.08651493460159576, 0.08196492968497282, 0.07954770011684464]}, "mutation_prompt": null}
{"id": "ba30c233-22e9-4716-9f65-9a8cd5b30c9b", "solution": "import numpy as np\n\nclass NovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "NovelDEAlgorithm", "description": "Evolutionary Algorithm with Novel Adaptive Differential Evolution Strategy", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f55aa537-9ad0-4421-a801-d1616054ba3a", "metadata": {"aucs": [0.42369040892239695, 0.6031359236887237, 0.949214042124711, 0.3074520636736384, 0.2912305169126548, 0.09809920225320234, 0.9487041905025918, 0.5857569330161232, 0.2148724393322171, 0.23326454667897478, 0.6121830931990205, 0.8978819086008102, 0.21350169047917344, 0.9115327314013157, 0.26602942739182367, 0.8976039411835254, 9.999999999998899e-05, 0.28289042895112315, 0.16816192762977467, 0.16393747348690135, 0.16150991927518243, 0.8188718704508359, 0.19302004579901832, 0.16181409840920846, 0.18420571486593473, 0.12077872665689282, 0.10714092506837536, 0.16365635341749907, 0.18548544564818925, 0.14367627813908201, 0.14561489338898792, 0.12650709467622634, 0.10664116821054614, 0.11163966515798784, 0.14755327948145092, 0.10536470366910233, 0.14811911675965528, 0.9807202750507379, 0.966589401711483, 0.14581935771565824, 0.9852175270714649, 0.12862365689942812, 0.16293102332139753, 0.1580974252388212, 0.13362293957434468, 0.20585765509973653, 0.12075431521890823, 0.303053108281362, 0.09441235952757343, 0.2819954503846004, 0.16827115394888115, 0.14331421607334816, 0.14949434618580293, 0.059034425387557765, 0.16299656113473227, 0.17111849620264352, 0.6377863404445905, 0.859495460015826, 0.8725453990177494, 0.3854715760469799, 0.1486526842936693, 0.22972613273394493, 0.160009068638592, 0.1350996026504323, 0.18862381151476948, 0.5813766251889039, 0.2341661680472441, 0.35185760991780257, 9.999999999998899e-05, 0.29965647777849, 0.2573953369073614, 0.23901859017439941, 0.3025346830289358, 0.13953725103837133, 0.27337236360047046, 0.13688019171913457, 0.14144006045467572, 0.15343286880247853, 0.1586840293119698, 0.20588359352488983, 0.16112629652495447, 0.14454368006451535, 9.999999999998899e-05, 9.999999999998899e-05, 0.043091513784792146, 0.049235229809480585, 0.030952581653407862, 0.046584793897113896, 0.09568844974371549, 0.2320838375767862, 0.16427599200911935, 0.09814648468757747, 0.11356012098031665, 0.06847354053350863, 0.11483798331894046, 0.0890725046079367, 0.3180678975749516, 0.16283453684108717, 0.22780528364928887, 0.2233159019085308, 0.20589743389446047, 0.3006062898962334, 0.09055419688351118, 0.09239169978274275, 0.17188022351063625, 9.999999999998899e-05, 0.143159642258205, 9.999999999998899e-05, 0.08780297231395195, 0.3519720334716502, 9.999999999998899e-05, 0.3030334744735417, 0.23510114253215664, 0.22019090879389835, 0.09267030182235447, 0.28101624641900735, 0.061755585412187064, 0.4187534196332534, 0.45105151359626694, 0.5926613275117252, 0.3944311894591964, 0.5604037682087287, 0.46884801048492664, 0.5698184158523156, 0.3553041986419283, 0.4270494969302233, 0.14093389780873333, 0.12131734483263223, 0.10297317064999245, 0.12664776508823727, 0.12561766994038737, 0.09377731623388486, 0.13417032310763244, 0.13804266075514438, 0.08230477566919814, 0.17019101607356169, 0.13841532527180822, 0.1611805369895144, 0.17738774410007518, 0.16252873205332585, 0.17666106481253374, 0.22676592255502603, 0.17861462796714545, 0.1745513167058138, 0.2481966587694776, 0.3576579055583705, 0.40730204316737995, 0.3224200164141834, 0.45676726735218653, 0.30932242022212264, 0.3902840498223068, 0.6784899395374757, 0.216180569512598, 0.26206260696365746, 0.20869011604491472, 0.263433883622329, 0.20167535138835602, 0.3485749262798963, 0.33518604322414225, 0.24251596223684346, 0.2744661521768025, 0.24228390316795223, 0.23253128315431248, 0.22840671812462232, 0.22134871624102326, 0.21999322853754788, 0.25752328188804663, 0.22899359946612174, 0.2634858071891093, 0.19278267922628545, 0.230208001046324, 0.1943491211718178, 0.24042268059655403, 0.22222167555310546, 0.24177386283432567, 0.32299927399133266, 0.22454645705293164, 0.20914407642262656, 0.22338591916982398, 0.2483210706195298, 0.1869885861739402, 0.18599616811349695, 0.2798039788746449, 0.49255853175424846, 0.19439442960402653, 0.20015604292427247, 0.5830881467020719, 0.20687101298245114, 0.8322414517675977, 0.5827453479367526, 0.7007678672581197, 0.31341251986477303, 0.20706002494341658, 0.24192138627804094, 0.15598091408918024, 0.1789354405469472, 0.23370532969116897, 0.2953593325399503, 0.19097608943302113, 0.2022848448593636, 0.18547768003269038, 0.19765116886463951, 0.2094393776471476, 0.18874277144515605, 0.18812582637016118, 0.19128618069101644, 0.1823174131901596, 0.08842138285068357, 0.1102778398300519, 0.12366289215303239, 0.10242970238574345, 0.09326240750583947, 0.1086762621920212, 0.08651493460159576, 0.08196492968497282, 0.07954770011684464]}, "mutation_prompt": null}
{"id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 6, "fitness": 0.2673604373419647, "feedback": "The algorithm EnhancedNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "f55aa537-9ad0-4421-a801-d1616054ba3a", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "c6e0de38-3dab-4f98-b983-29547783681b", "solution": "import numpy as np\n\nclass AdaptiveDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f_min = 0.2\n        self.f_max = 0.8\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        f_current = self.f_max\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + f_current * (x_r1 - pop[i]) + f_current * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n                    f_current = min(self.f_max, f_current * 1.2)\n                else:\n                    f_current = max(self.f_min, f_current * 0.8)\n        return pop[np.argmin(fitness)]", "name": "AdaptiveDEAlgorithm", "description": "Improving mutation strategy by dynamically adapting the mutation rate based on individual success.", "configspace": "", "generation": 7, "fitness": 0.23524564920721167, "feedback": "The algorithm AdaptiveDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.5827426382939561, 0.5849131628848948, 0.5808163010724248, 0.6335637976675219, 0.5802960067161261, 0.5868716180558369, 0.580251568548878, 0.5850740819860825, 0.6059901861369545, 0.255236373572874, 0.2879567913135648, 0.2170620065887352, 0.2761963604982066, 0.17986249836508028, 0.24442904584616354, 0.28564136568591014, 0.2346804701556714, 0.2668625144735356, 0.12603477955233244, 0.11416355616405383, 0.08125040155849039, 0.11053243953358083, 0.12706286791200128, 0.1715520042941453, 0.14263760873254328, 0.10281078952538669, 0.13341247431488756, 0.09402322317107736, 0.07413516642129359, 0.06767220708900712, 0.15089864139611087, 0.05583588544099416, 0.03550565590961963, 0.1061922300994993, 0.07419960396796355, 0.07042290516764493, 0.927631035454274, 0.908016521928056, 0.8483957450716881, 0.9156929140725846, 0.9733737976310313, 0.9361645263945122, 0.8251300846019322, 0.8632970833724414, 0.8810853749981136, 0.3684480001818302, 0.30125285502340005, 0.3336359121756456, 0.32660660319629586, 0.3651068690996292, 0.3650491899849764, 0.3606784015688632, 0.3151416487398677, 0.33164462310237597, 0.21489799633334106, 0.13474037595262378, 0.1552904241417209, 0.5875161366120691, 0.27315003205467814, 0.6864426694950454, 0.09819866493377416, 0.24674690512720532, 0.2152795147029427, 0.3121553678269694, 0.28777031971631273, 0.1820670024343013, 0.1962327653463376, 0.2490205775011527, 0.3001359656233762, 0.20163366375223601, 0.19402843502871026, 0.21250467923253769, 0.20251302725492193, 0.13148594882227593, 0.14043618359172905, 0.15512757742836625, 0.20918756828050677, 0.1519004595046699, 0.13175553043379673, 0.17581106111841094, 0.19070717673196136, 0.01839290500520019, 0.012588036237362377, 0.043394874956440455, 0.10912805306884821, 0.0011525973029401504, 0.004383163264848555, 0.0057173651372055545, 0.0310730694000938, 0.1044290892057288, 0.12359843465812426, 0.09015815421404039, 0.0936126215618106, 0.0521444297468876, 0.07476581156867701, 0.04729383320265079, 0.10872548521825698, 0.08814703152218462, 0.11267366648577448, 0.07539111165724222, 0.03398884534773494, 0.08058171640117762, 0.059323769130274595, 0.031980207886370904, 0.04016029593870374, 0.02553429734313306, 0.09117286678871284, 0.04421328616971787, 0.17148598533330928, 0.11208463085635412, 0.13144764799287856, 0.16609364656501968, 0.1678138772176868, 0.05534357892574393, 0.05896350137461248, 0.17181377145057486, 0.09957720170892903, 0.5013338598892517, 0.5032216891663792, 0.4687678001682447, 0.43658242572681116, 0.5084875824892294, 0.4555820699382557, 0.5191088103687578, 0.4930417844476247, 0.49124364309166035, 0.052226036797309305, 0.05905027532660101, 0.03388640376388263, 0.05174850766550576, 0.06431742652519845, 0.08394936517794627, 0.07432735768754284, 0.08865336207499275, 0.09637907137146973, 0.19634988327934444, 0.17090111621879045, 0.1763368927290827, 0.17507170295458363, 0.1942630068676463, 0.1694954334741926, 0.17687202675308, 0.19442152570483062, 0.1874831581994243, 0.21159759324973038, 0.18067520078598776, 0.19321166864133654, 0.25353781154276156, 0.28739762455313056, 0.23831583629404773, 0.2400606226563875, 0.20220065041973978, 0.13580810282818823, 0.1274867427436186, 0.17995586313178613, 0.17405280768032694, 0.20479207899326146, 0.25088671023572373, 0.19434066304748376, 0.16584486668996945, 0.10802756601561447, 0.15622060654998626, 0.21807580477838806, 0.21293781960445124, 0.22537732100540053, 0.22515992782053618, 0.2137575358867715, 0.21495270101364572, 0.23051286764980405, 0.21372614916689137, 0.24929010634417226, 0.19601346637039618, 0.19999448255637953, 0.20270011424737144, 0.19399186188503714, 0.1887278382642581, 0.19953402770727913, 0.24751702962903122, 0.19627375022081583, 0.18740282469280756, 0.1875746685215922, 0.1996530265261125, 0.35320300673644134, 0.5578541139007674, 0.19309493305094438, 0.1667899319619306, 0.34512239607963324, 0.18722501771360567, 0.17196917599418593, 0.4177267965023965, 0.29098742773716446, 0.3155499669796107, 0.28239494597642323, 0.3691404174930133, 0.20069839070459716, 0.1574137840960147, 0.25865197846041665, 0.18712674924385997, 0.18755911514996115, 0.19435571030697307, 0.17978653750424, 0.18779222031109433, 0.18410999836857322, 0.2071810172932358, 0.17758070659793646, 0.18969068633889752, 0.18537612629599864, 0.07880961788505647, 0.08778887696972448, 0.08921973401310257, 0.09236584164633987, 0.09298031114989613, 0.09740668691206411, 0.06720478622381965, 0.10725875630987047, 0.09273060550427836]}, "mutation_prompt": null}
{"id": "a5b689b9-9579-44d5-a153-bc6a8bfb027d", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "af73f8be-1a20-4a4b-a04b-71386507d233", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "50d34db3-8c10-4545-9fad-8941b63b4394", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.sigma = 0.1\n        self.min_f = 0.5\n        self.max_f = 1.0\n        self.min_cr = 0.1\n        self.max_cr = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        f = self.min_f + np.random.rand() * (self.max_f - self.min_f)\n        cr = self.min_cr + np.random.rand() * (self.max_cr - self.min_cr)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + f * (x_r1 - pop[i]) + f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n                    if mutant_fitness < fitness[best_idx]:\n                        best_idx = i\n                        f = max(self.min_f, min(self.max_f, f + np.random.normal(0, 0.1)))\n                        cr = max(self.min_cr, min(self.max_cr, cr + np.random.normal(0, 0.1)))\n        return pop[best_idx]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the mutation strategy by dynamically adjusting the mutation factor and crossover rate based on the best individual's performance.", "configspace": "", "generation": 10, "fitness": 0.24903536388495034, "feedback": "The algorithm EnhancedNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.5310583381873991, 0.596409835236155, 0.6394314107355943, 0.5522123972853955, 0.551944512874494, 0.5863151326884568, 0.5085173965853482, 0.5723079105704674, 0.5530475187999723, 0.2610983706193787, 0.22013288854929747, 0.2810523876655511, 0.23588575174372794, 0.25809856205092296, 0.2767999993571939, 0.14000305229223797, 0.21891202832868106, 0.23057070651941203, 0.1831391642733765, 0.15718654784941333, 0.2577760934655551, 0.33747630043426113, 0.14396432489590227, 0.27476266753013356, 0.130039236122094, 0.088372992352172, 0.2797213529886944, 0.2664758462800514, 0.1439937997552988, 0.27906635968057936, 0.16360344135083504, 0.10689084008091465, 0.15646019195025496, 0.11845408064647, 0.14084124275826326, 0.19244866584435638, 0.9851214520734791, 0.9907979370695015, 0.972065745514591, 0.9860126054155907, 0.9930536374751617, 0.9693140405300692, 0.9733339244228395, 0.9575327313256349, 0.9655346254794529, 0.34080159474864147, 0.3478162739785595, 0.36639472686028673, 0.33630027786940964, 0.3817285009900242, 0.22454853396113272, 0.27880369490224965, 0.304164142151074, 0.23660544130039973, 0.2984606056108773, 0.5643773077709764, 0.16796536477321355, 0.2827056818578101, 0.697442475065648, 0.1966424705970795, 0.31465254246628915, 0.8673050873954388, 0.3118959160088274, 0.18677660966091925, 0.19275889980390826, 0.1806456573441706, 0.16065958854141282, 0.19772391629958097, 0.17676609574993452, 0.12884103036244055, 0.1660112903145169, 0.20873591377363265, 0.19863675472159004, 0.1949663796418768, 0.17384416627833965, 0.15030686812344285, 0.13854943598838765, 0.1423964655407337, 0.19089224489623735, 0.16438439059748666, 0.1814963466899544, 0.017493959680714766, 0.010779512563218296, 9.999999999998899e-05, 0.0015840975107417332, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04175016986011737, 9.999999999998899e-05, 0.11740696998721467, 0.10451485584483833, 0.0755018059126733, 0.05483513676094098, 0.10402542430447337, 0.04023367804164113, 0.09926319496986213, 0.15285250578268583, 0.053372231310302554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034184308113904827, 9.999999999998899e-05, 0.00015755855599841606, 0.0057600962739439154, 9.999999999998899e-05, 9.999999999998899e-05, 0.12643815296087835, 0.09045923013958923, 0.13017212388771027, 0.06917706796601997, 0.15429021475963178, 0.09063142576689298, 0.13551499699922953, 0.1142945088497751, 0.07532565502861255, 0.4094169881925226, 0.45561429073934345, 0.41788197150690687, 0.46809627438041657, 0.4634257393043377, 0.4404882328750215, 0.38427916212054714, 0.4309900178795909, 0.44154385546750696, 0.11933429821487895, 0.10513426797527792, 0.13623646279365387, 0.10314706861106637, 0.11953487387066708, 0.07814684337251443, 0.11358421997215551, 0.11121670724062005, 0.09372030241978535, 0.11681096921000722, 0.17199274036098122, 0.15981374820248362, 0.166938310410239, 0.17439374908304417, 0.158927828157568, 0.1336924756157647, 0.12541485852108802, 0.13801989130793046, 0.3149943334694224, 0.30515382851458184, 0.2259868208130955, 0.336002717841263, 0.320080852263915, 0.22030793865467246, 0.2980353532794887, 0.3486259436073106, 0.29611266558641813, 0.20905123283946736, 0.259430710170342, 0.19504355669070506, 0.1912299609984519, 0.25398832504785374, 0.16759584501799452, 0.23525136124630808, 0.19148648678259217, 0.18410368312821979, 0.18247617755704026, 0.18220272330548237, 0.19951978111058444, 0.1912698168933421, 0.20274455976391437, 0.16877548522604136, 0.19424657650141164, 0.22463926254782385, 0.2626121105333029, 0.24085643980808114, 0.20370788667970874, 0.29773834770387053, 0.31550338985020576, 0.2312893752361801, 0.23109918010144825, 0.2065438652049213, 0.20120939847704777, 0.2432031513802827, 0.2121241435054424, 0.19996908501816546, 0.35530815782137526, 0.8102507966852143, 0.19477692413392, 0.525425862898762, 0.521631605176298, 0.39373029088097333, 0.16471203181935978, 0.2902976517583582, 0.42411304995261767, 0.1700838821426287, 0.17328413540809884, 0.30970089830617853, 0.20686687750507937, 0.37192284154300115, 0.09480141618422622, 0.2710450603582705, 0.1769154683905474, 0.19426662379346704, 0.17608209101317862, 0.17692951895865572, 0.18515184005315988, 0.1690655017952607, 0.17262300148054133, 0.18161764317042717, 0.19364487043655165, 0.0862598997796018, 0.08753046691440536, 0.07941170661459096, 0.0832823676627279, 0.07228175300846085, 0.08460065718678378, 0.08986630684138852, 0.10393691888687173, 0.07069480333599276]}, "mutation_prompt": null}
{"id": "44de2a70-47c4-4590-85ca-2f9ee966fe04", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "65141a8f-2249-4ab0-bf9e-158f2d577782", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "35ce9c6d-8c8d-43ac-8771-7594386111c6", "solution": "import numpy as np\n\nclass DynamicDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            f = np.clip(0.5 - 0.4 * _ / self.budget, 0, 0.5)  # Dynamic adjustment of mutation factor\n            cr = np.clip(0.5 - 0.4 * _ / self.budget, 0, 0.5)  # Dynamic adjustment of crossover rate\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + f * (x_r1 - pop[i]) + f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "DynamicDEAlgorithm", "description": "Adapting the differential evolution algorithm with a dynamic adjustment of mutation and crossover rates based on individual performance.", "configspace": "", "generation": 13, "fitness": 0.26541858463719215, "feedback": "The algorithm DynamicDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.6057739655101696, 0.6241220819378004, 0.5987907655128659, 0.6464224435277505, 0.5793226226165853, 0.573383814017556, 0.581144709342569, 0.60158235690807, 0.5799305277195408, 0.23061483119614978, 0.23244482330481642, 0.2403531056028616, 0.26395114198219694, 0.26090703308316476, 0.23234445755829214, 0.26146309073158414, 0.3074550834958635, 0.31347557557970107, 0.2723441813550668, 0.17465915809889043, 0.2984200513338956, 0.22513145451497207, 0.23148492742680238, 0.17107576866366503, 0.27565197424839893, 0.10733173505926175, 0.18141926248215812, 0.13096267057409583, 0.1658515366484069, 0.1142210448943084, 0.15591481961898102, 0.15433028954349415, 0.11173275273463457, 0.156891331470853, 0.10832819379056657, 0.04323924497912035, 0.9356456560206865, 0.9869359960003031, 0.9267523344021767, 0.9485144694268237, 0.9643307869964071, 0.9764988126093471, 0.9219208563000476, 0.9054585171467646, 0.9502675945264706, 0.4072226185875829, 0.3862829260105858, 0.332764182907881, 0.41197653161207004, 0.3981181694015805, 0.38812311002623767, 0.3698712275005811, 0.33368686808034, 0.37041102014644134, 0.22840719301244983, 0.28484948764820706, 0.13471369548367784, 0.2769348863174246, 0.35393035597498057, 0.8408760450011054, 0.1497617171636242, 0.8425793017238792, 0.7315719647360281, 0.1392196238764094, 0.19158307609523795, 0.24475508180091032, 0.19637418417078112, 0.23693483948398242, 0.27046024194965224, 0.2237256392051865, 0.17661199586212462, 0.1741607760631887, 0.1726400762977175, 0.15700843813632492, 0.26811550118691907, 0.14561848528201227, 0.22042288422059508, 0.13277697816862088, 0.19570928268159382, 0.19498242396264165, 0.17208952892977125, 9.999999999998899e-05, 9.999999999998899e-05, 0.033400047352943885, 0.07012758945346564, 0.048458112922573626, 0.000873506208201591, 0.006533883968344201, 0.0429870597738603, 0.053150723764237795, 0.1455099962626929, 0.0789758931908876, 0.09106257831956754, 0.09130409619400293, 0.06977144045832029, 0.111568365026119, 0.11445720909975787, 0.10393233949842384, 0.09881775503780676, 0.022128738326458786, 0.007502984638429355, 0.03882078930335442, 0.024360294426102103, 0.05636020105665562, 9.999999999998899e-05, 0.007468595826351843, 0.009792427903386525, 0.03598813692639469, 0.1215591909150977, 0.135637392678028, 0.11752578512323941, 0.15480142581530765, 0.16301056894933885, 0.11935940261917843, 0.06361320815435278, 0.09422706562108851, 0.07637978335525475, 0.4638844242936567, 0.48768694772271515, 0.4754317896559487, 0.4854888633111586, 0.5012365547156477, 0.4664835350062564, 0.46367486023947224, 0.5150752514265766, 0.5047958878907759, 0.14310974723664893, 0.11399890826720638, 0.03864253960045294, 0.15066235088063462, 0.12096328081646679, 0.14539029229306344, 0.12239564860200713, 0.09649170276242602, 0.0823599362970453, 0.16937493069401277, 0.13704966884577374, 0.16019500401159603, 0.2173548852955801, 0.16045379936328552, 0.15266340132022183, 0.16713198107734684, 0.1919107983600431, 0.19713083108405394, 0.3484025053114096, 0.3082019886327324, 0.32536627206199087, 0.2450695217534723, 0.3448780822196893, 0.373105953084377, 0.34299213561665276, 0.23540447069751724, 0.2127953591477043, 0.18866515329742184, 0.2363991959475772, 0.28052621199504846, 0.19700253757643882, 0.24229218999487578, 0.23117323835970938, 0.19735226573327613, 0.21880969445708642, 0.19751058666313326, 0.2269463102128193, 0.22593898648957966, 0.22854331128924443, 0.2436497931431023, 0.21650680952446577, 0.22761544330515804, 0.24319396695359652, 0.22332411501632066, 0.21335882751430146, 0.20142469945809427, 0.2513644673845399, 0.27482282095859045, 0.2469279059982662, 0.2366707421339379, 0.2514412777072995, 0.1926701125657836, 0.2092650508400009, 0.2310996995504062, 0.18639939159145325, 0.19874613522577333, 0.30104990826094424, 0.8559379249092224, 0.19016106210781236, 0.8490453508949366, 0.17871505408475463, 0.3939037059692294, 0.6914480200928981, 0.2078229405917169, 0.409218573189291, 0.639151039559138, 0.28804207823309613, 0.25915279920545986, 0.1832202527920519, 0.25895286593546407, 0.2083690592068953, 0.29109911370783415, 0.18062355442165678, 0.19403565516768984, 0.18036438133255794, 0.18242629576399672, 0.18589847720334107, 0.1815933064184041, 0.18974387268998882, 0.18567152574935075, 0.1875455842790238, 0.09304523923091323, 0.08058240432673447, 0.08979594532762514, 0.07981662539158574, 0.08724647463132351, 0.10562528636325264, 0.07754209703998072, 0.08730467298866695, 0.07553328671204074]}, "mutation_prompt": null}
{"id": "d903d93c-e2ae-4f6d-a012-97779d747f2c", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "a8e0ce33-2af0-4ad3-a82b-68dd0e49058d", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "92b52352-6d3c-4f65-afae-442269f040e6", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "a3057831-6e86-41ec-8b8b-266064900375", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "c3bd1e2e-ee83-4357-9af8-29238ebd5cc8", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "c68b1abb-6819-4a96-947e-c550b2c5a803", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "d5c1521e-f1ce-46ab-9759-9a268930848d", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "95fa5422-2492-4a07-ba3f-0a289dbc55bc", "solution": "import numpy as np\n\nclass EnhancedNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedNovelDEAlgorithm", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Gaussian perturbation of individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.592831128791699, 0.6062153512205611, 0.6102739473813275, 0.6118509034211592, 0.5854323444445118, 0.5728003143563201, 0.6228632002026526, 0.581589165969264, 0.5822487463995938, 0.24348958747641203, 0.2631512181573843, 0.23362735656767053, 0.22992796096423873, 0.22731296058943573, 0.26455744455158725, 0.25137850640140413, 0.2770381644398502, 0.2141457811095112, 0.27329717667477904, 0.2535342361868579, 0.28094826083818525, 0.2888280344810853, 0.22798634905185655, 0.23153065587692756, 0.30334414481592364, 0.1093967943696218, 0.26535857980870836, 0.15180665483107236, 0.13287957159052877, 0.14440831019168487, 0.21244855339743018, 0.16626556589901442, 0.10534703560246339, 0.20708851247907611, 0.06499932366789685, 0.09257192036390749, 0.9358345764307534, 0.9869368157165704, 0.9318355068348846, 0.9514172790278937, 0.9657588345672706, 0.97292044520464, 0.8994765633825426, 0.9054936357031849, 0.951028164026681, 0.38781507258312353, 0.3942557370130738, 0.34562730456409896, 0.39085996498330533, 0.389957383590003, 0.3857148102592103, 0.36503315746723974, 0.35506443108715746, 0.36642423323743356, 0.2887302930224197, 0.22061814014354608, 0.1377442459599879, 0.7919980874894246, 0.26919642632556895, 0.27709182676828226, 0.2229383454235061, 0.6038762705011624, 0.7588084165352857, 0.13417174984134017, 0.17686406624866946, 0.19990329304352572, 0.20507226016197222, 0.20671911452145075, 0.25477602105123087, 0.25110948089527674, 0.1852027459118163, 0.17052123169029965, 0.18078529578217817, 0.15451364510319276, 0.2384847415164717, 0.14009364194323903, 0.22270555219908428, 0.1314721667964508, 0.1922597757224329, 0.17443935849452719, 0.1818307622103773, 9.999999999998899e-05, 0.0028170064608260548, 0.04096791473341932, 0.0971084660275987, 0.02811553477591955, 9.999999999998899e-05, 9.999999999998899e-05, 0.022473983923704366, 0.04371558293517286, 0.12209312295330599, 0.13093897950623545, 0.09500604922223377, 0.06323361645239456, 0.0750324030251337, 0.09243764985765102, 0.10526559011938497, 0.1020415624764811, 0.10857852559268355, 0.010792803431727171, 0.022759938970064453, 0.04019299430429202, 0.038140183605693156, 0.04811156335733213, 0.0003687273972147187, 0.0046831117294230395, 0.003843844482249059, 0.013365388847169979, 0.10931896737561053, 0.12285937878844566, 0.13378766945790144, 0.1839243602590066, 0.16573902482183256, 0.03676845770072268, 0.06026262026455731, 0.08642627266802116, 0.05563540990832694, 0.5186550354507571, 0.49247048391768644, 0.4661793972959877, 0.44859463409021905, 0.46767622522749275, 0.4764798867834448, 0.49051905923347616, 0.4910183402472923, 0.47754778801222364, 0.1040767998663712, 0.12352779296330518, 0.06278522713122225, 0.1228184444933429, 0.1320085260714503, 0.14872836881962592, 0.13110880050892482, 0.11603231640785128, 0.08979463417121336, 0.19460975373563372, 0.16889823390934344, 0.1811477476819775, 0.1758092507843405, 0.18323311418262656, 0.16316638599884314, 0.1619482704262698, 0.15820571861841382, 0.15293579746093477, 0.3261075804318646, 0.3303018256749636, 0.33720318593929755, 0.33288515388489337, 0.3242596254041229, 0.32761817910258384, 0.34976271834519057, 0.2862635897435343, 0.2051604705299105, 0.18516773233543815, 0.26533796499489737, 0.26432435587762115, 0.19947443525184239, 0.23395334448342076, 0.2961938584192527, 0.2248256118245715, 0.24822337356682833, 0.1986516477908804, 0.20427036029936374, 0.21228479257805088, 0.23537316944780973, 0.21820119085196243, 0.2243816524402915, 0.22667475007776106, 0.2364275311951245, 0.24225705386574659, 0.23690357948713137, 0.22057919220546063, 0.2440208201518873, 0.2736833237731404, 0.3232699220456533, 0.20367667562422953, 0.3204765233332739, 0.20020970034929286, 0.21515097423867813, 0.2616076170157424, 0.18673172008779904, 0.199356794364825, 0.34035521839855765, 0.8779647189136994, 0.2359521691153933, 0.8255817566592908, 0.17782757029550955, 0.3756844334626529, 0.7350541636082824, 0.21442540436120772, 0.4219726870276873, 0.6500486989756387, 0.36514026984352366, 0.22481493981635503, 0.20644956128514014, 0.29296725487784747, 0.21005529370018516, 0.35612799828896613, 0.19596872332940563, 0.17232455263989432, 0.17808757467755199, 0.17851107075780515, 0.19416087889926925, 0.17766951565974654, 0.18118034500223135, 0.18671509069816106, 0.18896522615480038, 0.08675890120974417, 0.10541265806146005, 0.09166068674183847, 0.09113986953836595, 0.09842322271961368, 0.13121790797686295, 0.0823950892935762, 0.09522231797056535, 0.07912932639380144]}, "mutation_prompt": null}
{"id": "d9bd940f-b91e-48d8-891d-2829105585a4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.30326582129239793, "feedback": "The algorithm EnhancedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "89e9a3f1-560c-4a8c-bcee-12c7ea747545", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "cf3ef719-e4cd-405e-920b-64e0fe69fcdd", "solution": "import numpy as np\n\nclass DynamicPopSizeEnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.min_pop_size = 5\n        self.max_pop_size = 20\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n            self.pop_size = max(self.min_pop_size, min(self.max_pop_size, int(self.pop_size * np.random.uniform(0.9, 1.1))))\n        return pop[np.argmin(fitness)]", "name": "DynamicPopSizeEnhancedAdaptiveNovelDEAlgorithm", "description": "Introducing a dynamic population size adaptation mechanism to enhance diversity and exploration in the algorithm.", "configspace": "", "generation": 23, "fitness": 0.29324478024282014, "feedback": "The algorithm DynamicPopSizeEnhancedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7021327670194979, 0.7103091564409914, 0.7515395328677053, 0.7083789155263749, 0.669920408557269, 0.6944701842843095, 0.7053981993032707, 0.7202902964976365, 0.7470135591638986, 0.37614368288199207, 0.33242514555807534, 0.34773328890178645, 0.40117304117421904, 0.33368572126678064, 0.35304640239186436, 0.28957044869078485, 0.3662055328664151, 0.352242204428756, 0.17645025263386305, 0.18331786718359222, 0.08415137948781981, 0.32410784982267304, 0.12828618595636998, 0.0978136751920492, 0.1633114116781419, 0.1846868594231823, 0.0962342505047864, 0.09411372807272089, 0.06611107100859148, 0.115746915299618, 0.27560803423329916, 0.17707870998107667, 0.051687227388210855, 0.12036729452157724, 0.10179148694674856, 0.11719889924017168, 0.9638601775429861, 0.9862806519305499, 0.9766670572824951, 0.968490120311847, 0.9894279148331284, 0.9300215413215074, 0.966973046698365, 0.9795484222945922, 0.9059739677208795, 0.4966138417319723, 0.4648442379828073, 0.45306386345600336, 0.4572024719743655, 0.44703679134181684, 0.43952157861000274, 0.45175704929511695, 0.4273516827825645, 0.47154962272230494, 0.22352734700936605, 0.5704585755305922, 0.44814071423084834, 0.9482001888126219, 0.21378769149952814, 0.8925422504597819, 0.12858915269405247, 0.06634454038825555, 0.15919330159151324, 0.1269186578597159, 0.12476177444606618, 0.2097326681480125, 0.22268680966565757, 0.17455095025127287, 0.1968402305328284, 0.13669954491064296, 0.19500669077958277, 0.3124727498549138, 0.23555008146792433, 0.21499590114606548, 0.21552482094542935, 0.20071249322064721, 0.24167167831802183, 0.13452635646530287, 0.1323676925549615, 0.21170094924346516, 0.21962768342195294, 9.999999999998899e-05, 0.013855637278640254, 9.999999999998899e-05, 0.09741673722582778, 0.017853829612598182, 0.00628167074361996, 0.00011314313212573701, 0.16209015899670687, 0.18194535640774834, 0.05129079131165326, 0.06827240884963848, 0.1156403071779818, 0.07834032658917744, 0.020678153678718836, 0.07404182526435998, 0.11586324649049096, 0.08411189011158271, 0.20170023525628344, 0.11677120384444883, 0.046545230973277785, 0.17028955815738445, 0.06979083326432645, 0.12765704709948533, 0.12695651251702078, 0.019308338145249904, 0.17939763905464878, 0.09586503641309063, 0.08641195524400902, 0.1794858188470675, 0.1761333882643501, 0.10344303964873469, 0.19073326496037168, 0.18556123304761152, 0.05956204998922454, 0.20148917364777952, 0.1499342258577233, 0.48830682750623633, 0.5509855190402447, 0.5264351921399454, 0.5194861054461782, 0.5403679737398555, 0.5238804235065382, 0.5304924123432659, 0.5210561288258844, 0.5333533611307443, 0.09204979885119069, 0.0986894862485096, 0.052553572813798244, 0.07165015942469966, 0.06926808337441603, 0.1489055376301872, 0.1698179300688658, 0.11912105342662638, 0.13368481810068011, 0.19050708609016054, 0.18922712599180158, 0.30538978661911964, 0.21027765800564868, 0.23509171707961551, 0.18742786553390522, 0.17818556151007636, 0.18723679158793716, 0.20075850031946263, 0.15875841008016955, 0.36281055673456986, 0.33076403337193616, 0.20559560234750685, 0.3562671009726601, 0.29960555409423817, 0.22763338520892717, 0.22682367302932682, 0.24645012114719156, 0.2246803172137446, 0.19165687390246255, 0.21430296998046228, 0.2063222160178999, 0.2567496512840286, 0.29863761067650574, 0.18069550801573664, 0.2295737774661254, 0.21107741451149098, 0.2202856106459382, 0.22477994565039994, 0.23397678180543957, 0.23556641312433835, 0.2764942386985876, 0.20305149448132875, 0.24761192566955126, 0.18753866006418052, 0.20929423950785186, 0.21420212415720596, 0.24629027245039348, 0.2005102841035986, 0.1960095994533485, 0.25483931870929843, 0.20129092469484422, 0.45280933005788393, 0.2180167387377706, 0.2285564718236952, 0.18800723071025238, 0.18720502773191217, 0.3244438250054277, 0.9586341340636755, 0.6764050594445523, 0.8319485583148332, 0.8354251459000216, 0.6890530023003766, 0.15627041343573034, 0.737380171312404, 0.29589709718523116, 0.7132622168614928, 0.4715232222877219, 0.4906893310910756, 0.20645081854271596, 0.6807881095622955, 0.14787018819647568, 0.2785701358431272, 0.17987339966854454, 0.19331282517661097, 0.19046918611554908, 0.1955320947589918, 0.18513670962453577, 0.21053425382757207, 0.17816985910971417, 0.18684974582961544, 0.18332994680145998, 0.10892799170551515, 0.12657031010979647, 0.09795262301228103, 0.06627466140472293, 0.09011146856857377, 0.1125140430233379, 0.10141173570899409, 0.09193616235594726, 0.0903178128304436]}, "mutation_prompt": null}
{"id": "1bc0ac59-b21a-4905-a25a-c841e6b0284d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "4562137d-2ba8-4b4e-9796-e2139aed88ca", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        pop = self.initialize_population()\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Improving diversity by introducing a dynamic mechanism for population initialization to enhance exploration.", "configspace": "", "generation": 25, "fitness": 0.30326582129239793, "feedback": "The algorithm EnhancedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "1dd60a94-5b70-4369-8b62-df7572a3b8ec", "solution": "import numpy as np\n\nclass DynamicPopulationAdaptiveDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        for _ in range(self.budget):\n            self.pop_size = max(5, min(20, int(10 + 10 * np.random.randn())))  # Adaptive Population Size\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "DynamicPopulationAdaptiveDEAlgorithm", "description": "Incorporating a dynamic population size adaptation mechanism to adjust the number of individuals based on the algorithm's performance to enhance exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 13 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 13 is out of bounds for axis 0 with size 10')", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "7d6711ab-3d13-44d6-aee9-164b541436cb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "4f912cc5-2a2d-4a41-a037-5ca27ed082df", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "987c7c19-f699-432f-88dd-11897ef4e12d", "solution": "import numpy as np\n\nclass HybridDEPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n            for i in range(self.pop_size):\n                for j in range(self.dim):\n                    r1 = np.random.uniform(0, 1)\n                    r2 = np.random.uniform(0, 1)\n                    vel_cognitive = self.c1 * r1 * (pop[i] - pop[i]) \n                    vel_social = self.c2 * r2 * (pop[np.argmin(fitness)] - pop[i])\n                    pop[i] = pop[i] + self.w * (vel_cognitive + vel_social)\n                    pop[i] = np.clip(pop[i], -5.0, 5.0)\n        return pop[np.argmin(fitness)]", "name": "HybridDEPSOAlgorithm", "description": "Implement a hybrid algorithm combining Differential Evolution with Particle Swarm Optimization for enhanced global exploration and exploitation capability.", "configspace": "", "generation": 29, "fitness": 0.21377359354527883, "feedback": "The algorithm HybridDEPSOAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7654475536198853, 0.7983431232851733, 0.7303939851985579, 0.7004464439023546, 0.8025092179331851, 0.675989278414785, 0.7199901460900696, 0.752644770294292, 0.7189549209163903, 0.3503859791459458, 0.3306886520825899, 0.2896841446942572, 0.30497584737222727, 0.330939719411788, 0.2777385563268139, 0.22785929772053892, 0.3510414861531046, 0.3141151652617036, 0.0628315731133241, 0.049904505470904637, 0.09448730720515519, 0.07313488123093759, 0.03215610547919112, 0.05519125713674822, 0.04452304376710603, 0.044204753102262795, 0.02495018214189182, 0.13013272900258022, 9.999999999998899e-05, 0.07212892478092259, 0.05855243272647381, 0.006214690602648454, 0.025340730163907255, 0.08624453244630204, 0.006405214742418841, 0.014105708498316716, 0.8326497446790366, 0.8739046429421391, 0.8432346734446835, 0.7440038512255863, 0.8642438468925656, 0.7682557023897574, 0.7178090214930162, 0.8526135486172729, 0.726315158345436, 0.4869971399785523, 0.49984999881762693, 0.40699881395268145, 0.5204979295346288, 0.5661196026077311, 0.44936412398781334, 0.5027586475806326, 0.5313486713222253, 0.4449884302865664, 0.20730795086477238, 0.07751136038411643, 0.04648552470180134, 0.09641763565850237, 0.04356693647785892, 0.17008678587534576, 0.12409928298513528, 0.049180155110988055, 0.054794862594333194, 0.16749260964914214, 0.19354193842010903, 0.18206807312027662, 0.19637258948133263, 0.20072894397465002, 0.15895639776267179, 0.18985717163890614, 0.2142063687466378, 0.18801021839802157, 0.24458216904856034, 0.0789793651326911, 0.16226695055882479, 0.1929352842899308, 0.2162922448455391, 0.12865105358412332, 0.2500901939069865, 0.11552465545518753, 0.21774877518350721, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12460079365146048, 0.048007191011933514, 0.03670408076821463, 0.006024234926207517, 9.999999999998899e-05, 0.0016639292299409636, 0.036008064940521445, 0.03460577065614401, 0.08816468775155972, 0.0730889970338876, 0.013215518539614446, 0.03700283737521204, 0.07724588616038564, 0.07740628215194101, 0.11695615890025968, 0.10307860531637547, 0.060530443988304095, 0.17585892194725916, 0.0771582320678188, 0.12312742739123916, 0.10266930419506703, 0.09206963783633104, 0.08735696370439727, 0.0782784357730818, 0.0932179175433312, 0.11470280361952612, 0.07925167348472428, 0.05603236281729407, 0.026300975157391604, 0.2000052531365193, 0.06044573815889365, 0.07677120032318141, 0.06906668073974653, 0.510228726949419, 0.4887029590616274, 0.5029984016904684, 0.48714657908890224, 0.5151046418393361, 0.45869283526125126, 0.5588580113829322, 0.48999795119155065, 0.5208054678390759, 0.03185385547070618, 0.008560382206140416, 0.020862775724145632, 0.04562904318568217, 0.033796202742917725, 0.05224697315128246, 0.12134442375093568, 0.002977308804319345, 0.07456444907892057, 0.43935377102469486, 0.2074333905504464, 0.16787345138685628, 0.1742702331449023, 0.1398097328712663, 0.18867397478076942, 0.09453936830565746, 0.1527572707705842, 0.104861389563071, 0.10608715530435697, 0.14832088021870726, 0.12866123922028383, 0.13492423596221892, 0.12440204469787419, 0.16088926229366896, 0.1394370524393942, 0.12596688365600128, 0.14891959673755284, 0.044907422136240216, 0.06976820317688359, 0.06447680568696645, 0.08310607262532643, 0.059736351989197134, 0.08762148352827748, 0.07241993586593254, 0.07513240778805197, 0.13506698686727303, 0.1812332866039461, 0.11954528218394922, 0.16195620046671522, 0.13900006616723426, 0.1496376486353178, 0.16185261132748419, 0.1973756689104763, 0.10891865281222546, 0.19290221981952693, 0.17423232318612047, 0.21590894497254554, 0.17323789519050492, 0.17438130563843246, 0.19881464219858347, 0.19638857329033066, 0.17325624123262318, 0.20133770809305163, 0.1687166497613034, 0.18940386136238108, 0.07665392082433387, 0.1863870715190471, 0.1901047269641406, 0.2025401024210981, 0.16732382984782923, 0.11421346512547903, 0.1261880809559618, 0.10307868368501405, 0.08352983221496046, 0.11296727532238215, 0.12448818573034826, 0.7118873318503816, 0.1544228951277411, 0.20555560025756936, 0.1675172437740592, 0.07299164051280227, 0.586747661952554, 0.18413726728425617, 0.22969178821076996, 0.19764476525447994, 0.23295419292428965, 0.20493612095327718, 0.21331954230501482, 0.19444223474270705, 0.2922056834020723, 0.2676262131960455, 0.0733585555217936, 0.04600785249578199, 0.06228251064122836, 0.04204790392559932, 0.03955564924575705, 0.051497576703990466, 0.04625079233746887, 0.01950421754767917, 0.039665502457074786]}, "mutation_prompt": null}
{"id": "fec2f6ee-81e8-4a96-91bc-afaf427d14b9", "solution": "import numpy as np\n\nclass HybridPSODEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.w = 0.7\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "HybridPSODEAlgorithm", "description": "Employing a Hybrid Particle Swarm Optimization with Differential Evolution strategy to enhance exploration and exploitation balance.", "configspace": "", "generation": 30, "fitness": 0.30326582129239793, "feedback": "The algorithm HybridPSODEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "727f6be7-69ba-4bbc-9f24-a428f57f38fb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "7021335a-786d-4494-92cf-dbfd85b941f9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "65ebf6fb-811e-4de5-a0ee-76ae1e105410", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "bfaf3edd-f6a0-4162-9fcc-76a28f10c3e7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        self.pop_size = 10  # Dynamic population size\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n                    \n            # Adapt population size dynamically based on performance\n            best_fitness_idx = np.argmin(fitness)\n            if np.random.rand() < 0.1:  # Adjust population size with a 10% probability\n                self.pop_size = min(50, int(self.pop_size * (1 + np.random.normal(0, 0.1))))\n                pop = np.vstack((pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))))\n                fitness = np.concatenate((fitness, [func(pop[i]) for i in range(len(pop) - self.pop_size)]))\n        return pop[best_fitness_idx]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Introducing a dynamic population size adaptation mechanism to adjust the number of individuals based on performance.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "d172532a-98f3-465b-b31d-212284424d66", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "d2fe069e-5bc8-4e19-8e73-2758a8ec5d1b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "f255f2b4-cd01-4d5b-a1d6-45b214a0450e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                # New adaptive strategy based on fitness comparison\n                best_idx = np.argmin(fitness)\n                worst_idx = np.argmax(fitness)\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.choice(range(self.dim)):\n                        mutant[j] = pop[best_idx][j] + self.f * (pop[best_idx][j] - pop[worst_idx][j]) + np.random.normal(0, self.sigma)\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Improving mutation strategy by incorporating a novel adaptive mechanism based on individual fitness comparison.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutant' is not defined\").", "error": "NameError(\"name 'mutant' is not defined\")", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "57630d9a-e7d3-440a-8ad3-a36ab5914d77", "solution": "import numpy as np\n\nclass DynamicPopulationSizeDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.initial_pop_size = self.pop_size\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n            if np.random.rand() < 0.1 and self.pop_size > 5:  # Reduce population size dynamically\n                self.pop_size -= 1\n            elif np.random.rand() < 0.1 and self.pop_size < self.initial_pop_size + 5:  # Increase population size dynamically\n                self.pop_size += 1\n        return pop[np.argmin(fitness)]", "name": "DynamicPopulationSizeDEAlgorithm", "description": "Utilizing a dynamic population size adaptation strategy to enhance diversity and convergence speed.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "8f01ee5c-76ce-42e5-827e-40d8079e891f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "a95484b0-a068-4ea5-992e-d53eedcb696e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "27a1a6a8-9882-4259-8696-851c96cbb570", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "b845561c-49fb-41b2-b862-4c5e0e27b8a7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def crowding_selection(self, pop, fitness, candidate, candidate_fitness):\n        idx = np.argmax(fitness)\n        if candidate_fitness < fitness[idx]:\n            pop[idx] = candidate\n            fitness[idx] = candidate_fitness\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                \n                mutant_fitness = func(mutant)\n                self.crowding_selection(pop, fitness, mutant, mutant_fitness)\n\n        return pop[np.argmin(fitness)]\n", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Improving diversity maintenance by incorporating a crowding-based selection mechanism to promote exploration and prevent premature convergence.", "configspace": "", "generation": 42, "fitness": 0.24243893437569414, "feedback": "The algorithm EnhancedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7547353128070969, 0.7750672286305288, 0.7819133435431646, 0.7684416240080555, 0.7825015620108675, 0.6943867436726597, 0.7812880271194625, 0.7647494020459523, 0.7027612198151973, 0.4093957177223583, 0.13482147615070916, 0.2633013584552325, 0.22496752426321087, 0.19705172908822322, 0.24144148315977076, 0.041148398373380024, 0.1801314271218467, 0.2855096942360539, 0.07604250778264487, 0.056961435126081206, 0.1212676004499934, 0.11340956391127455, 0.11805760016145983, 0.14961958105722128, 0.10314490553098188, 0.06493649346627794, 0.09199867793811789, 0.13856213812303564, 0.003993917617861942, 0.08869850328757334, 0.09923751249722879, 0.03720478927227211, 0.039122294240666045, 0.07242178080653117, 0.06167556540288466, 0.02588820266752212, 0.9615126616902796, 0.8731999574074452, 0.9006209102976239, 0.921238519030071, 0.9356754386456833, 0.8989449167821255, 0.8502118675787973, 0.9588517703423826, 0.818784533794618, 0.55438819765361, 0.47255704619557515, 0.5098738142788893, 0.4832025099161046, 0.5408529346788422, 0.46591306659077014, 0.5066231714775388, 0.49522049226317455, 0.3872510255804015, 0.22972040521043824, 0.0843734977709244, 0.09769439744516473, 0.22427045374524646, 0.15635263163643975, 0.39977891692914613, 0.07731404460974955, 0.10051451893203978, 0.176843371933609, 0.041581522140399785, 0.13105459134059816, 0.19581568588606157, 0.18714621770603446, 0.21255003795490712, 0.2067058109724127, 0.1952099452273116, 0.13370070320674698, 0.18380164166850932, 0.21838605873663086, 0.18933970659182175, 0.22794077547637315, 0.2184141256582358, 0.12176230239332941, 0.18257382368952302, 0.30455072499687597, 0.14676553887758037, 0.19850289393271792, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024886819480847144, 0.16389271990451093, 9.999999999998899e-05, 0.05156657554276167, 0.004034807134415286, 0.0008168569515172308, 0.0006578980278767466, 0.09337113608943293, 0.07388585241085599, 0.09916039094791684, 0.0706366653745919, 0.035983055769632344, 0.030036457292599517, 0.21447273734267636, 0.02581007458818163, 0.1863488605155471, 0.1439215571786221, 0.09662364890502084, 0.15458764500229627, 0.10095230660809595, 0.19392099859112144, 0.07271645540361382, 0.06690196112306801, 0.0729660256692457, 0.07822055690910346, 0.0364861444925173, 0.09569590271147899, 0.17408973979079934, 0.10649695650097035, 0.14633730887285945, 0.18110913779958537, 0.12066016643609223, 0.1627926253466776, 0.057880886862642034, 0.5840777128380719, 0.503361477701824, 0.5064835176401787, 0.5023951681409409, 0.5587906987999107, 0.4926154140877259, 0.5439540017271836, 0.5355339212937322, 0.579590549018177, 0.05760825026292882, 0.037438088395637004, 0.034290123432084485, 0.14930156159137586, 0.13832723920779866, 0.08783305658487539, 0.06537249860472916, 0.12078588174485172, 0.09071881920272484, 0.20442803317190605, 0.1983891659441368, 0.2131956506603594, 0.4078743311855173, 0.13668892558625467, 0.17060712400026823, 0.21777400538402458, 0.13483090543852527, 0.13586412631310907, 0.15084796411362333, 0.20472699555776452, 0.18332212666580294, 0.21842889380717, 0.2919068174529498, 0.22448316497223963, 0.2238304861107837, 0.17675119803662276, 0.12243171442678136, 0.12212628552043969, 0.3119996777054468, 0.10540878954508714, 0.27052220975821695, 0.3028952151683959, 0.1068844359215505, 0.1319600529495738, 0.17711761689849248, 0.0777842445759841, 0.19285548013561382, 0.17733188091166063, 0.24576187660071003, 0.2723372908041629, 0.24133331154343196, 0.22946349465440286, 0.26752156605754995, 0.2903814579680336, 0.24141860301664597, 0.18865839050446964, 0.2001353532927166, 0.16733335864122512, 0.20190135529724762, 0.24134965023670807, 0.1753763291924999, 0.2197209347364053, 0.21420645432489394, 0.16179175861449258, 0.18952966026347673, 0.18775684149222016, 0.18925452377418983, 0.1740918549192757, 0.20232873425864395, 0.1726696302142181, 0.9273017134951498, 0.12687334070253853, 0.15428647193855172, 0.15441289993992524, 0.5993596971134034, 0.1258594523572658, 0.08325730644211748, 0.169916535312843, 0.20225104555165052, 0.16972618237955595, 0.15707861799397083, 0.09499923742080141, 0.219191318426739, 0.23969069352201966, 0.19855330689349693, 0.24700378449645677, 0.264868195856208, 0.1988694215254594, 0.2277919476129049, 0.2597891302040771, 0.25687063510409724, 0.11047430094895228, 0.10581240805085168, 0.057821014166297924, 0.06073873689531373, 0.13429637405252526, 0.05471411200375864, 0.05074926892556775, 0.05824918007539914, 0.06066925266080092]}, "mutation_prompt": null}
{"id": "15bf3472-6809-4975-b160-54966cfaf67f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "0027d1d3-3e1e-43d8-ad32-149f437f1860", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "6226b0a8-f124-4292-bc88-d8456ce7c017", "solution": "import numpy as np\n\nclass ModifiedCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.pa = 0.25  # Discovery rate\n        self.alpha = 0.1  # Step size scaling factor\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def __call__(self, func):\n        nest = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in nest])\n\n        for _ in range(self.budget):\n            new_nest = np.copy(nest)\n\n            # Generate new solutions\n            step_size = self.alpha * self.levy_flight()\n            new_nest += step_size\n\n            # Evaluate new solutions\n            new_fitness = np.array([func(ind) for ind in new_nest])\n\n            # Replace the old solutions with new ones if better\n            replace_idxs = new_fitness < fitness\n            nest[replace_idxs] = new_nest[replace_idxs]\n            fitness[replace_idxs] = new_fitness[replace_idxs]\n\n            # Abandon a fraction of worst solutions and replace them with new random solutions\n            replace_nests = np.random.rand(self.population_size, self.dim) < self.pa\n            new_nests = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            nest[replace_nests] = new_nests[replace_nests]\n            fitness[replace_nests] = np.array([func(ind) for ind in new_nests])\n\n        return nest[np.argmin(fitness)]", "name": "ModifiedCuckooSearch", "description": "Implementing a Modified Cuckoo Search Algorithm with Lévy Flight steps for enhanced global exploration capability.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "83bad936-a071-4a0c-a372-8a0084deee02", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "bfc327dd-38ad-4638-8798-b62457cda212", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "d970087e-8de7-4432-ba31-e19a06a2b213", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "59f77669-6bd9-473e-a866-ead47eedec0b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "5978c1b2-1241-40b1-858e-0a6991b0d9d0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                # Polynomial Mutation Operator\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr:\n                        eta = 20  # Parameter for polynomial mutation\n                        u = np.random.rand()\n                        if u <= 0.5:\n                            delta = (2.0 * u) ** (1.0 / (eta + 1)) - 1.0\n                        else:\n                            delta = 1.0 - (2.0 * (1.0 - u)) ** (1.0 / (eta + 1))\n                        mutant[j] += delta * (mutant[j] - pop[i][j])\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Modifying the mutation strategy to incorporate a novel polynomial mutation operator for improved exploration in the Differential Evolution algorithm.", "configspace": "", "generation": 50, "fitness": 0.25684934136804144, "feedback": "The algorithm EnhancedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.635375299071455, 0.631004985040269, 0.6244500475153426, 0.5862773877489574, 0.5931854862662396, 0.5413267394900952, 0.5989590788314585, 0.6212428641154839, 0.5889355133692155, 0.06041339176408078, 0.029975338745369506, 0.035179869311753986, 0.039354695398940875, 9.999999999998899e-05, 0.03483273831500866, 0.0026180984849408784, 0.10861794184153717, 0.0007775759457694376, 0.07845773816970236, 0.1412995255950278, 0.136441911108919, 0.12837308685587723, 0.0879321449634739, 0.1421735756375141, 0.09016831203333298, 0.08813273119005771, 0.12044053879650551, 0.07514766421564256, 0.10513092818136505, 0.1310701128309787, 0.10953337240070216, 0.04907871310763434, 0.06939780318437205, 0.0831551948918785, 0.07424196134362415, 0.03993040728857378, 0.9910700684573596, 0.9345333849090245, 0.8629317767154805, 0.850079281749276, 0.9756962084048584, 0.9056051253853733, 0.7456492435292654, 0.9268713876949581, 0.9029599411419333, 0.4285054770464459, 0.4258074399733829, 0.38519428254669397, 0.40106910961667086, 0.4336406210684296, 0.4117303013962955, 0.4199086254726647, 0.4299987752746107, 0.38382591611379513, 0.3140583016336247, 0.17130027028079653, 0.15533987672273275, 0.19539998853279605, 0.8929240356148203, 0.21064261928205308, 0.09897448806621745, 0.23761767200816963, 0.12928427718731839, 0.20076716879739598, 0.20051076432752357, 0.1802386712185431, 0.23948066389499578, 0.2232426397264936, 0.20184178188870017, 0.2551213410010188, 0.1353947147078799, 0.1352926747418518, 0.2660589706894745, 0.21797412760384882, 0.22998819967332806, 0.22832925630160894, 0.25733209785893374, 0.2485232644377975, 0.24635541011927375, 0.3904769632523514, 0.23165693637292883, 9.999999999998899e-05, 0.049414178490159055, 0.1035136745028602, 0.01749164327194408, 0.06695476889317542, 0.010797850136013087, 9.999999999998899e-05, 0.2266548107490527, 0.06944597261448981, 0.15256849210313428, 0.07615866071783417, 0.2681754213671793, 0.07600653564536863, 0.14193231165897446, 0.10509432295631049, 0.21485537012901723, 0.08965434133819816, 0.08373594365964221, 0.03627713787940523, 0.09590634762110017, 0.05222979558563767, 0.04628284489907508, 0.05424163509092472, 0.09631858633121138, 9.999999999998899e-05, 0.07018878257079308, 0.1075878922520016, 0.09817392715559237, 0.20244595423387413, 0.12545423609295225, 0.09393018983717849, 0.1796818208646508, 0.17380687363080416, 0.1429770406117159, 0.19265169487553946, 0.08330908964535444, 0.4949601514548091, 0.522717159007331, 0.5061800572935531, 0.50071238416711, 0.5441462898486662, 0.48101056091147976, 0.48184591606706395, 0.5226017539486811, 0.4980419982537645, 0.11951067235646606, 0.15817829675907547, 0.055179188287547865, 0.08073680279559958, 0.10120250790754803, 0.10784329542502513, 0.09333927988233992, 0.09140312612975299, 0.1261744436057377, 0.310697026566666, 0.1665458782608239, 0.24407551262949223, 0.17366782546611936, 0.17289117120487918, 0.16407077234607403, 0.16743287450981315, 0.14503062476663675, 0.14707951317109969, 0.2406391767331012, 0.35974461571761707, 0.3422859871921452, 0.35470649471632154, 0.3775321718574767, 0.3791853614652305, 0.23862258467295083, 0.278473558383147, 0.3401207658705603, 0.11411875182354303, 0.19482836854958174, 0.25474973241823196, 0.27444993669674633, 0.31906069977269114, 0.19060613894697687, 0.22127047862683225, 0.30323451596486306, 0.1729270938000551, 0.2283288936630613, 0.21474824344129073, 0.2252454742349359, 0.2005639910783602, 0.22513406853581575, 0.2181486347358752, 0.20181433750507494, 0.3259383354879304, 0.23494286005215337, 0.18076982020761212, 0.18211958691529218, 0.2312758240949816, 0.18995964665218512, 0.196414034237832, 0.1905541508253118, 0.20118159445026595, 0.1907470296829511, 0.20603154809652735, 0.18599764129141938, 0.1895766494575264, 0.18774517253605427, 0.975695574477168, 0.20076871707868038, 0.9118128053715185, 0.8098959670140402, 0.1592823035449703, 0.16673796684905295, 0.6629970828509059, 0.49817064146711443, 0.5958345164870353, 0.7947917006667886, 0.1675135948121289, 0.20164603186560026, 0.533807200456517, 0.15659643872601303, 0.1537893613704282, 0.17605294813123784, 0.19356632698624388, 0.20368064274776732, 0.17636874258071567, 0.210689060871051, 0.1827998134088139, 0.16976014527567473, 0.1760029124182514, 0.18520283557900408, 0.09704865706083088, 0.08998123632670008, 0.08714043108074254, 0.08439386696033302, 0.12181225114352712, 0.11010400673249443, 0.0992435199564039, 0.0949792697868499, 0.09406704909739605]}, "mutation_prompt": null}
{"id": "902ce9f6-1d5c-4f58-8899-5a58897737e5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "17603d3d-954d-42aa-ac26-229ce9ff36e5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "5e00a957-e259-405d-b7cb-c328c9714f10", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n            \n            # Dynamic population adjustment based on best individual\n            best_idx = np.argmin(fitness)\n            worst_idx = np.argmax(fitness)\n            diff = np.linalg.norm(pop[worst_idx] - pop[best_idx])\n            if diff > 0.5:  # Threshold for population adjustment\n                pop[worst_idx] = pop[best_idx] + np.random.normal(0, 0.1, self.dim)\n                fitness[worst_idx] = func(pop[worst_idx])\n\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Introducing a dynamic population size adjustment mechanism based on individual performance to enhance exploration and exploitation in the Differential Evolution algorithm.", "configspace": "", "generation": 53, "fitness": 0.25666264932221705, "feedback": "The algorithm EnhancedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7207362763405308, 0.6244698613283709, 0.6487168401119238, 0.7146001566895952, 0.6468215213523055, 0.5877565549641972, 0.7255620243675218, 0.6742287295520453, 0.6644436301308709, 0.35906387083117064, 0.29873856329088555, 0.23239356695980418, 0.40238349785242444, 0.26426327349849543, 0.28371222951340447, 0.19878943009133543, 0.26610254018554147, 0.1574266116335188, 0.16219079963788607, 0.1808575898921273, 0.11904058902500037, 0.35309039997230995, 0.12786367373620067, 0.14119995727701096, 0.12062323972234013, 0.18477477992014002, 0.09388196000133409, 0.12781293817469597, 0.07394249812921483, 0.11654887259164792, 0.13851952413833934, 0.13991149382625812, 0.10281890418092332, 0.15675411094320113, 0.06705502771847727, 0.06836509379624733, 0.969120594675711, 0.9672012993902392, 0.9681935098905914, 0.9876124433609362, 0.9835931996473815, 0.9008099984291409, 0.9783746791255361, 0.9101255486356694, 0.9128667711105023, 0.4778791185792216, 0.4078556109488428, 0.35829072279500906, 0.4412064377709891, 0.4170891340552193, 0.40059472009144326, 0.45919126533276544, 0.37452760266007734, 0.41193379421973775, 0.21513351354351118, 0.1414826442210655, 0.19362949852874067, 0.39306917907106087, 0.20510797914459633, 0.33336670201747753, 0.127815381923428, 0.061727659904179166, 0.1790700298632626, 0.20979208542725514, 0.18152583433875635, 0.1622053388959377, 0.3048216801188053, 0.309428956893557, 0.1849949014383775, 0.1729074251837157, 0.18693261606024336, 0.18149763310505773, 0.21086373317163243, 0.2774495248799237, 0.17543019478260813, 0.190918721976171, 0.36346932233625473, 0.22675907228267356, 0.18904600368317825, 0.1737021844803407, 0.18940849346937738, 0.0014430300488434966, 0.0064390862479490885, 9.999999999998899e-05, 0.0024804046285021863, 9.999999999998899e-05, 0.035371047488389706, 9.999999999998899e-05, 0.02744579749099796, 9.999999999998899e-05, 0.17354583973490334, 0.04590736361652348, 0.11030760530221362, 0.06905557904476733, 0.021905501816494866, 0.06086808537368238, 0.09234176017187423, 0.2124040625958582, 0.1317229248650148, 0.16157990630261287, 0.09466718442625899, 0.09222927009887916, 0.06217483486700581, 0.06814037881966939, 0.062465954964540105, 0.04977818194558581, 0.07483292151355181, 0.10430049581831768, 0.08634321254907174, 0.08438633989421562, 0.11849010667988735, 0.06445158821677865, 0.15855091700281754, 0.1673810551192919, 0.0760557209830911, 0.03570189812693281, 0.037513171299260795, 0.5182194327768632, 0.5431769168585427, 0.5133361801177503, 0.5172804690054755, 0.4977250358311469, 0.47534162877852915, 0.5357479528562358, 0.5082063931103247, 0.46241580149937367, 0.02298167584450239, 0.0857939078075155, 0.036346451295366955, 0.09928105236362939, 0.12029183546110522, 0.08141675880568622, 0.11960554528962553, 0.159324489888915, 0.1022675519222308, 0.41635625349012384, 0.2564253533568428, 0.1900721894820545, 0.2721734169221781, 0.2114196253205448, 0.1754604752168627, 0.2190828619878029, 0.3270484248593306, 0.2099972040142507, 0.22683260612126743, 0.37733102561416954, 0.20475577346109808, 0.20232974012735072, 0.2888397840144519, 0.36705871509872945, 0.2162943180014839, 0.2388557465126837, 0.2536313638861618, 0.1437571239499622, 0.2628885666383166, 0.1574962621225826, 0.3336822111955735, 0.3112348780210644, 0.2526302917682417, 0.23755806786412326, 0.2245173484808739, 0.20908840104140758, 0.2185500767862406, 0.22981024538842998, 0.2283074999557031, 0.22827565313350506, 0.22231380985339677, 0.24657290939375176, 0.20941446091572002, 0.26448880602093516, 0.2386642867069787, 0.1796289454000285, 0.22518208357580805, 0.1979950726128673, 0.2034719528898954, 0.22818843978565373, 0.1864480393149115, 0.20554749654404791, 0.24988238451544353, 0.22799086754606235, 0.15952566058463524, 0.07649698906121793, 0.1897035246367912, 0.1892908880836741, 0.20209069338881847, 0.16809137155318998, 0.1675642941149612, 0.12630203862666856, 0.16342559740599427, 0.5652216426533128, 0.11330440866998948, 0.6796086006033943, 0.15594046918102578, 0.9084814998974733, 0.20852086319816354, 0.47633059861075266, 0.11309808734008331, 0.35465214313630344, 0.1953469866080635, 0.19037906539122462, 0.17094078268648594, 0.20184078327633348, 0.180574034606506, 0.19977703393488533, 0.2140687721129102, 0.19320922314679978, 0.18523445028611663, 0.11371101599091671, 0.09253912323555302, 0.0755428895165382, 0.16171500788393556, 0.105980141956319, 0.06753782331967473, 0.09535474835704716, 0.09509137436922288, 0.10216486786087975]}, "mutation_prompt": null}
{"id": "61c0403f-1259-4bd5-8c79-8c0144e1a973", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "4a893ac0-8a1b-449d-bd79-59f340a12336", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n\n            # Adaptive population size control\n            if np.random.rand() < 0.1 and self.pop_size > 5:\n                self.pop_size -= 1\n            elif np.random.rand() < 0.1 and self.pop_size < 20:\n                self.pop_size += 1\n\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Introducing adaptive population size control to dynamically adjust the number of individuals in the population during the optimization process.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "cddf85ad-2647-4ad3-ab43-757b1f3674cd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "791ba3a0-1002-4793-ac01-773abe7f93e1", "solution": "import numpy as np\n\nclass NovelSOSAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.p = 0.5\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 2, replace=False)\n                x_s1, x_s2 = pop[idxs]\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                symbiont = pop[i] + self.p * (x_s1 - x_s2) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.alpha:\n                        symbiont[j] = pop[i][j]\n                    if np.random.rand() < self.beta:\n                        symbiont[j] = symbiont[j] + np.random.uniform(-1, 1) * np.abs(symbiont[j] - pop[i][j])\n                symbiont_fitness = func(symbiont)\n                if symbiont_fitness < fitness[i]:\n                    pop[i] = symbiont\n                    fitness[i] = symbiont_fitness\n        return pop[np.argmin(fitness)]", "name": "NovelSOSAlgorithm", "description": "Implementing a Novel Symbiotic Organisms Search (SOS) metaheuristic algorithm to improve exploration and exploitation capabilities while maintaining adaptiveness.", "configspace": "", "generation": 57, "fitness": 0.2604255483490925, "feedback": "The algorithm NovelSOSAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.593577798954472, 0.6278825661556364, 0.6061331050746618, 0.5962828764805364, 0.6220822964699726, 0.6032266966181143, 0.6011730963553603, 0.6286156371899547, 0.6250396736153171, 0.2564010457465601, 0.2129732455501926, 0.22231376759764587, 0.21399908372322218, 0.21936363059819863, 0.19142422433585182, 0.2537199910803287, 0.2093514085343372, 0.245374048332351, 0.11897166385483016, 0.14213573282316683, 0.1282291438025004, 0.12673832101579718, 0.11789012690994827, 0.1271637165283973, 0.12891719417997705, 0.14081055261228537, 0.12199910884282594, 0.1053430814123767, 0.11683855440453228, 0.1203389605410271, 0.1196509787247012, 0.12141249102787588, 0.12451967381438112, 0.12326855526984815, 0.11126592026540316, 0.12126394112708494, 0.9905250872092717, 0.9909166852389192, 0.98416038138324, 0.9917842448600317, 0.9857669286102718, 0.9875243057246865, 0.9788024767444236, 0.9905317033710618, 0.9850461504272814, 0.40879877880104687, 0.3840719175823136, 0.40574513667870893, 0.4249071965615384, 0.3903184419394726, 0.4045452311461628, 0.3878312444079741, 0.37388092494934455, 0.40924317512258246, 0.541833617573962, 0.49745474103172205, 0.6650161410730203, 0.6789101939254502, 0.26879244309634664, 0.5640565429909064, 0.6890036105919797, 0.5238343656980335, 0.4863463597370896, 0.2564481580944272, 0.21532332884440897, 0.1873590172373597, 0.192135568899238, 0.16048536594492002, 0.15015145178820477, 0.2551650835011017, 0.19871821209810292, 0.20617851853715574, 0.1724003827879258, 0.15796521514108497, 0.22238644029729726, 0.15930380113274312, 0.21352168188686182, 0.23060824848408545, 0.1533586706350436, 0.23938911078496072, 0.21641323573394589, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0072341254072789685, 0.0044922330679803, 0.002849799033637246, 9.999999999998899e-05, 9.999999999998899e-05, 0.02485037412658042, 0.025380996248117516, 0.05603375713806258, 0.0339114826791983, 0.009976512471564059, 0.019085657579329562, 0.049886496844092854, 0.010032603457648337, 0.01586813619474159, 9.999999999998899e-05, 0.005075473958617627, 0.029272153024138214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008857621132052351, 9.999999999998899e-05, 0.00726694620317303, 0.13985520898237136, 0.13711591218276553, 0.14436812412828115, 0.13396307094947046, 0.14858903514512312, 0.14713261159691393, 0.1287108232864741, 0.13915842991904848, 0.12436021375168693, 0.48583062094692275, 0.48240715692624003, 0.5259944705584814, 0.49899354638508464, 0.48100881241087023, 0.51114243263943, 0.501753345297118, 0.5014116256541302, 0.5103755914449928, 0.12635130277145823, 0.11295511203829356, 0.08654099498896028, 0.08965027910087098, 0.10575802604448159, 0.09891251116949229, 0.09132011760437309, 0.12435621903204663, 0.11553196816269118, 0.11877459672891422, 0.1575396780187337, 0.14978522557241558, 0.1245408782837365, 0.11023542905671713, 0.13983549733574074, 0.10883013716141976, 0.134141752092509, 0.13543041392598043, 0.31739153483787164, 0.32080246101037446, 0.31193912547577074, 0.3122714072534969, 0.32359758516767523, 0.3429469190142821, 0.30965032651377955, 0.3164946302277942, 0.33647215294575505, 0.24501692603490943, 0.23813688892772678, 0.22946207594839374, 0.23923858535435782, 0.21869162257371122, 0.262881686883907, 0.23635281305855083, 0.23329644806035943, 0.2139314012523429, 0.19074656801197687, 0.21300878174571514, 0.19970511773768373, 0.20440424854365657, 0.1832763833048363, 0.19778638648582003, 0.19198806249134548, 0.18058988981635848, 0.2019808902889616, 0.21484554112707377, 0.20289648434469898, 0.2096700377080778, 0.21485500043060313, 0.22068617195512708, 0.22830407736746716, 0.19659461863309735, 0.21933112609330563, 0.1985344317327279, 0.2970035887645035, 0.3151117741264625, 0.26345845963789083, 0.7534331614762045, 0.21601689138443048, 0.7489619019042814, 0.23737997740073202, 0.34649677483011987, 0.1696522835154024, 0.4547843764727739, 0.3034791086226013, 0.48169621442450905, 0.20646455472681258, 0.36401309333444065, 0.25914345282445117, 0.2585713675670841, 0.17491784911594277, 0.4456309217878567, 0.16572976684441887, 0.17134599819321816, 0.18082185003492313, 0.1796926959463575, 0.18667657566456608, 0.17387258682424167, 0.18315725041064923, 0.17776861283357415, 0.1941081567374725, 0.08643106001263545, 0.10142391799832873, 0.09569404969942974, 0.07852665765675337, 0.0771481133698304, 0.07953069599584506, 0.07740189008067322, 0.06946818498412721, 0.09263925210500379]}, "mutation_prompt": null}
{"id": "b74a7d24-2cdc-4852-be1a-030bc54d21c9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def crowding_distance(self, fitness):\n        sorted_fitness_idx = np.argsort(fitness)\n        crowding_dist = np.zeros_like(fitness, dtype=np.float64)\n        crowding_dist[sorted_fitness_idx[0]] = crowding_dist[sorted_fitness_idx[-1]] = np.inf\n        for i in range(1, len(fitness) - 1):\n            crowding_dist[sorted_fitness_idx[i]] += fitness[sorted_fitness_idx[i+1]] - fitness[sorted_fitness_idx[i-1]]\n        return crowding_dist\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            crowding_dist = self.crowding_distance(fitness)\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False, p=crowding_dist/crowding_dist.sum())\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Improving diversity maintenance by incorporating crowding distance in selecting individuals for mutation.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities contain NaN').", "error": "ValueError('probabilities contain NaN')", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "ce822419-bd37-4966-abed-cfa4074cdf7e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "1aa27b6e-13b7-4510-b754-bb808b5b0868", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "54022c6b-8a3d-4545-ac92-a7609aedfa4b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "4d0075e1-b4f3-4b1e-97f3-719cd21d1fd0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "6b1ed795-19a8-4db1-8906-a0e7bda20b0e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "1660392d-b1bd-4e50-befd-9d06af3a0bb8", "solution": "import numpy as np\n\nclass HybridDEPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n                    \n                # PSO Update\n                p_best = pop[np.argmin(fitness)]\n                for j in range(self.dim):\n                    velocity = self.w * pop[i][j] + self.c1 * np.random.rand() * (p_best[j] - pop[i][j]) + self.c2 * np.random.rand() * (pop[i][j] - mutant[j])\n                    pop[i][j] = pop[i][j] + velocity\n        return pop[np.argmin(fitness)]", "name": "HybridDEPSOAlgorithm", "description": "Implementing a hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for enhanced exploration-exploitation balance and convergence speed.", "configspace": "", "generation": 64, "fitness": 0.07680121920602465, "feedback": "The algorithm HybridDEPSOAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.19.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.1257488510343242, 0.07553514615084589, 0.09946319930877001, 0.0854854232864829, 0.05267361210777377, 0.06549629498672804, 0.06183996542346526, 0.0758493027320728, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00823200657634282, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.005879312554401106, 0.025262552727539744, 0.018248263482334326, 0.009738948805627867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9958322235090072, 0.9481083883714163, 0.9958545112652277, 0.9955239081546701, 0.994862345207476, 0.9975150990705279, 0.9824743547091186, 0.9953576338003154, 0.9701387067754639, 0.020459154810587243, 9.999999999998899e-05, 0.018985171063227946, 0.014940170609274217, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.009413446960830019, 0.02188235425815488, 9.999999999998899e-05, 0.04096113602499751, 0.026279303607937843, 0.000530599922100361, 0.05537954023795033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13405071134615942, 0.152082248677194, 0.14838054695461433, 0.10703368926411061, 0.11208222598572715, 0.10107328584130937, 0.13876702466773183, 0.10162892580813387, 0.14937846920742048, 0.014854096826068641, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.0176683638746874, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.06735693451091307, 0.05468846648487902, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.07150422653751698, 0.06503675502320672, 0.07726393575557644, 0.09752069367331806, 0.0962505644704219, 0.1130072939254243, 0.12145746258702039, 0.10273279305590044, 0.09071940872613249, 0.1439059033590343, 0.1001363042967901, 0.11139395136337604, 0.033618759587151326, 0.030850512655025697, 0.04198467779242021, 0.047158759119996674, 0.0654717867036263, 0.057353795287977793, 0.05859040223613099, 0.038530072755655564, 0.05772473155384927, 0.11996995286079837, 0.07770072098324077, 0.11148941726486405, 0.1060101488332359, 0.06747178230817008, 0.0998304420712175, 0.12245976138762271, 0.0719602538770161, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06379047500539692, 0.0810935755512231, 0.07959022621492218, 0.07753960126167403, 0.1207914665021157, 0.06625395130586098, 0.09928684887399308, 0.05908224526569106, 0.053674301379695866, 0.06634083879742847, 0.07010612066990796, 0.019841204127316048, 0.050719354371812964, 0.022702616850278745, 0.045511073114331335, 0.024309312960224982, 0.020449902494102612, 0.04143420019681854, 0.10096019244302157, 0.12017502569002791, 0.14763022729669195, 0.12740574769592772, 0.1444700989635398, 0.13560734219670323, 0.11888515098474328, 0.10862764757569365, 0.14689007985489466, 0.02680298475341336, 0.012204213037243616, 0.031393493129599714, 0.012059295073133636, 0.006562245835943781, 0.024222785237143163, 0.03302582502113871, 0.0070810947997973495, 0.019878254625382064]}, "mutation_prompt": null}
{"id": "406a1eac-28ba-4dca-a32c-1a69964845d3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "f2040c46-0ad1-4970-b783-b0c3f6b5684d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "2a228e2f-4564-4571-a98d-08cb1603dec1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.sigma_factor = 0.1\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.cr_factor = 0.1\n        self.f_min = 0.1\n        self.f_max = 0.9\n        self.f_factor = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.clip(np.random.normal(self.f, self.f_factor), self.f_min, self.f_max)  # Adaptive F\n                self.cr = np.clip(np.random.normal(self.cr, self.cr_factor), self.cr_min, self.cr_max)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(self.sigma_factor * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Introducing a self-adaptive strategy to dynamically adjust control parameters based on individual performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedAdaptiveNovelDEAlgorithm' object has no attribute 'f'\").", "error": "AttributeError(\"'EnhancedAdaptiveNovelDEAlgorithm' object has no attribute 'f'\")", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "cf92352d-5c96-49e5-922a-41cb434932a6", "solution": "import numpy as np\n\nclass ImprovedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 5, replace=False)  # Increased diversity\n                x_r1, x_r2, x_r3, x_r4, x_r5 = pop[idxs]  # Adapted to 5 random vectors\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + self.f * (x_r4 - x_r5) + np.random.normal(0, self.sigma, self.dim)  # Enhanced mutation\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "ImprovedAdaptiveNovelDEAlgorithm", "description": "Improving diversity maintenance through dynamic population restructuring based on fitness diversity.", "configspace": "", "generation": 68, "fitness": 0.3004409587874381, "feedback": "The algorithm ImprovedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7246849746330989, 0.7100661236070305, 0.6663539682246392, 0.7059493762065999, 0.6859222342819691, 0.6574590628994769, 0.6942618515009376, 0.6990288344473166, 0.6646158822503537, 0.29586101277635657, 0.32392383484018006, 0.327258249849088, 0.353929740010822, 0.33970755498481153, 0.30825613602594304, 0.3290660519321267, 0.31694967039889144, 0.32411733072565896, 0.22959857026147945, 0.1999749520240366, 0.21050995099293823, 0.2421297291140736, 0.250724844939357, 0.22469485073571382, 0.2156706058751292, 0.17863659631421958, 0.22988396322058346, 0.1811311400378547, 0.2440148042579009, 0.15245187137794547, 0.15966659524561166, 0.14397107967061862, 0.15146669537507518, 0.15594701343705508, 0.15453145273230506, 0.14334368689374, 0.9937717925831225, 0.978924188717209, 0.9834646788670075, 0.9852455942042584, 0.9946734275342677, 0.9831795915151965, 0.9855013610333834, 0.9880107504794127, 0.9804395933515541, 0.4234639917157892, 0.4451704451632017, 0.4063132122770923, 0.46832562223468077, 0.44948481564235965, 0.43826765843196647, 0.4565221902550537, 0.4311796223111377, 0.40453110126137437, 0.7944623752033632, 0.7757756015383459, 0.7178298110088641, 0.8118116518367483, 0.6059135585568776, 0.9041446363552662, 0.7234209602026276, 0.812377395315608, 0.7839690246862184, 0.2506237108805933, 0.21493318315687449, 0.1793528384083376, 0.2662174514963188, 0.19391128451452744, 0.22519260920644812, 0.232595055756886, 0.19231893090275298, 0.19018718451059358, 0.21347913842363642, 0.20684865063555757, 0.1859009340321912, 0.214580314491302, 0.20702552083815084, 0.17727870884046604, 0.20802614753234927, 0.18594641388623767, 0.2017118367504227, 0.10834423596148535, 0.026561425387726545, 0.01364154178436261, 0.06956372031373026, 0.11928645005186844, 0.04835772834105845, 0.0737773395124488, 0.03191465364584223, 0.07459547683266665, 0.1321804326346777, 0.12704967033920234, 0.11505106673077259, 0.11976919795946617, 0.0942732938213634, 0.08805949357130571, 0.16498291142206634, 0.11133687743064236, 0.13778163201961602, 0.06313900600049638, 0.032230185963011304, 0.031791664655897334, 0.027052565254767957, 0.0416083934531194, 0.01010088623829164, 0.004784364504266003, 0.060487831232116096, 0.045460647580666924, 0.16546589713450244, 0.17812529009902045, 0.1696138185644519, 0.18920543120017697, 0.1951445178349429, 0.18155571261516135, 0.15912365231589942, 0.1834676009466325, 0.1584824056059735, 0.5201882148497754, 0.5593829569379899, 0.5024145678140687, 0.5242052179370631, 0.5151145753903127, 0.5002740484836163, 0.5610675721430283, 0.5156354671290688, 0.5219143381543736, 0.12392242530527053, 0.12364994675178465, 0.11555642114831077, 0.11733886269652427, 0.12223987597872743, 0.12368446467162342, 0.13126460089640968, 0.09325446619518385, 0.10937793193118905, 0.15873892086436303, 0.20200377356484533, 0.18078371302700003, 0.17101865865576638, 0.1707775668061613, 0.17732054618735316, 0.1585874104331082, 0.14636497978604968, 0.13607324363022766, 0.3333630011692822, 0.327548157983493, 0.3316371035710438, 0.34349110249004056, 0.33003244225978445, 0.3663342302359268, 0.34671805466032224, 0.3174374254690623, 0.3435413131398778, 0.2830384901495392, 0.2607953444642088, 0.2019531693514458, 0.24583833979669378, 0.25820101128319184, 0.24853956298058677, 0.25243588446941423, 0.23677765919936578, 0.2208046589279814, 0.2103622852373297, 0.2313290953320687, 0.22095246151115389, 0.2709290427714546, 0.21428324808231924, 0.21022482794658803, 0.2136313963850377, 0.2081564819163071, 0.21922000814594267, 0.26029212675144364, 0.20341321028627812, 0.21674832361820517, 0.21131114713193588, 0.24977545873357043, 0.19279024135975809, 0.23347350029753056, 0.2850841035412909, 0.19106118183344412, 0.1853287469762035, 0.1778647146430441, 0.23270700177700954, 0.6316799957070347, 0.18810266175761914, 0.1757074519785321, 0.3239439894230136, 0.40603342107402307, 0.5409425432155212, 0.7462060283158134, 0.30789677172756225, 0.20509666792864867, 0.31078201309750286, 0.3679685967874258, 0.2088571819213949, 0.3918691089627687, 0.5634979268999982, 0.20490009347553106, 0.20383712337060778, 0.178069553409529, 0.19115143755913255, 0.23400386645339377, 0.193548331333651, 0.1812786195341538, 0.18188366958920366, 0.18017703237727634, 0.1811511784407378, 0.09609524630520905, 0.09261910781670846, 0.08886717693149004, 0.09623056296511678, 0.08877233751805746, 0.07848169551352913, 0.10350898754878435, 0.07640717283131215, 0.08466734546170429]}, "mutation_prompt": null}
{"id": "1aa189c8-ba3e-41eb-be5e-01f3e10662d3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "da4816c0-f204-465c-bd47-25f8bf7f03ba", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "83e3aebd-b6fc-4c9b-a74b-9863fb39590a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "21210386-c2d4-4b10-ba1a-e8f7ea531d3b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10  # Initial population size\n        self.pop_size_min = 5  # Minimum population size\n        self.pop_size_max = 20  # Maximum population size\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n            # Adapt population size based on diversity\n            if np.std(pop) < 0.1 and self.pop_size > self.pop_size_min:\n                self.pop_size -= 1\n            elif np.std(pop) > 0.2 and self.pop_size < self.pop_size_max:\n                self.pop_size += 1\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Introducing a dynamic population size adaptation mechanism to enhance population diversity and exploration capability.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "defa5259-7bf0-4fe0-9ed1-33285ef4fde4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "38267c33-4e4e-4606-a846-0f2bc5c375c8", "solution": "import numpy as np\n\nclass DynamicPopulationSizeAdaptationDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.initial_pop_size = self.pop_size\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n\n            # Dynamic Population Size Adaptation\n            if np.random.rand() < 0.1 and self.pop_size > 2:\n                self.pop_size -= 1\n            elif np.random.rand() < 0.1 and self.pop_size < self.initial_pop_size * 2:\n                self.pop_size += 1\n                \n        return pop[np.argmin(fitness)]", "name": "DynamicPopulationSizeAdaptationDEAlgorithm", "description": "Enhancing the algorithm by incorporating a dynamic population size adaptation mechanism to improve exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "f2024d87-66d6-4a49-ba55-dd262ca251f1", "solution": "import numpy as np\n\nclass HybridDEPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.w = 0.5\n        self.w_min = 0.1\n        self.w_max = 0.9\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.w = np.clip(self.w * np.exp(-0.1 * np.random.randn()), self.w_min, self.w_max)  # Adaptive Inertia Weight\n                self.c1 = np.random.uniform(0, 2.0)  # Random cognitive component\n                self.c2 = np.random.uniform(0, 2.0)  # Random social component\n\n                mutant = pop[i] + self.c1 * np.random.uniform(0, 1, self.dim) * (x_r1 - pop[i]) + self.c2 * np.random.uniform(0, 1, self.dim) * (x_r2 - x_r3)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "HybridDEPSOAlgorithm", "description": "Implementing a hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for enhanced exploration and exploitation.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'HybridDEPSOAlgorithm' object has no attribute 'cr'\").", "error": "AttributeError(\"'HybridDEPSOAlgorithm' object has no attribute 'cr'\")", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "142cbf82-296d-48df-8579-6cfd876a6499", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLevyDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def levy_flight(self, beta=1.5):\n        num = np.random.normal(0, 1, size=self.dim)\n        den = np.sqrt(np.abs(np.random.normal(0, 1, size=self.dim)))\n        step = 0.01 * (num / den) * beta\n        return step\n        \n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                \n                levy_step = self.levy_flight()\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + levy_step\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveLevyDEAlgorithm", "description": "Introducing a novel levy flight step to enhance exploration capability and escape local optima.", "configspace": "", "generation": 76, "fitness": 0.2930579598720591, "feedback": "The algorithm EnhancedAdaptiveLevyDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7123730836663993, 0.717284168502953, 0.6835103055961365, 0.699594797842649, 0.7143060333434785, 0.7046102147792399, 0.7468202076661725, 0.7489239450738049, 0.7035652033041084, 0.3588750567452361, 0.34454893467015646, 0.35046289035148015, 0.34363251800480576, 0.38609632791398885, 0.3502840521823446, 0.3723687722282292, 0.4588031291798973, 0.3862813959723781, 0.17451852772431498, 0.18679066162845015, 0.32606402550562696, 0.25493030840897457, 0.17947185512595065, 0.3058374893806528, 0.2628084370581151, 0.18241832961675075, 0.18544749041371777, 0.17944971150554556, 0.1386375973509132, 0.13315435881882953, 0.1692002508176551, 0.15156528342853615, 0.1497668587595936, 0.1690522702541597, 0.14751541424994918, 0.11457997362511396, 0.9808244015291901, 0.9311148035553506, 0.9010674589548429, 0.9666505164812944, 0.9680047397170901, 0.9600945135661242, 0.9525567608080504, 0.9624908636376279, 0.9750620686216627, 0.47955012625709337, 0.4079720815386758, 0.3099416310564743, 0.4194657951289088, 0.4933138847025863, 0.44269652257235104, 0.42987598851226894, 0.43498440204565736, 0.3530139589442458, 0.8915291227882238, 0.21290145695550278, 0.8610146683789552, 0.7653910164237154, 0.1944750017112863, 0.9118067176891297, 0.1569809296756699, 0.18489540873185506, 0.7869956452625477, 0.13427445355493706, 0.18154222527123032, 0.18702192416134944, 0.18239955284610188, 0.18291519188950445, 0.3775655596957931, 0.30612183227526313, 0.13442059514706528, 0.20997477786021257, 0.2050614710098817, 0.1414617414974244, 0.20350146002812675, 0.16695936803126732, 0.1991545254859779, 0.19988917450697707, 0.21283188745180204, 0.19762300716122272, 0.2118549804315547, 0.06937576261241885, 9.999999999998899e-05, 0.10591185633165934, 9.999999999998899e-05, 0.04916419054265808, 0.05948775100233539, 0.05828605693894007, 9.999999999998899e-05, 0.032113516728529246, 0.17815239609515643, 0.13145528323965483, 0.11127705285751277, 0.09567529582913226, 0.0939305634307448, 0.15743922085790307, 0.17637001678008513, 0.23375863512741635, 0.1477956306551017, 0.09998611230820376, 0.10511164003637419, 0.16173664313044067, 0.09881523952347193, 0.15424366130312606, 0.07160263729894345, 0.04785189012194657, 0.20117555491370098, 0.10744570586967062, 0.17492666420748704, 0.21251994935223628, 0.206385744928671, 0.08199935751867049, 0.22276916454182105, 0.06250893580636874, 0.1546753120246278, 0.13929459173407288, 0.1383525908699963, 0.5497378509913329, 0.561396504929182, 0.5323782073319974, 0.54802247183667, 0.5328238492966249, 0.49562498220035833, 0.5139152057808825, 0.5468774652917465, 0.5415704444408243, 0.12502875789508927, 0.10077649876828887, 0.08657878921915341, 0.136056703707793, 0.14589289301038066, 0.10010721296303404, 0.204484969087662, 0.10163542824184735, 0.08261886788619244, 0.17840867889201384, 0.17752531379497027, 0.15747028973330912, 0.1544962886285599, 0.1800801484914657, 0.19380945630163882, 0.1550903778963666, 0.16437004649167608, 0.2138150857142317, 0.23447463460102802, 0.30418197706412886, 0.28444492879842587, 0.407777349038713, 0.38105978114925265, 0.39136720256513724, 0.3728526322865723, 0.35540912074791364, 0.35349362368660253, 0.2812465546083387, 0.25870334391654537, 0.24757458927282927, 0.3185096665467191, 0.2609951991791949, 0.25697173185921984, 0.19377744644172334, 0.2080026210463325, 0.20926981099565034, 0.21752126362781132, 0.25757565197108667, 0.22659159553379404, 0.20938230181196704, 0.2175870752385971, 0.22793700597179434, 0.24910874304649755, 0.19952056085623293, 0.2492428013570016, 0.1993602079845097, 0.25078968465897145, 0.24255361874871773, 0.28845176352108715, 0.20438095888207142, 0.2311565298901973, 0.21126222788294002, 0.23844974281186726, 0.2033971598290959, 0.1751745320152246, 0.19289641473914187, 0.2588835510837867, 0.17344857500596267, 0.5169341165806731, 0.16936525732067387, 0.32796110409413315, 0.30618961793797406, 0.17528400589989557, 0.4381736019364565, 0.45226716069232376, 0.6582033476078246, 0.2843590185118451, 0.20302746862867382, 0.20722734529127995, 0.4567460588175286, 0.18626586218572516, 0.39215402450768055, 0.1895110479882468, 0.17906201001117972, 0.1806132993909899, 0.1761082456662596, 0.18071091815060358, 0.1799347715634222, 0.18580689674959205, 0.18573155127600183, 0.19414836759799858, 0.10523314291192487, 0.09369803071590777, 0.10529750274247818, 0.08793626580870584, 0.09308419333218076, 0.11202262816901876, 0.07831436644431977, 0.09150753418230884, 0.0775748817875157]}, "mutation_prompt": null}
{"id": "3e72bdb9-02fa-49b8-a80d-12682a94f6de", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "ff56fa47-aa09-4501-a4d6-16dc07586755", "solution": "import numpy as np\n\nclass DynamicAdaptivePopulationDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.diversity_threshold = 0.5\n        self.min_pop_size = 5\n        self.max_pop_size = 20\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            diversity = np.mean(np.std(pop, axis=0))  # Measure population diversity\n            if diversity < self.diversity_threshold and self.pop_size < self.max_pop_size:\n                self.pop_size += 1\n            elif diversity > self.diversity_threshold and self.pop_size > self.min_pop_size:\n                self.pop_size -= 1\n                \n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "DynamicAdaptivePopulationDEAlgorithm", "description": "Introducing a dynamic population size adaptation mechanism based on fitness diversity to enhance exploration capabilities and convergence speed.", "configspace": "", "generation": 78, "fitness": 0.2810667718873432, "feedback": "The algorithm DynamicAdaptivePopulationDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7181834504955709, 0.6935134982012904, 0.7006095973162683, 0.6912669901554429, 0.6755335952734081, 0.7247419324135869, 0.7075849451444103, 0.6876880305318281, 0.7363965495922167, 0.4491153959054053, 0.3362306422578235, 0.3278954067570886, 0.4429990267331074, 0.33908811924809235, 0.34250289363323816, 0.38696530363964876, 0.39846598789399634, 0.34723757969850355, 0.09262702463893291, 0.09991486796970517, 0.09831760628666997, 0.13881528609188276, 0.1835812074471902, 0.3400848687942971, 0.240588813829533, 0.09765731582693937, 0.1026298067535295, 0.10744081878986977, 0.056134337980943694, 0.15515100872087428, 0.17340340872162285, 0.15992102593490654, 0.1089931629584413, 0.07954540956744516, 0.10511447351903846, 0.08826431335975926, 0.9881092393488806, 0.8833295058179998, 0.9428987879459586, 0.9867512062308327, 0.9024233615884708, 0.9566658739223444, 0.9626914731076972, 0.9197141325988315, 0.9434927763378381, 0.5419706466279965, 0.3998333702955935, 0.4716013366095845, 0.47711352655701145, 0.43280453200255786, 0.47954769747190484, 0.4838577416459663, 0.4155367331924622, 0.4470625768963843, 0.22708436802842402, 0.08267213708403087, 0.8899003038007396, 0.2811427467672858, 0.10503449221373518, 0.17309148421108078, 0.1376571295735386, 0.8464283106003159, 0.10708291419536631, 0.1962947066732118, 0.1559678762352672, 0.20380499037171818, 0.11161145760030489, 0.20082037905188566, 0.21763643427222135, 0.16356567781443032, 0.18810455182829322, 0.20640327510276213, 0.22726027672074134, 0.20455068018762368, 0.27104627992908115, 0.208304478604601, 0.16675585859516284, 0.15583285701886995, 0.13233362762585132, 0.16968684253069222, 0.22644823644943468, 9.999999999998899e-05, 0.04333674278840971, 9.999999999998899e-05, 0.00011423992678394335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04956627375577605, 0.0938260794949356, 0.12490195649625457, 0.07745091856562447, 0.039262403328501616, 0.05076022379609946, 0.1493262474302437, 0.18192816947855694, 0.13719918036417234, 0.13642905447633624, 0.024546552952874112, 0.05454371619791276, 0.06839153667877418, 0.04611923330967094, 0.06521320127579389, 0.01636997195485601, 0.09949184623494822, 0.12768593712115384, 0.1374801660463949, 0.14682335471675, 0.1124466272983825, 0.24050585965000193, 0.2116779660035195, 0.08875676386121745, 0.03927215661008354, 0.2081999335275656, 0.08693159542125073, 0.549821093079822, 0.5416615604614572, 0.5137419698806621, 0.5763827026371213, 0.5369725014258191, 0.541155971819212, 0.5338944548454716, 0.5230348105835365, 0.5194571254552889, 0.03340495160422108, 0.08247099640069244, 0.04093859958021129, 0.08655400596218932, 0.10642805628543339, 0.12419955913099512, 0.07157618167857671, 0.09151376577607484, 0.09485411747183858, 0.18345097396993737, 0.1922513667119461, 0.2287841789405386, 0.1923946039207588, 0.16782764923975935, 0.1481274398787289, 0.2043094757398306, 0.2024098170796872, 0.19897600208133737, 0.3429624108114935, 0.38099924967821686, 0.24549669856990175, 0.39058988112161297, 0.37512282239848693, 0.36810123129142347, 0.2239667792355753, 0.3371816046090865, 0.22900432459014652, 0.2780254840215163, 0.2795886287956578, 0.13632625541882137, 0.282004750300607, 0.19675143853387866, 0.3171074982876215, 0.25646573741597767, 0.20944227272695504, 0.23082750867930957, 0.23238619629192048, 0.2154706610438537, 0.17979538946590168, 0.19997888617752013, 0.21506742069370777, 0.22222606382101995, 0.22831649699409118, 0.19760594072017013, 0.21379334569767172, 0.21467064377235878, 0.23713733724707298, 0.2274911926727785, 0.20149626616362826, 0.25052090214425404, 0.2082607009885794, 0.24577636978155482, 0.21447846978408147, 0.22436028414738973, 0.15885701601185243, 0.18757716013329773, 0.8168081766366182, 0.9149530955320702, 0.6788706553136776, 0.9475062042267801, 0.13696759118396618, 0.907174939675454, 0.1594557487563386, 0.5146674524113762, 0.5753605012166623, 0.8947575254650122, 0.2110999855456397, 0.16869481025427158, 0.10526334201826248, 0.40212502495751257, 0.11185166221856413, 0.10494326890278294, 0.19008259441489073, 0.19879061846759905, 0.17986895180272222, 0.1927469082880804, 0.18598373114595723, 0.1887725749850857, 0.16943071546487432, 0.20067484429707105, 0.18167227127691588, 0.1051100021635979, 0.1282656462440367, 0.09073867875700636, 0.06569280469726524, 0.056525002063938845, 0.1151301544617489, 0.11171588363752638, 0.09475826067065862, 0.0767493465016943]}, "mutation_prompt": null}
{"id": "8f986bec-8694-4b39-a214-4fd211c7cfeb", "solution": "import numpy as np\n\nclass HybridDEPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.w = 0.5\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant_de = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                \n                # Particle Swarm Optimization\n                v = self.w * v + self.c1 * np.random.rand() * (pbest - pop[i]) + self.c2 * np.random.rand() * (gbest - pop[i])\n                pop_pso = pop[i] + v\n                \n                mutant = np.where(np.random.rand(self.dim) > self.cr, mutant_de, pop_pso)\n                \n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "HybridDEPSOAlgorithm", "description": "Implementing a hybrid algorithm combining Differential Evolution with Particle Swarm Optimization.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'v' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'v' referenced before assignment\")", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "9aa7c7a5-7d35-4928-94ff-36564f0fa5a2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveImprovedDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.cr = np.random.uniform(self.cr_min, self.cr_max)  # Initialize CR\n        self.f_min = 0.1\n        self.f_max = 0.9\n        self.f = np.random.uniform(self.f_min, self.f_max)  # Initialize F\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.clip(self.f * np.exp(0.1 * np.random.randn()), self.f_min, self.f_max)  # Adaptive F\n                self.cr = np.clip(self.cr * np.exp(0.1 * np.random.randn()), self.cr_min, self.cr_max)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveImprovedDEAlgorithm", "description": "Introducing a self-adaptive strategy to dynamically adjust the mutation and crossover parameters based on population performance.", "configspace": "", "generation": 80, "fitness": 0.28152253328475496, "feedback": "The algorithm EnhancedAdaptiveImprovedDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7131565000685571, 0.6804346688564817, 0.6569512744896989, 0.703146703192979, 0.6518056603470708, 0.6416446959796178, 0.6907616868517199, 0.6506425618194097, 0.6479615402886353, 0.29454360161474247, 0.34596020842914144, 0.33285242015632266, 0.33157984305966925, 0.31389465995903876, 0.2417050602143348, 0.29174226427142647, 0.3415526556104955, 0.1909845198986294, 0.09840422514014224, 0.17722502883788804, 0.08356999067289561, 0.17959959362990108, 0.12573251973742483, 0.27137713972155075, 0.13443821835935654, 0.20310361139091326, 0.12488437375413997, 0.14868851223913082, 0.10514720590511728, 0.09077796370145697, 0.20401260285159817, 0.14556035541393886, 0.1506874816063286, 0.13479702270950766, 0.13564297633183942, 0.12362045951666423, 0.7529550248320307, 0.912532691604551, 0.8040740739598116, 0.7884702015870949, 0.9636361851320286, 0.9006644575795506, 0.7664595814893974, 0.9642185511576216, 0.880529509488982, 0.39236195124552775, 0.3764049812361867, 0.3894836881858188, 0.4685131783642995, 0.3578366039696764, 0.418447073921401, 0.4403494552243843, 0.3905496567500035, 0.3863167706585594, 0.1528980906952676, 0.739536693363781, 0.22508460292043986, 0.26804937924852745, 0.7098144660978438, 0.2793903504894846, 0.23181290993305093, 0.8752611424278046, 0.21820782290694074, 0.24991184272825973, 0.20488508921388637, 0.29448288219960495, 0.14626861903865096, 0.2203712593598819, 0.25050960103979847, 0.12352595936489363, 0.2458687138840785, 0.30849177970180675, 0.16991080583802087, 0.18831183271628427, 0.2034047894705835, 0.34042945520848944, 0.20296217635193725, 0.1435666083326359, 0.18522477176439578, 0.3521213653960765, 0.1814323827822769, 0.009931876428859732, 0.09158143759650628, 0.025120836485053588, 0.007283092271326286, 0.09306284517410945, 0.06595747625659809, 0.023095455071986737, 0.14592695133362543, 0.0848099862045838, 0.1684240319931083, 0.10214149975718989, 0.2039882013479971, 0.07270959256728204, 0.1078870642994807, 0.049035220387621536, 0.12974584481278728, 0.09070662767936832, 0.11308624979992488, 0.058466603704942055, 0.1313087167256246, 0.05174709706515246, 0.10227673445690366, 0.06287782069224979, 0.06718791795505763, 0.10739141635199956, 0.07699871010873194, 0.0713422589036109, 0.1783971220499121, 0.21323121484288599, 0.1622848552832371, 0.18889492125147067, 0.10539731845566092, 0.1618223884820411, 0.02900265331034335, 0.17462352967829808, 0.13534022570837967, 0.4883676590933045, 0.5020831490354772, 0.4953658007300328, 0.4911806330682499, 0.5374757977062572, 0.5279498055307993, 0.5378521566364193, 0.5689966663687516, 0.5219595164789124, 0.08149479780620494, 0.07712283214102167, 0.05366058181296807, 0.09872069655059257, 0.12092904504599022, 0.08461870334041888, 0.12996227122492543, 0.11301701978478251, 0.11580760814334512, 0.15692571360055174, 0.21418444981903528, 0.18677364914416417, 0.15226129637733943, 0.1844391473319268, 0.18133531181718976, 0.18642996518678578, 0.21547203367548484, 0.1931439331558995, 0.3035416706159191, 0.33500358336443636, 0.3260817984658332, 0.3729297810425546, 0.3680467254464723, 0.34392990406943413, 0.25465808842845816, 0.33471784302924945, 0.31415207623573205, 0.2572761265272656, 0.21656114933795723, 0.2821652939242485, 0.26431113086377167, 0.2754802363037062, 0.2699254786336406, 0.18600643680142226, 0.28789316459567516, 0.24591157466287017, 0.24020140077917407, 0.22788722090003843, 0.22447615928844378, 0.2159209953748763, 0.20196018713755515, 0.2944683234425661, 0.2291823568587502, 0.24762671768323152, 0.2401831981571131, 0.19939522070454918, 0.2169151726305215, 0.2056905864259141, 0.2236381383825523, 0.19520276593492558, 0.2070130186987399, 0.2004669354049734, 0.19730660449523496, 0.1758939084153277, 0.18465931742462705, 0.18520904283264572, 0.18741753577352815, 0.7899777079610342, 0.6244014960422034, 0.6426729584804493, 0.69680268836807, 0.17017729339473475, 0.7132951945463867, 0.24432917836559853, 0.7065562228919717, 0.5484727155771234, 0.3313943051145617, 0.20450065693098163, 0.46081444577749064, 0.22521373645677134, 0.6879615048957404, 0.21177367898016342, 0.194592534300559, 0.18182193170103977, 0.19025844857372598, 0.18730456348854063, 0.18912596078098975, 0.18969239627020296, 0.18690078828603462, 0.18160096367565515, 0.1894471065216452, 0.11379034705168911, 0.0832829904664133, 0.09005254478959146, 0.0758614355994407, 0.0887661848591208, 0.11877812861447401, 0.07498975471621416, 0.0839245440853158, 0.08628104225906663]}, "mutation_prompt": null}
{"id": "b03c5751-f1bd-4811-a1fd-b63ad793ed36", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "99542c6a-5b64-4c59-ae41-457f846a0638", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "47e448b0-5984-4266-819a-d5da69401878", "solution": "import numpy as np\n\nclass DynamicAdaptiveDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.mu_f = 0.5\n        self.sigma_f = 0.1\n        self.mu_cr = 0.5\n        self.sigma_cr = 0.1\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n\n                self.f = np.random.normal(self.mu_f, self.sigma_f)\n                self.cr = np.clip(np.random.normal(self.mu_cr, self.sigma_cr), self.cr_min, self.cr_max)\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)\n\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n\n        return pop[np.argmin(fitness)]", "name": "DynamicAdaptiveDEAlgorithm", "description": "Incorporating a dynamic parameter adaptation strategy based on individual performance to enhance convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 83, "fitness": 0.28979848521457374, "feedback": "The algorithm DynamicAdaptiveDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7111143487514588, 0.681322039423598, 0.6763283692924685, 0.6813247510988822, 0.7020540027963673, 0.6208876023244767, 0.6970090545163985, 0.6966739698717026, 0.6503086105508347, 0.34634618494495995, 0.34091415008341774, 0.2964603532526495, 0.3294312424464796, 0.3450951477891112, 0.2948091928492962, 0.33987774221991474, 0.3257365064745348, 0.3357980160469478, 0.22755642059169445, 0.3420349532271698, 0.18583572851521657, 0.1586916258708332, 0.17650199297709002, 0.2786746185185466, 0.13422883863949242, 0.3165107824560808, 0.1729818490222642, 0.1843753573969602, 0.13961359013044772, 0.1457355851614235, 0.1501684273281948, 0.16666144895839718, 0.11858247354573581, 0.15112575910347137, 0.14345264012296388, 0.10918486033199226, 0.9685644487650865, 0.9763062981771001, 0.947038375275172, 0.8961020802545319, 0.9599031378117794, 0.9721226951742847, 0.9315220830131826, 0.95315388260692, 0.9774539037082411, 0.4380929146401473, 0.39253147713716874, 0.43414702620391, 0.4915872006641465, 0.4597553217635161, 0.4219926491249222, 0.43307388124173307, 0.3863130146831797, 0.41589627077887925, 0.7106165385014234, 0.11828010098769615, 0.20951354891954688, 0.772216536188419, 0.7578417950726867, 0.27882458820367817, 0.2023907825215001, 0.7025811178257559, 0.6710929944681734, 0.29543181507313776, 0.194894158098469, 0.2688459135578112, 0.3347423796867959, 0.28416174108476666, 0.14536045637573514, 0.2460340395936954, 0.20262680444769554, 0.2005805360602182, 0.2247297761532706, 0.170983303625175, 0.2601734243958552, 0.27080869878971603, 0.16989284596831844, 0.16996507900515812, 0.21439248214641493, 0.16640419500813097, 0.171681141526007, 0.017325529813620455, 9.999999999998899e-05, 0.020347132390671874, 0.11889359333571337, 0.07543713000633667, 0.04752348948851737, 0.07921469585539143, 0.061661102312258076, 9.999999999998899e-05, 0.11717720487890215, 0.0646501619264398, 0.08003855590307685, 0.08500535259558895, 0.13048401760233697, 0.08855619110118118, 0.14889513629267626, 0.12652476809076507, 0.18707434053995597, 0.08164773220890187, 0.09639681636057451, 0.07227658500683698, 0.03799327969317079, 0.013838083835125858, 0.033742591014114476, 0.08663109542973146, 0.07383935850160617, 0.018222297951486666, 0.09558334863325613, 0.13803594262534602, 0.12697191905409022, 0.15560346786930934, 0.15457190323734904, 0.20158049845403914, 0.15229573739555347, 0.08144774620191764, 0.06774670037793673, 0.5276035941939359, 0.5248762008317467, 0.5142058473019282, 0.5001453979147792, 0.5194327586751154, 0.5221527288683427, 0.5220372125709027, 0.5393437879124059, 0.49948968920177006, 0.14502028407375378, 0.10439095947299415, 0.09348956242206063, 0.14886964965659732, 0.09479153117252803, 0.10340867078723492, 0.13524010498240424, 0.10954869542246948, 0.0956495320029368, 0.17037010515308015, 0.17577529593367358, 0.17036103769151445, 0.17864583413329982, 0.1509762476804266, 0.16108316307666992, 0.1597967629890874, 0.16929317278092781, 0.15843071107204143, 0.3573022899757474, 0.3295592042477008, 0.3684739632627073, 0.39244703299674355, 0.24309546608639798, 0.35842527277865055, 0.34243839072087334, 0.3708347211709948, 0.2376490933245169, 0.2506521146653574, 0.25871910032591394, 0.2836936017785251, 0.2549629445504744, 0.2861639095191617, 0.2625108658440164, 0.20394496866488177, 0.1677323079160551, 0.19601906246336653, 0.2590853871782193, 0.21494629199187865, 0.2386098351688597, 0.2437372276865596, 0.22085063944804384, 0.20797168560096535, 0.24186755640686697, 0.24509195126766958, 0.22965160486081082, 0.2723551362256973, 0.21035715577052028, 0.22292991692669395, 0.2092202332672668, 0.23955213165339528, 0.1866743245167669, 0.2387925244247825, 0.21889745187181797, 0.20669496353463623, 0.17536744097059453, 0.4399407956219993, 0.35440376192189194, 0.8831159231238092, 0.19787473983256332, 0.8994940309094218, 0.684522690314511, 0.1683652748786677, 0.2599160460318828, 0.37019990811923675, 0.2694416628585463, 0.4865759315573548, 0.48793761298529603, 0.20004065324473297, 0.20110888786336611, 0.6096485763882116, 0.31839217497625283, 0.18341853866347646, 0.17755769018831502, 0.18917002173858866, 0.18221675646970847, 0.1936228119089084, 0.18466564794514329, 0.17821430609665645, 0.17958952308269804, 0.18453891305473535, 0.19767123934217357, 0.0913098838590205, 0.09757965290703519, 0.08873724635677083, 0.09307299745108322, 0.08892217441744765, 0.10530843611777818, 0.12375967262416776, 0.09702886303059755, 0.10593825650271937]}, "mutation_prompt": null}
{"id": "bca2d2bd-fc31-4d76-93db-badc42e3ffdd", "solution": "import numpy as np\n\nclass DynamicPopulationSizeDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            pop_size = np.clip(int(10 + 90 * (_ / self.budget)), 5, 50)  # Dynamic Population Size\n            if pop_size != self.pop_size:\n                pop = np.vstack((pop, np.random.uniform(-5.0, 5.0, (pop_size - self.pop_size, self.dim))))\n                fitness = np.append(fitness, [func(ind) for ind in pop[self.pop_size:]])\n                self.pop_size = pop_size\n                \n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "DynamicPopulationSizeDEAlgorithm", "description": "Enhancing the algorithm with dynamic population size adaptation to improve exploration and exploitation.", "configspace": "", "generation": 84, "fitness": 0.29369802572012627, "feedback": "The algorithm DynamicPopulationSizeDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.6577101116485234, 0.6801416914145304, 0.6743021048376348, 0.6641988909569205, 0.7044113311354778, 0.6489364506467475, 0.6810928150781448, 0.6866533935142147, 0.6447699667931608, 0.2933835341535048, 0.3550322726453923, 0.2841964377551697, 0.3181975568315336, 0.3307468909807755, 0.3375029390796136, 0.3175994387175125, 0.3519451764206484, 0.24920907537755788, 0.22498731640426828, 0.2756253526473993, 0.2286222310532482, 0.21072536889302806, 0.18057377676387454, 0.23875448541839328, 0.2933809731378022, 0.22871466230442816, 0.20463450511128034, 0.11652033691155972, 0.10336902154489325, 0.13757734776869224, 0.15595200191329572, 0.10706180185237824, 0.16052785900661637, 0.1427568125599702, 0.15219270032284726, 0.15180828384533762, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.42079817015843146, 0.45434385712333347, 0.41381339112428284, 0.41345174596039924, 0.4475845901544193, 0.4122105668869672, 0.40688205379780273, 0.4044031253725995, 0.39227851956356585, 0.6809326937925113, 0.16598195823865225, 0.583894001736216, 0.7835690805689552, 0.5989021974562166, 0.21525095148760198, 0.23763249518571894, 0.8000197037984913, 0.6695580423346765, 0.13510117575477487, 0.20111527489589465, 0.19034180315744675, 0.23207023398146853, 0.1783007747908263, 0.29011980843412544, 0.2569899831567518, 0.22532778905703, 0.20419239970648173, 0.1640310982958133, 0.19458893782095965, 0.191009199480765, 0.13719693410967926, 0.2008464877463606, 0.19444568883694002, 0.15063595965736398, 0.17147572098588337, 0.20389489898049862, 0.0027984666210746356, 0.089244946396559, 0.04154490133049471, 0.0709766175958162, 0.11286968659473695, 0.019284203802154343, 0.06227959956704454, 0.04108051900144072, 0.07808615190433921, 0.12735687141872853, 0.13721038926062523, 0.16132139603210616, 0.1303927039360827, 0.09390140090742427, 0.10975918199922186, 0.16465034887549568, 0.17063821968818083, 0.23193980723635188, 0.06188586081172709, 0.03962269887464298, 0.03573408125964028, 0.05870610290626299, 0.05566545997874617, 0.05179349418602086, 0.01967236420679197, 0.07497442846958313, 0.0005290334224470339, 0.1684143615948802, 0.22238438757805246, 0.18073105070712592, 0.16828210413634404, 0.22697951853411635, 0.17905529254356534, 0.12235822884726444, 0.12855632867806066, 0.0706707557952222, 0.5150835256724609, 0.5133891707821611, 0.5059184840591175, 0.5152824321506168, 0.5229589671654667, 0.5145018161610401, 0.5260968966908213, 0.5372277043325575, 0.5237354767377189, 0.13348666785460028, 0.1302783584742061, 0.07582384716910817, 0.09939118764958998, 0.10495543166397037, 0.12415131289048764, 0.12442763607043816, 0.13913090430045483, 0.10329682871451173, 0.15336736533989082, 0.1688345264530986, 0.21570863513813132, 0.15624980252502685, 0.17710729815470494, 0.1700600881421389, 0.19345821615623104, 0.15826268580706782, 0.20102386970631236, 0.3489853157320034, 0.3609622116357224, 0.2613361526731195, 0.3006181747023091, 0.352425053435961, 0.36105359379341007, 0.3455544082755455, 0.36550253509535224, 0.23036408061841418, 0.32305128993711474, 0.2738858854502556, 0.2876746644427831, 0.29141017961724724, 0.29798788344332383, 0.2775086244741396, 0.20702565819868446, 0.29868178387272415, 0.29150010484770517, 0.22465769279227632, 0.2009398642290472, 0.2096812505403015, 0.20623013406236035, 0.2555484259128804, 0.21616511730778598, 0.21650339473973268, 0.23652848796688775, 0.19516845542743444, 0.23503674834782462, 0.24403191179297212, 0.2341313988376189, 0.3311687262860292, 0.2707423149896623, 0.2068275666588808, 0.23117951811290927, 0.19461631395577694, 0.22895577064869732, 0.1825266005444227, 0.7592896192492558, 0.19419721933977985, 0.7984258175505194, 0.19350904188742668, 0.40338822908596306, 0.3401063459479011, 0.1681982677753353, 0.7386802129655121, 0.4837533044000891, 0.209636646781315, 0.7195993719378604, 0.4513779075031943, 0.3790310620937525, 0.3846162263503182, 0.5690104226485622, 0.1901476306872325, 0.1955613731670084, 0.18857712016425598, 0.19622392620017348, 0.1811607904653677, 0.17912499993125042, 0.17919237203514526, 0.18456741231543028, 0.18836087947195457, 0.1775230646970014, 0.17948983855533784, 0.09611880747388335, 0.09898884446173106, 0.09539090064155664, 0.09507917798714172, 0.08486029631720193, 0.11561570143378197, 0.0896826623697885, 0.08893074255834199, 0.0947911852569161]}, "mutation_prompt": null}
{"id": "4c81d955-56cb-4041-9429-e665ba06d0b4", "solution": "import numpy as np\n\nclass EnhancedLevyDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + self.levy_flight()\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedLevyDEAlgorithm", "description": "Incorporating Levy flight for enhanced exploration in Differential Evolution algorithm", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "0efacf4a-179e-4d80-beea-3070b3a1872b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "b6259d26-6ed4-42fe-bd58-2ec614db1248", "solution": "import numpy as np\n\nclass DynamicPopulationAdaptationDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 5\n        self.pop_size_max = 20\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop_size = self.pop_size_min\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            pop_size = int(self.pop_size_min + (_ / self.budget) * (self.pop_size_max - self.pop_size_min))\n            if len(pop) < pop_size:\n                new_inds = np.random.uniform(-5.0, 5.0, (pop_size - len(pop), self.dim))\n                pop = np.vstack([pop, new_inds])\n                fitness = np.concatenate([fitness, np.array([func(ind) for ind in new_inds])])\n            \n            for i in range(len(pop)):\n                idxs = np.random.choice(list(range(len(pop))), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "DynamicPopulationAdaptationDEAlgorithm", "description": "Introducing a dynamic population size adaptation mechanism based on fitness evaluation to enhance exploration and exploitation balance.", "configspace": "", "generation": 87, "fitness": 0.28750357822891603, "feedback": "The algorithm DynamicPopulationAdaptationDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7169631339442426, 0.7205368160942421, 0.7322191432939096, 0.7141074488184562, 0.6910215925714858, 0.6940220397977469, 0.695500567746691, 0.6952580845570759, 0.6891999778452691, 0.3875505848637636, 0.33301882259020443, 0.36509537349788446, 0.37871099663287855, 0.3254676189806973, 0.33403971675200506, 0.3536231790121038, 0.3325164821477945, 0.2985804306296068, 0.165225505945373, 0.1544552750352559, 0.2959905220940321, 0.2830989404136093, 0.31645145963936816, 0.3131617061647144, 0.08689818002708505, 0.12165137758432598, 0.09728636038065142, 0.08452488023427762, 0.12721588473083045, 0.15589250276142286, 0.10978007389663869, 0.11403120409815148, 0.11641035113764864, 0.10670369768455545, 0.11445011062999733, 0.1540934922075441, 0.9891519831652409, 0.9330609039604477, 0.9801577047238053, 0.9261838759533572, 0.984376767836576, 0.9807844096733025, 0.9758756224246292, 0.9859983939495355, 0.9483527117361783, 0.46463674088157936, 0.41197766999744967, 0.4827931089374349, 0.4808409417346019, 0.4399789653432774, 0.4736405667075051, 0.47491571790598697, 0.38660395322924135, 0.4592252488195835, 0.22916163886792396, 0.23034254078962413, 0.1306503410081128, 0.621823042769585, 0.9581572305254142, 0.7604013803993491, 0.12927236315861246, 0.6639241507086663, 0.08901508889630516, 0.12724996356298035, 0.17517135850230026, 0.19614203628941707, 0.1560213199229058, 0.1093307284492484, 0.18447230625049282, 0.27044924267752934, 0.20651984229686804, 0.21135721467687663, 0.28216892194164367, 0.2140425643262458, 0.28282407423989364, 0.1361114619915499, 0.1942024422861518, 0.2044004235760758, 0.21265908944573553, 0.18767531398667803, 0.2011344675325829, 0.027634405336810386, 9.999999999998899e-05, 0.02973270481735457, 0.0679418499191814, 0.12909047569986165, 9.999999999998899e-05, 0.05198356119877412, 0.009436852407912366, 0.015201269057366185, 0.026518358208042825, 0.0876801857566234, 0.17299997845363557, 0.09129160355401367, 0.10757651447305339, 0.038642388679973605, 0.23153651067038306, 0.07524740394011109, 0.059437335581330575, 0.13751971216166037, 0.04409245230817416, 0.07181611640205576, 0.013389615600009397, 0.048586597036825, 0.10390901660911767, 0.12988702586332623, 0.08824501270577989, 0.06936517983650758, 0.1033517075844782, 0.10668638604915581, 0.1498395624072737, 0.1906068337726673, 0.19970379136493244, 0.2034631103637925, 0.18087182356128162, 0.04009143118636038, 0.08744366215865651, 0.558284140361363, 0.5157892589798281, 0.51753861510376, 0.4912725902968885, 0.5328270231812897, 0.5342561883780392, 0.5465620648236118, 0.5069180389332375, 0.5143685252619852, 0.1327914570021318, 0.12854256717332324, 0.05711175285343961, 0.04092629262920122, 0.10441328961603391, 0.07513655364882454, 0.06758649688204355, 0.12603824501485106, 0.13389576094256428, 0.22505061093399203, 0.17959409298668338, 0.20147297040510803, 0.15294700690814478, 0.20498162955578414, 0.18772571291437734, 0.19244786791062085, 0.19972325379800204, 0.1824174500425203, 0.18012542347414384, 0.37026944944942397, 0.24246302824873844, 0.29411829365708, 0.3281247877558281, 0.13730116063183317, 0.2498564960627372, 0.35343880780521275, 0.15774357869789313, 0.2121171728851179, 0.22884382869886533, 0.110232975414296, 0.23681170530612428, 0.2177184011606017, 0.26873983895644393, 0.29008519229486907, 0.1755163054931238, 0.08217904534325804, 0.24089257550197807, 0.19599283083976693, 0.21019973538583014, 0.20291731003494673, 0.2275153959822065, 0.20940820318389985, 0.2182992966944114, 0.22572712064120437, 0.18569096877397517, 0.18585039267642078, 0.24498766305579078, 0.1953944686803717, 0.17872230076085782, 0.21736497202139282, 0.21023973419004216, 0.46092822839944025, 0.22083889247818267, 0.2069183706364972, 0.18586277407717977, 0.16595374889684755, 0.810380223144099, 0.9311936764669394, 0.19897141600833068, 0.8157527343025596, 0.23697463613679925, 0.8638498943280607, 0.16586857780345288, 0.5083250859533859, 0.21010934102351886, 0.8802342961662707, 0.20560398437909833, 0.21433950370845756, 0.21076229349991749, 0.546914260813756, 0.7388377350994079, 0.43896460952102, 0.18229977772477202, 0.20418493287181683, 0.1811579397183959, 0.2005094251308721, 0.1958674406341756, 0.18222752130502406, 0.18446283451434575, 0.19568785426785928, 0.2063459483872535, 0.10344157208790694, 0.08381984464602987, 0.09678127644976409, 0.08635312037886955, 0.1395563453045483, 0.1132937267782208, 0.0737349609017236, 0.08010838114072616, 0.06883799083747943]}, "mutation_prompt": null}
{"id": "266f7c8c-5bb2-4d17-a918-5dfed58852fa", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(len(pop)):  # Dynamic Population Size\n                idxs = np.random.choice(list(range(len(pop))), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Introducing a dynamic population size adaptation mechanism to enhance exploration and exploitation balance.", "configspace": "", "generation": 88, "fitness": 0.30326582129239793, "feedback": "The algorithm EnhancedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "fd8e0559-d9ac-41bc-bd5f-e315b60610a0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "783dffb4-e6e9-49f2-ab33-c9bad7f7131f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCCDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.subpop_size = 5\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pops = [np.random.uniform(-5.0, 5.0, (self.subpop_size, self.dim)) for _ in range(self.pop_size)]\n        fitness = np.array([[func(ind) for ind in pop] for pop in pops])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                pop = pops[i]\n                for j in range(self.subpop_size):\n                    idxs = np.random.choice(list(range(self.subpop_size)), 3, replace=False)\n                    x_r1, x_r2, x_r3 = pop[idxs]\n                    self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                    self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                    self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                    mutant = pop[j] + self.f * (x_r1 - pop[j]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                    for k in range(self.dim):\n                        if np.random.rand() > self.cr:\n                            mutant[k] = pop[j][k]\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < fitness[i][j]:\n                        pops[i][j] = mutant\n                        fitness[i][j] = mutant_fitness\n        best_subpop_idx = np.unravel_index(np.argmin(fitness), fitness.shape)\n        return pops[best_subpop_idx[0]][best_subpop_idx[1]]", "name": "EnhancedAdaptiveCCDEAlgorithm", "description": "Implementing a Cooperative Coevolutionary Differential Evolution (CCDE) algorithm to enhance the search capability by evolving subpopulations separately and combining their solutions.", "configspace": "", "generation": 90, "fitness": 0.23141717233876677, "feedback": "The algorithm EnhancedAdaptiveCCDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.18.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.5293087973553809, 0.5441668392978891, 0.5290630525754536, 0.5050757773116618, 0.4549112303491193, 0.4882102391036631, 0.5523039078923828, 0.4826551695545518, 0.5021350202043607, 0.16590755572764193, 0.1527208414777278, 0.13522659943015292, 0.1403722066774048, 0.14376833035483394, 0.15170703938668428, 0.1172638795201687, 0.18756855917831194, 0.14849385651460156, 0.1188843146772095, 0.11866434188280295, 0.13566194084471772, 0.1389850161003724, 0.12723317756394847, 0.12381196753704315, 0.11405958553104778, 0.11257714414871822, 0.11812430573321175, 0.10967264558772372, 0.10421440720878394, 0.10771063698256367, 0.11247013720159393, 0.09209536101565885, 0.106593362219504, 0.10655115604914789, 0.11047761025338654, 0.09595494391941484, 0.8151517764327434, 0.8925606414443576, 0.8386446934734718, 0.8348234407738643, 0.8995574747625252, 0.8878479733177487, 0.8838649305327203, 0.8923160086485605, 0.8984986406677352, 0.1985574489022981, 0.20705564932769194, 0.23440292239211102, 0.25719670819077634, 0.19545326060477952, 0.25021286849331625, 0.24763360104748222, 0.2447816224069297, 0.2197532200577096, 0.21790915776136188, 0.5160490122627825, 0.2090967802299729, 0.3659552397254566, 0.5407910461341696, 0.3398096806033588, 0.2622187280666327, 0.2643997491973017, 0.2365828528435272, 0.25109510144662894, 0.23997728017110886, 0.20319436748722164, 0.2055903248444204, 0.18944150539909888, 0.26677808609462794, 0.21642641043423982, 0.22186930659607784, 0.18580926263258146, 0.25709986639603655, 0.1949082308854061, 0.17428422942442845, 0.23302533750097776, 0.23055650659074167, 0.13824435494338083, 0.2148770963568578, 0.2342148668024956, 0.1884921042144978, 0.018122542434526823, 0.009572931311079613, 9.999999999998899e-05, 0.02223043619338294, 0.006474728733814161, 0.009445743165778397, 0.08231946846874905, 0.003037667066391414, 0.033514664942612016, 0.10912740339283467, 0.11959665819948218, 0.12606603584267373, 0.05809700276579299, 0.07433281241496248, 0.12922720114426278, 0.10094992912128764, 0.1044874012516015, 0.1897056937989885, 0.024995638853469115, 0.013345174736188348, 0.019437517882362587, 0.01812222709742417, 0.028930732505345058, 0.04148330894543528, 0.032499032579909715, 0.04867868224992067, 0.02233889513735654, 0.12281375597538668, 0.11148499100869591, 0.1399742039918601, 0.09950520237721172, 0.13509571717865332, 0.1259002023417194, 0.1303286629693453, 0.104230018513782, 0.11521879481135233, 0.43342605373299803, 0.4186880663912972, 0.4303357882094557, 0.42525853616068043, 0.41837411284073256, 0.39339692170204765, 0.41365447536334954, 0.4211341067039821, 0.44060403263966164, 0.06886694468208676, 0.08949944989945069, 0.08166528867326195, 0.1000369035929618, 0.09159367018106279, 0.09910398792793007, 0.10701997978232303, 0.11251389380705168, 0.1388075898388943, 0.1614957546768161, 0.1779104620757116, 0.1507893419145343, 0.19971392802979504, 0.14133496952070435, 0.13367180452635474, 0.22860479770442743, 0.14379402598776836, 0.17099202778094968, 0.252395737025911, 0.27730722811505604, 0.2531149688616674, 0.26027537606601003, 0.31075675105254463, 0.25888458959767036, 0.2601413623425556, 0.24897285335539443, 0.2531897055300272, 0.18097906179912748, 0.20354981913496384, 0.22935862474270452, 0.24058954262518872, 0.21411785025808727, 0.19749679632552308, 0.18028129561115913, 0.1941159428044119, 0.16768075616989986, 0.20556853242517104, 0.18700320914351387, 0.20993033772143588, 0.18678920561906198, 0.19866694561937603, 0.21748043077660806, 0.21352024282465087, 0.19840282612634552, 0.23016051045675223, 0.19618695297433097, 0.2469287924445488, 0.20579081343642347, 0.21462407408968553, 0.21177642699656152, 0.1979262650325584, 0.2012653584544566, 0.2102845712073116, 0.2023404705771864, 0.19328943133522603, 0.3238008335545739, 0.3741782568644849, 0.59216702254578, 0.2484323279349825, 0.4115417483049886, 0.2713318807793369, 0.3194922299263404, 0.6846200962465157, 0.4266615633958639, 0.49342036686057333, 0.3919080625218757, 0.2527035104441432, 0.2030382559876872, 0.2776078403613339, 0.25320846819548437, 0.20139037784297242, 0.2560623832971284, 0.19057004269330846, 0.18249889629922533, 0.18155062849925585, 0.1906018471208235, 0.17660846963325494, 0.18206035474537374, 0.18945168721732175, 0.19065731119302254, 0.19513865986619916, 0.07207788941794313, 0.09266347456947766, 0.07468992785676332, 0.09342295674814216, 0.10055458159884134, 0.1072084548787745, 0.08557984809085006, 0.09884846196946728, 0.084528532391414]}, "mutation_prompt": null}
{"id": "c68aec3b-078d-41d5-b5bc-1a452e737e3e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "b0dac9aa-da2a-44ee-8f8e-6a136ac4334b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "e3a842b2-abf6-441c-8171-6577b7764d7d", "solution": "import numpy as np\n\nclass HybridDEPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.phi_p = 1.5\n        self.phi_g = 2.0\n        self.inertia_weight = 0.5\n        self.c1 = 1.5\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n                p_best = pop[np.argmin(fitness)]\n                g_best = pop[np.argmin(fitness)]\n                velocity = np.random.uniform(0, 1, self.dim) * velocity + self.c1 * np.random.rand() * (p_best - pop[i]) + self.c2 * np.random.rand() * (g_best - pop[i])\n                pop[i] = np.clip(pop[i] + velocity, -5.0, 5.0)\n        return pop[np.argmin(fitness)]", "name": "HybridDEPSOAlgorithm", "description": "Implementing a hybrid algorithm combining Differential Evolution with Particle Swarm Optimization for enhanced global exploration and exploitation capabilities.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocity' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocity' referenced before assignment\")", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {}, "mutation_prompt": null}
{"id": "5f3b15c5-4d98-4312-8914-0bbfec88337a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelESAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.mu = np.random.uniform(-5.0, 5.0, dim)\n        self.sigma_matrix = np.eye(dim)\n        self.c_sigma = 0.1\n        self.d_sigma = 1 + dim**0.5\n        self.chi = dim**0.5 * (1 - 1 / (4 * dim) + 1 / (21 * dim**2))\n        \n    def __call__(self, func):\n        pop = np.random.multivariate_normal(self.mu, self.sigma_matrix, self.pop_size)\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            offspring = np.random.multivariate_normal(self.mu, self.sigma_matrix, self.pop_size)\n            offspring_fitness = np.array([func(ind) for ind in offspring])\n            idxs = np.where(offspring_fitness < fitness)\n            pop[idxs] = offspring[idxs]\n            fitness[idxs] = offspring_fitness[idxs]\n            \n            fitness_order = np.argsort(fitness)\n            elite = pop[fitness_order[:self.pop_size // 2]]\n            \n            self.mu = np.mean(elite, axis=0)\n            diff = elite - self.mu\n            self.sigma_matrix = (1 - self.c_sigma) * self.sigma_matrix + (self.c_sigma / self.d_sigma) * (diff.T @ diff) + self.chi * np.random.normal(0, 1, (self.dim, self.dim))            \n        return self.mu", "name": "EnhancedAdaptiveNovelESAlgorithm", "description": "Implementing an Evolution Strategy (ES) algorithm with self-adaptive mutation parameters, including strategy adaptation and covariance matrix adaptation to enhance optimization performance.", "configspace": "", "generation": 94, "fitness": 0.14142456944666706, "feedback": "The algorithm EnhancedAdaptiveNovelESAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.24441736051150376, 0.20033423141764906, 0.22932807690955515, 0.2222201663003368, 0.2256212323398129, 0.2043374696216994, 0.20911520301398046, 0.1977039985202318, 0.22054982758676556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055724904013264465, 0.0655818489417237, 0.06414689704093013, 0.05931539445167977, 0.05652787223743905, 0.07372653619711567, 0.06458215381497934, 0.05956314900288595, 0.06124612598865564, 0.05566977876721324, 0.041360931060180905, 0.04331393565782071, 0.05714034207957086, 0.03943565285268791, 0.04117956178844473, 0.04102879866210574, 0.036678623295762325, 0.04518336384082522, 0.991160117037497, 0.9893771568747604, 0.9850234595474723, 0.9876593889348113, 0.9885096359584772, 0.9894679019071303, 0.9915605992820807, 0.9867196549748378, 0.9900567627618901, 0.10498702947005589, 0.11240843072323392, 0.11653253199571068, 0.10605550290877597, 0.09616823100567784, 0.10770587219851879, 0.11318152580881669, 0.11075053567173998, 0.12798739805570825, 0.1750459941710697, 0.13752492284729256, 0.1740993911639691, 0.14567509741801077, 0.15483708305222044, 0.13999036403302634, 0.14644722654291276, 0.13670910106254253, 0.151387777547495, 0.05833958373342507, 0.020319336073127525, 0.030759858314599264, 0.06452047317873677, 0.022547874018423175, 0.030254544116020576, 0.05620935772599844, 0.019860355138951125, 0.04710027853290888, 0.036807882049236795, 0.030387744719392096, 0.035569765360988104, 0.03386889042833008, 0.04301799324039912, 0.060285687907027374, 0.025274135285858756, 0.034676195081166594, 0.059568357875098066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026512856315333178, 9.999999999998899e-05, 0.11708242104203925, 0.039640044211932235, 0.047104861103433926, 0.040124955267850426, 0.027162173224581587, 0.03524505817691548, 0.031635142639907965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01809133862403889, 9.999999999998899e-05, 0.03293053910664134, 9.999999999998899e-05, 0.0011620249885810896, 0.005377007623948105, 9.999999999998899e-05, 0.007220835353059063, 0.23912108763411566, 0.21702337661308835, 0.23650752457907642, 0.22215139677215323, 0.21195866361414062, 0.23679091750850367, 0.22926339437304577, 0.2162998145062277, 0.23029247372103956, 0.07205442350753877, 0.05904511639620691, 0.058231444932407395, 0.07785065671817448, 0.04587332901526586, 0.08154212452193421, 0.05172993206031862, 0.05389750182827191, 0.07332834810688149, 0.11799987192349015, 0.1422435162357364, 0.12721705326044452, 0.12510484351465434, 0.11275729314702243, 0.1325014687249224, 0.1397836950881598, 0.15708571326026433, 0.11306384569380457, 0.20279824845102024, 0.17894259124901002, 0.18924561607156998, 0.21369509399504227, 0.1791129184705893, 0.1813903399680903, 0.1849090791853799, 0.19152229178761204, 0.1789034586104693, 0.1286917435582694, 0.12909095103462898, 0.13404807948057385, 0.13102216207577855, 0.11741074186492073, 0.124652651226966, 0.11771223967945921, 0.11971092605508327, 0.11966694335863359, 0.16399975965195046, 0.16558858132149323, 0.16829111605544733, 0.17695389717428955, 0.17510822154513173, 0.16416103534842186, 0.19041910770352422, 0.17155234375993367, 0.17044782641080747, 0.1669318590252482, 0.1620180788875477, 0.15943175894167505, 0.15924988622352798, 0.15934477606191855, 0.15940873786891785, 0.19072546302866555, 0.1621029990637427, 0.15698420774383792, 0.16116739969810456, 0.15843767245584406, 0.24889667947860594, 0.22143050991068758, 0.20662736893361577, 0.19716307087121154, 0.27083253060577095, 0.1410508776761501, 0.2353526182403195, 0.2114543260300511, 0.14925301316081518, 0.20018557076951715, 0.1795776749689758, 0.14788723406258053, 0.22067039097908037, 0.18636533426668767, 0.1429448508597423, 0.16174185002954256, 0.17659465984331324, 0.17656456358652484, 0.1746895055959361, 0.19633644574732068, 0.17727314952934503, 0.1955219582012533, 0.1743085258752406, 0.17311179368935425, 0.17590278491493005, 0.05911756174399874, 0.05324453965672982, 0.056143471732656325, 0.055194330674380176, 0.06822119387454151, 0.0736936002827846, 0.0537725814326665, 0.05412227508440903, 0.07297082749282635]}, "mutation_prompt": null}
{"id": "ddde280f-ab85-41ee-aa57-d5c0e04fd5e9", "solution": "import numpy as np\n\nclass HybridDEPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 5, replace=False)\n                x_r1, x_r2, x_r3, x_r4, x_r5 = pop[idxs]\n                pbest = pop[np.argmin(fitness)]\n                gbest = pop[np.argmin(fitness)]\n                self.f = np.random.uniform(0.1, 0.9)\n                self.cr = np.random.uniform(0.2, 0.9)\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)\n                v = self.w * (pop[i] - pop[i]) + self.c1 * np.random.rand() * (pbest - pop[i]) + self.c2 * np.random.rand() * (gbest - pop[i])\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim) + v\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "HybridDEPSOAlgorithm", "description": "Employing a hybrid strategy combining Differential Evolution with Particle Swarm Optimization to enhance global exploration and exploitation.", "configspace": "", "generation": 95, "fitness": 0.28330407621023235, "feedback": "The algorithm HybridDEPSOAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.6353535886343852, 0.6564354691583408, 0.6282228698449027, 0.6530636071070406, 0.6100033365542393, 0.632002972314035, 0.6515577786077125, 0.6560622409748316, 0.622355517370768, 0.2870303769936402, 0.30895174220379684, 0.33730271434242265, 0.28564659385586233, 0.3112720518759039, 0.25801367325364777, 0.256618173742838, 0.2799666244282698, 0.2588303417279558, 0.26709534889516284, 0.210131769726835, 0.16732088337105033, 0.2140598606873516, 0.22605451291067924, 0.19503347374906388, 0.23254963758355784, 0.16755873279277023, 0.16676036453981702, 0.19007214618616364, 0.19256782090499602, 0.1569221063831625, 0.15381653928630856, 0.14771744711686863, 0.17526575162753832, 0.1410055058241536, 0.12176641082049122, 0.16036269550887972, 0.9945568967793108, 0.9911851584170911, 0.997630000888979, 0.9954865769200648, 0.9964428771022689, 0.9932821197875379, 0.9970375044028705, 0.996577476959356, 0.9959279826729301, 0.2855936833167483, 0.28033466248056493, 0.3429893925651821, 0.3416555100552803, 0.3170648646466585, 0.3577186643374364, 0.2175722369207862, 0.2767834507268002, 0.25206373160470086, 0.8028316826326034, 0.7444189285998379, 0.7069000841144536, 0.8173134629204613, 0.570055227198649, 0.7427556236888262, 0.5281308556175526, 0.743774824479964, 0.7622389709227694, 0.22781322114820146, 0.19417591146395574, 0.13128068578832175, 0.20331852720492405, 0.10610090002394168, 0.2060788774925877, 0.20490635830828685, 0.18858312619868367, 0.20364768493298369, 0.2297843579394384, 0.12323737129579715, 0.20672574767154106, 0.24764632171411816, 0.13075670148899698, 0.200874282765112, 0.21639335085146927, 0.11529491094470445, 0.2034754398319576, 0.008490016950430612, 0.0074238794317487145, 0.0028270800154508446, 0.06812373979605368, 9.999999999998899e-05, 0.03222446746746921, 0.04190827933689434, 0.01359673838047526, 0.007674038204596556, 0.06392580880667553, 0.006577430743020307, 0.06938818896237686, 0.08944922852094972, 0.0422665234823798, 0.019970847124572533, 0.14050541818749174, 0.08356124690523226, 0.061757594624358925, 0.040619122653016704, 0.007771006417573889, 0.04845026491694315, 0.0013485009577619556, 0.043374473341644126, 0.0016791113643326305, 0.0005850727653141652, 9.999999999998899e-05, 0.0005938964062602858, 0.1546200873034813, 0.1354956888407267, 0.17950716119031385, 0.1949227324336401, 0.1612432438958753, 0.1576334953796239, 0.124689506780577, 0.13445305543454744, 0.11405663370204489, 0.5090309544776026, 0.4936520050193838, 0.5004982590446951, 0.4946411230480279, 0.46481642110781995, 0.47015496964570713, 0.49784672787497997, 0.5092846943722622, 0.48680119544779865, 0.12725990152800581, 0.0995281824622749, 0.11127576807931294, 0.13692547956110235, 0.08254757562210324, 0.12208014654956423, 0.12000856694612827, 0.1028546456263646, 0.11740042819538044, 0.13058670151663843, 0.24583397782486927, 0.14011408640969836, 0.25880431557169536, 0.11289461278798318, 0.15567120358807984, 0.15732673911470718, 0.15177297725656902, 0.14054232899145425, 0.3373939972061315, 0.3115295855154827, 0.33077932027699497, 0.35015517051622125, 0.3319588253062472, 0.3048969735197362, 0.34634883788052107, 0.3390207626006624, 0.30788835545147775, 0.21938007000711623, 0.19309692622728403, 0.26300053709959403, 0.3001742432928617, 0.27463879784168954, 0.2752720075669599, 0.14803715875042922, 0.20867730879769908, 0.24816492850713823, 0.20626993294782892, 0.2080909755296506, 0.20012418983687608, 0.18902774857458582, 0.1885496025008716, 0.23975544990543973, 0.19624429447765857, 0.21293468016800865, 0.20001944441921027, 0.3465767195694559, 0.22509112836237843, 0.23291353922262892, 0.2696425977060224, 0.23214541806778177, 0.2622867756898186, 0.23130829580621937, 0.2387729288500805, 0.2306304056882975, 0.8819733913763638, 0.8099167257074127, 0.19688193171382173, 0.19715045347027516, 0.1950717356485102, 0.1577680969379358, 0.8652156500378254, 0.12422287921482189, 0.1665387391894093, 0.788367199183476, 0.19772883600709923, 0.6549510025401597, 0.20462976008223077, 0.16612995115525409, 0.20584192377205668, 0.7427670394358181, 0.14902951167054124, 0.7113354085224113, 0.1766038692558537, 0.18249376913257465, 0.1979868443060988, 0.16626079641050107, 0.1750386969890545, 0.17162102662888845, 0.1876064885123303, 0.17211468370044536, 0.17829393987258713, 0.08719859146094167, 0.073043004226512, 0.07392917882726502, 0.10777862396299442, 0.0964765967026815, 0.07080841486809752, 0.08530574786901035, 0.08375466609225335, 0.08681287611539623]}, "mutation_prompt": null}
{"id": "78357660-1ea6-4be8-9baa-c55ac1d986a4", "solution": "import numpy as np\n\nclass HybridFireflySwarmDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.beta_max = 0.9\n        self.gamma_min = 0.1\n        self.gamma_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                beta = np.random.uniform(self.beta_min, self.beta_max)\n                gamma = np.random.uniform(self.gamma_min, self.gamma_max)\n                new_pop = np.copy(pop)\n                for j in range(self.pop_size):\n                    if j != i:\n                        attr = np.linalg.norm(pop[i] - pop[j])\n                        new_pop[j] += beta * np.exp(-self.alpha * attr**2) * (pop[i] - pop[j]) + gamma * np.random.normal(0, 1, self.dim)\n                new_pop_fitness = np.array([func(ind) for ind in new_pop])\n                min_idx = np.argmin(new_pop_fitness)\n                if new_pop_fitness[min_idx] < fitness[i]:\n                    pop[i] = new_pop[min_idx]\n                    fitness[i] = new_pop_fitness[min_idx]\n        return pop[np.argmin(fitness)]", "name": "HybridFireflySwarmDEAlgorithm", "description": "Implementing a Novel Hybrid Firefly Swarm Optimization with Differential Evolution algorithm for enhanced global and local search capabilities.", "configspace": "", "generation": 96, "fitness": 0.2017171619813834, "feedback": "The algorithm HybridFireflySwarmDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.3980367496838406, 0.44153112668142447, 0.38352899796016227, 0.4006452138074338, 0.40972547171240303, 0.397664920931351, 0.4079604448960773, 0.44022158833188885, 0.406426402994682, 9.999999999998899e-05, 9.999999999998899e-05, 0.02601084393505282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021296452255648024, 0.12224370785534489, 0.09217719936348368, 0.1156531914187815, 0.13401925798284142, 0.07986456397687203, 0.10098410096641597, 0.11370196737991334, 0.10368563887623183, 0.08888926785557505, 0.09319989620103497, 0.08126865194642618, 0.09989695306636714, 0.08761873016897948, 0.11004546155744432, 0.08317918697122262, 0.08784752872513868, 0.0831495090931994, 0.08512527119850422, 0.9755941579021928, 0.9607237142856913, 0.9653755320651954, 0.972097127935475, 0.9544267146818187, 0.9493222291483138, 0.9447358544776788, 0.9506627670290988, 0.9216127631901403, 0.268943995306582, 0.26693673440432597, 0.265456814327953, 0.26157720884739033, 0.26484409486637783, 0.2567034813484528, 0.2767242181249002, 0.2625346819941937, 0.26737507981287, 0.3335144548895409, 0.23113490669017556, 0.2352640090989353, 0.28025956591096735, 0.22383499895451764, 0.2518618904585491, 0.2733006081498235, 0.2928542876225223, 0.2642738286509839, 0.11953980750531534, 0.139524896005212, 0.1308191722604708, 0.12330919345522084, 0.1360430570340173, 0.07431503098224224, 0.14540505740620102, 0.13452589185539743, 0.1421180132672536, 0.16528078730975593, 0.14580076432763744, 0.1463424010214014, 0.15900935525891657, 0.14115219059487993, 0.1408907015222698, 0.18190665530026495, 0.1836363502129975, 0.13869075987029156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008258012013238503, 0.014427452732790114, 0.02645630327849069, 9.999999999998899e-05, 9.999999999998899e-05, 0.042503816289130913, 0.018907712128859777, 0.03916354723531312, 0.08499110109753805, 0.07709031486559559, 0.004598480597370558, 0.029683031822471673, 0.16520603346813845, 0.030355143070944335, 0.04419005408334564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0909441618404977, 0.05974610639793987, 0.08934350942095881, 0.10036286350212287, 0.06454351023493965, 0.08796688958734411, 0.06626076096082456, 0.09378804283401987, 0.10469151752334982, 0.4001129520967083, 0.377611245791461, 0.3757384172457928, 0.3787569414254154, 0.41017719455103374, 0.388913462868949, 0.38913253782272605, 0.3822581393259341, 0.38984995217264085, 0.09694256581918892, 0.12570940286540977, 0.11147605503992786, 0.11338553261672168, 0.11772393343609655, 0.10928645143329052, 0.1071509526749429, 0.10488812691833149, 0.09070381389589988, 0.21071503808098113, 0.18398746061916826, 0.24074665799548445, 0.2222106978983286, 0.24131928383184653, 0.20500634878216284, 0.246355682151006, 0.17042219402406555, 0.22866607157161722, 0.28278258319365757, 0.2880090522534713, 0.16407843728804383, 0.2949189427992088, 0.2063002243511225, 0.2714985410252828, 0.2216198458315597, 0.19789930860535054, 0.2739372326734194, 0.19846692020270928, 0.21647230013396224, 0.1540246675660999, 0.22789721180209543, 0.2121388460843534, 0.21551145473311306, 0.17681932991574978, 0.17220574225245477, 0.1822786993318064, 0.21395878639234056, 0.23245092119427058, 0.2037658802750566, 0.1973395056024556, 0.21722365080215733, 0.20221276473732108, 0.208893260296511, 0.19183560226280594, 0.21224274829671952, 0.20393739151863155, 0.20733558891376647, 0.20041283402374155, 0.18164731233570897, 0.20120288068926517, 0.21365662714800626, 0.19271386380111954, 0.19377338504198027, 0.20261367708547762, 0.1662262397131582, 0.1615730066771195, 0.18770986384482258, 0.6232621096479379, 0.19994266427580398, 0.147314179524354, 0.15220095603824846, 0.1510174204859932, 0.17701081020616527, 0.38220257255190315, 0.34938743025593144, 0.12483975026346639, 0.34684021712526725, 0.12804425659416518, 0.20946291627875346, 0.09446583288133248, 0.1503730659520901, 0.5224857028702854, 0.18813171058616884, 0.1861720288762292, 0.17954316290672723, 0.19425198641203412, 0.18279253822647779, 0.18183309578322737, 0.18209903862103438, 0.18221108425303845, 0.18598711875031482, 0.09627314356271677, 0.08825313937123591, 0.0835717228869346, 0.07999845817114892, 0.09485094611041844, 0.11006950215125089, 0.07930285640803525, 0.09163322572222699, 0.09481763243348829]}, "mutation_prompt": null}
{"id": "9fb08e11-1092-4549-a097-3d6e99ecc413", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Enhancing the algorithm with adaptive control on mutation parameters to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7000969301106694, 0.6670234953116548, 0.6543362528567911, 0.7199486463411593, 0.7051885614819222, 0.6676131758457529, 0.695081343828386, 0.694536934438028, 0.6110026504658761, 0.3386378738542525, 0.3174958606002892, 0.3614174795722592, 0.34918517408056093, 0.3444543531544352, 0.33881246832055045, 0.354232015879377, 0.39307497045793083, 0.2489851363700485, 0.2522805006407193, 0.2756927439755307, 0.23773619955922698, 0.29750074710647834, 0.1799600782110471, 0.3017689814233354, 0.3193697955028362, 0.19397942348265462, 0.2113248080724981, 0.1143086742941064, 0.06906623969622028, 0.1422525401086483, 0.1514605176203777, 0.06450621195854966, 0.1497710197265314, 0.1430041730439925, 0.15152344371077875, 0.15023981688742838, 0.9658635618478886, 0.9456148712735167, 0.9771636240160012, 0.9764058935846726, 0.9799286782540474, 0.9765918630313144, 0.985137639182757, 0.9391036247047531, 0.9730227548491333, 0.4605616045394987, 0.4733589735535182, 0.4218917427291434, 0.46165138345207435, 0.46436278482441606, 0.41972104174551406, 0.4189500473875354, 0.3939283182173787, 0.4333610878834424, 0.7868646906724519, 0.14031347088574853, 0.7698209700357665, 0.9101786319554293, 0.8682620019567808, 0.5908773405043695, 0.23763249518571894, 0.5978752117025736, 0.6864413975982371, 0.13519865604430947, 0.19825871388366045, 0.19563281261901078, 0.25282244473818527, 0.20761700980307318, 0.24485126849671346, 0.2581475496785067, 0.20633190749844588, 0.2061222054637728, 0.19121931527233238, 0.19406341743613098, 0.17766626798850815, 0.1294509502354404, 0.16333168415435562, 0.17888908959808847, 0.15191856798002557, 0.1633499949106315, 0.20115826416001514, 9.999999999998899e-05, 0.1144506178570387, 0.03191616127400143, 0.055829360423297114, 0.11204378345631705, 0.022562835907568135, 0.05201152377811613, 0.050875841388314025, 0.08353642805125294, 0.13488138588030796, 0.17671481818660506, 0.1988147625017872, 0.08756721650999699, 0.1389320288100806, 0.08192584466873798, 0.2423266825478343, 0.14613157798955123, 0.20364889651352291, 0.14897125511364706, 0.02721997605652071, 0.033534884789157005, 0.0832730965606695, 0.05344482371777359, 0.0667320385609872, 0.06786303818201433, 0.09145468542934354, 0.003283845782856565, 0.20184901724558657, 0.17965323505110442, 0.16564902860453745, 0.20171853592080236, 0.21668770846597607, 0.1769419396071964, 0.1268042955188612, 0.17097231740918872, 0.07177580213939405, 0.5378935875288772, 0.5137681342722904, 0.5254075414788467, 0.5300446954076843, 0.5489289248557305, 0.5047486502503299, 0.555010345121179, 0.5121983889910459, 0.5180647695626626, 0.137260897411007, 0.12771946087160013, 0.07111525545912079, 0.11001403369311702, 0.09858968852984362, 0.10999525562709278, 0.12162199347472813, 0.13918804140848828, 0.11921708079246851, 0.17166533271548412, 0.1678172100534706, 0.18810356563542252, 0.1607346075651811, 0.17410267183351424, 0.15733237737183714, 0.18451596295130557, 0.1770589207423755, 0.19002760170262922, 0.35413425691213385, 0.36776826106992067, 0.2475610958114436, 0.30701551149619655, 0.3625421284914089, 0.3514523892238497, 0.36048121475725703, 0.3643222072534219, 0.22827316758787042, 0.3403555577395704, 0.27761747834747585, 0.2758162227269553, 0.30156341996161395, 0.3050613544536229, 0.26605679056474285, 0.21418279111334115, 0.287110390528149, 0.2854564299551655, 0.23469481774555556, 0.21279933639033421, 0.21696052703227608, 0.2238327885531478, 0.2555484259128804, 0.22016571077949, 0.2154260401625806, 0.23584428672681657, 0.22391771265532667, 0.2256461453190839, 0.2546618718625414, 0.22555789294470385, 0.36987535676374683, 0.2451946330409963, 0.23907470442374323, 0.22008598122001755, 0.19439415550985673, 0.31504850498774817, 0.183786158497371, 0.7523051921516015, 0.24762059039487305, 0.8778244804093982, 0.1940731974388621, 0.36983660227665727, 0.32856385913894615, 0.1623375291565804, 0.615627427091304, 0.6055679332852426, 0.20979407960382213, 0.791987690809198, 0.33426883581019606, 0.4283854009066136, 0.39387208942457563, 0.5587871592184783, 0.266627810400172, 0.20321367075405017, 0.18124933590601977, 0.19622392620017348, 0.1825961564781523, 0.19029920335929196, 0.1813358621399459, 0.17638527340465537, 0.183343841279767, 0.17701047774037593, 0.20036129328029095, 0.08511162927821203, 0.08105410692183723, 0.08823994441536687, 0.1038257278797613, 0.09025043573455171, 0.11780532283882006, 0.08705956646206159, 0.09199976249800779, 0.08925691781465195]}, "mutation_prompt": null}
{"id": "4f394990-cad1-4947-8fd4-37b614a46285", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        pop = np.zeros((self.pop_size, self.dim))\n        for i in range(self.dim):\n            pop[:, i] = np.random.uniform(-5.0 + i * 10.0 / self.dim, -5.0 + (i + 1) * 10.0 / self.dim, self.pop_size)\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                if mutant_fitness < fitness[i]:\n                    pop[i] = mutant\n                    fitness[i] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Improving diversity by incorporating a diverse initialization strategy based on Latin Hypercube Sampling.", "configspace": "", "generation": 98, "fitness": 0.20401125281096844, "feedback": "The algorithm EnhancedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.6784482473573312, 0.6637316690796411, 0.6014640456754402, 0.7059248105318635, 0.685769462345443, 0.647884630477627, 0.6629827350131583, 0.620997923213976, 0.6360250180564435, 0.3475718980604724, 0.15756978971240498, 0.2403911818436465, 0.2824471492138746, 0.1769389067303544, 0.16317811294800832, 0.15306963716869837, 0.2950752404989362, 0.19525161881604014, 0.11339261650653587, 0.16016323348118622, 0.05116031267016874, 0.057630627569666415, 0.10113983351551814, 0.12941610446115415, 0.1492294152388295, 0.12124119869423666, 0.1104039539452717, 0.13118257405663136, 0.0329530375814735, 0.02629649660205302, 0.04257224513440072, 0.041611478760944065, 0.13823366712386165, 0.05818703686991267, 0.13890479863974414, 0.039851199898133016, 0.6075051290310104, 0.7135288414267151, 0.8630503533405073, 0.640925345353947, 0.9069175735194246, 0.8469861653783047, 0.9362545397453437, 0.8737972381499302, 0.8554504171503294, 0.4346999851978691, 0.3049667662722818, 0.33380944658340617, 0.403582186330974, 0.32543813486162043, 0.3408564186059755, 0.4292501847872655, 0.3567475908297286, 0.36534719482797984, 0.15637014638320146, 0.19776298973104345, 0.4615587688307592, 0.15420810332306267, 0.2515883416979534, 0.2407216947478803, 0.15033641307482848, 0.14076661266538126, 0.20421286202250655, 0.11591270807329745, 0.11769673970434869, 0.11466621649609865, 0.1627280727898175, 0.11651872321638945, 0.09152244941245657, 0.09849657935554501, 0.11559706809656822, 0.13080526940861326, 0.1266505399798964, 0.13104230098106595, 0.1589826802024943, 0.18841037165846086, 0.12307102969848016, 0.20027513264852492, 0.12234400950468993, 0.1329780882214282, 0.1284577110623939, 9.999999999998899e-05, 0.04029829951636221, 0.0827905502004378, 0.06083667442349194, 0.008289926024416472, 0.018717612591670374, 0.12045309947246019, 9.999999999998899e-05, 9.999999999998899e-05, 0.04849028335196759, 0.05714664081611098, 0.03891178299401621, 0.022915529618376285, 0.04592259201051874, 0.005014194563372043, 0.033876017983285656, 0.04325606418464578, 0.028825719472531652, 0.12258250926823966, 0.0953353208511648, 0.1208802269567657, 0.011696900083543516, 0.04605394629209225, 9.999999999998899e-05, 0.06730758278026061, 0.008948811157228898, 0.04568515402480511, 0.09456310383137756, 0.12656595952552285, 0.047826161133002976, 0.07892645474090498, 0.008684293124898046, 0.031026303356235463, 0.08530043475834426, 0.14520376058633844, 0.13599166460000855, 0.44317039400963754, 0.46572208424565276, 0.48472010915746133, 0.48764325312594947, 0.5032946446963471, 0.5008172887995475, 0.5034744290859016, 0.5379431110833868, 0.4751699855262904, 0.13977432930588107, 0.10030689830232309, 0.06990372773253639, 0.06442793597742547, 0.0567676375445344, 0.04966779847408975, 0.0932372310210412, 0.05757371750641471, 0.09755170760963683, 0.19118367652459112, 0.24055282296658131, 0.19047570898116306, 0.16932880812559215, 0.18096977011907078, 0.25522639900617206, 0.18923165759035554, 0.1966220542045799, 0.19737995096839078, 0.08044941463017308, 0.26500859418627143, 0.1056775819724548, 0.1430010965710944, 0.23916788187579696, 0.1133675603889246, 0.3731866077758599, 0.36881817381139503, 0.15244782192216355, 0.10761992549890742, 0.08532954807898296, 0.05707020544040575, 0.07954793625034728, 0.20890327162187783, 0.0711379536608745, 0.2433928129089289, 0.1396051265210161, 0.21570945221454696, 0.1870502109667751, 0.2304199650992257, 0.16796967237134364, 0.19002786545188222, 0.18005495359780377, 0.14536384608572606, 0.1908817033180138, 0.1566927276671104, 0.16372629034305397, 0.22743383838084275, 0.2012565940802209, 0.20718925298197133, 0.17649574392780853, 0.19833080345746745, 0.19068481755747457, 0.2045923913716723, 0.3951241692006956, 0.19433308961442597, 0.16628672308844217, 0.14689005871147054, 0.06560875044453607, 0.07815571423962153, 0.16046079232619792, 0.1553241878520759, 0.158708317242219, 0.18009228901038987, 0.06364921722806594, 0.024640005517000074, 0.06397483983703567, 0.024641732220075596, 0.1255278905941184, 0.1276034383587612, 0.12517276818259837, 0.08008031786131065, 0.08152587376228204, 0.0814848802956698, 0.19532837199535602, 0.17669045590529908, 0.18625691957287072, 0.17411307398180886, 0.1798003268796099, 0.1927336602631594, 0.19045259363177336, 0.18199364489141412, 0.18762777404877573, 0.0825895060380546, 0.09375030268208284, 0.0622543144146217, 0.08020473105706483, 0.04774929792732763, 0.035852376455264845, 0.06695931322674697, 0.04254862606368748, 0.02068087270102681]}, "mutation_prompt": null}
{"id": "30dfad6d-d70d-4940-85e1-414cb3454b0e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNovelDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.5\n        self.f = 0.5\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.2\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.crowding_factor = 0.5  # Crowding factor for diversity maintenance\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                idxs = np.random.choice(list(range(self.pop_size)), 3, replace=False)\n                x_r1, x_r2, x_r3 = pop[idxs]\n                self.f = np.random.uniform(0.1, 0.9)  # Adaptive F\n                self.cr = np.random.uniform(0.2, 0.9)  # Adaptive CR\n                self.sigma = np.clip(self.sigma * np.exp(0.1 * np.random.randn()), self.sigma_min, self.sigma_max)  # Adaptive Sigma\n                mutant = pop[i] + self.f * (x_r1 - pop[i]) + self.f * (x_r2 - x_r3) + np.random.normal(0, self.sigma, self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = pop[i][j]\n                mutant_fitness = func(mutant)\n                # Crowding-based selection for improved diversity\n                crowding_candidates = np.random.choice(list(range(self.pop_size)), int(self.crowding_factor * self.pop_size), replace=False)\n                crowding_fitness = np.array([fitness[c] for c in crowding_candidates])\n                if mutant_fitness < np.max(crowding_fitness):\n                    max_idx = crowding_candidates[np.argmax(crowding_fitness)]\n                    pop[max_idx] = mutant\n                    fitness[max_idx] = mutant_fitness\n        return pop[np.argmin(fitness)]", "name": "EnhancedAdaptiveNovelDEAlgorithm", "description": "Improving diversity maintenance through a novel crowding-based selection mechanism.", "configspace": "", "generation": 99, "fitness": 0.24611155800335152, "feedback": "The algorithm EnhancedAdaptiveNovelDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "d9bd940f-b91e-48d8-891d-2829105585a4", "metadata": {"aucs": [0.7194948431595233, 0.6707427372503978, 0.7651502703070242, 0.7210349637894615, 0.6734989301846162, 0.7211586874196325, 0.7330770577671046, 0.682533143447289, 0.721193736076445, 0.16792308275753587, 0.16777803587559192, 0.18980462139087895, 0.3500386968802458, 0.2955279813389633, 0.06965290041497063, 0.28247433229636276, 0.25556473028203086, 0.24858703104747082, 0.09509509378282621, 0.39395651114391417, 0.10222073560327083, 0.15701972127129304, 0.12172380883975875, 0.07828625069756379, 0.05116233006167281, 0.06356288730958715, 0.051798596385168816, 0.064188700015261, 0.03645275010839866, 0.05106722563097443, 0.08597484567426583, 0.03188771060668261, 0.004340022083576867, 0.10064562756474238, 0.07538580090676494, 0.01067405324589088, 0.9536562725095322, 0.9115428487557072, 0.8917630053176637, 0.9015200054408437, 0.8728919484896436, 0.910143345449504, 0.7971580754227232, 0.8906346596050517, 0.8892763182660117, 0.5378351326275005, 0.44979959961661975, 0.5498582560671498, 0.47179018092817016, 0.43746579278391295, 0.4778385484164198, 0.5129528056020578, 0.4358707926731157, 0.41669044812484735, 0.18015524006147465, 0.10893438449249715, 0.054201842796214095, 0.5415512385588295, 0.15823520208968078, 0.19742679920112327, 0.11471454526097535, 0.09928708073373727, 0.18076350048612677, 0.1823674884797315, 0.17562126283500457, 0.1903111698032416, 0.21370297571231744, 0.3612849668044641, 0.187896665652852, 0.22142512471772713, 0.1829575639351334, 0.18696038533592496, 0.4630247662892991, 0.33529795763999215, 0.20400616284403172, 0.18565713945580287, 0.19291441526793862, 0.1961058350140994, 0.21625038000227004, 0.19857800216692023, 0.2035091917495594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008626848846344792, 9.999999999998899e-05, 0.009240452671107957, 9.999999999998899e-05, 9.999999999998899e-05, 0.009163234792478603, 0.11357829498303618, 0.05566276696774297, 0.08377918519456395, 0.06739264562931946, 0.014567401787278, 0.025079146841828104, 0.1005619382660512, 0.0684512384221978, 0.10843860840465347, 0.09064415983680196, 0.15104266188927484, 0.16393099813826917, 0.1929993899087532, 0.13075845128870311, 0.081141470251065, 0.15967993832000227, 0.07985798283796774, 0.08146802494816607, 0.0874638433736511, 0.08527803963596758, 0.1274958620323976, 0.06474504870501618, 0.041929072999266626, 0.1274362674064352, 0.09222819976273877, 0.18125636517638366, 0.034585483367504444, 0.4946739855848761, 0.5184843887490321, 0.5197448746639348, 0.5120132937201101, 0.5090532172058784, 0.5088329269576227, 0.5295908231554067, 0.5663257242953224, 0.5093754874450078, 0.04544282024475543, 0.011794121471419783, 0.003536445335854288, 0.09431790300968601, 0.09156215412728597, 0.10920379662564461, 0.05829667920385306, 0.1677867363599198, 0.08789053806819813, 0.22301718131230652, 0.2767773958151408, 0.2405432497185489, 0.2765557751069613, 0.16622904192991428, 0.22564188375115923, 0.2377753901974896, 0.2011391698603684, 0.2266953964715538, 0.1848229615179614, 0.16155557260758546, 0.17684826213732507, 0.19250384148435318, 0.3907861716755824, 0.18361507679700606, 0.15044730568080156, 0.38635579946630294, 0.1284102262301421, 0.11857884508317706, 0.13550794614744643, 0.1097687575896733, 0.14949040436319283, 0.22434218831769515, 0.07448787083479491, 0.13842849073656016, 0.15747416796042712, 0.14128703201321402, 0.2552127567546265, 0.2708671143454904, 0.27552231043099196, 0.2359564210854711, 0.20992060947001023, 0.25404245311905416, 0.2424891346460467, 0.2195258038777601, 0.2534565041621424, 0.16979932631116557, 0.1673374194713495, 0.17801678127055143, 0.17437245814370927, 0.18239593049281289, 0.16754262513776086, 0.17585275497550423, 0.1897262363233453, 0.157338244354304, 0.15950287062940371, 0.18924961562536013, 0.9185294883426889, 0.17404629115068582, 0.20174672672247107, 0.18916847459534591, 0.15216332172838576, 0.1596654415830071, 0.179698329659415, 0.7732649320925515, 0.11190506403144462, 0.6147221540602053, 0.2145132297404473, 0.21232825191649773, 0.20691007577333198, 0.4563217900376664, 0.09471681900713047, 0.16844385568797293, 0.19957385240287218, 0.20674140476330238, 0.2545805049853114, 0.22337783222804863, 0.2138802750557004, 0.20481245253650782, 0.24810113593735428, 0.2270615401021111, 0.25274099856101706, 0.06829936204284881, 0.07648342826623522, 0.12765074389319686, 0.11252059454519969, 0.08884986963478692, 0.1271588257411278, 0.1493957212685154, 0.06528251398595675, 0.056475900163370674]}, "mutation_prompt": null}
