{"id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 0, "fitness": 0.15436059261721413, "feedback": "The algorithm PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "70dff68b-bcb2-4307-814f-61bc9405976c", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Levy Flight Exploration\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight exploration\n                    step_size = 0.01 * np.random.standard_cauchy(size=self.dim)\n                    particles[i] += step_size\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer by incorporating Levy flight exploration for improved global search capability.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "c214d89c-b56b-4da1-bc9a-9656c2262495", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by incorporating a dynamic population size adaptation mechanism to improve exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "92acf35d-0806-4b14-ac15-895597209d17", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.7\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                # Differential Evolution\n                candidate_solution = particles[i] + self.mutation_factor * (personal_best[i] - particles[i]) + self.mutation_factor * (particles[np.random.choice(self.pop_size)] - particles[np.random.choice(self.pop_size)])\n                for j in range(self.dim):\n                    if np.random.rand() > self.crossover_prob:\n                        candidate_solution[j] = particles[i][j]\n                if objective_function(candidate_solution) < objective_function(particles[i]):\n                    particles[i] = candidate_solution\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by incorporating Differential Evolution (DE) for global exploration in the search space.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 32, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 32, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "84525f33-e50d-4bb8-a274-ab0d83b0858b", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "3289521a-4549-4240-a354-cb2a32687020", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.min_pop_size = 5\n        self.max_pop_size = 20\n        self.pop_size = self.min_pop_size\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n                    \n            self.temp *= self.alpha\n            \n            # Dynamic population size adaptation\n            if self.temp < 1.0 and self.pop_size < self.max_pop_size:\n                self.pop_size += 1\n                particles = np.vstack([particles, np.random.uniform(-5.0, 5.0, size=(1, self.dim))])\n                velocities = np.vstack([velocities, np.zeros(self.dim)])\n                personal_best = np.vstack([personal_best, particles[-1].copy()])\n        \n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by incorporating a dynamic population size adaptation mechanism.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 32, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 32, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "0d0b8af0-0458-4ba5-b664-8b37f3a42827", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "ae937c1f-c5f4-41e6-a7b3-464f036a9bf9", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "a95b6420-62b6-4b82-a0c3-53c7083cdb56", "solution": "import numpy as np\n\nclass Dynamic_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.min_pop_size = 5\n        self.max_pop_size = 20\n        self.threshold = 0.5\n        self.adaptation_rate = 0.1\n        self.pop_sizes = [self.pop_size]\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n                    \n            # Dynamic Population Size Adaptation\n            if np.random.rand() < self.adaptation_rate and self.pop_size > self.min_pop_size:\n                if np.mean([objective_function(p) for p in particles]) < np.mean([objective_function(p) for p in personal_best]):\n                    self.pop_size = max(self.min_pop_size, int(self.pop_size * (1 - self.threshold)))\n                else:\n                    self.pop_size = min(self.max_pop_size, int(self.pop_size * (1 + self.threshold)))\n                self.pop_sizes.append(self.pop_size)\n                particles = np.vstack((particles, np.random.uniform(-5.0, 5.0, size=(self.pop_size - len(particles), self.dim))))\n                velocities = np.vstack((velocities, np.zeros((self.pop_size - len(velocities), self.dim)))\n                personal_best = np.vstack((personal_best, particles[-self.pop_size:].copy()))\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Dynamic_PSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer with dynamic population size adaptation to improve exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "853b14f4-d228-487e-aa74-7aa759796cf8", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "44617f0f-bbb3-426b-9ebc-68372ae85749", "solution": "import numpy as np\n\nclass PSO_SA_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.crossover_rate = 0.7\n        self.scale_factor = 0.5\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (\n                            global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n                # Differential Evolution\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = particles[r1] + self.scale_factor * (particles[r2] - particles[r3])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, particles[i])\n\n                if objective_function(trial) < objective_function(particles[i]):\n                    particles[i] = trial\n\n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_DE_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by incorporating Differential Evolution to improve population diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 32, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 32, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "8539daec-494c-4bb0-a523-875325254a68", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "937d70de-f806-46e6-8a59-58f7099803e4", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        pop_size = 10\n        particles = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        velocities = np.zeros((pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n            # Dynamic population size adaptation\n            if self.dim > 5 and np.random.uniform(0, 1) < 0.1:\n                pop_size = max(5, int(0.9 * pop_size))\n                particles = particles[:pop_size]\n                velocities = velocities[:pop_size]\n                personal_best = personal_best[:pop_size]\n                global_best = global_best[:pop_size]\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by incorporating a dynamic population size adaptation mechanism.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "26537586-2a60-4c79-b183-c68ae0f27ddb", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "6f5e3c89-9cab-43c6-8dc5-694495905081", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.min_pop_size = 5\n        self.max_pop_size = 20\n        self.population_history = []\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            self.temp *= self.alpha\n\n            self.population_history.append(self.pop_size)\n            if len(self.population_history) > 10:\n                if np.std(self.population_history[-10:]) < 2.0 and self.pop_size > self.min_pop_size:\n                    self.pop_size -= 1\n                elif np.std(self.population_history[-10:]) > 5.0 and self.pop_size < self.max_pop_size:\n                    self.pop_size += 1\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by incorporating a dynamic population size adaptation mechanism to improve exploration-exploitation balance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 32, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 32, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "51db1917-87a0-48eb-80e6-af9ba820ce1e", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "55d5f4f5-7561-419b-8eeb-d39126559d34", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass PSO_SA_NelderMead_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Local search with Nelder-Mead\n                res = minimize(objective_function, particles[i], method='Nelder-Mead')\n                particles[i] = res.x\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_NelderMead_Optimizer", "description": "Enhancing PSO_SA_Optimizer by incorporating a local search strategy using Nelder-Mead optimization to exploit promising regions.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "0fc7445e-dddc-4ec1-9bf6-4d128565f378", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "b6e7dd4c-e8a1-400a-bc82-b8622f2a0499", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.levy_beta = 1.5\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                    \n                # Levy Flight\n                if np.random.rand() < 0.1:\n                    step = np.sign(np.random.randn(self.dim)) / np.power(np.random.gamma(1.5, 1.0), 1.0 / self.levy_beta)\n                    particles[i] += step\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer with Levy Flight for improved exploration in the search space.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "42aadb8c-cdde-4146-9e25-0a9acb8a7d37", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "efccdd1e-e4b5-4b73-9ddc-dea28c973758", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "88d60b57-7f4a-43c1-8d46-c2fff252073b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def levy_flight(self, size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=size)\n        v = np.random.normal(0, 1, size=size)\n        step = u / (abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i] + self.levy_flight(self.dim), -5.0, 5.0)\n                \n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer by introducing a novel mutation operator based on Levy flights to improve exploration capability.", "configspace": "", "generation": 21, "fitness": 0.14772150246027108, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.29532509058056744, 0.3040664439996409, 0.369421755511505, 0.2621040067198528, 0.2297410332167189, 0.33739222653823076, 0.32790586990479687, 0.29789561949090115, 0.33530300267325663, 9.999999999998899e-05, 0.0005178326687198531, 0.003617490632095932, 9.999999999998899e-05, 0.00864259806591472, 9.999999999998899e-05, 9.999999999998899e-05, 0.002701758391630338, 0.015700366864454973, 0.0645899354154581, 0.05896253721254141, 0.07181295398196363, 0.08144184032311641, 0.06320419449272796, 0.08692270554646953, 0.0663367180156107, 0.04143910114987759, 0.049102597475350174, 0.03994897783948914, 0.029762703472305252, 0.051123039538642834, 0.06765298910763196, 0.04479810076619306, 0.04432310131013417, 0.06951039483295374, 0.06516812788178739, 0.04897852804890612, 0.9898495966474918, 0.9890531444690185, 0.9917739461206314, 0.9874743333447243, 0.9863256343687969, 0.9965684024170742, 0.9920947909632115, 0.9834403712607732, 0.992244076148855, 0.11821636002841862, 0.0898707094972857, 0.09023629838292091, 0.1189437687277326, 0.11622342727852686, 0.09187851911501588, 0.0770687379712981, 0.10443813711072525, 0.1036607426366809, 0.2099434299166113, 0.13655721986423652, 0.15945782627259975, 0.1497382201652112, 0.14168919365343957, 0.14610131805518323, 0.17183837444242023, 0.14855319695644487, 0.13876828650705864, 0.13156148175483373, 0.08739915634331663, 0.039997438322442735, 0.0796314665612805, 0.10114699333049593, 0.08207124035060875, 0.10878738643160235, 0.09053276226162144, 0.1597290882876996, 0.14999646966445812, 0.08093454856515891, 0.09158642951576201, 0.07491536495078, 0.0887112840550982, 0.11546772220206036, 0.0975330335504132, 9.999999999998899e-05, 0.10305571665438906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030933520012768723, 0.022416612479162712, 0.041053397027297045, 0.00010529899620592698, 0.023497049291811734, 0.008180738586855085, 0.02298173482899568, 0.022260150015237956, 0.017010110778673537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001191659819024471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05366339543337162, 0.05883508469315801, 0.03423845919197066, 0.0827823071116367, 0.026980659624200598, 0.016517014299898825, 0.06281412138764009, 0.04310856133414742, 0.05321301130448919, 0.3001937378257432, 0.23528764835887073, 0.3138555122099016, 0.24831953287778685, 0.24114479631666186, 0.25362013452715393, 0.24583762668700504, 0.319773486680041, 0.23299636739821616, 0.06255905718191856, 0.052487659031371314, 0.046789644598081215, 0.06584591158226527, 0.04830293545401565, 0.06990228939474619, 0.06433884106965537, 0.05872163869889102, 0.06444185277303804, 0.1615117186998497, 0.1198727579561395, 0.11509182412391761, 0.19567178046423184, 0.1151265772078145, 0.17866473905543023, 0.1485340572159599, 0.10811672154546104, 0.11310642030298135, 0.16831018966052702, 0.19624305005259568, 0.1588334892882216, 0.1961279213360575, 0.14209612504929414, 0.15982766380985214, 0.19735694187845232, 0.20103975843440813, 0.18377502175117666, 0.13892240608139494, 0.15028452914653967, 0.13564804735809943, 0.15524632053319032, 0.1488439650343667, 0.10447499602709343, 0.13024507992895928, 0.1325574352608101, 0.12598647295164078, 0.14843911584073344, 0.12729859536448673, 0.1647893630571523, 0.1477037940572905, 0.14693510894102113, 0.13465753173306572, 0.16074947787834803, 0.1326725771411571, 0.15135775127575146, 0.15799322564232876, 0.1510631093368191, 0.15882641331400937, 0.1606871379407554, 0.15816128731318235, 0.14425895499103047, 0.16677897020507804, 0.1461457859724702, 0.16599945875967803, 0.14024131978851984, 0.14506663916532092, 0.1762383190232607, 0.163543351331483, 0.17076670236782354, 0.14589153606700034, 0.13278428612835036, 0.16392927000875845, 0.12610322255514672, 0.15043430913608413, 0.1063392849212651, 0.16258349206149492, 0.1995308320316661, 0.1955894364951799, 0.1911471188916326, 0.1317045570558274, 0.10665157517940205, 0.15175858572418333, 0.16814090551431005, 0.15823524227782126, 0.16234282729770688, 0.2111540789570644, 0.19356882874446635, 0.17268914975634087, 0.17230983324519644, 0.16930689070819716, 0.16490786892043485, 0.05353917997389035, 0.05194495531132326, 0.06050800877049134, 0.06675411421648314, 0.06269707982981854, 0.045147066107655176, 0.043711806539633136, 0.042985555421724886, 0.05268278729900755]}, "mutation_prompt": null}
{"id": "6b2d1647-3e63-4f10-afa1-dc4c12632fcb", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.levy_param = 0.5  # Levy flight parameter\n\n    def levy_flight(self, scale=1.0):\n        sigma = (gamma(1 + self.levy_param) * np.sin(np.pi * self.levy_param / 2) / (\n                gamma((1 + self.levy_param) / 2) * self.levy_param * 2 ** ((self.levy_param - 1) / 2))) ** (\n                        1 / self.levy_param)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / abs(v) ** (1 / self.levy_param)\n        return scale * step\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (\n                        personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + self.levy_flight(scale=self.temp)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhance PSO_SA_Optimizer by incorporating Levy flights for improved exploration capabilities.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 40, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 40, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "0d56fb29-71a0-4b8d-89c1-d3c0f47ddeb5", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.min_pop_size = 5\n        self.max_pop_size = 20\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n        self.temp_rate = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.temp_rate\n            self.pop_size = max(self.min_pop_size, min(self.max_pop_size, int(self.pop_size * (1 - _ / self.max_iter))))\n            self.inertia_weight = self.min_inertia + (_ / self.max_iter) * (self.max_inertia - self.min_inertia)\n        \n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by incorporating a dynamic population size update mechanism and adaptive parameter adjustment to improve convergence speed and solution quality.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "61930e5a-7e41-409b-a8e4-e48b7abf7f42", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "2ff08da7-0525-4bf9-a409-e243aae0f56b", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "f9797959-5b68-4592-b8a6-77f4bba12232", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "78f1e1f0-daae-499f-b786-bca90ad30fc8", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "66253461-4b2e-43a7-952f-49a8e9a5a633", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "ce5a8cfd-8755-48e2-bc14-c9389a61e81b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.threshold = 0.1\n        self.collapse_factor = 0.5\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        pop_size = 10\n        particles = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        velocities = np.zeros((pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n            \n            # Population size adaptation\n            if np.random.uniform(0, 1) < self.threshold:\n                pop_size = max(int(pop_size * self.collapse_factor), 2)\n                particles = np.vstack((particles, np.random.uniform(-5.0, 5.0, size=(pop_size-particles.shape[0], self.dim))))\n                velocities = np.vstack((velocities, np.zeros((pop_size-velocities.shape[0], self.dim)))\n                personal_best = np.vstack((personal_best, particles[-pop_size:].copy()))\n        \n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by incorporating a dynamic population size adaptation mechanism based on individual performance to improve exploration and exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 61, 17, '                personal_best = np.vstack((personal_best, particles[-pop_size:].copy()))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 61, 17, '                personal_best = np.vstack((personal_best, particles[-pop_size:].copy()))\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "36aac05e-07ae-49cf-a5fa-f029c45abdeb", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        self.levy_coeff = 0.1\n\n    def levy_flight(self, dim):\n        beta = 1.5\n        sigma1 = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        sigma2 = 1\n        u = np.random.normal(0, sigma1, dim)\n        v = np.random.normal(0, sigma2, dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return step\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                # Levy Flight for global exploration\n                if np.random.uniform(0, 1) < self.levy_coeff:\n                    particles[i] = np.clip(particles[i] + self.levy_flight(self.dim), -5.0, 5.0)\n\n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by incorporating Levy Flight for global exploration.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 40, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 40, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {}, "mutation_prompt": null}
{"id": "eae2f7df-32eb-4cf2-8bb4-46548bd6598c", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_iter = 1000\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_weight = 0.5\n        self.temp = 10.0\n        self.alpha = 0.95\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            if cost_diff < 0:\n                return True\n            return np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.3142053378622399, 0.3491708816659119, 0.4075991657946184, 0.3093348928759011, 0.2935475821159841, 0.22195043489746435, 0.38945688238287723, 0.319100066399557, 0.2115886701759221, 0.06770657825142812, 0.01525707716650182, 0.03161762989233741, 0.004045608639432929, 0.007006267928724608, 0.02132392601729094, 0.01020793740782755, 0.06259630170816877, 0.01239446517587417, 0.06402283980887424, 0.07177772525232828, 0.1003755181524062, 0.12442977602004701, 0.04782871847249426, 0.06168444238629833, 0.0816060451034919, 0.11098021581303696, 0.04690839343981279, 0.046205988984441726, 0.0665172136954616, 0.07909382434283274, 0.05270922226137986, 0.04248962604092554, 0.0692173538268327, 0.08647196413605984, 0.05712797922946633, 0.05536041563450145, 0.9984712824957456, 0.9973121252747597, 0.9853260304432502, 0.9971698245451157, 0.9769750134748411, 0.9960318680086618, 0.990039244883939, 0.988425916935338, 0.995640811670069, 0.08786259791026463, 0.09029937215036443, 0.11450543786977119, 0.11459756364001183, 0.1104544754413821, 0.11489598596047979, 0.10010102021348843, 0.10124878260348358, 0.1189777694865799, 0.17018835067348104, 0.1696262579609622, 0.16648785028405566, 0.207857237043366, 0.17927728614080518, 0.1663165343366172, 0.20322473752291748, 0.15143972967270314, 0.1453398754137475, 0.08238932052326875, 0.130367391387202, 0.14519335208090145, 0.057421394007378335, 0.0749099012283827, 0.07981799349725827, 0.127808932033891, 0.08501412811082976, 0.11037441098451983, 0.14421987848979856, 0.014023190336510005, 0.11656016967328575, 0.12223360082399759, 0.10697682610057202, 0.10941838755813427, 0.11134879821473476, 0.004410769374147083, 0.12418029985703583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001075312248846938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030039870446053052, 0.010639636092549143, 0.016562524665704625, 0.02360405040175484, 0.04431464086700998, 0.03585718249220338, 0.02304782931503868, 0.010387665582375472, 0.014561563883967787, 0.025061145746559155, 9.999999999998899e-05, 0.036249472871360044, 0.03649187336943682, 9.999999999998899e-05, 0.01887253696745539, 0.04770457590724142, 0.013853357309594916, 0.03192943281200533, 0.028720129946666728, 0.044770569424242956, 0.03326277775485398, 0.0819132884918996, 0.009098363525009479, 0.007619450265329619, 0.051217186157955785, 0.12430497733820178, 0.059464810934092394, 0.2997627788917968, 0.26642357463752886, 0.29029052007347256, 0.2598482298681509, 0.21735010016809797, 0.22053528516588972, 0.30051987296000626, 0.2877563758013595, 0.3246656953876046, 0.07322802403107942, 0.06593286169455459, 0.054777518405525916, 0.06185650464420689, 0.07385576098767721, 0.06775279731687656, 0.04850197356276531, 0.051317216237749874, 0.0634321621011733, 0.13253679036234467, 0.1093836038971483, 0.1172371596060593, 0.14902593596016322, 0.16160632694536248, 0.12151282109311445, 0.12581388550736605, 0.10775875605664953, 0.12712745258932867, 0.19648970258211607, 0.1929435835519564, 0.17348831632566886, 0.18544865854547743, 0.1610400965159623, 0.1698049170116961, 0.1756866772509056, 0.1752272526619636, 0.19382183134979403, 0.15501513433737457, 0.1383383575533016, 0.14654726131821494, 0.17751834285389723, 0.11383789685160373, 0.12465616582981964, 0.10470695029607524, 0.12999975248199913, 0.10168322568520582, 0.1505939831037656, 0.14587622949608758, 0.15368910201663621, 0.1579305314995736, 0.13765294498092118, 0.16453424481730183, 0.1473956593806366, 0.1659282645961535, 0.16220349047125215, 0.1678712586759581, 0.17843254626641936, 0.1485560991508501, 0.17542516703433297, 0.1533512789599657, 0.14922055818413715, 0.19364405161993892, 0.1569749541573099, 0.16864044374230858, 0.1713703668835822, 0.15630845058068732, 0.26814603431418105, 0.16780316511960414, 0.19040613357062108, 0.12930725248150943, 0.1536770398971421, 0.11273986069046771, 0.15723429406919331, 0.2668424183804573, 0.15683785312490617, 0.13601291464687837, 0.2557933502791274, 0.16023031947953992, 0.16922636061977048, 0.20117658486130607, 0.132346918062202, 0.15948197836335198, 0.1662116701670735, 0.15955634610966285, 0.16156211370330253, 0.1801675744191269, 0.16386839832814182, 0.15203687422736634, 0.1606543556374178, 0.15573249280062063, 0.15927318602720175, 0.05400823961202428, 0.05104232306791123, 0.05856788867856466, 0.05634151425835332, 0.0488784662304963, 0.05177960173978957, 0.06574135826415717, 0.04604669680074891, 0.07218977459791587]}, "mutation_prompt": null}
{"id": "fbff8093-072f-4b11-a149-87be6a0cc370", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 32, "fitness": 0.16410054599104726, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "01d43336-a103-4a80-90bc-6a73d75c4c79", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "9d700572-f332-4ba0-8fa9-0e876f644d7c", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "bf346e04-b755-4129-a1b8-b23f7b4a0259", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "69fe5922-c7b7-40c1-afcd-be62582d7661", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "fc2b65dd-d13c-4576-a4f7-f8e3fc859b5b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Differential Evolution for adaptive mutation\n                mutant = particles[np.random.choice(range(self.pop_size), 3, replace=False)]\n                cross_points = np.random.rand(self.dim) < 0.9\n                trial = particles[i].copy()\n                trial[cross_points] = mutant[0, cross_points] + 0.5 * (mutant[1, cross_points] - mutant[2, cross_points])\n                \n                if objective_function(trial) < objective_function(particles[i]):\n                    particles[i] = trial\n                    \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer with adaptive mutation strategy utilizing differential evolution to enhance exploration-exploitation balance.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 28, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 28, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "92f6e389-c07f-4d6e-a298-5262d14986c0", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "732f4b08-e253-45c1-9a17-ef201c0a48bc", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.diversity_threshold = 0.5\n        self.pop_increase_factor = 1.2\n        self.pop_decrease_factor = 0.8\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            self.temp *= self.alpha\n\n            # Update population size based on fitness diversity\n            fitness_values = [objective_function(p) for p in particles]\n            diversity = np.std(fitness_values) / (np.max(fitness_values) - np.min(fitness_values))\n            if diversity < self.diversity_threshold:\n                self.pop_size = min(int(self.pop_size * self.pop_increase_factor), 50)\n            else:\n                self.pop_size = max(int(self.pop_size * self.pop_decrease_factor), 5)\n\n            particles = np.concatenate([particles, np.random.uniform(-5.0, 5.0, size=(self.pop_size - len(particles), self.dim))])\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer with dynamically adjusting population size based on fitness diversity to balance exploration and exploitation.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "ff60044a-e06e-4e11-9ee5-b84dad8a1520", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "e56f6bba-0b05-43f4-96e6-2f0ad038ddaf", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "b8d20a8d-3401-43c4-8c6f-0192d09cb20b", "solution": "import numpy as np\n\nclass Improved_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20  # Increased population size\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.mutation_rate = 0.2  # Adaptive mutation rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                # Adaptive Mutation with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim) * self.mutation_rate  # Adaptive mutation\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            self.temp *= self.alpha\n\n        return global_best", "name": "Improved_Enhanced_PSO_SA_Optimizer", "description": "Improved Enhanced PSO_SA_Optimizer with adaptive mutation and dynamic population size.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "35df6ad3-9ed2-459a-825a-0ab8b8261324", "solution": "import numpy as np\n\nclass Dynamic_Mutation_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.min_mutation_rate = 0.1\n        self.max_mutation_rate = 0.5\n        self.mutation_rate = self.max_mutation_rate\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    mutation_vector = np.random.normal(0, self.temp * self.mutation_rate, size=self.dim)\n                    new_particle = particles[i] + mutation_vector\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n            self.mutation_rate = max(self.min_mutation_rate, self.mutation_rate - (self.max_mutation_rate - self.min_mutation_rate) * _ / self.max_iter)\n\n        return global_best", "name": "Dynamic_Mutation_Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with a dynamic mutation strategy by adapting mutation rate based on particle performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "d9842643-b4ad-4b72-8174-dd835c1aeac7", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.crowding_factor = 0.5  # Crowding factor for crowding-based selection\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Crowding-based selection for personal best update\n                if objective_function(particles[i]) < objective_function(personal_best[i]) and np.random.rand() < self.crowding_factor:\n                    personal_best[i] = particles[i].copy()\n                \n                # Crowding-based selection for global best update\n                if objective_function(particles[i]) < objective_function(global_best) and np.random.rand() < self.crowding_factor:\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing population diversity by incorporating crowding-based selection for personal best and global best updates.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "773aea25-341d-4272-b3ed-ff3d4cadadcd", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "2bde476d-56af-42e8-8574-a45ec6be822e", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.local_search_prob = 0.2  # Probability of applying local search\n\n    def local_search(self, particle, objective_function):\n        best_particle = particle.copy()\n        best_cost = objective_function(particle)\n        for _ in range(5):\n            new_particle = particle + np.random.normal(0, 0.5, size=self.dim)\n            new_particle = np.clip(new_particle, -5.0, 5.0)\n            new_cost = objective_function(new_particle)\n            if new_cost < best_cost:\n                best_cost = new_cost\n                best_particle = new_particle\n        return best_particle\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                if np.random.rand() < self.local_search_prob:\n                    particles[i] = self.local_search(particles[i], objective_function)\n\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer_Refined", "description": "Integrate a local search operator to exploit promising regions within the search space for enhanced optimization performance.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 40, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 40, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "563a53c3-0987-4fec-8920-82a0470f36de", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.levy_lambda = 1.5\n        \n    def levy_flight(self, size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=size)\n        v = np.random.normal(0, 1, size=size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Levy Flight for enhanced exploration\n                step = self.levy_flight(self.dim)\n                new_particle = particles[i] + step * self.levy_lambda\n                cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                if accept_move(cost_diff, self.temp):\n                    particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer with Levy Flight for enhanced global exploration capabilities.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 37, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 37, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "a84b2eb4-5e9c-4ca6-827e-ad8f738c2604", "solution": "import numpy as np\n\nclass Dynamic_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.min_pop_size = 5\n        self.max_pop_size = 25\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n            \n            # Adapt population size dynamically\n            if self.pop_size > self.min_pop_size:\n                self.pop_size = max(self.min_pop_size, int(self.pop_size - 0.1 * self.max_iter / self.budget))\n            if self.pop_size < self.max_pop_size:\n                self.pop_size = min(self.max_pop_size, int(self.pop_size + 0.1 * self.max_iter / self.budget))\n            \n        return global_best", "name": "Dynamic_Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation and dynamic population size for improved global exploration and exploitation.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "4fc69f76-5ab5-4e04-941b-d8f67419e85b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "a2a4d8b3-1aae-4390-b35c-d382d974e81a", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "95d139f4-2b54-4672-b237-78a205780504", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "b8c7feb4-2b5d-42c4-86f5-f396be7982f4", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_CS_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            # Cuckoo Search\n            nests = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n            for j in range(self.pop_size):\n                if np.random.rand() < self.pa:\n                    step_size = 0.01 * np.random.normal(0, 1, size=self.dim)\n                    new_nest = nests[j] + step_size\n                    if objective_function(new_nest) < objective_function(nests[j]):\n                        nests[j] = new_nest\n\n            particles = np.concatenate((particles, nests), axis=0)\n            fitness_values = [objective_function(p) for p in particles]\n            sorted_indices = np.argsort(fitness_values)\n            particles = particles[sorted_indices[:self.pop_size]]\n\n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_CS_Optimizer", "description": "Enhanced Particle Swarm Optimization with Simulated Annealing and Cuckoo Search hybrid algorithm for improved global search and exploitation capabilities.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "38c647ef-03de-499a-9a84-9743bed309ec", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "985e16b6-c6bf-4f22-a208-d663bf9d54e1", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "8fe5648f-0d5b-4fb7-b9b9-55763bcefb09", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.mutation_prob = 0.5\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with dynamically adjusted mutation probability\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    mutation_prob = self.mutation_prob * (1 - _ / 5)  # Adjust mutation probability based on iteration\n                    if np.random.uniform(0, 1) < mutation_prob and (cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / self.temp)):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improve convergence by dynamically adjusting mutation probabilities during optimization.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "d03d73cd-513b-4546-a77a-b243e6ad8de6", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "44fac434-0583-48c1-87a4-93eb7c096a5d", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "9830325a-09d2-48de-aa6f-ab6dfc97651d", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        pop_size = 15\n        particles = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        velocities = np.zeros((pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n            \n            # Dynamic population size adaptation\n            if np.random.rand() < 0.1:\n                pop_size = min(50, int(np.sqrt(pop_size) * 2))\n                particles = np.vstack((particles, np.random.uniform(-5.0, 5.0, size=(pop_size - len(particles), self.dim))))\n                velocities = np.vstack((velocities, np.zeros((pop_size - len(velocities), self.dim))))\n                personal_best = np.vstack((personal_best, particles[-(pop_size - len(personal_best)):]))\n        \n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing algorithm performance by incorporating a dynamic population size strategy to adapt to the problem complexity during optimization.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 28, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 28, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "e79b173b-6aff-4244-ba24-80b04bd2d382", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "5ce5dc25-4d3d-4e74-8331-1d8489581638", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "97764a15-0456-4237-85e0-256ca9460f51", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "6a357de6-a3ed-4fb5-9bb8-3b621721c90a", "solution": "import numpy as np\n\nclass Enhanced_Levy_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.levy_rate = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity with Levy flights\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                levy = np.random.standard_levy(self.dim) * self.levy_rate\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i]) + levy\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_Levy_PSO_SA_Optimizer", "description": "Enhancing the exploration-exploitation balance by incorporating Levy flights for improved global search capabilities.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "4c3b3b9a-1e9f-4fc2-beb4-0adbde062daa", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.f = 0.5  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                r3 = np.random.randint(0, self.pop_size, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (\n                            personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[r3])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            self.temp *= self.alpha\n\n        return global_best\n", "name": "Enhanced_PSO_SA_DE_Optimizer", "description": "Integrating a differential evolution strategy to enhance exploration and exploitation capabilities in the Enhanced PSO_SA_Optimizer algorithm.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "44ce06a9-113c-4b43-ba26-b7484ab9bcea", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.mutation_rate = 0.1  # New: Adaptive mutation rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim) * self.mutation_rate  # New: Adaptive mutation\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improved Enhanced PSO_SA_Optimizer algorithm with adaptive mutation and elite selection strategy for enhanced exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 28, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 28, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "7f524b3e-b4b7-4144-a3cb-d36ed9ddda8c", "solution": "import numpy as np\n\nclass Enhanced_Levy_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.alpha_levy = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n\n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                if np.random.uniform() < self.alpha_levy:\n                    levy_flight = 0.01 * np.random.standard_t(3, self.dim)\n                    velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.uniform() * (personal_best[i] - particles[i]) + self.c2 * np.random.uniform() * (global_best - particles[i]) + levy_flight\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n\n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n\n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n\n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_Levy_PSO_SA_Optimizer", "description": "Enhancing the exploration of the algorithm by introducing Levy flight for global exploration.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "76643d16-bb7e-456a-a9ce-f056bc51f32e", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "4960c812-8989-4848-80ab-32df56b691ff", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "ebe5b979-f69e-4565-9881-7c27835f7140", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "bfe2de9c-e9e9-4198-b9af-c825b026db0c", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "3cef8798-9e7e-406d-ac8f-f468dd917c3a", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "abcc21ff-3266-488e-9ab3-11668d5cdf3b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "cb55f1b4-1782-4d46-a0de-1cd31d514c2f", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.stage_iterations = [800, 400, 200]  # Define different stages of iterations\n        self.stage_alpha = [0.7, 0.8, 0.9]  # Define different stages of alpha\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        stage_counter = 0\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            if _ == self.stage_iterations[stage_counter]:\n                self.alpha = self.stage_alpha[stage_counter]\n                stage_counter += 1\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Adaptive Multi-Stage Learning for improved convergence capabilities.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        stage_counter = 0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        stage_counter = 0\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "5c498f71-cdae-4082-92ec-5d0206fa686b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "56b40ae9-21f7-4caf-baa3-f933192ae7e7", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "0ba9aed8-19bd-4103-aef3-a9ab420529d9", "solution": "import numpy as np\n\nclass MultiSwarm_optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.swarm_size = 3\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize swarms\n        swarms = [np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim)) for _ in range(self.swarm_size)]\n        velocities = [np.zeros((self.pop_size, self.dim)) for _ in range(self.swarm_size)]\n        personal_bests = [swarm.copy() for swarm in swarms]\n        global_best = swarms[0][np.argmin([objective_function(p) for p in swarms[0]])\n        \n        for _ in range(self.max_iter):\n            for j, swarm in enumerate(swarms):\n                for i in range(self.pop_size):\n                    # Update velocity\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[j][i] = self.inertia_weight * velocities[j][i] + self.c1 * r1 * (personal_bests[j][i] - swarm[i]) + self.c2 * r2 * (global_best - swarm[i])\n                    # Update position\n                    swarm[i] = np.clip(swarm[i] + velocities[j][i], -5.0, 5.0)\n                    \n                    # Simulated Annealing with Gaussian mutation\n                    for _ in range(5):\n                        new_particle = swarm[i] + np.random.normal(0, self.temp, size=self.dim)\n                        cost_diff = objective_function(new_particle) - objective_function(swarm[i])\n                        if accept_move(cost_diff, self.temp):\n                            swarm[i] = new_particle\n                        \n                    # Update personal best\n                    if objective_function(swarm[i]) < objective_function(personal_bests[j][i]):\n                        personal_bests[j][i] = swarm[i].copy()\n                    # Update global best\n                    if objective_function(swarm[i]) < objective_function(global_best):\n                        global_best = swarm[i].copy()\n                \n                self.temp *= self.alpha\n\n        return global_best", "name": "MultiSwarm_optimizer", "description": "Enhancing diversity through multi-swarm optimization with adaptive temperature control for improved exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "d5f5f9fc-ff25-4629-b9f5-d3880cc07b2f", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "0ddf062e-8aac-425c-8dd6-d856d3c83457", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "69a48b04-8428-4908-944b-bc7337d0e7c3", "solution": "import numpy as np\n\nclass Dynamic_Temp_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.beta = 0.98  # New parameter for dynamic temperature update\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.beta  # Update temperature dynamically\n\n        return global_best", "name": "Dynamic_Temp_Enhanced_PSO_SA_Optimizer", "description": "Improved Enhanced PSO_SA_Optimizer algorithm with dynamic temperature update for better convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "6425de48-1a7a-4ced-a8c8-29304b2ed932", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "a62d91cb-c616-465f-909e-3608fd1c8be6", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "8e0cadd0-6c54-4edb-b92a-b72eb71db683", "solution": "import numpy as np\n\nclass Dynamic_IW_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            inertia_weight = 0.5 + 0.4 * (_ / self.max_iter)  # Dynamic inertia weight adjustment\n            \n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best\n", "name": "Dynamic_IW_Enhanced_PSO_SA_Optimizer", "description": "Utilizing a dynamic inertia weight adjustment strategy to enhance convergence speed and performance of the algorithm.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "b7cd7dd8-bc90-4d56-8a98-5e6325d869c7", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "629ffb47-47bb-4823-98d3-89f395a1235d", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "28937915-3376-4e40-abbe-3ede1a8315a4", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "08fa633b-8329-46b2-a404-83d4f00801dc", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "518417b1-6ebf-4fc3-bba7-553e28a82fad", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Differential Evolution\n                candidate = particles[i] + np.random.normal(0, 1, size=self.dim) * (personal_best[i] - particles[i]) + np.random.normal(0, 1, size=self.dim) * (global_best - particles[i])\n                if objective_function(candidate) < objective_function(particles[i]):\n                    particles[i] = candidate\n                   \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer with Differential Evolution for improved global search capabilities.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 28, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 28, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "6a6c157f-3874-43c7-862c-4dba90e95f22", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "c3a7f2cf-16eb-40f1-b07b-ae0bb93a3206", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "227033bb-270c-4678-bfe7-a87676d70b10", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "7ddcfe27-c162-4301-8676-d32102e3ca1d", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "da7e2dbf-9042-423c-a049-e281406e87be", "solution": "import numpy as np\n\nclass Improved_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.beta = 0.1\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Adaptive Mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp * (1.0 / (1.0 + self.beta * objective_function(particles[i]))), size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                        if cost_diff < 0:\n                            self.beta *= 0.95\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Improved_Enhanced_PSO_SA_Optimizer", "description": "Improved Enhanced PSO_SA_Optimizer with adaptive mutation strength based on individual particle performance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "6fc371a1-7767-499b-a856-0fc2d3ed420b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "799949af-8411-48ad-b921-bb654971af52", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.mu = 0.0\n        self.sigma = 1.0\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Dynamic mutation strategy based on individual performance\n                mutation_strength = np.abs(global_best - particles[i]) * np.random.normal(self.mu, self.sigma, size=self.dim)\n                particles[i] = np.clip(particles[i] + mutation_strength, -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the exploration capabilities by incorporating a dynamic mutation strategy based on individual particle performance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "ea43b789-7c10-4a86-9d7b-3a730f179c18", "solution": "import numpy as np\n\nclass Improved_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.mutation_rate = 0.1\n        self.elitism_rate = 0.1\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Adaptive Mutation with Gaussian mutation\n                for _ in range(5):\n                    mutation_std = self.mutation_rate * np.std(particles)\n                    new_particle = particles[i] + np.random.normal(0, mutation_std, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Elitism\n                if np.random.uniform(0, 1) < self.elitism_rate:\n                    particles[i] = personal_best[np.argmin([objective_function(p) for p in personal_best])].copy()\n                    \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n                \n            self.temp *= self.alpha\n\n        return global_best", "name": "Improved_Enhanced_PSO_SA_Optimizer", "description": "Improved Enhanced PSO_SA_Optimizer with adaptive mutation and elitism for enhanced convergence and exploitation.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "feaa8f8d-ffbf-477b-bf8f-0a351a7df727", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.min_pop_size = 10\n        self.max_pop_size = 20\n        self.mutation_rate = 0.1\n        self.min_temp = 1.0\n        self.max_temp = 20.0\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                        \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n            self.pop_size = int(self.min_pop_size + (self.max_pop_size - self.min_pop_size) * np.exp(-self.mutation_rate * _ / self.max_iter))\n            self.temp = max(self.min_temp, min(self.temp, self.max_temp))\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Improving Enhanced PSO_SA_Optimizer with dynamic population resizing and adaptive mutation rate.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 33, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 33, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "bdc87f2f-4dd0-43a4-8108-e7adb118a5b0", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.initial_inertia_weight = 0.6\n        self.initial_temp = 15.0\n        self.alpha = 0.9\n        self.iter_counter = 0\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Parameter Adaptation\n                self.iter_counter += 1\n                inertia_weight = self.initial_inertia_weight * np.exp(-0.1 * self.iter_counter / self.max_iter)\n                temp = self.initial_temp * np.exp(-0.1 * self.iter_counter / self.max_iter)\n                \n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n        return global_best", "name": "Enhanced_Adaptive_PSO_SA_Optimizer", "description": "Enhancing the algorithm by incorporating a dynamic parameter adaptation strategy to adjust inertia weight and temperature during optimization.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "a6e3091a-d427-48f4-8fb5-1aaa08b3ba74", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        inertia_weight = 0.9  # Adaptive inertia weight initialization\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity with adaptive inertia weight\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Dynamic mutation with Cauchy distribution\n                mutation_scale = 1.0 / (1.0 + np.exp(-self.temp))  # Scale mutation based on temperature\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.standard_cauchy(size=self.dim) * mutation_scale\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n            inertia_weight *= 0.99  # Update inertia weight\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer with adaptive inertia weight and dynamic mutation.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 26, 9, '        inertia_weight = 0.9  # Adaptive inertia weight initialization\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 26, 9, '        inertia_weight = 0.9  # Adaptive inertia weight initialization\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
{"id": "3663167f-1c73-48e7-ac07-5d9a13c2b5b7", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "73491922-dd25-45d4-a18f-ab70cf2a9d99", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.6\n        self.temp = 15.0\n        self.alpha = 0.9\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    new_particle = particles[i] + np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n            \n            self.temp *= self.alpha\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm with Gaussian mutation for improved exploration capabilities.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {"aucs": [0.348491845281801, 0.3373509187970206, 0.3735006846273704, 0.2603059345912868, 0.2717479020311456, 0.2987492198257884, 0.3490264229534603, 0.3282653227803397, 0.35183493747614336, 0.05729645646926096, 0.06179806218372674, 0.039781704304732934, 0.002586758834482006, 0.031855426247382135, 0.0556294649967225, 0.02633103432715178, 0.1086011602738628, 0.028380571294252865, 0.06352226292772323, 0.0703834079803497, 0.07728831894676336, 0.07946123915671321, 0.07243467079108845, 0.0708213678276679, 0.07766518889338492, 0.08531284228919556, 0.05743854406571258, 0.08944840966157497, 0.0633242063458832, 0.05998164050177279, 0.050308729941864305, 0.05622927924774013, 0.03643227444532715, 0.059352786370117094, 0.054122870195838724, 0.0692795916077612, 0.9872924060831806, 0.9915880239415474, 0.995297588295303, 0.9886179950011696, 0.9928038872505109, 0.9852714434332561, 0.9918774923537158, 0.9931893444488122, 0.9967970057952237, 0.1392017918397913, 0.1157626260069583, 0.0912674391236884, 0.10993125382211788, 0.13554611602578082, 0.1575296603016748, 0.14431285041341435, 0.13326066460521413, 0.11942651593664289, 0.20913398239442438, 0.25980296428237404, 0.15830749462193505, 0.1679727221094226, 0.17720229368811646, 0.27286644481545475, 0.14607091335873224, 0.15527035332768502, 0.14555955236790397, 0.09640860446881439, 0.11781675782848489, 0.1043745918834964, 0.10055571803240893, 0.06750024463435189, 0.12793223721429625, 0.11253777359397898, 0.09750894199122762, 0.1257065683393901, 0.10324460896355248, 0.04729719261001153, 0.07717793846572407, 0.09166032297982818, 0.11141486478295393, 0.12330510921932569, 0.1532277956094873, 0.06155024451431268, 0.1254675138886252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018009114388259917, 9.999999999998899e-05, 0.009663323571711735, 0.04148933597646831, 0.046558379998562716, 0.062006269296363326, 0.014990234669769564, 0.002018246319393069, 0.02366436786725501, 0.015210383955423623, 0.02261711890843232, 0.027214879008099158, 0.017013366934254148, 0.02072732375103692, 0.017002018658112905, 0.014049188556380932, 0.01787472458203354, 0.036073928751094164, 0.021827380963928777, 0.02138922548993849, 0.013732767565435844, 0.029480425439929236, 0.09738385607073485, 0.07081373268399693, 0.024394402854936548, 0.018225495884733767, 0.004017481475228846, 0.049566394773076006, 0.03890754824423115, 0.05946283110149564, 0.28955897619376814, 0.31401648807732685, 0.33920767195787604, 0.26419238259607836, 0.29690824741246624, 0.25513408114885516, 0.3230671905030803, 0.28863105780112686, 0.3087926945649512, 0.06585173964898572, 0.05829655191566996, 0.08493562792219922, 0.07309715189243848, 0.07925153489007175, 0.10443544395208082, 0.08378798558904965, 0.07789322685521072, 0.06703176796254573, 0.14010013465881077, 0.1373978485791416, 0.11201619839127142, 0.14030910566582966, 0.14279591367967792, 0.13257419554571392, 0.12664457075446156, 0.12456261299056481, 0.12076172845431832, 0.1733025811785377, 0.21675348876889688, 0.18666756958857444, 0.1764010014952293, 0.17809238655594162, 0.20186368154351686, 0.1985079795451027, 0.21603010096290332, 0.17559860612882416, 0.12652787006991983, 0.16105398120227987, 0.1370594868103333, 0.17229797063867658, 0.12673258979373636, 0.2128173056933429, 0.15892707105118753, 0.1371092616180415, 0.14649356508829736, 0.16029792435044077, 0.15605525574604673, 0.15237925502779215, 0.17247765299755935, 0.17440424192734316, 0.17894356843791792, 0.16392252659671924, 0.15681121669930598, 0.19680581469802882, 0.16223793862949276, 0.1728698794463518, 0.16771479367095976, 0.17784107284713313, 0.16475300224889122, 0.21863613626614886, 0.16824511376121898, 0.26179744220332457, 0.18384613465875888, 0.43614992732010616, 0.1729494833922246, 0.14568359421268762, 0.1675938896585627, 0.31580697611718733, 0.191933694779176, 0.3018162216362674, 0.16693574585631854, 0.1340152734998623, 0.10920095033117283, 0.17425625934568922, 0.21286546977341148, 0.1911465103309652, 0.1615544848235917, 0.1915871550739533, 0.14755559103575544, 0.19102885847873508, 0.1608615644557232, 0.1550963541868401, 0.1619997126274877, 0.168585532940572, 0.1727887340754749, 0.1644062241912656, 0.1658880266197228, 0.1766406569328397, 0.16262948495275342, 0.17356001471227012, 0.06187494767880908, 0.06088998524688449, 0.059964757725222584, 0.07322876189355298, 0.04857430876112612, 0.05946452995619933, 0.08023605419290047, 0.05332481587441529, 0.060030925878518215]}, "mutation_prompt": null}
{"id": "f457c8cc-2706-40f0-b029-08eaa2ea467b", "solution": "import numpy as np\n\nclass Adaptive_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 15\n        self.max_iter = 1200\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.initial_inertia_weight = 0.9\n        self.temp = 15.0\n        self.alpha = 0.9\n        self.lbound = -5.0\n        self.ubound = 5.0\n        \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def accept_move(cost_diff, temp):\n            return cost_diff < 0 or np.random.uniform(0, 1) < np.exp(-cost_diff / temp)\n        \n        # Initialize particles\n        particles = np.random.uniform(self.lbound, self.ubound, size=(self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        personal_best = particles.copy()\n        global_best = particles[np.argmin([objective_function(p) for p in particles])\n        inertia_weight = self.initial_inertia_weight\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = inertia_weight * velocities[i] + self.c1 * r1 * (personal_best[i] - particles[i]) + self.c2 * r2 * (global_best - particles[i])\n                # Update position\n                particles[i] = np.clip(particles[i] + velocities[i], self.lbound, self.ubound)\n                \n                # Simulated Annealing with Gaussian mutation\n                for _ in range(5):\n                    mutation_rate = 1.0 / np.sqrt(1 + inertia_weight)\n                    new_particle = particles[i] + mutation_rate * np.random.normal(0, self.temp, size=self.dim)\n                    cost_diff = objective_function(new_particle) - objective_function(particles[i])\n                    if accept_move(cost_diff, self.temp):\n                        particles[i] = new_particle\n                \n                # Update personal best\n                if objective_function(particles[i]) < objective_function(personal_best[i]):\n                    personal_best[i] = particles[i].copy()\n                # Update global best\n                if objective_function(particles[i]) < objective_function(global_best):\n                    global_best = particles[i].copy()\n                    \n            inertia_weight = self.update_inertia(inertia_weight)\n\n        return global_best\n      \n    def update_inertia(self, inertia_weight):\n        return max(0.3, inertia_weight * 0.995)  # Reduce inertia weight gradually", "name": "Adaptive_Enhanced_PSO_SA_Optimizer", "description": "Improving convergence by dynamically adapting inertia weight and mutation rate through self-adaptive mechanisms.", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        inertia_weight = self.initial_inertia_weight\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        inertia_weight = self.initial_inertia_weight\\n'))", "parent_id": "fbff8093-072f-4b11-a149-87be6a0cc370", "metadata": {}, "mutation_prompt": null}
