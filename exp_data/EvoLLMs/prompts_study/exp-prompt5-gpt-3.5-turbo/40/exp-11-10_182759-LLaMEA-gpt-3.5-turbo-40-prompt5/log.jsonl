{"id": "c1a83f98-c5f8-42d4-ac62-b4ed2f6379b9", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass PSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "PSO", "description": "Particle Swarm Optimization with Dynamic Inertia Weight and Chaotic Initialization", "configspace": "", "generation": 0, "fitness": 0.23757338289953184, "feedback": "The algorithm PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8467144045222466, 0.8367162432546811, 0.841130033275773, 0.8532327015547759, 0.18995584453458847, 0.18296612538988744, 0.8443958948824792, 0.8494452617059592, 0.8470207439577442, 0.0, 0.29693565218223417, 0.0, 0.7210980213901294, 0.22983471692777824, 0.6089098193624685, 0.0, 0.6823465899391017, 0.6383491522920841, 0.13648044542031168, 0.1176806363459646, 0.10742516787937584, 0.11873789746375041, 0.16722295585560043, 0.14387946700135124, 0.11429969777718085, 0.11062207716674766, 0.12962149709368365, 0.09451709088062632, 0.1359659285916297, 0.15444426848933668, 0.11442424821473685, 0.10937500569447567, 0.10820406671861527, 0.12069999852603686, 0.08685370392020286, 0.14271569384565863, 0.9933621685893338, 0.9941291589985412, 0.9942870605505805, 0.9922964440432273, 0.990727708645472, 0.9892023346262395, 0.9925389683635815, 0.9941614847736984, 0.9936047032987505, 0.2869099878720158, 0.05957682199525027, 0.05542745561918838, 0.1466910428328343, 0.2778641226743437, 0.1489806089563297, 0.23499944265380857, 0.0885288335665595, 0.3098532470028216, 0.1699661962754344, 0.15898875170910765, 0.2306754116213523, 0.20234693262757686, 0.18294142843069638, 0.16048493133596964, 0.2915414512052342, 0.12784391651529137, 0.21892296780582532, 0.12527741778610957, 0.2548087595501053, 0.11823151480370775, 0.16213788190367684, 0.12252743504171626, 0.09518222173472546, 0.17074284146820717, 0.2617302995749673, 0.16300664341990834, 0.12481658789375649, 0.010011538449401503, 0.1621178553730226, 0.16539917091148926, 0.019450190290474678, 0.17082204872318962, 0.15878169017630095, 0.0, 0.21518805058282975, 0.0, 0.0, 0.0, 0.04383779916487618, 0.0, 0.0, 0.02076488785792774, 0.0, 0.0, 0.03972831965613188, 0.038406060022965316, 0.04411992079728955, 0.05915303642382064, 0.0, 0.0029633734522825916, 0.07727941058037158, 0.016620307190509997, 0.0206697362915218, 0.04663143954573756, 0.07017897472131351, 0.1020006413938449, 0.09070510602610415, 0.148117782601635, 0.07241692834299518, 0.09364429323341084, 0.1476915457952458, 0.06904662097355174, 0.12593132386480776, 0.04128342774155647, 0.03874284937360317, 0.06706590974334925, 0.005863179129496854, 0.06563781917582712, 0.048397104780186107, 0.048787003014656105, 0.11501390825902458, 0.45946470935703143, 0.47865612499059984, 0.44248290668119683, 0.49493089661954415, 0.5640631619333583, 0.4703359706217075, 0.5018978917571489, 0.4886461730698688, 0.4519929064487692, 0.06130009342125686, 0.06688595982653844, 0.0709238450703713, 0.13995314611619591, 0.12069906058600988, 0.12537585418088182, 0.06493658370634225, 0.10992499564505764, 0.060569321771623774, 0.18630387643935875, 0.17244750405445952, 0.1700091430353956, 0.24204420564978768, 0.15549358008637681, 0.18920648302673337, 0.3866053068687275, 0.24002252242705635, 0.20407109832525616, 0.32923244815857455, 0.38363911049653954, 0.2959426866055783, 0.34172206958850004, 0.36332730572422667, 0.22019578600171585, 0.28210541344432505, 0.3318066680332902, 0.1607879881819677, 0.33482572558863666, 0.22103268539325638, 0.188311061002008, 0.24536678092475872, 0.1385956640956929, 0.2385176805929643, 0.30499280216020075, 0.30736919803742435, 0.11974386068295828, 0.19041837259236438, 0.16151891101517246, 0.21016144501496448, 0.19068150465111955, 0.1676215909137838, 0.1920531549720157, 0.2356083459040046, 0.19917370844529747, 0.20112932446639187, 0.22208509940761811, 0.1784298389357034, 0.24359800658650932, 0.2460894644000311, 0.17048784569694542, 0.19385636407288032, 0.2189713979376131, 0.2154875816887134, 0.21281172417784677, 0.8164247270659436, 0.15390672366326796, 0.1529971761261415, 0.8581862263186874, 0.19857596474571315, 0.19764525518036846, 0.12248822273437987, 0.16924348634616615, 0.18564602740697844, 0.465390820973389, 0.15546063359593276, 0.11761130304270695, 0.2744895662927137, 0.23850432987979098, 0.20612924424809753, 0.19863299174785742, 0.1045612240113758, 0.40227567034364586, 0.20365481527590268, 0.1996556790186278, 0.2151057773693441, 0.20060875794409494, 0.19404166795337585, 0.17300245626867727, 0.19301011942119017, 0.18381174907655007, 0.1873147571148034, 0.08995460333960092, 0.0708166067228373, 0.07450033868207961, 0.08605606912604635, 0.09349255011240898, 0.08753479844179202, 0.07861678185428322, 0.0819614137864284, 0.077594742275512]}, "mutation_prompt": null}
{"id": "41712967-0881-4bf9-80f3-d1e03e1def82", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass PSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "PSO", "description": "Particle Swarm Optimization with Dynamic Inertia Weight and Chaotic Initialization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1a83f98-c5f8-42d4-ac62-b4ed2f6379b9", "metadata": {"aucs": [0.8467144045222466, 0.8367162432546811, 0.841130033275773, 0.8532327015547759, 0.18995584453458847, 0.18296612538988744, 0.8443958948824792, 0.8494452617059592, 0.8470207439577442, 0.0, 0.29693565218223417, 0.0, 0.7210980213901294, 0.22983471692777824, 0.6089098193624685, 0.0, 0.6823465899391017, 0.6383491522920841, 0.13648044542031168, 0.1176806363459646, 0.10742516787937584, 0.11873789746375041, 0.16722295585560043, 0.14387946700135124, 0.11429969777718085, 0.11062207716674766, 0.12962149709368365, 0.09451709088062632, 0.1359659285916297, 0.15444426848933668, 0.11442424821473685, 0.10937500569447567, 0.10820406671861527, 0.12069999852603686, 0.08685370392020286, 0.14271569384565863, 0.9933621685893338, 0.9941291589985412, 0.9942870605505805, 0.9922964440432273, 0.990727708645472, 0.9892023346262395, 0.9925389683635815, 0.9941614847736984, 0.9936047032987505, 0.2869099878720158, 0.05957682199525027, 0.05542745561918838, 0.1466910428328343, 0.2778641226743437, 0.1489806089563297, 0.23499944265380857, 0.0885288335665595, 0.3098532470028216, 0.1699661962754344, 0.15898875170910765, 0.2306754116213523, 0.20234693262757686, 0.18294142843069638, 0.16048493133596964, 0.2915414512052342, 0.12784391651529137, 0.21892296780582532, 0.12527741778610957, 0.2548087595501053, 0.11823151480370775, 0.16213788190367684, 0.12252743504171626, 0.09518222173472546, 0.17074284146820717, 0.2617302995749673, 0.16300664341990834, 0.12481658789375649, 0.010011538449401503, 0.1621178553730226, 0.16539917091148926, 0.019450190290474678, 0.17082204872318962, 0.15878169017630095, 0.0, 0.21518805058282975, 0.0, 0.0, 0.0, 0.04383779916487618, 0.0, 0.0, 0.02076488785792774, 0.0, 0.0, 0.03972831965613188, 0.038406060022965316, 0.04411992079728955, 0.05915303642382064, 0.0, 0.0029633734522825916, 0.07727941058037158, 0.016620307190509997, 0.0206697362915218, 0.04663143954573756, 0.07017897472131351, 0.1020006413938449, 0.09070510602610415, 0.148117782601635, 0.07241692834299518, 0.09364429323341084, 0.1476915457952458, 0.06904662097355174, 0.12593132386480776, 0.04128342774155647, 0.03874284937360317, 0.06706590974334925, 0.005863179129496854, 0.06563781917582712, 0.048397104780186107, 0.048787003014656105, 0.11501390825902458, 0.45946470935703143, 0.47865612499059984, 0.44248290668119683, 0.49493089661954415, 0.5640631619333583, 0.4703359706217075, 0.5018978917571489, 0.4886461730698688, 0.4519929064487692, 0.06130009342125686, 0.06688595982653844, 0.0709238450703713, 0.13995314611619591, 0.12069906058600988, 0.12537585418088182, 0.06493658370634225, 0.10992499564505764, 0.060569321771623774, 0.18630387643935875, 0.17244750405445952, 0.1700091430353956, 0.24204420564978768, 0.15549358008637681, 0.18920648302673337, 0.3866053068687275, 0.24002252242705635, 0.20407109832525616, 0.32923244815857455, 0.38363911049653954, 0.2959426866055783, 0.34172206958850004, 0.36332730572422667, 0.22019578600171585, 0.28210541344432505, 0.3318066680332902, 0.1607879881819677, 0.33482572558863666, 0.22103268539325638, 0.188311061002008, 0.24536678092475872, 0.1385956640956929, 0.2385176805929643, 0.30499280216020075, 0.30736919803742435, 0.11974386068295828, 0.19041837259236438, 0.16151891101517246, 0.21016144501496448, 0.19068150465111955, 0.1676215909137838, 0.1920531549720157, 0.2356083459040046, 0.19917370844529747, 0.20112932446639187, 0.22208509940761811, 0.1784298389357034, 0.24359800658650932, 0.2460894644000311, 0.17048784569694542, 0.19385636407288032, 0.2189713979376131, 0.2154875816887134, 0.21281172417784677, 0.8164247270659436, 0.15390672366326796, 0.1529971761261415, 0.8581862263186874, 0.19857596474571315, 0.19764525518036846, 0.12248822273437987, 0.16924348634616615, 0.18564602740697844, 0.465390820973389, 0.15546063359593276, 0.11761130304270695, 0.2744895662927137, 0.23850432987979098, 0.20612924424809753, 0.19863299174785742, 0.1045612240113758, 0.40227567034364586, 0.20365481527590268, 0.1996556790186278, 0.2151057773693441, 0.20060875794409494, 0.19404166795337585, 0.17300245626867727, 0.19301011942119017, 0.18381174907655007, 0.1873147571148034, 0.08995460333960092, 0.0708166067228373, 0.07450033868207961, 0.08605606912604635, 0.09349255011240898, 0.08753479844179202, 0.07861678185428322, 0.0819614137864284, 0.077594742275512]}, "mutation_prompt": null}
{"id": "34fa99ce-6322-4a88-a7ec-aff0ad8db993", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass PSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "PSO", "description": "Particle Swarm Optimization with Dynamic Inertia Weight and Chaotic Initialization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1a83f98-c5f8-42d4-ac62-b4ed2f6379b9", "metadata": {"aucs": [0.8467144045222466, 0.8367162432546811, 0.841130033275773, 0.8532327015547759, 0.18995584453458847, 0.18296612538988744, 0.8443958948824792, 0.8494452617059592, 0.8470207439577442, 0.0, 0.29693565218223417, 0.0, 0.7210980213901294, 0.22983471692777824, 0.6089098193624685, 0.0, 0.6823465899391017, 0.6383491522920841, 0.13648044542031168, 0.1176806363459646, 0.10742516787937584, 0.11873789746375041, 0.16722295585560043, 0.14387946700135124, 0.11429969777718085, 0.11062207716674766, 0.12962149709368365, 0.09451709088062632, 0.1359659285916297, 0.15444426848933668, 0.11442424821473685, 0.10937500569447567, 0.10820406671861527, 0.12069999852603686, 0.08685370392020286, 0.14271569384565863, 0.9933621685893338, 0.9941291589985412, 0.9942870605505805, 0.9922964440432273, 0.990727708645472, 0.9892023346262395, 0.9925389683635815, 0.9941614847736984, 0.9936047032987505, 0.2869099878720158, 0.05957682199525027, 0.05542745561918838, 0.1466910428328343, 0.2778641226743437, 0.1489806089563297, 0.23499944265380857, 0.0885288335665595, 0.3098532470028216, 0.1699661962754344, 0.15898875170910765, 0.2306754116213523, 0.20234693262757686, 0.18294142843069638, 0.16048493133596964, 0.2915414512052342, 0.12784391651529137, 0.21892296780582532, 0.12527741778610957, 0.2548087595501053, 0.11823151480370775, 0.16213788190367684, 0.12252743504171626, 0.09518222173472546, 0.17074284146820717, 0.2617302995749673, 0.16300664341990834, 0.12481658789375649, 0.010011538449401503, 0.1621178553730226, 0.16539917091148926, 0.019450190290474678, 0.17082204872318962, 0.15878169017630095, 0.0, 0.21518805058282975, 0.0, 0.0, 0.0, 0.04383779916487618, 0.0, 0.0, 0.02076488785792774, 0.0, 0.0, 0.03972831965613188, 0.038406060022965316, 0.04411992079728955, 0.05915303642382064, 0.0, 0.0029633734522825916, 0.07727941058037158, 0.016620307190509997, 0.0206697362915218, 0.04663143954573756, 0.07017897472131351, 0.1020006413938449, 0.09070510602610415, 0.148117782601635, 0.07241692834299518, 0.09364429323341084, 0.1476915457952458, 0.06904662097355174, 0.12593132386480776, 0.04128342774155647, 0.03874284937360317, 0.06706590974334925, 0.005863179129496854, 0.06563781917582712, 0.048397104780186107, 0.048787003014656105, 0.11501390825902458, 0.45946470935703143, 0.47865612499059984, 0.44248290668119683, 0.49493089661954415, 0.5640631619333583, 0.4703359706217075, 0.5018978917571489, 0.4886461730698688, 0.4519929064487692, 0.06130009342125686, 0.06688595982653844, 0.0709238450703713, 0.13995314611619591, 0.12069906058600988, 0.12537585418088182, 0.06493658370634225, 0.10992499564505764, 0.060569321771623774, 0.18630387643935875, 0.17244750405445952, 0.1700091430353956, 0.24204420564978768, 0.15549358008637681, 0.18920648302673337, 0.3866053068687275, 0.24002252242705635, 0.20407109832525616, 0.32923244815857455, 0.38363911049653954, 0.2959426866055783, 0.34172206958850004, 0.36332730572422667, 0.22019578600171585, 0.28210541344432505, 0.3318066680332902, 0.1607879881819677, 0.33482572558863666, 0.22103268539325638, 0.188311061002008, 0.24536678092475872, 0.1385956640956929, 0.2385176805929643, 0.30499280216020075, 0.30736919803742435, 0.11974386068295828, 0.19041837259236438, 0.16151891101517246, 0.21016144501496448, 0.19068150465111955, 0.1676215909137838, 0.1920531549720157, 0.2356083459040046, 0.19917370844529747, 0.20112932446639187, 0.22208509940761811, 0.1784298389357034, 0.24359800658650932, 0.2460894644000311, 0.17048784569694542, 0.19385636407288032, 0.2189713979376131, 0.2154875816887134, 0.21281172417784677, 0.8164247270659436, 0.15390672366326796, 0.1529971761261415, 0.8581862263186874, 0.19857596474571315, 0.19764525518036846, 0.12248822273437987, 0.16924348634616615, 0.18564602740697844, 0.465390820973389, 0.15546063359593276, 0.11761130304270695, 0.2744895662927137, 0.23850432987979098, 0.20612924424809753, 0.19863299174785742, 0.1045612240113758, 0.40227567034364586, 0.20365481527590268, 0.1996556790186278, 0.2151057773693441, 0.20060875794409494, 0.19404166795337585, 0.17300245626867727, 0.19301011942119017, 0.18381174907655007, 0.1873147571148034, 0.08995460333960092, 0.0708166067228373, 0.07450033868207961, 0.08605606912604635, 0.09349255011240898, 0.08753479844179202, 0.07861678185428322, 0.0819614137864284, 0.077594742275512]}, "mutation_prompt": null}
{"id": "963cd957-a475-4c61-920a-fc7ea3938531", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass PSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "PSO", "description": "Particle Swarm Optimization with Dynamic Inertia Weight and Chaotic Initialization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1a83f98-c5f8-42d4-ac62-b4ed2f6379b9", "metadata": {"aucs": [0.8467144045222466, 0.8367162432546811, 0.841130033275773, 0.8532327015547759, 0.18995584453458847, 0.18296612538988744, 0.8443958948824792, 0.8494452617059592, 0.8470207439577442, 0.0, 0.29693565218223417, 0.0, 0.7210980213901294, 0.22983471692777824, 0.6089098193624685, 0.0, 0.6823465899391017, 0.6383491522920841, 0.13648044542031168, 0.1176806363459646, 0.10742516787937584, 0.11873789746375041, 0.16722295585560043, 0.14387946700135124, 0.11429969777718085, 0.11062207716674766, 0.12962149709368365, 0.09451709088062632, 0.1359659285916297, 0.15444426848933668, 0.11442424821473685, 0.10937500569447567, 0.10820406671861527, 0.12069999852603686, 0.08685370392020286, 0.14271569384565863, 0.9933621685893338, 0.9941291589985412, 0.9942870605505805, 0.9922964440432273, 0.990727708645472, 0.9892023346262395, 0.9925389683635815, 0.9941614847736984, 0.9936047032987505, 0.2869099878720158, 0.05957682199525027, 0.05542745561918838, 0.1466910428328343, 0.2778641226743437, 0.1489806089563297, 0.23499944265380857, 0.0885288335665595, 0.3098532470028216, 0.1699661962754344, 0.15898875170910765, 0.2306754116213523, 0.20234693262757686, 0.18294142843069638, 0.16048493133596964, 0.2915414512052342, 0.12784391651529137, 0.21892296780582532, 0.12527741778610957, 0.2548087595501053, 0.11823151480370775, 0.16213788190367684, 0.12252743504171626, 0.09518222173472546, 0.17074284146820717, 0.2617302995749673, 0.16300664341990834, 0.12481658789375649, 0.010011538449401503, 0.1621178553730226, 0.16539917091148926, 0.019450190290474678, 0.17082204872318962, 0.15878169017630095, 0.0, 0.21518805058282975, 0.0, 0.0, 0.0, 0.04383779916487618, 0.0, 0.0, 0.02076488785792774, 0.0, 0.0, 0.03972831965613188, 0.038406060022965316, 0.04411992079728955, 0.05915303642382064, 0.0, 0.0029633734522825916, 0.07727941058037158, 0.016620307190509997, 0.0206697362915218, 0.04663143954573756, 0.07017897472131351, 0.1020006413938449, 0.09070510602610415, 0.148117782601635, 0.07241692834299518, 0.09364429323341084, 0.1476915457952458, 0.06904662097355174, 0.12593132386480776, 0.04128342774155647, 0.03874284937360317, 0.06706590974334925, 0.005863179129496854, 0.06563781917582712, 0.048397104780186107, 0.048787003014656105, 0.11501390825902458, 0.45946470935703143, 0.47865612499059984, 0.44248290668119683, 0.49493089661954415, 0.5640631619333583, 0.4703359706217075, 0.5018978917571489, 0.4886461730698688, 0.4519929064487692, 0.06130009342125686, 0.06688595982653844, 0.0709238450703713, 0.13995314611619591, 0.12069906058600988, 0.12537585418088182, 0.06493658370634225, 0.10992499564505764, 0.060569321771623774, 0.18630387643935875, 0.17244750405445952, 0.1700091430353956, 0.24204420564978768, 0.15549358008637681, 0.18920648302673337, 0.3866053068687275, 0.24002252242705635, 0.20407109832525616, 0.32923244815857455, 0.38363911049653954, 0.2959426866055783, 0.34172206958850004, 0.36332730572422667, 0.22019578600171585, 0.28210541344432505, 0.3318066680332902, 0.1607879881819677, 0.33482572558863666, 0.22103268539325638, 0.188311061002008, 0.24536678092475872, 0.1385956640956929, 0.2385176805929643, 0.30499280216020075, 0.30736919803742435, 0.11974386068295828, 0.19041837259236438, 0.16151891101517246, 0.21016144501496448, 0.19068150465111955, 0.1676215909137838, 0.1920531549720157, 0.2356083459040046, 0.19917370844529747, 0.20112932446639187, 0.22208509940761811, 0.1784298389357034, 0.24359800658650932, 0.2460894644000311, 0.17048784569694542, 0.19385636407288032, 0.2189713979376131, 0.2154875816887134, 0.21281172417784677, 0.8164247270659436, 0.15390672366326796, 0.1529971761261415, 0.8581862263186874, 0.19857596474571315, 0.19764525518036846, 0.12248822273437987, 0.16924348634616615, 0.18564602740697844, 0.465390820973389, 0.15546063359593276, 0.11761130304270695, 0.2744895662927137, 0.23850432987979098, 0.20612924424809753, 0.19863299174785742, 0.1045612240113758, 0.40227567034364586, 0.20365481527590268, 0.1996556790186278, 0.2151057773693441, 0.20060875794409494, 0.19404166795337585, 0.17300245626867727, 0.19301011942119017, 0.18381174907655007, 0.1873147571148034, 0.08995460333960092, 0.0708166067228373, 0.07450033868207961, 0.08605606912604635, 0.09349255011240898, 0.08753479844179202, 0.07861678185428322, 0.0819614137864284, 0.077594742275512]}, "mutation_prompt": null}
{"id": "bc5b5a0c-a0e2-4f02-b003-6e45b0d97d0c", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "ImprovedPSO", "description": "Improve the PSO algorithm by incorporating Levy flight for global exploration.", "configspace": "", "generation": 4, "fitness": 0.24394177817853466, "feedback": "The algorithm ImprovedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "c1a83f98-c5f8-42d4-ac62-b4ed2f6379b9", "metadata": {"aucs": [0.7790996935052058, 0.7692709423984788, 0.7922070506678659, 0.8401839016525465, 0.8001968482247723, 0.8399837518978706, 0.8491821666429404, 0.8000730377888403, 0.8545278729902663, 0.40750174760815283, 0.4486042607564976, 0.46583155834573287, 0.4319965933128559, 0.34141642815533146, 0.05969157984625073, 0.3663539486217865, 0.3860542475588563, 0.44521829318214945, 0.11090172324964165, 0.11978082003783397, 0.12459850007821827, 0.14214474017637313, 0.13623376154209033, 0.12238200771927366, 0.11739657790797464, 0.1306709568905159, 0.11642578408163229, 0.09852896971765912, 0.14464019816346319, 0.1272490216131693, 0.10427541853558142, 0.10070313677173381, 0.14759181557116785, 0.13667230115224138, 0.12287178528898546, 0.13846281766619795, 0.9939373140753781, 0.9939293901302902, 0.9942004210814055, 0.9877668269855959, 0.9880180838413326, 0.9911399025268377, 0.9924689550380539, 0.9942754282355613, 0.9919383456298329, 0.25430092937059456, 0.2581457727366303, 0.2535500545455188, 0.33913944763512427, 0.2425660562328641, 0.2671695326601575, 0.3157350476992027, 0.2883585492128323, 0.23377657235723293, 0.22722455337098613, 0.12870564658780748, 0.20658616469601054, 0.19381758111708702, 0.18711975802183223, 0.1606536696191968, 0.22225060072661929, 0.12258766307876645, 0.20239806341732836, 0.169854262239015, 0.18552662014542198, 0.18688482358024971, 0.12574221158133692, 0.15944440369671442, 0.11344214896086036, 0.17409558287252003, 0.19976220869322037, 0.1661003449813212, 0.1236319477776191, 0.12096219772437777, 0.1933454455102399, 0.15502815725670283, 0.3428136841407713, 0.14749179913766441, 0.14765440441607502, 0.08268221282259669, 0.09645064096309175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0727025692955624, 0.028353338307111287, 0.03859797600997428, 0.0337511691971617, 0.016004593972011927, 0.01227992846752568, 0.050271833407346866, 0.10151377387890681, 0.05940069138473314, 0.046466398512032936, 0.032466456498740026, 0.05279707783614174, 0.07266125181587813, 0.17640355152401066, 0.16944226838926646, 0.09348689496170537, 0.09451079295920684, 0.06873178091420618, 0.21871525714524231, 0.04191916597009726, 0.0562225328775543, 0.10389986293027176, 0.20512482716974645, 0.07945697857761302, 0.08086902545429442, 0.056690324683540294, 0.13803540760360378, 0.5067677951514702, 0.47531463849299116, 0.46208338350712397, 0.4800482562963989, 0.506623524491719, 0.46169197218260305, 0.5034731769280472, 0.506165338752486, 0.4720329439641645, 0.1086301495773212, 0.1336839406031689, 0.10795581901485418, 0.0939408916662593, 0.08800416059967264, 0.10538430055586945, 0.06958502487362328, 0.09278346738417531, 0.09076824273594397, 0.13822628542762905, 0.17456048735267138, 0.2554248776642567, 0.16006637351788755, 0.16292559899184766, 0.16738546400471932, 0.19211583613388195, 0.2621471669563338, 0.21111464276479397, 0.2319845155001914, 0.27288475587347516, 0.273654222090576, 0.2883505084711796, 0.1736961969746844, 0.3163487667171895, 0.3740396692165642, 0.37567018605432767, 0.383484200579404, 0.22936402668967493, 0.16858854516539146, 0.26709651885528873, 0.1599349360656066, 0.19068492817093408, 0.23191005713320179, 0.29134105884731365, 0.2619523921407846, 0.2908635322148765, 0.19659794330972835, 0.12681538187287045, 0.19927629325575213, 0.21551531089024323, 0.17599894783758285, 0.19220975489571557, 0.2121555736781846, 0.18341229051666874, 0.2229363304583294, 0.19796920809480956, 0.2349289974206069, 0.20706640033832924, 0.2422551524488472, 0.2426840116000185, 0.18886070904549246, 0.18509110789647587, 0.1908086985078583, 0.2195509328777775, 0.16417334258163718, 0.16409786985026698, 0.15428909046572403, 0.17331166581655144, 0.20036918869773512, 0.19599644096868574, 0.0995380429196201, 0.16882091315796366, 0.19560824354937378, 0.44643259621560516, 0.1565457250872485, 0.11259353875010203, 0.2546807717893085, 0.25338525686728575, 0.21011945387785058, 0.21048438733596442, 0.21209607544483444, 0.3853169060119358, 0.17878317599718552, 0.17379855399217725, 0.18361650743584101, 0.20207534510714475, 0.2012039756673233, 0.19135226025558327, 0.1940841008369989, 0.23990621654628663, 0.1749938467181259, 0.08167533182800402, 0.1073356914890603, 0.0833206170171985, 0.07183087822176426, 0.0775993819874028, 0.08436511504803335, 0.09797085879168987, 0.07191503476935468, 0.07047844797522917]}, "mutation_prompt": null}
{"id": "9f4fbc97-ff74-45b8-9d04-12c6694d03ba", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "ImprovedPSO", "description": "Improve the PSO algorithm by incorporating Levy flight for global exploration.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc5b5a0c-a0e2-4f02-b003-6e45b0d97d0c", "metadata": {"aucs": [0.7790996935052058, 0.7692709423984788, 0.7922070506678659, 0.8401839016525465, 0.8001968482247723, 0.8399837518978706, 0.8491821666429404, 0.8000730377888403, 0.8545278729902663, 0.40750174760815283, 0.4486042607564976, 0.46583155834573287, 0.4319965933128559, 0.34141642815533146, 0.05969157984625073, 0.3663539486217865, 0.3860542475588563, 0.44521829318214945, 0.11090172324964165, 0.11978082003783397, 0.12459850007821827, 0.14214474017637313, 0.13623376154209033, 0.12238200771927366, 0.11739657790797464, 0.1306709568905159, 0.11642578408163229, 0.09852896971765912, 0.14464019816346319, 0.1272490216131693, 0.10427541853558142, 0.10070313677173381, 0.14759181557116785, 0.13667230115224138, 0.12287178528898546, 0.13846281766619795, 0.9939373140753781, 0.9939293901302902, 0.9942004210814055, 0.9877668269855959, 0.9880180838413326, 0.9911399025268377, 0.9924689550380539, 0.9942754282355613, 0.9919383456298329, 0.25430092937059456, 0.2581457727366303, 0.2535500545455188, 0.33913944763512427, 0.2425660562328641, 0.2671695326601575, 0.3157350476992027, 0.2883585492128323, 0.23377657235723293, 0.22722455337098613, 0.12870564658780748, 0.20658616469601054, 0.19381758111708702, 0.18711975802183223, 0.1606536696191968, 0.22225060072661929, 0.12258766307876645, 0.20239806341732836, 0.169854262239015, 0.18552662014542198, 0.18688482358024971, 0.12574221158133692, 0.15944440369671442, 0.11344214896086036, 0.17409558287252003, 0.19976220869322037, 0.1661003449813212, 0.1236319477776191, 0.12096219772437777, 0.1933454455102399, 0.15502815725670283, 0.3428136841407713, 0.14749179913766441, 0.14765440441607502, 0.08268221282259669, 0.09645064096309175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0727025692955624, 0.028353338307111287, 0.03859797600997428, 0.0337511691971617, 0.016004593972011927, 0.01227992846752568, 0.050271833407346866, 0.10151377387890681, 0.05940069138473314, 0.046466398512032936, 0.032466456498740026, 0.05279707783614174, 0.07266125181587813, 0.17640355152401066, 0.16944226838926646, 0.09348689496170537, 0.09451079295920684, 0.06873178091420618, 0.21871525714524231, 0.04191916597009726, 0.0562225328775543, 0.10389986293027176, 0.20512482716974645, 0.07945697857761302, 0.08086902545429442, 0.056690324683540294, 0.13803540760360378, 0.5067677951514702, 0.47531463849299116, 0.46208338350712397, 0.4800482562963989, 0.506623524491719, 0.46169197218260305, 0.5034731769280472, 0.506165338752486, 0.4720329439641645, 0.1086301495773212, 0.1336839406031689, 0.10795581901485418, 0.0939408916662593, 0.08800416059967264, 0.10538430055586945, 0.06958502487362328, 0.09278346738417531, 0.09076824273594397, 0.13822628542762905, 0.17456048735267138, 0.2554248776642567, 0.16006637351788755, 0.16292559899184766, 0.16738546400471932, 0.19211583613388195, 0.2621471669563338, 0.21111464276479397, 0.2319845155001914, 0.27288475587347516, 0.273654222090576, 0.2883505084711796, 0.1736961969746844, 0.3163487667171895, 0.3740396692165642, 0.37567018605432767, 0.383484200579404, 0.22936402668967493, 0.16858854516539146, 0.26709651885528873, 0.1599349360656066, 0.19068492817093408, 0.23191005713320179, 0.29134105884731365, 0.2619523921407846, 0.2908635322148765, 0.19659794330972835, 0.12681538187287045, 0.19927629325575213, 0.21551531089024323, 0.17599894783758285, 0.19220975489571557, 0.2121555736781846, 0.18341229051666874, 0.2229363304583294, 0.19796920809480956, 0.2349289974206069, 0.20706640033832924, 0.2422551524488472, 0.2426840116000185, 0.18886070904549246, 0.18509110789647587, 0.1908086985078583, 0.2195509328777775, 0.16417334258163718, 0.16409786985026698, 0.15428909046572403, 0.17331166581655144, 0.20036918869773512, 0.19599644096868574, 0.0995380429196201, 0.16882091315796366, 0.19560824354937378, 0.44643259621560516, 0.1565457250872485, 0.11259353875010203, 0.2546807717893085, 0.25338525686728575, 0.21011945387785058, 0.21048438733596442, 0.21209607544483444, 0.3853169060119358, 0.17878317599718552, 0.17379855399217725, 0.18361650743584101, 0.20207534510714475, 0.2012039756673233, 0.19135226025558327, 0.1940841008369989, 0.23990621654628663, 0.1749938467181259, 0.08167533182800402, 0.1073356914890603, 0.0833206170171985, 0.07183087822176426, 0.0775993819874028, 0.08436511504803335, 0.09797085879168987, 0.07191503476935468, 0.07047844797522917]}, "mutation_prompt": null}
{"id": "3e244def-f4fc-4466-b40d-de9fb696b53f", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            fitness_improved = False\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    if np.random.rand() < 0.5 and fitness_improved:  # Introduce dynamic inertia weight\n                        inertia_weight = 0.5 + 0.4 * np.random.rand()\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n                        fitness_improved = True\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the algorithm by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 6, "fitness": 0.23851710250829553, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "bc5b5a0c-a0e2-4f02-b003-6e45b0d97d0c", "metadata": {"aucs": [0.7479993736477804, 0.7504072157098463, 0.7500458583022014, 0.8135308737331574, 0.7035207265852217, 0.7089988356694271, 0.6786735634103733, 0.7166847111662654, 0.6524478636448389, 0.19234770083118724, 0.17534472193316175, 0.2370239406519704, 0.20143036558017213, 0.04274566474702546, 0.1652290588807196, 0.27493743734505793, 0.13919929821803412, 0.05125987338923388, 0.12583565522690443, 0.14142213630224632, 0.13986570682993427, 0.15027560544381535, 0.09538626788914484, 0.1364437406006095, 0.1330748273935518, 0.1343752758820268, 0.10161881531702188, 0.0941859745934227, 0.1095061339497061, 0.10788414768170895, 0.09486400552591279, 0.12737153013809444, 0.10386584582656, 0.13214559177945362, 0.1252823615110512, 0.10802867565631236, 0.9929621358901118, 0.9943860178387177, 0.9936713365379761, 0.9931722265511658, 0.9916924434335345, 0.9902714455695042, 0.9941359966260614, 0.9926205285001837, 0.9934997197841783, 0.2503024149209748, 0.275048748415203, 0.21229430441366026, 0.26958672901990144, 0.1545202549080983, 0.3925755292808639, 0.2228615940450258, 0.24673066087333873, 0.28941230236815196, 0.3590311419251144, 0.2159418633994593, 0.20595938585970996, 0.19340132644276908, 0.18838346667326022, 0.19254240445010695, 0.1754284886453955, 0.14108517324251757, 0.11643945109348208, 0.16269327986366267, 0.12722660064673363, 0.15769925839603327, 0.09258666354870815, 0.18209689924360084, 0.1236847844444473, 0.1776393037984162, 0.15515387052108143, 0.1706124691347657, 0.12414831009475091, 0.12249729059862913, 0.11907485193035483, 0.14757893759920404, 0.14690474760791383, 0.19637314183344678, 0.1793034379591829, 0.0, 0.11130843866034024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00803364890514735, 0.0, 0.0, 0.09360644625939818, 0.052175558920550924, 0.05418216826909228, 0.07126662303348552, 0.011971108710930323, 0.00824468800560263, 0.007459596906357557, 0.0, 0.030141577778612927, 0.047373969984399134, 0.03220516891210501, 0.0713882582694223, 0.07179727473555253, 0.07227137523650784, 0.07793053353802892, 0.08683292051192404, 0.09479057593112505, 0.06528094056179212, 0.05258856234070919, 0.12008703006575017, 0.05058376353490057, 0.03788791856829288, 0.1417938979792791, 0.06250674536953882, 0.07961155948295529, 0.0530095432379869, 0.08045037788585718, 0.4121941095589189, 0.43285006379179036, 0.4813403496992441, 0.500598055279356, 0.5275401185231479, 0.5026289321258304, 0.539649262519664, 0.45694536074429837, 0.46344136654805046, 0.13893968660553058, 0.06406291128513297, 0.10135217748204706, 0.11206837228376465, 0.08742069901772087, 0.08219250150556434, 0.1051535897503405, 0.15055935479496474, 0.0996818602292513, 0.20314523223281933, 0.22235148386243342, 0.1549991009872923, 0.23354814583148564, 0.2244418296459526, 0.20684628569977181, 0.22680656006315225, 0.17093943313617388, 0.2244210120431811, 0.36160460803251826, 0.21662687710046558, 0.2644520706202491, 0.2967360286871291, 0.28426690104364694, 0.30086701298564145, 0.2772349991699188, 0.3217919470516979, 0.2915178827697338, 0.21325471693942089, 0.19792044044924795, 0.16255828107329073, 0.2000354834740281, 0.19762598095447736, 0.2937644338717388, 0.3195180624704713, 0.2767941455142978, 0.20823501500020225, 0.1930785433032115, 0.1384605409603057, 0.18089852094613512, 0.18228500293181282, 0.20979480193497546, 0.18086149184236833, 0.18147841469632986, 0.18185947671890246, 0.182041871454503, 0.20810800524891582, 0.17525151345355972, 0.49539539314524794, 0.20655510615587813, 0.237741280365658, 0.2866669049345897, 0.19028157361603448, 0.19051163567826568, 0.3970008272835538, 0.898994031806347, 0.6324666217019841, 0.15330956429864384, 0.8930717430074343, 0.20013639113059012, 0.13021869443720335, 0.09999316940372138, 0.16597862922007078, 0.21084325955435468, 0.599667681680923, 0.15530084861392535, 0.1670862876274758, 0.36546145219475434, 0.16773369390937554, 0.20643489376644997, 0.21360357494921123, 0.21099108713351666, 0.38797000971921203, 0.19112145239493095, 0.19798420644057058, 0.19153731602776236, 0.21016074121512318, 0.1931681251564762, 0.19142771597864205, 0.18885902162803225, 0.17869265807711832, 0.20244207716311158, 0.09652561109532876, 0.08702836266359759, 0.08108227996459105, 0.07393311228043709, 0.05512990385039962, 0.08414377216519986, 0.09571892633583101, 0.09360961415792934, 0.0854033733980516]}, "mutation_prompt": null}
{"id": "4e4bd529-94b0-42c6-9327-fe2925fb9567", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "ImprovedPSO", "description": "Improve the PSO algorithm by incorporating Levy flight for global exploration.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc5b5a0c-a0e2-4f02-b003-6e45b0d97d0c", "metadata": {"aucs": [0.7790996935052058, 0.7692709423984788, 0.7922070506678659, 0.8401839016525465, 0.8001968482247723, 0.8399837518978706, 0.8491821666429404, 0.8000730377888403, 0.8545278729902663, 0.40750174760815283, 0.4486042607564976, 0.46583155834573287, 0.4319965933128559, 0.34141642815533146, 0.05969157984625073, 0.3663539486217865, 0.3860542475588563, 0.44521829318214945, 0.11090172324964165, 0.11978082003783397, 0.12459850007821827, 0.14214474017637313, 0.13623376154209033, 0.12238200771927366, 0.11739657790797464, 0.1306709568905159, 0.11642578408163229, 0.09852896971765912, 0.14464019816346319, 0.1272490216131693, 0.10427541853558142, 0.10070313677173381, 0.14759181557116785, 0.13667230115224138, 0.12287178528898546, 0.13846281766619795, 0.9939373140753781, 0.9939293901302902, 0.9942004210814055, 0.9877668269855959, 0.9880180838413326, 0.9911399025268377, 0.9924689550380539, 0.9942754282355613, 0.9919383456298329, 0.25430092937059456, 0.2581457727366303, 0.2535500545455188, 0.33913944763512427, 0.2425660562328641, 0.2671695326601575, 0.3157350476992027, 0.2883585492128323, 0.23377657235723293, 0.22722455337098613, 0.12870564658780748, 0.20658616469601054, 0.19381758111708702, 0.18711975802183223, 0.1606536696191968, 0.22225060072661929, 0.12258766307876645, 0.20239806341732836, 0.169854262239015, 0.18552662014542198, 0.18688482358024971, 0.12574221158133692, 0.15944440369671442, 0.11344214896086036, 0.17409558287252003, 0.19976220869322037, 0.1661003449813212, 0.1236319477776191, 0.12096219772437777, 0.1933454455102399, 0.15502815725670283, 0.3428136841407713, 0.14749179913766441, 0.14765440441607502, 0.08268221282259669, 0.09645064096309175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0727025692955624, 0.028353338307111287, 0.03859797600997428, 0.0337511691971617, 0.016004593972011927, 0.01227992846752568, 0.050271833407346866, 0.10151377387890681, 0.05940069138473314, 0.046466398512032936, 0.032466456498740026, 0.05279707783614174, 0.07266125181587813, 0.17640355152401066, 0.16944226838926646, 0.09348689496170537, 0.09451079295920684, 0.06873178091420618, 0.21871525714524231, 0.04191916597009726, 0.0562225328775543, 0.10389986293027176, 0.20512482716974645, 0.07945697857761302, 0.08086902545429442, 0.056690324683540294, 0.13803540760360378, 0.5067677951514702, 0.47531463849299116, 0.46208338350712397, 0.4800482562963989, 0.506623524491719, 0.46169197218260305, 0.5034731769280472, 0.506165338752486, 0.4720329439641645, 0.1086301495773212, 0.1336839406031689, 0.10795581901485418, 0.0939408916662593, 0.08800416059967264, 0.10538430055586945, 0.06958502487362328, 0.09278346738417531, 0.09076824273594397, 0.13822628542762905, 0.17456048735267138, 0.2554248776642567, 0.16006637351788755, 0.16292559899184766, 0.16738546400471932, 0.19211583613388195, 0.2621471669563338, 0.21111464276479397, 0.2319845155001914, 0.27288475587347516, 0.273654222090576, 0.2883505084711796, 0.1736961969746844, 0.3163487667171895, 0.3740396692165642, 0.37567018605432767, 0.383484200579404, 0.22936402668967493, 0.16858854516539146, 0.26709651885528873, 0.1599349360656066, 0.19068492817093408, 0.23191005713320179, 0.29134105884731365, 0.2619523921407846, 0.2908635322148765, 0.19659794330972835, 0.12681538187287045, 0.19927629325575213, 0.21551531089024323, 0.17599894783758285, 0.19220975489571557, 0.2121555736781846, 0.18341229051666874, 0.2229363304583294, 0.19796920809480956, 0.2349289974206069, 0.20706640033832924, 0.2422551524488472, 0.2426840116000185, 0.18886070904549246, 0.18509110789647587, 0.1908086985078583, 0.2195509328777775, 0.16417334258163718, 0.16409786985026698, 0.15428909046572403, 0.17331166581655144, 0.20036918869773512, 0.19599644096868574, 0.0995380429196201, 0.16882091315796366, 0.19560824354937378, 0.44643259621560516, 0.1565457250872485, 0.11259353875010203, 0.2546807717893085, 0.25338525686728575, 0.21011945387785058, 0.21048438733596442, 0.21209607544483444, 0.3853169060119358, 0.17878317599718552, 0.17379855399217725, 0.18361650743584101, 0.20207534510714475, 0.2012039756673233, 0.19135226025558327, 0.1940841008369989, 0.23990621654628663, 0.1749938467181259, 0.08167533182800402, 0.1073356914890603, 0.0833206170171985, 0.07183087822176426, 0.0775993819874028, 0.08436511504803335, 0.09797085879168987, 0.07191503476935468, 0.07047844797522917]}, "mutation_prompt": null}
{"id": "33ba8787-00cb-4589-b953-15079ed761cb", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicInertiaWeightPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            fitness_improved = False\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter if not fitness_improved else 0.9\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n                        fitness_improved = True\n\n        return gbest", "name": "DynamicInertiaWeightPSO", "description": "Enhance the exploration capability by introducing a dynamic inertia weight based on the fitness improvement.", "configspace": "", "generation": 8, "fitness": 0.24394177817853466, "feedback": "The algorithm DynamicInertiaWeightPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "bc5b5a0c-a0e2-4f02-b003-6e45b0d97d0c", "metadata": {"aucs": [0.7790996935052058, 0.7692709423984788, 0.7922070506678659, 0.8401839016525465, 0.8001968482247723, 0.8399837518978706, 0.8491821666429404, 0.8000730377888403, 0.8545278729902663, 0.40750174760815283, 0.4486042607564976, 0.46583155834573287, 0.4319965933128559, 0.34141642815533146, 0.05969157984625073, 0.3663539486217865, 0.3860542475588563, 0.44521829318214945, 0.11090172324964165, 0.11978082003783397, 0.12459850007821827, 0.14214474017637313, 0.13623376154209033, 0.12238200771927366, 0.11739657790797464, 0.1306709568905159, 0.11642578408163229, 0.09852896971765912, 0.14464019816346319, 0.1272490216131693, 0.10427541853558142, 0.10070313677173381, 0.14759181557116785, 0.13667230115224138, 0.12287178528898546, 0.13846281766619795, 0.9939373140753781, 0.9939293901302902, 0.9942004210814055, 0.9877668269855959, 0.9880180838413326, 0.9911399025268377, 0.9924689550380539, 0.9942754282355613, 0.9919383456298329, 0.25430092937059456, 0.2581457727366303, 0.2535500545455188, 0.33913944763512427, 0.2425660562328641, 0.2671695326601575, 0.3157350476992027, 0.2883585492128323, 0.23377657235723293, 0.22722455337098613, 0.12870564658780748, 0.20658616469601054, 0.19381758111708702, 0.18711975802183223, 0.1606536696191968, 0.22225060072661929, 0.12258766307876645, 0.20239806341732836, 0.169854262239015, 0.18552662014542198, 0.18688482358024971, 0.12574221158133692, 0.15944440369671442, 0.11344214896086036, 0.17409558287252003, 0.19976220869322037, 0.1661003449813212, 0.1236319477776191, 0.12096219772437777, 0.1933454455102399, 0.15502815725670283, 0.3428136841407713, 0.14749179913766441, 0.14765440441607502, 0.08268221282259669, 0.09645064096309175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0727025692955624, 0.028353338307111287, 0.03859797600997428, 0.0337511691971617, 0.016004593972011927, 0.01227992846752568, 0.050271833407346866, 0.10151377387890681, 0.05940069138473314, 0.046466398512032936, 0.032466456498740026, 0.05279707783614174, 0.07266125181587813, 0.17640355152401066, 0.16944226838926646, 0.09348689496170537, 0.09451079295920684, 0.06873178091420618, 0.21871525714524231, 0.04191916597009726, 0.0562225328775543, 0.10389986293027176, 0.20512482716974645, 0.07945697857761302, 0.08086902545429442, 0.056690324683540294, 0.13803540760360378, 0.5067677951514702, 0.47531463849299116, 0.46208338350712397, 0.4800482562963989, 0.506623524491719, 0.46169197218260305, 0.5034731769280472, 0.506165338752486, 0.4720329439641645, 0.1086301495773212, 0.1336839406031689, 0.10795581901485418, 0.0939408916662593, 0.08800416059967264, 0.10538430055586945, 0.06958502487362328, 0.09278346738417531, 0.09076824273594397, 0.13822628542762905, 0.17456048735267138, 0.2554248776642567, 0.16006637351788755, 0.16292559899184766, 0.16738546400471932, 0.19211583613388195, 0.2621471669563338, 0.21111464276479397, 0.2319845155001914, 0.27288475587347516, 0.273654222090576, 0.2883505084711796, 0.1736961969746844, 0.3163487667171895, 0.3740396692165642, 0.37567018605432767, 0.383484200579404, 0.22936402668967493, 0.16858854516539146, 0.26709651885528873, 0.1599349360656066, 0.19068492817093408, 0.23191005713320179, 0.29134105884731365, 0.2619523921407846, 0.2908635322148765, 0.19659794330972835, 0.12681538187287045, 0.19927629325575213, 0.21551531089024323, 0.17599894783758285, 0.19220975489571557, 0.2121555736781846, 0.18341229051666874, 0.2229363304583294, 0.19796920809480956, 0.2349289974206069, 0.20706640033832924, 0.2422551524488472, 0.2426840116000185, 0.18886070904549246, 0.18509110789647587, 0.1908086985078583, 0.2195509328777775, 0.16417334258163718, 0.16409786985026698, 0.15428909046572403, 0.17331166581655144, 0.20036918869773512, 0.19599644096868574, 0.0995380429196201, 0.16882091315796366, 0.19560824354937378, 0.44643259621560516, 0.1565457250872485, 0.11259353875010203, 0.2546807717893085, 0.25338525686728575, 0.21011945387785058, 0.21048438733596442, 0.21209607544483444, 0.3853169060119358, 0.17878317599718552, 0.17379855399217725, 0.18361650743584101, 0.20207534510714475, 0.2012039756673233, 0.19135226025558327, 0.1940841008369989, 0.23990621654628663, 0.1749938467181259, 0.08167533182800402, 0.1073356914890603, 0.0833206170171985, 0.07183087822176426, 0.0775993819874028, 0.08436511504803335, 0.09797085879168987, 0.07191503476935468, 0.07047844797522917]}, "mutation_prompt": null}
{"id": "69b90b6a-d569-418d-bb4a-6d70f2885466", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "ImprovedPSO", "description": "Improve the PSO algorithm by incorporating Levy flight for global exploration.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc5b5a0c-a0e2-4f02-b003-6e45b0d97d0c", "metadata": {"aucs": [0.7790996935052058, 0.7692709423984788, 0.7922070506678659, 0.8401839016525465, 0.8001968482247723, 0.8399837518978706, 0.8491821666429404, 0.8000730377888403, 0.8545278729902663, 0.40750174760815283, 0.4486042607564976, 0.46583155834573287, 0.4319965933128559, 0.34141642815533146, 0.05969157984625073, 0.3663539486217865, 0.3860542475588563, 0.44521829318214945, 0.11090172324964165, 0.11978082003783397, 0.12459850007821827, 0.14214474017637313, 0.13623376154209033, 0.12238200771927366, 0.11739657790797464, 0.1306709568905159, 0.11642578408163229, 0.09852896971765912, 0.14464019816346319, 0.1272490216131693, 0.10427541853558142, 0.10070313677173381, 0.14759181557116785, 0.13667230115224138, 0.12287178528898546, 0.13846281766619795, 0.9939373140753781, 0.9939293901302902, 0.9942004210814055, 0.9877668269855959, 0.9880180838413326, 0.9911399025268377, 0.9924689550380539, 0.9942754282355613, 0.9919383456298329, 0.25430092937059456, 0.2581457727366303, 0.2535500545455188, 0.33913944763512427, 0.2425660562328641, 0.2671695326601575, 0.3157350476992027, 0.2883585492128323, 0.23377657235723293, 0.22722455337098613, 0.12870564658780748, 0.20658616469601054, 0.19381758111708702, 0.18711975802183223, 0.1606536696191968, 0.22225060072661929, 0.12258766307876645, 0.20239806341732836, 0.169854262239015, 0.18552662014542198, 0.18688482358024971, 0.12574221158133692, 0.15944440369671442, 0.11344214896086036, 0.17409558287252003, 0.19976220869322037, 0.1661003449813212, 0.1236319477776191, 0.12096219772437777, 0.1933454455102399, 0.15502815725670283, 0.3428136841407713, 0.14749179913766441, 0.14765440441607502, 0.08268221282259669, 0.09645064096309175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0727025692955624, 0.028353338307111287, 0.03859797600997428, 0.0337511691971617, 0.016004593972011927, 0.01227992846752568, 0.050271833407346866, 0.10151377387890681, 0.05940069138473314, 0.046466398512032936, 0.032466456498740026, 0.05279707783614174, 0.07266125181587813, 0.17640355152401066, 0.16944226838926646, 0.09348689496170537, 0.09451079295920684, 0.06873178091420618, 0.21871525714524231, 0.04191916597009726, 0.0562225328775543, 0.10389986293027176, 0.20512482716974645, 0.07945697857761302, 0.08086902545429442, 0.056690324683540294, 0.13803540760360378, 0.5067677951514702, 0.47531463849299116, 0.46208338350712397, 0.4800482562963989, 0.506623524491719, 0.46169197218260305, 0.5034731769280472, 0.506165338752486, 0.4720329439641645, 0.1086301495773212, 0.1336839406031689, 0.10795581901485418, 0.0939408916662593, 0.08800416059967264, 0.10538430055586945, 0.06958502487362328, 0.09278346738417531, 0.09076824273594397, 0.13822628542762905, 0.17456048735267138, 0.2554248776642567, 0.16006637351788755, 0.16292559899184766, 0.16738546400471932, 0.19211583613388195, 0.2621471669563338, 0.21111464276479397, 0.2319845155001914, 0.27288475587347516, 0.273654222090576, 0.2883505084711796, 0.1736961969746844, 0.3163487667171895, 0.3740396692165642, 0.37567018605432767, 0.383484200579404, 0.22936402668967493, 0.16858854516539146, 0.26709651885528873, 0.1599349360656066, 0.19068492817093408, 0.23191005713320179, 0.29134105884731365, 0.2619523921407846, 0.2908635322148765, 0.19659794330972835, 0.12681538187287045, 0.19927629325575213, 0.21551531089024323, 0.17599894783758285, 0.19220975489571557, 0.2121555736781846, 0.18341229051666874, 0.2229363304583294, 0.19796920809480956, 0.2349289974206069, 0.20706640033832924, 0.2422551524488472, 0.2426840116000185, 0.18886070904549246, 0.18509110789647587, 0.1908086985078583, 0.2195509328777775, 0.16417334258163718, 0.16409786985026698, 0.15428909046572403, 0.17331166581655144, 0.20036918869773512, 0.19599644096868574, 0.0995380429196201, 0.16882091315796366, 0.19560824354937378, 0.44643259621560516, 0.1565457250872485, 0.11259353875010203, 0.2546807717893085, 0.25338525686728575, 0.21011945387785058, 0.21048438733596442, 0.21209607544483444, 0.3853169060119358, 0.17878317599718552, 0.17379855399217725, 0.18361650743584101, 0.20207534510714475, 0.2012039756673233, 0.19135226025558327, 0.1940841008369989, 0.23990621654628663, 0.1749938467181259, 0.08167533182800402, 0.1073356914890603, 0.0833206170171985, 0.07183087822176426, 0.0775993819874028, 0.08436511504803335, 0.09797085879168987, 0.07191503476935468, 0.07047844797522917]}, "mutation_prompt": null}
{"id": "5f9973ff-7a43-498b-b8bf-9ddf7d36a1b9", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "ImprovedPSO", "description": "Improve the PSO algorithm by incorporating Levy flight for global exploration.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc5b5a0c-a0e2-4f02-b003-6e45b0d97d0c", "metadata": {"aucs": [0.7790996935052058, 0.7692709423984788, 0.7922070506678659, 0.8401839016525465, 0.8001968482247723, 0.8399837518978706, 0.8491821666429404, 0.8000730377888403, 0.8545278729902663, 0.40750174760815283, 0.4486042607564976, 0.46583155834573287, 0.4319965933128559, 0.34141642815533146, 0.05969157984625073, 0.3663539486217865, 0.3860542475588563, 0.44521829318214945, 0.11090172324964165, 0.11978082003783397, 0.12459850007821827, 0.14214474017637313, 0.13623376154209033, 0.12238200771927366, 0.11739657790797464, 0.1306709568905159, 0.11642578408163229, 0.09852896971765912, 0.14464019816346319, 0.1272490216131693, 0.10427541853558142, 0.10070313677173381, 0.14759181557116785, 0.13667230115224138, 0.12287178528898546, 0.13846281766619795, 0.9939373140753781, 0.9939293901302902, 0.9942004210814055, 0.9877668269855959, 0.9880180838413326, 0.9911399025268377, 0.9924689550380539, 0.9942754282355613, 0.9919383456298329, 0.25430092937059456, 0.2581457727366303, 0.2535500545455188, 0.33913944763512427, 0.2425660562328641, 0.2671695326601575, 0.3157350476992027, 0.2883585492128323, 0.23377657235723293, 0.22722455337098613, 0.12870564658780748, 0.20658616469601054, 0.19381758111708702, 0.18711975802183223, 0.1606536696191968, 0.22225060072661929, 0.12258766307876645, 0.20239806341732836, 0.169854262239015, 0.18552662014542198, 0.18688482358024971, 0.12574221158133692, 0.15944440369671442, 0.11344214896086036, 0.17409558287252003, 0.19976220869322037, 0.1661003449813212, 0.1236319477776191, 0.12096219772437777, 0.1933454455102399, 0.15502815725670283, 0.3428136841407713, 0.14749179913766441, 0.14765440441607502, 0.08268221282259669, 0.09645064096309175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0727025692955624, 0.028353338307111287, 0.03859797600997428, 0.0337511691971617, 0.016004593972011927, 0.01227992846752568, 0.050271833407346866, 0.10151377387890681, 0.05940069138473314, 0.046466398512032936, 0.032466456498740026, 0.05279707783614174, 0.07266125181587813, 0.17640355152401066, 0.16944226838926646, 0.09348689496170537, 0.09451079295920684, 0.06873178091420618, 0.21871525714524231, 0.04191916597009726, 0.0562225328775543, 0.10389986293027176, 0.20512482716974645, 0.07945697857761302, 0.08086902545429442, 0.056690324683540294, 0.13803540760360378, 0.5067677951514702, 0.47531463849299116, 0.46208338350712397, 0.4800482562963989, 0.506623524491719, 0.46169197218260305, 0.5034731769280472, 0.506165338752486, 0.4720329439641645, 0.1086301495773212, 0.1336839406031689, 0.10795581901485418, 0.0939408916662593, 0.08800416059967264, 0.10538430055586945, 0.06958502487362328, 0.09278346738417531, 0.09076824273594397, 0.13822628542762905, 0.17456048735267138, 0.2554248776642567, 0.16006637351788755, 0.16292559899184766, 0.16738546400471932, 0.19211583613388195, 0.2621471669563338, 0.21111464276479397, 0.2319845155001914, 0.27288475587347516, 0.273654222090576, 0.2883505084711796, 0.1736961969746844, 0.3163487667171895, 0.3740396692165642, 0.37567018605432767, 0.383484200579404, 0.22936402668967493, 0.16858854516539146, 0.26709651885528873, 0.1599349360656066, 0.19068492817093408, 0.23191005713320179, 0.29134105884731365, 0.2619523921407846, 0.2908635322148765, 0.19659794330972835, 0.12681538187287045, 0.19927629325575213, 0.21551531089024323, 0.17599894783758285, 0.19220975489571557, 0.2121555736781846, 0.18341229051666874, 0.2229363304583294, 0.19796920809480956, 0.2349289974206069, 0.20706640033832924, 0.2422551524488472, 0.2426840116000185, 0.18886070904549246, 0.18509110789647587, 0.1908086985078583, 0.2195509328777775, 0.16417334258163718, 0.16409786985026698, 0.15428909046572403, 0.17331166581655144, 0.20036918869773512, 0.19599644096868574, 0.0995380429196201, 0.16882091315796366, 0.19560824354937378, 0.44643259621560516, 0.1565457250872485, 0.11259353875010203, 0.2546807717893085, 0.25338525686728575, 0.21011945387785058, 0.21048438733596442, 0.21209607544483444, 0.3853169060119358, 0.17878317599718552, 0.17379855399217725, 0.18361650743584101, 0.20207534510714475, 0.2012039756673233, 0.19135226025558327, 0.1940841008369989, 0.23990621654628663, 0.1749938467181259, 0.08167533182800402, 0.1073356914890603, 0.0833206170171985, 0.07183087822176426, 0.0775993819874028, 0.08436511504803335, 0.09797085879168987, 0.07191503476935468, 0.07047844797522917]}, "mutation_prompt": null}
{"id": "b04e888f-d85e-4278-b649-0f0488832669", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass ImprovedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.8 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "ImprovedPSO", "description": "Improve the PSO algorithm by incorporating Levy flight for global exploration.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc5b5a0c-a0e2-4f02-b003-6e45b0d97d0c", "metadata": {"aucs": [0.7790996935052058, 0.7692709423984788, 0.7922070506678659, 0.8401839016525465, 0.8001968482247723, 0.8399837518978706, 0.8491821666429404, 0.8000730377888403, 0.8545278729902663, 0.40750174760815283, 0.4486042607564976, 0.46583155834573287, 0.4319965933128559, 0.34141642815533146, 0.05969157984625073, 0.3663539486217865, 0.3860542475588563, 0.44521829318214945, 0.11090172324964165, 0.11978082003783397, 0.12459850007821827, 0.14214474017637313, 0.13623376154209033, 0.12238200771927366, 0.11739657790797464, 0.1306709568905159, 0.11642578408163229, 0.09852896971765912, 0.14464019816346319, 0.1272490216131693, 0.10427541853558142, 0.10070313677173381, 0.14759181557116785, 0.13667230115224138, 0.12287178528898546, 0.13846281766619795, 0.9939373140753781, 0.9939293901302902, 0.9942004210814055, 0.9877668269855959, 0.9880180838413326, 0.9911399025268377, 0.9924689550380539, 0.9942754282355613, 0.9919383456298329, 0.25430092937059456, 0.2581457727366303, 0.2535500545455188, 0.33913944763512427, 0.2425660562328641, 0.2671695326601575, 0.3157350476992027, 0.2883585492128323, 0.23377657235723293, 0.22722455337098613, 0.12870564658780748, 0.20658616469601054, 0.19381758111708702, 0.18711975802183223, 0.1606536696191968, 0.22225060072661929, 0.12258766307876645, 0.20239806341732836, 0.169854262239015, 0.18552662014542198, 0.18688482358024971, 0.12574221158133692, 0.15944440369671442, 0.11344214896086036, 0.17409558287252003, 0.19976220869322037, 0.1661003449813212, 0.1236319477776191, 0.12096219772437777, 0.1933454455102399, 0.15502815725670283, 0.3428136841407713, 0.14749179913766441, 0.14765440441607502, 0.08268221282259669, 0.09645064096309175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0727025692955624, 0.028353338307111287, 0.03859797600997428, 0.0337511691971617, 0.016004593972011927, 0.01227992846752568, 0.050271833407346866, 0.10151377387890681, 0.05940069138473314, 0.046466398512032936, 0.032466456498740026, 0.05279707783614174, 0.07266125181587813, 0.17640355152401066, 0.16944226838926646, 0.09348689496170537, 0.09451079295920684, 0.06873178091420618, 0.21871525714524231, 0.04191916597009726, 0.0562225328775543, 0.10389986293027176, 0.20512482716974645, 0.07945697857761302, 0.08086902545429442, 0.056690324683540294, 0.13803540760360378, 0.5067677951514702, 0.47531463849299116, 0.46208338350712397, 0.4800482562963989, 0.506623524491719, 0.46169197218260305, 0.5034731769280472, 0.506165338752486, 0.4720329439641645, 0.1086301495773212, 0.1336839406031689, 0.10795581901485418, 0.0939408916662593, 0.08800416059967264, 0.10538430055586945, 0.06958502487362328, 0.09278346738417531, 0.09076824273594397, 0.13822628542762905, 0.17456048735267138, 0.2554248776642567, 0.16006637351788755, 0.16292559899184766, 0.16738546400471932, 0.19211583613388195, 0.2621471669563338, 0.21111464276479397, 0.2319845155001914, 0.27288475587347516, 0.273654222090576, 0.2883505084711796, 0.1736961969746844, 0.3163487667171895, 0.3740396692165642, 0.37567018605432767, 0.383484200579404, 0.22936402668967493, 0.16858854516539146, 0.26709651885528873, 0.1599349360656066, 0.19068492817093408, 0.23191005713320179, 0.29134105884731365, 0.2619523921407846, 0.2908635322148765, 0.19659794330972835, 0.12681538187287045, 0.19927629325575213, 0.21551531089024323, 0.17599894783758285, 0.19220975489571557, 0.2121555736781846, 0.18341229051666874, 0.2229363304583294, 0.19796920809480956, 0.2349289974206069, 0.20706640033832924, 0.2422551524488472, 0.2426840116000185, 0.18886070904549246, 0.18509110789647587, 0.1908086985078583, 0.2195509328777775, 0.16417334258163718, 0.16409786985026698, 0.15428909046572403, 0.17331166581655144, 0.20036918869773512, 0.19599644096868574, 0.0995380429196201, 0.16882091315796366, 0.19560824354937378, 0.44643259621560516, 0.1565457250872485, 0.11259353875010203, 0.2546807717893085, 0.25338525686728575, 0.21011945387785058, 0.21048438733596442, 0.21209607544483444, 0.3853169060119358, 0.17878317599718552, 0.17379855399217725, 0.18361650743584101, 0.20207534510714475, 0.2012039756673233, 0.19135226025558327, 0.1940841008369989, 0.23990621654628663, 0.1749938467181259, 0.08167533182800402, 0.1073356914890603, 0.0833206170171985, 0.07183087822176426, 0.0775993819874028, 0.08436511504803335, 0.09797085879168987, 0.07191503476935468, 0.07047844797522917]}, "mutation_prompt": null}
{"id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 12, "fitness": 0.25274071123529335, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "bc5b5a0c-a0e2-4f02-b003-6e45b0d97d0c", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "46aede8a-239d-4f8a-af09-72ef848ec611", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "fcbfc48c-35bf-4070-8988-d529f84b5c27", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "ca69ba9b-4a92-4431-8d7d-fde1f5958013", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "c8a914b1-bdbe-4267-a9a6-0c47222c8581", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    mutation_rate = 1.0 - np.exp(-0.1 * (objective(pbest[i]) - pbest_fitness[i]))\n                    mutation = np.random.uniform(-mutation_rate, mutation_rate, self.dim)\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i]) + mutation\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the exploration capability of the algorithm through a novel adaptive mutation strategy based on individual performance.", "configspace": "", "generation": 16, "fitness": 0.2198336829273561, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.6594935360144418, 0.6710961752418405, 0.6511985496202292, 0.6485708366751036, 0.660312394483046, 0.6780581774348182, 0.7139697542385315, 0.64920219729775, 0.7613171198785804, 0.32019774744441154, 0.03499214068753298, 0.2006264665611991, 0.09621780383831591, 0.03583766607884464, 0.031646450571804596, 0.13190712424203666, 0.27538444155024466, 0.2422002898193243, 0.11994707801167936, 0.06632864626900192, 0.13638813959666263, 0.11534859184973578, 0.10784313906420062, 0.16313467055753283, 0.09532044322733824, 0.13635266098419163, 0.09816595876388878, 0.10732339862361673, 0.11824695606730706, 0.11417082507917398, 0.12125675397384872, 0.1371474771023321, 0.12772947537943657, 0.12820193536550506, 0.09373682980978482, 0.1294063033967946, 0.9901012148941664, 0.9919994321340591, 0.9919821486593231, 0.98867476751974, 0.991050058895285, 0.9860052334390338, 0.9910406830921304, 0.9927034525570464, 0.9906139370872381, 0.2679939171653727, 0.20946147926129366, 0.19860822371049003, 0.19433460347115428, 0.20892931055726627, 0.25765914367062537, 0.1873876625845231, 0.2104383367765167, 0.17030563584819614, 0.20210842456256484, 0.10787413501622345, 0.21118604668812702, 0.19165185327425627, 0.35128488190642915, 0.19085680474092281, 0.3084200506658472, 0.18048187690258133, 0.20091951415870235, 0.13388071406216617, 0.10076524760776684, 0.15728193285435899, 0.104394809888813, 0.1499334036886446, 0.10744259688695634, 0.148156868932808, 0.22882003883560942, 0.14008457365547689, 0.11218943208955245, 0.10372384036746773, 0.10085311460603208, 0.13592280811340807, 0.007266407370205896, 0.1072926021363495, 0.10200801512735613, 0.0883876622703672, 0.13644267494044693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02180686116546926, 0.05401360728341409, 0.024014341198623668, 0.03404285643244187, 0.01694910257591764, 0.0, 0.0018264990969458772, 0.04135810480488267, 0.061000363172186045, 0.02027098159292995, 0.03954330419571106, 0.13633629227884525, 0.03636145753513065, 0.05786292088506273, 0.11968658403484111, 0.057621850649863915, 0.07151769393705232, 0.22108078043336987, 0.04631147614533693, 0.037100717961217056, 0.03543125424522808, 0.1604667586882642, 0.0064608501697557275, 0.031611518940431016, 0.10509870540333888, 0.04665146646187135, 0.07310749985538001, 0.04995043222132223, 0.4265996757287359, 0.4767762656952338, 0.44065746844623777, 0.42709213119218803, 0.42963678689838336, 0.4220428777701516, 0.43985770071729624, 0.4388056844255026, 0.4140655704294106, 0.08721865770653203, 0.11320872543471228, 0.09239630931292853, 0.11838292769802516, 0.10907988185165796, 0.11849032591806008, 0.07775206133133283, 0.07707900111714006, 0.06773576093877198, 0.31957684230531114, 0.19885597553733225, 0.1618201189937859, 0.2468852142228074, 0.21922296137387653, 0.12873437937876353, 0.2917920279819062, 0.13961841484392623, 0.21528768537144638, 0.2843465701294495, 0.24251919130005162, 0.2537843853584767, 0.2725821314276964, 0.24618846121822513, 0.23111130975026084, 0.3218677790227047, 0.3289014115990828, 0.21085943052945189, 0.18810123599528794, 0.15787581535534478, 0.1711444298527569, 0.174374846102606, 0.1977762472299609, 0.1800466569960667, 0.13013675831382499, 0.20896216385205535, 0.2877329037019918, 0.20818048487210594, 0.1449646729745011, 0.18142023606200042, 0.2127991519809408, 0.15357893364984188, 0.18378061441584836, 0.19834733440568364, 0.15590313043005388, 0.19931628565575032, 0.22452655979781178, 0.19404972974941725, 0.20558671580032983, 0.20924959537453658, 0.17771415977665417, 0.1827782443938668, 0.18427345739757162, 0.19380402946489994, 0.19276050772544018, 0.7715279105017092, 0.16433721523184208, 0.15190585535869938, 0.1484656492948805, 0.1949453136641398, 0.13069529970577765, 0.12369218503370061, 0.16661655183729307, 0.6853821173358916, 0.5680759684822695, 0.15339337026795397, 0.11028730474908166, 0.2986025849680416, 0.3171122698752622, 0.1976076646536863, 0.21127670042744573, 0.20650324004042486, 0.20134901661744498, 0.1902783293423702, 0.17285804140843952, 0.18493188730914967, 0.1847715072883216, 0.1796453182151585, 0.1994501560441878, 0.1811587874387196, 0.19217977111579954, 0.20200686309083016, 0.07054985441017303, 0.06685519181588184, 0.07603024065848762, 0.08632436353724193, 0.07823810548348042, 0.08581179856492904, 0.07208141586868932, 0.07414567128543947, 0.08028297826424602]}, "mutation_prompt": null}
{"id": "027dcede-a972-4b4b-a320-b66ead198cd9", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "342a376f-e494-4345-ab64-56c9b6dd0c1e", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "2ddc663e-bdb1-4d0b-bc03-0627af082856", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "5461e075-e1e5-412d-bbfa-cbfc21d59fc5", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    mutation = cauchy.rvs(size=self.dim, loc=0, scale=0.2)  # Dynamic mutation using Cauchy distribution\n                    velocity[i] = inertia_weight * velocity[i] + mutation + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Improve EnhancedPSO by incorporating a dynamic mutation strategy using Cauchy distribution to enhance exploration.", "configspace": "", "generation": 20, "fitness": 0.14908139709864887, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.2680707719843941, 0.2610926065527849, 0.25862164433398216, 0.2475041122135655, 0.27571156398938834, 0.26146082342159493, 0.27176542117388425, 0.2733081527333092, 0.2549768027008158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.054381289647726816, 0.06767563747367, 0.061438628129474426, 0.048873633744010325, 0.061392916045092116, 0.05591292409948112, 0.07692544085275965, 0.06232817067178875, 0.07614472148011231, 0.054981449121125126, 0.06301195253572422, 0.06522633695933888, 0.06461178811618973, 0.050467875099334925, 0.04766992440359574, 0.06815820579285081, 0.040867384378645566, 0.0698854221387466, 0.9928230367640973, 0.9944295044006506, 0.9935095156792055, 0.9897625297437392, 0.9951008851235197, 0.9918949993367687, 0.9939243702634819, 0.9948482352112734, 0.991564529386784, 0.15179442034759705, 0.1448319996176568, 0.12365436047070522, 0.12487242016614142, 0.10965887017035025, 0.1645378423550039, 0.145806165733522, 0.12625589351758593, 0.1410098333776053, 0.1697494878383795, 0.14701479085998215, 0.1440535326321104, 0.1790378655011131, 0.16619355066555597, 0.1717665599553838, 0.12858903843816682, 0.19298743351615877, 0.14228758017150744, 0.08420326198167405, 0.0575524244884309, 0.060635602899913654, 0.08804774617982603, 0.08449630705213562, 0.07024539976690869, 0.09239033489431092, 0.06450924649829592, 0.07303239872294287, 0.06373193616130635, 0.04607306212705331, 0.045874203249427925, 0.05606679117053737, 0.04090503419565594, 0.05288121937164014, 0.06664462200291532, 0.020073406045349462, 0.07647632233750123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04378084836265039, 0.0031340803796310324, 0.034317330748707575, 0.061772408456977956, 0.0, 0.007481864617717493, 0.021038816489493906, 0.03308584337307674, 0.023241909962932406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015388505754919235, 0.012447572873351187, 0.005671886635929102, 0.006204173847119465, 0.01363308092653892, 0.0066721445873381136, 0.02850971529907842, 0.024827270751285546, 0.025301919203579604, 0.261072471451369, 0.2592714534477687, 0.2851368049807348, 0.26730799381331505, 0.250079595476555, 0.26852783212829634, 0.24636773005053014, 0.25615620545367535, 0.2811602368581191, 0.07191928674696557, 0.1138687189393961, 0.06599670073495068, 0.07031077405462438, 0.0757549340967083, 0.06876762339005504, 0.06631687970693678, 0.056940858364793345, 0.05969795568768044, 0.1242856487386863, 0.11076348266807723, 0.16573803527809416, 0.1342656514496825, 0.12665398687518992, 0.1387502860438613, 0.131156057083873, 0.14298991194001953, 0.17466669584507577, 0.1797387244052443, 0.1794089462398264, 0.19612127730045625, 0.19996301687634765, 0.18327382908023004, 0.1872749076563508, 0.1923012880231183, 0.22514556249739237, 0.211434793323937, 0.13589501118938097, 0.1477230744287713, 0.144553245783983, 0.13196167943529868, 0.13963483528230614, 0.14621431835220888, 0.16350830865945187, 0.1596375919046069, 0.17908465779351412, 0.1536688740820309, 0.12581776955590596, 0.1672284159704337, 0.15888851882988997, 0.1635199541038166, 0.17051170643962343, 0.16234813165774686, 0.18841898787943778, 0.20407320149766162, 0.16211868173656763, 0.15561618164662328, 0.1672074375185566, 0.17590894745708086, 0.16016687413919084, 0.1624109936367597, 0.1589379229033102, 0.15378154420761492, 0.19364729466282993, 0.16096432251811166, 0.1610572148941537, 0.14822505299044386, 0.2974595306824904, 0.17039148241504865, 0.12666457081525007, 0.15928567889471668, 0.1686568714145591, 0.17996659476671395, 0.22230201932779603, 0.15957565716025168, 0.1634923308784817, 0.16913880311431073, 0.1534494049366676, 0.18972255803817284, 0.20374789317554776, 0.2003857971630042, 0.12261162869260622, 0.17427076455004897, 0.18149111019001685, 0.18351698057864252, 0.17689774327083285, 0.16824574428060857, 0.1833917057607206, 0.1692746478461017, 0.17066413872669306, 0.17185476906387698, 0.04634285697233553, 0.055394792203418586, 0.049172031112580616, 0.05860097322435942, 0.06591725013849425, 0.058989588833811446, 0.05290681027358901, 0.057702772483906095, 0.07400582200366657]}, "mutation_prompt": null}
{"id": "c616ce0d-c963-436c-83c2-13dc05617f14", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "f6fcac38-1ec7-447f-971a-d63a22b60871", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicPopSizePSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        max_budget_per_particle = self.budget / self.swarm_size\n        \n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                \n                if self.budget <= 0:\n                    break\n                \n                budget_usage = min(max_budget_per_particle, self.budget)\n                self.budget -= budget_usage\n                \n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "DynamicPopSizePSO", "description": "Improve the EnhancedPSO algorithm by incorporating a dynamic population size that adapts based on fitness evaluation efficiency.", "configspace": "", "generation": 22, "fitness": 0.05896419629121602, "feedback": "The algorithm DynamicPopSizePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.16958033313067877, 0.0948415014557964, 0.1295272687297716, 0.1058555034587273, 0.12773126290541337, 0.12845250456233082, 0.10686473407030206, 0.14373128082503628, 0.15070946603768376, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.023234548199652316, 0.014572254733962287, 0.029338431907122486, 0.010544468052148481, 0.0036507009407173996, 0.032009842170776626, 0.02283404366415631, 0.01819026648818911, 0.04007053076730571, 0.009709675381991856, 0.0, 0.010368323295364301, 0.022066035430924558, 0.0007079361664976691, 0.012289173295239597, 0.006595828881217458, 0.0, 0.016226297004234058, 0.0876457803510049, 0.12861457371237706, 0.1890285571221667, 0.0674443852659018, 0.07981686144078193, 0.12029657668400395, 0.07783231186089545, 0.23041102292223348, 0.10737870298036378, 0.0, 0.000837277113548085, 0.017054613470129487, 0.041789198853894094, 0.00021551809509001707, 0.07666440475945657, 0.057586968054073484, 0.036701571544067724, 0.01665367786522287, 0.10305390505023093, 0.062422897660514676, 0.07868544023980428, 0.13934276259084255, 0.06815727914051217, 0.0554836413086488, 0.17728807924700252, 0.05921649636366433, 0.04229092568555848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07996898272061703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02659212368125008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16965343146214984, 0.18332300111472688, 0.18581430142508748, 0.13170815102091582, 0.1495328843396475, 0.13729579021848404, 0.16912143011529657, 0.12435221275834452, 0.17783732011732822, 0.021698061913509314, 0.009036766594879952, 0.03513299643433676, 0.006002370323321182, 0.02572575266530841, 0.02683121878620509, 0.019434243830104614, 0.03119700699342498, 0.02666833626569931, 0.07028246122685633, 0.09756072474347366, 0.05923488925517306, 0.09846289938816166, 0.10844057434014054, 0.075894081267733, 0.09551904223796459, 0.19356469277071897, 0.07717165476235766, 0.09597227240618145, 0.1413699705624153, 0.14344245626176422, 0.14225251686220708, 0.12888275802648408, 0.1593447112757167, 0.14649414279997452, 0.17369512487615557, 0.14304249550114823, 0.0539533974746188, 0.06549933979675993, 0.06078350253488729, 0.09136417049627543, 0.0833997976317129, 0.08858018807111856, 0.11503051059693481, 0.1398542176748946, 0.07339168482371916, 0.1395646723053422, 0.09379139630447475, 0.13336421106438578, 0.12387012898677185, 0.15354531331541565, 0.11498162259271194, 0.14003032769635593, 0.12570408375080078, 0.12610897469223914, 0.0, 0.0, 0.0, 0.14729670007566242, 0.0, 0.14725455912056662, 0.0, 0.09743527195365498, 0.029466656904251987, 0.057839976228395096, 0.07748334840870719, 0.11821436606086555, 0.0959389894279471, 0.12070353966556191, 0.10808012699075609, 0.0871788023781439, 0.0963456876397184, 0.07751286084136977, 0.11031370369950688, 0.10042736099167482, 0.07135595638602277, 0.0505908534635271, 0.07695430682796067, 0.04622356192662669, 0.05953145413239891, 0.06882950151721634, 0.07188286992810422, 0.1456608508080275, 0.13245115028096077, 0.14754498426871598, 0.1278203792311624, 0.11393539758803017, 0.13048624596257596, 0.14961211855402412, 0.11580422966695747, 0.14680476350940785, 0.032226272512345666, 0.02368113534322669, 0.0347313030686941, 0.02691798931623468, 0.03415436066354682, 0.033586952081884225, 0.01612999899170031, 0.026064614779055417, 0.019806165615555038]}, "mutation_prompt": null}
{"id": "97e9bfbe-8189-47f1-9821-c5edeadf5b2f", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicStepPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n        diversity_threshold = 0.5  # Set diversity threshold\n        \n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            diversity = np.mean(np.std(swarm, axis=0))  # Population diversity calculation\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < diversity_threshold:  # Dynamic step size adaptation\n                    step = diversity * cauchy.rvs(size=self.dim)  # Dynamic step size\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "DynamicStepPSO", "description": "Improve convergence by incorporating a dynamic step size adaptation based on population diversity.", "configspace": "", "generation": 23, "fitness": 0.13105583727040704, "feedback": "The algorithm DynamicStepPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.25535743984787973, 0.21108876754171346, 0.21143372613085265, 0.19459719541300657, 0.21733278443639703, 0.17804832303589846, 0.24604775438493542, 0.24556979801078516, 0.22559867007283152, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04007396201619462, 0.047659920422633895, 0.04004920231724629, 0.05711158453139631, 0.05251628351963478, 0.06039615382613994, 0.03771932020794955, 0.032547407172277776, 0.041995586506188065, 0.028806212268864373, 0.036602333261518294, 0.018640011636178677, 0.03926959261334362, 0.04720706468860625, 0.022733735008227618, 0.04663177329864465, 0.033834985637938964, 0.03236834082484785, 0.9915088551031558, 0.9942738148633226, 0.9961973287343772, 0.9868469530493792, 0.9936657684775705, 0.9847335400301949, 0.9938683799480758, 0.9937919513206739, 0.99166970621115, 0.10977563065477991, 0.09659519855319143, 0.05338204376623801, 0.11099133748916701, 0.06579825768929781, 0.11636652688100235, 0.08306352551266682, 0.07507656529539675, 0.08225658999919194, 0.16119822209200252, 0.11794202913609075, 0.1225465235625186, 0.1823606591971455, 0.1585074496072273, 0.1626039866480834, 0.10542772968886405, 0.11785417984272151, 0.11939644165910246, 0.0698117690122374, 0.10332151585943505, 0.0, 0.030653714371211893, 0.04437391548159231, 0.024115624944301417, 0.09779440935293349, 0.03573978296516467, 0.08668147428598927, 0.021345547111057184, 0.01769548952570732, 0.04665118328439932, 0.016897391275495832, 0.0, 0.02674505251178927, 0.026560534635508892, 0.0, 0.02359767749662356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014853080067905422, 0.031118024648223996, 0.03649707728691287, 0.057416391359775165, 0.0, 0.003091429551205116, 0.01482894811888813, 0.014802838779510386, 0.01081767004145695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00312939482890362, 0.0, 0.0, 0.0, 0.0, 3.687943344743427e-05, 0.030909667522137863, 0.03024737181470516, 0.027528260232372315, 0.22669484835903875, 0.21798341144994937, 0.20391677730773028, 0.19968014278363266, 0.18178365256083817, 0.20760503804525754, 0.27414174895208143, 0.2201633441064621, 0.21245570770421318, 0.048032370090038246, 0.05919224844624582, 0.06431687964944377, 0.04261374518393857, 0.04407601528542748, 0.04458713150681837, 0.04190206631893778, 0.04918555733319685, 0.046375140156596384, 0.13956510408670697, 0.16635092205514024, 0.1207957502355137, 0.1620220288393044, 0.1579054365574939, 0.12996815914275828, 0.14534920350520808, 0.14945009716859936, 0.10902838153302363, 0.1562678710845239, 0.1540665227086001, 0.17261900016385512, 0.20285069026968627, 0.13684626863870286, 0.1708528221081006, 0.1613407598900789, 0.20079850523284293, 0.1710584966801698, 0.17129851434044285, 0.10981719740026274, 0.11682052835200063, 0.1317643391051444, 0.11999292855784749, 0.10387546241665713, 0.139742084089592, 0.12846960542128405, 0.1526006663816032, 0.14851959597766096, 0.1282511697039248, 0.14759596414213083, 0.15424160655927444, 0.1280397582271453, 0.15118488417034137, 0.13270860161100773, 0.14594947350205967, 0.1437740665590045, 0.14796524515203202, 0.1271297321893362, 0.13718940613369035, 0.14279655669937552, 0.121409545774539, 0.14464615612960385, 0.1301336381627436, 0.15934824918038992, 0.13541724425042523, 0.1489454532058666, 0.1392132334823618, 0.14692592280860517, 0.14102769476484478, 0.13147694787917918, 0.16448907663429313, 0.16007758049826593, 0.12312458670372284, 0.1492489460769444, 0.1363527763182275, 0.1746439215598492, 0.15716134477086585, 0.14858195604687152, 0.1394916834735639, 0.1146236680771624, 0.19107406648172875, 0.1777993085201811, 0.18178703767891324, 0.17131264302680316, 0.1686640154699266, 0.1699638822694004, 0.17454634881824027, 0.17414302099509582, 0.20098333069772711, 0.17618003458278875, 0.19237469875825175, 0.18757374041934916, 0.046647417274382263, 0.04798033138720492, 0.06636336965577683, 0.05230508385121635, 0.0522063012372862, 0.04753448954654926, 0.05016998725134103, 0.045582589024631526, 0.048761056387214174]}, "mutation_prompt": null}
{"id": "83c7ab74-e3e7-4a8d-b371-f59383cd8aea", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicSwarmPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n            # Dynamic swarm size adaptation based on fitness diversity\n            diversity = np.std(swarm, axis=0)\n            scaling_factor = 1/(1 + np.exp(-diversity))\n            self.swarm_size = max(10, int(np.sum(scaling_factor) / np.max(scaling_factor)))\n            swarm = np.vstack((swarm, np.array([chaotic_init() for _ in range(self.swarm_size - len(swarm))]))\n            pbest = np.vstack((pbest, swarm[-self.swarm_size:]))\n            pbest_fitness = np.hstack((pbest_fitness, np.array([objective(ind) for ind in pbest[-self.swarm_size:]]))\n\n        return gbest", "name": "DynamicSwarmPSO", "description": "Introduce a dynamic swarm size adaptation based on fitness diversity to enhance population exploration.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 53, 13, '            pbest = np.vstack((pbest, swarm[-self.swarm_size:]))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 53, 13, '            pbest = np.vstack((pbest, swarm[-self.swarm_size:]))\\n'))", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {}, "mutation_prompt": null}
{"id": "6d08b55d-fc28-409f-8d5e-fb3444de11d8", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "b00cb16a-bb23-4554-875a-f96ad806ffdd", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "662d8bf2-3f30-4dc2-b36e-b4f0e6c377c0", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "dc0ca0a6-a461-4645-a1bb-4793e8f5fcb9", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "3745affd-1b98-436c-be02-b984f0ab5814", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "94bf2635-76a6-4a5f-a526-2e5d124989e5", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "aa79e99d-794d-4c7f-934e-a7c35e49ff39", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "044766cb-2918-4dba-be57-81ec4ca5f213", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lower_bound = np.full(dim, -5.0)\n        self.upper_bound = np.full(dim, 5.0)\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Introduce a dynamic search space adaptation by adjusting the boundaries based on swarm exploration.", "configspace": "", "generation": 32, "fitness": 0.25274071123529335, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "433573bb-ad09-469b-93b5-914723c060d1", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    mutation_rate = 0.8 / (1 + np.exp(-10 * (pbest_fitness[i] - gbest_fitness)))  # Dynamic mutation rate\n                    mutation_vector = np.random.uniform(-mutation_rate, mutation_rate, self.dim)\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i]) + mutation_vector\n                    swarm[i] += velocity[i]\n                \n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                \n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    \n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Introduce a dynamic mutation strategy based on individual performance to enhance exploration.", "configspace": "", "generation": 33, "fitness": 0.16246062335866007, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.2740306107938315, 0.2994285441077059, 0.2797340538056916, 0.30783264094624097, 0.323624271978468, 0.2964087251804657, 0.27936055654977154, 0.2927998569272038, 0.2825817448964908, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07230728632348837, 0.09761374942104595, 0.08457284783253272, 0.06769287101597199, 0.0851474610188907, 0.07281071020109664, 0.0790124195247428, 0.07152691945082001, 0.0895062272517585, 0.0630733303449651, 0.06977676176184433, 0.06631053512014495, 0.07321361001021542, 0.057555529918054016, 0.06202188020191646, 0.06858644071665043, 0.059460164971379736, 0.06864762107324096, 0.9937821330522033, 0.9944073664666326, 0.9938145592051947, 0.9912347378431321, 0.9950310278947083, 0.9923909416706755, 0.9938046599323663, 0.9949007054845223, 0.9935536802023481, 0.13722175244508472, 0.1537062854508926, 0.14260326060719053, 0.14689030249651913, 0.16964490531597187, 0.18852907230834992, 0.13820060161902314, 0.18811018991434536, 0.15851099719611195, 0.2037184544998505, 0.17134668162592426, 0.17845213958544304, 0.19676023253477926, 0.18487866350784743, 0.1830753032643827, 0.2029495187638506, 0.19105566507303262, 0.2158233516386483, 0.08451171576576544, 0.05816802436453439, 0.07956400873472524, 0.08581784011853666, 0.09646540071039822, 0.0828213857915554, 0.10394509956363085, 0.07688350129246979, 0.07260608982668604, 0.0749065654897848, 0.104844026354181, 0.0795532164515742, 0.08355761019102281, 0.022964154619886212, 0.07141864180935775, 0.10023793805819947, 0.009467587587729809, 0.11379631155735948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03950523725992461, 0.012821588960740482, 0.042817483509566934, 0.0933670969245235, 0.0, 0.01066613641044789, 0.012645769785690542, 0.07061124981100853, 0.02633759948181502, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.025116464021910367, 0.021447969886268403, 0.0, 0.0286041724523598, 0.021697740699946788, 0.031133001240534752, 0.03916127740733866, 0.020543394097177536, 0.04024560577577829, 0.2951718584532895, 0.2965149562098002, 0.28005207296620116, 0.29877439094728375, 0.2887191464247617, 0.28124353625460097, 0.29627439223085106, 0.2861871001620724, 0.3018993592885978, 0.06148268626667719, 0.06826240397826111, 0.07840250368858104, 0.08824727134537169, 0.07216357684494668, 0.06977730196113296, 0.07660340157384193, 0.06983886928309735, 0.06782119086985261, 0.13168510957346202, 0.13305621108875498, 0.12345293684150327, 0.19610240033142612, 0.12873752064562582, 0.12575753095376818, 0.11914779020822319, 0.11872625822378613, 0.13817440235849077, 0.2030502513686422, 0.21239276397898543, 0.23548345994585562, 0.19098832191638826, 0.19159017110242238, 0.20679853124765746, 0.24042019479443966, 0.2314258522818733, 0.2270946287708776, 0.11348375909091668, 0.15969783024879147, 0.1620448908140394, 0.13097279994178368, 0.16398554454476466, 0.16641330664676857, 0.14414017471127405, 0.1600638059933468, 0.17291315606801416, 0.1843233824573911, 0.1542728101908859, 0.19823095388215062, 0.17424587606702857, 0.1805246871224928, 0.19621073593536154, 0.17440906579233817, 0.17655574019887177, 0.17145694617166196, 0.17363377487041143, 0.16153864412704255, 0.1780490793194356, 0.17379326102292691, 0.16642367731745433, 0.15877169153451143, 0.1635355387317573, 0.17122952573796735, 0.17644915958333862, 0.16388335417142808, 0.16858662680161074, 0.1506929944416857, 0.4120232273186887, 0.32072998852169443, 0.19091005410180517, 0.09721711017987578, 0.16799183078071123, 0.374411906361683, 0.28362253189713615, 0.14629156618087125, 0.1829329917828031, 0.18857574166234148, 0.16174727572483516, 0.29264966144764437, 0.20187601010131528, 0.20569076600526603, 0.2006228542742181, 0.17392967516849345, 0.1850127764465337, 0.18794621853056315, 0.17049945316902126, 0.18292089296403546, 0.1710950761084118, 0.22009653181768118, 0.17517568407065576, 0.1698723549215465, 0.05913819817277022, 0.073816698145304, 0.0742391155006713, 0.057841892104285586, 0.07072125210102409, 0.061052661076055115, 0.08817429443393299, 0.07795540657015843, 0.06537433295359985]}, "mutation_prompt": null}
{"id": "7c50ad8e-39e8-474d-a5a9-aef900feb6c5", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "ab15e8a5-d710-4831-890d-ccac4cf86576", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "7cc5ab73-84f2-4200-8d76-cbec40975f3d", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "24866891-8095-4fec-b23e-39ee9f1ae246", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "a9852b74-056b-49a6-9376-5fd16b8a2469", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "b3dc1f66-f898-4908-a14f-e2b24634cb42", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    # Mutation operator for increased exploration\n                    mutation_rate = 0.05\n                    mutation = np.random.uniform(-mutation_rate, mutation_rate, self.dim)\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i]) + mutation\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the algorithm by incorporating a mutation operator for increased exploration capability.", "configspace": "", "generation": 39, "fitness": 0.20681077949382995, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.49156690645022905, 0.46047601541127603, 0.46817914297692464, 0.4620375008271851, 0.47330299263666464, 0.46079832706183266, 0.4620145683168201, 0.4560220694361595, 0.5268527253047616, 0.032716762618541506, 0.018211959119533327, 0.0, 0.049678305012745505, 0.02816286401924084, 0.016882619395294562, 0.011107568461225181, 0.02377129899654795, 0.04482317566456351, 0.10226741473323875, 0.10760866131030256, 0.1393546353703845, 0.09707620338998935, 0.12364934763846047, 0.09832651005359372, 0.06458304887143784, 0.08957059551587243, 0.09807176889028812, 0.10304129625268144, 0.08833330479597568, 0.09488179865238422, 0.10617165395818351, 0.09130504044383192, 0.11926626289350462, 0.09555878409206908, 0.10152495810688256, 0.08296040569364904, 0.9935738281188655, 0.9944684102538685, 0.9938755224429834, 0.9928122585328365, 0.9940112185426234, 0.9912339279882266, 0.9940503921185859, 0.9948892188622839, 0.9935858676530334, 0.29417653860734394, 0.3040131040975519, 0.2788599803330085, 0.29727359128388975, 0.2986594492247645, 0.2712019355453691, 0.2948279647467258, 0.27224579214154354, 0.27869468186861934, 0.17145097658745456, 0.1917050968944375, 0.2763979165592544, 0.19261666166807478, 0.21190662764065504, 0.2160327659448219, 0.2235798820496684, 0.12479493427989108, 0.21334706215266364, 0.14014728043793945, 0.10681232225636317, 0.15110170442730142, 0.12727341795186764, 0.16762840684515745, 0.10929622502843139, 0.1628799610687074, 0.1568043643485022, 0.17855687545853616, 0.1502317853518118, 0.11575094309984602, 0.20984713838595637, 0.1266639760118473, 0.13635692226408247, 0.19080184854713012, 0.12470900966425613, 0.09519961833775925, 0.12886612564747446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.055567308392373005, 0.05084687408353816, 0.08970230794152378, 0.04413359173993414, 0.0, 0.03632050255818686, 0.07224025639581866, 0.049976847079245434, 0.03966997544209516, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05415878815676045, 0.039424670908591586, 0.06351680866112452, 0.007822950848326071, 0.0840474901125412, 0.08782117893420005, 0.05208210693917903, 0.1223205935481878, 0.07204994418308963, 0.451321123195334, 0.44417397535813474, 0.4242713613172444, 0.4110246124037965, 0.4110178142669897, 0.4370238525780462, 0.43672291398354046, 0.3994326122958397, 0.4336542437606027, 0.0942613135346102, 0.06003841936009835, 0.08694204631156577, 0.11587699193438805, 0.12894072601930417, 0.14032004077957794, 0.07513574395935352, 0.06226834567007977, 0.08464789275719808, 0.18188669395517865, 0.2987612332431331, 0.17414032818590053, 0.17013449176021855, 0.2827090568508376, 0.18803946134373872, 0.22886967417856108, 0.23919119125033916, 0.24366061302683706, 0.2954623484344744, 0.29267571404113735, 0.3077556164867765, 0.18196552675939714, 0.2823639537095134, 0.299946276938321, 0.3239998670987828, 0.3067687206852212, 0.25685442191592034, 0.21044827705869829, 0.20721668732650833, 0.21126216664902409, 0.24810509347827925, 0.18392458604355888, 0.1696854832325564, 0.1897403419983993, 0.22784347543293693, 0.17191286212825418, 0.17364584485314716, 0.14047025204293895, 0.18303515155821037, 0.18206508467892546, 0.20233628278971805, 0.19502381514809908, 0.17717020278798878, 0.19455192405377764, 0.17933745798775869, 0.18702234509197568, 0.2008804150025254, 0.21924961007502497, 0.2799374764772059, 0.215751870731396, 0.23338336630413647, 0.22056136905853396, 0.18111448220540294, 0.21361854078721076, 0.2060819831803543, 0.1691007317265103, 0.15311781607578345, 0.21648759106564286, 0.19907969881121357, 0.16932511673330808, 0.12499465652826236, 0.16853924138037435, 0.7026323148935874, 0.5091078854089846, 0.15610819628984285, 0.20411646225125246, 0.3431703611527185, 0.16517772836883537, 0.20825894845237491, 0.2125803061784588, 0.2117947969793289, 0.3165197409803785, 0.18942112862850968, 0.17122221119642744, 0.18364714890275358, 0.17463816550901734, 0.19719710543516578, 0.18649540336494352, 0.184748789787467, 0.170255113303596, 0.16860402270385078, 0.0908201152297905, 0.08418556264494004, 0.08713942981437672, 0.08596825217199988, 0.07475252706654578, 0.06470438564488412, 0.08614943636855477, 0.06932187952981472, 0.06903821300623059]}, "mutation_prompt": null}
{"id": "ba509636-02a5-4d5c-9112-c8f945b5889a", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                    # Opposition-based learning\n                    opp_swarm = 2 * np.mean(swarm) - swarm\n                    opp_fitness = objective(opp_swarm)\n                    if opp_fitness < pbest_fitness[i]:\n                        pbest[i] = opp_swarm.copy()\n                        pbest_fitness[i] = opp_fitness\n                        if opp_fitness < gbest_fitness:\n                            gbest = opp_swarm.copy()\n                            gbest_fitness = opp_fitness\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the algorithm by incorporating opposition-based learning to improve exploration-exploitation balance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {}, "mutation_prompt": null}
{"id": "cac33507-f0f0-44ef-92d5-266e29474d29", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSORefined:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n        mutation_prob = 0.1  # Probability of mutation\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < mutation_prob:\n                    step = 0.1 * cauchy.rvs(size=self.dim)  # Novel mutation using Cauchy distribution\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n            # Dynamic adaptation of swarm size based on fitness improvement\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n            gbest_fitness = pbest_fitness[gbest_idx]\n            swarm_size_update = int(1 + 29 * (1 - gbest_fitness))  # Update swarm size\n            if swarm_size_update != self.swarm_size:\n                self.swarm_size = swarm_size_update\n                swarm = np.vstack((swarm, np.array([chaotic_init() for _ in range(swarm_size_update)])))\n                velocity = np.vstack((velocity, np.zeros((swarm_size_update, self.dim)))\n                pbest = np.vstack((pbest, swarm[-swarm_size_update:].copy()))\n                pbest_fitness = np.array([objective(ind) for ind in pbest])\n\n        return gbest", "name": "EnhancedPSORefined", "description": "Introduce a dynamic population size that adapts based on fitness improvement and implement a novel mutation strategy using Cauchy distribution.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 58, 17, '                pbest = np.vstack((pbest, swarm[-swarm_size_update:].copy()))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 58, 17, '                pbest = np.vstack((pbest, swarm[-swarm_size_update:].copy()))\\n'))", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {}, "mutation_prompt": null}
{"id": "799f500e-eb0d-4d74-a543-af6fab4b723c", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "6f537044-0f28-418d-b5f0-6eeb2c4a234a", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "cd3af982-1198-4a37-81f2-d6e7d39d4308", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "45b0e007-8073-4391-8a8d-d8338f600f9b", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "3c486ae8-0f52-4bf7-8d74-0384305b2649", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicSwarmSizePSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            # Update swarm size dynamically based on fitness improvement\n            updated_swarm_size = int(self.swarm_size * (1 + (gbest_fitness - pbest_fitness.mean()) / (self.max_iter * self.dim)))\n            if updated_swarm_size < 2:  # Ensure swarm size is at least 2\n                updated_swarm_size = 2\n\n            # Resize the swarm if necessary\n            if updated_swarm_size != self.swarm_size:\n                self.swarm_size = updated_swarm_size\n                swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n                velocity = np.zeros((self.swarm_size, self.dim))\n                pbest = swarm.copy()\n                pbest_fitness = np.array([objective(ind) for ind in pbest])\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "DynamicSwarmSizePSO", "description": "Improve EnhancedPSO by incorporating a dynamic update mechanism for the swarm size based on fitness improvement.", "configspace": "", "generation": 46, "fitness": 0.14994091298064363, "feedback": "The algorithm DynamicSwarmSizePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.20.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.39146263102961343, 0.3907093410067255, 0.4084967336973945, 0.4717695988380419, 0.35829622416744933, 0.26210611176646326, 0.3501921191049189, 0.3857518332280335, 0.2665161509094025, 0.0, 0.0, 0.0, 0.0, 0.04026741419102309, 0.0, 0.0, 0.020541543196003653, 0.0, 0.11716608076340684, 0.03984519761878835, 0.057471518470406546, 0.03565634431975939, 0.02428888808126628, 0.04734681858377077, 0.046034904089244044, 0.0460906262609595, 0.04596892960474763, 0.09471002224422531, 0.05701900782309188, 0.028190910952163306, 0.10715375064782073, 0.05472107027161199, 0.08439717838467276, 0.0, 0.08175243158163725, 0.052181417316040646, 0.9793315124606556, 0.9785266471429708, 0.9826056466508744, 0.9643602052721639, 0.9790642340317465, 0.975957037797731, 0.9818370210024053, 0.9849221050249332, 0.9828583950088581, 0.037302431814746684, 0.05679854652932592, 0.06247465775232053, 0.061751492877943015, 0.08468061710278285, 0.04303246625296431, 0.10096343502063287, 0.13463785738421608, 0.0, 0.17286258696564238, 0.1348260845860576, 0.1592315501836694, 0.16852561275433364, 0.14499570192731082, 0.08969066138830717, 0.0822611853504277, 0.13424780663071711, 0.0210376208598132, 0.14303546067084538, 0.0073823418317841005, 0.0, 0.0, 0.12414745413949058, 0.0, 0.1498153536105994, 0.0, 0.13366430152655862, 0.06296797954670386, 0.0, 0.0, 0.04804228304084246, 0.0, 0.12256614078254624, 0.0, 0.0, 0.07169836155647513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.051484487440977555, 0.007561687527435024, 0.03571029494692379, 0.04211723389221167, 0.0, 0.0, 0.06396159126264689, 0.03879331155740162, 0.039186989800666594, 0.0, 0.0, 0.0, 0.0, 0.01723608504269669, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.02505284046194578, 0.021969540676107346, 0.05534983662739401, 0.1450784174248554, 0.0, 0.025134052440714316, 0.0, 0.0, 0.08182857800143917, 0.33575803562662443, 0.32991891608498025, 0.36882646498522054, 0.4134379566228834, 0.3153602040957001, 0.20517025757275997, 0.3330205617603449, 0.38583539136379563, 0.3852915685328443, 0.05065794066921503, 0.0342934372796444, 0.03091996875801073, 0.06585374013983836, 0.02424398748411971, 0.05299478844791172, 0.05691050439218448, 0.10983586702527026, 0.074912067262484, 0.12610849586594364, 0.11548486367510502, 0.16568497688330985, 0.1375764445457467, 0.19699350433858454, 0.16057726027811225, 0.16480652225594783, 0.1916596277652648, 0.0988402190621922, 0.16156387860157662, 0.19592274860815373, 0.22899537906707979, 0.14725818685146275, 0.18449842999665456, 0.1909038032917304, 0.21015258035702955, 0.21356971824279103, 0.1884126152738831, 0.1441274036947119, 0.12820568080814432, 0.1656725557600468, 0.13989321994476644, 0.18835725789558277, 0.1569611508849319, 0.11500032668261861, 0.15815117244329013, 0.15893939177442662, 0.14763902380102467, 0.15746519834580908, 0.1909210917589893, 0.12899951924328013, 0.14978138559416965, 0.16971373614052176, 0.1747080161438389, 0.18079500306790963, 0.13883477332408056, 0.1930902459750462, 0.193761434628957, 0.17540156642084548, 0.17881687731956264, 0.1596005562645718, 0.13336305446995989, 0.1777933241503561, 0.18192859953293206, 0.175454437409007, 0.18518438509132806, 0.1667658994050284, 0.14168280559527502, 0.2593104912610552, 0.19656962973933656, 0.14256346813599996, 0.11914264967509791, 0.16758233056303762, 0.1648304682127909, 0.22676615626557683, 0.15649731007353107, 0.16046938457183846, 0.10364643469365675, 0.2938586317093944, 0.11441231917141015, 0.11093210663536901, 0.12114542753652147, 0.12141517077752984, 0.1578262524353935, 0.15572861776931057, 0.18473383452060843, 0.1731474419720055, 0.17929072841552351, 0.1646417017109979, 0.1734398896120216, 0.15203289905196837, 0.19243864997883398, 0.04485812250791654, 0.10350293717816073, 0.0550243852357708, 0.038169227457725774, 0.05862593356194756, 0.04129528382562497, 0.055032463059722425, 0.043553767988898096, 0.06672054014754436]}, "mutation_prompt": null}
{"id": "dbc4f3b8-f2dd-4e1b-be16-acfbeff3be1b", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "050684ce-36ad-4ac6-be0d-041d75eb1671", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "efdc788a-1be6-4751-81fe-243e52b27465", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "d142b202-a774-4004-9a52-d3ff59f88363", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "acedec1f-2fab-48c0-845d-608425a10020", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "59b8b841-6c38-4722-ac57-322dc6c50b97", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicPopSizePSO:\n    def __init__(self, budget, dim, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm_size = 30\n        swarm = np.array([chaotic_init() for _ in range(swarm_size)])\n        velocity = np.zeros((swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n            \n            # Dynamic population size strategy\n            swarm_size = int(20 + 10 * (1 - _ / self.max_iter))  # Adjust population size based on iteration\n            if swarm_size < len(swarm):\n                idx = np.argsort(pbest_fitness)[:swarm_size]\n                swarm = swarm[idx]\n                velocity = velocity[idx]\n                pbest = pbest[idx]\n                pbest_fitness = pbest_fitness[idx]\n\n        return gbest", "name": "DynamicPopSizePSO", "description": "Improve the PSO algorithm by implementing a dynamic population size strategy based on the fitness of individuals.", "configspace": "", "generation": 52, "fitness": 0.2395380368661512, "feedback": "The algorithm DynamicPopSizePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7477378446150886, 0.8444440694246598, 0.7031921228977134, 0.721370115828226, 0.784712644443472, 0.8002003620043099, 0.7095137924987784, 0.7231390048246636, 0.7867538092924831, 0.32055423812711337, 0.03939380263055414, 0.31016606345596265, 0.040688265173255966, 0.3274697568515669, 0.0599044583629087, 0.3463702390242053, 0.04927322711206816, 0.41261391538413705, 0.14006004808711803, 0.14607372955906506, 0.14987723703265532, 0.17504266644761246, 0.126706718004168, 0.11316538322716152, 0.1319048223712289, 0.14109884047840537, 0.11405957591774385, 0.11998082571987956, 0.17316486147129928, 0.13511932671453064, 0.10660184565997877, 0.10890404255039299, 0.10267581967410044, 0.13466896338933443, 0.12614873813889826, 0.11982582090174643, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9884542155132894, 0.9859834001986238, 0.9915519445017844, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.25666768678783614, 0.3439471547267776, 0.19699384981366963, 0.1842594274886593, 0.3805068139136034, 0.15146476425751498, 0.3076288840115329, 0.2730339496013223, 0.2843914050726657, 0.20939015986452503, 0.2124210745488353, 0.16977647248189565, 0.19288906125071204, 0.11721234156464122, 0.1560358963614341, 0.23436541353717188, 0.21433168587484142, 0.20799225128595467, 0.14015348539333317, 0.17599144506393205, 0.16733338701966638, 0.12642225811902386, 0.1273861801707029, 0.12313547215666043, 0.3058821855772731, 0.12003907308294925, 0.14379810264237314, 0.20037765552870057, 0.11666002565538347, 0.19048613689173244, 0.29617589034869585, 0.1330470960458211, 0.15510650114643032, 0.1688930208061622, 0.0, 0.1019730764130562, 0.0, 0.0, 0.0, 0.0, 0.005137490390837773, 0.0, 0.0, 0.0, 0.02541386925231781, 0.05051438829742039, 0.03817006370021658, 0.052419507683955646, 0.039298782822585365, 0.008353290151234982, 0.0456770297602499, 0.05260178887440092, 0.06594099706002221, 0.04446005705691691, 0.18226974829344667, 0.03394715179024732, 0.047525440753837356, 0.07583677680332368, 0.0750914001504509, 0.1537205704881639, 0.0953540735210614, 0.12273705117479117, 0.13542279165726123, 0.22227636224461822, 0.07014118608688513, 0.025699211124813548, 0.16675404117439607, 0.08642294184383914, 0.16821609578013264, 0.06635157994591612, 0.062364152476681145, 0.07983388896459787, 0.5070872208107954, 0.49426632326607556, 0.4445059040056347, 0.4988504445629546, 0.5143631709804425, 0.47079265785889834, 0.4422813079937151, 0.49197446068089834, 0.46255650992202324, 0.09838046910838327, 0.05391265823370217, 0.06655330347161614, 0.09489107040416567, 0.09044325512133511, 0.09477151512250781, 0.06984480250996417, 0.12486754860354865, 0.12733322810581416, 0.2508869165259592, 0.18697113735317406, 0.29882101770763825, 0.19893111750281245, 0.22989249289694025, 0.14510507727401512, 0.19959935258329942, 0.31974751219046915, 0.2412297551985274, 0.2428953930418588, 0.20256291246871883, 0.21685295223182488, 0.3257894302787343, 0.2134089453697472, 0.34503190639871095, 0.26317020153373283, 0.3381057185765649, 0.3863553503608682, 0.31623231113060424, 0.17782194843464172, 0.1761405821563654, 0.17506144503546062, 0.18961171556745793, 0.21057463780978136, 0.26925694980870263, 0.2956650690122139, 0.20593888328821863, 0.22172854628464866, 0.12678326262355655, 0.19591874169825263, 0.18479334458089747, 0.18507036658449438, 0.16822507771892847, 0.22530572828662876, 0.2083951322198656, 0.2096019470181789, 0.21788051879031323, 0.19475458480236985, 0.24640835575651887, 0.223999623030799, 0.1894767612809043, 0.18313067645985281, 0.2157421159642765, 0.21342891488014826, 0.2450372598825058, 0.5483625110144132, 0.16594576887141888, 0.15395685984676688, 0.8397436363287608, 0.19823157729845964, 0.13101425415318768, 0.0995690946630089, 0.16996038094500399, 0.18722748642775822, 0.4634460137717814, 0.15679200751132816, 0.11289396541538776, 0.20506669871751138, 0.2616349563629836, 0.21006946463070442, 0.207983397656491, 0.2118292174441525, 0.3704027539758882, 0.17681792350560588, 0.19563488860291334, 0.1807324247537777, 0.2055246302475422, 0.18698657121797702, 0.18494494509009696, 0.20532341181194314, 0.20411394331574106, 0.16207540784403374, 0.07878786030829066, 0.08028294884617249, 0.06717746838683125, 0.06631277096941701, 0.10676060738850335, 0.08895733924092797, 0.08255130765783036, 0.05775240345530841, 0.08690567724945908]}, "mutation_prompt": null}
{"id": "937bacb7-5178-4dea-9339-d949f433388f", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    mutation_rate = 0.1 + 0.9 * (1 - np.tanh(pbest_fitness[i]))  # Dynamic mutation rate based on fitness\n                    velocity[i] = inertia_weight * velocity[i] + mutation_rate * r1 * (pbest[i] - swarm[i]) + mutation_rate * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "DynamicMutationPSO", "description": "Introducing a dynamic mutation strategy based on individual fitness values to adapt search behavior.", "configspace": "", "generation": 53, "fitness": 0.19354545998572142, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.485438993453589, 0.467590433055455, 0.5846710567414304, 0.37848427316712474, 0.25748540391462926, 0.4771442364747144, 0.8607865196254744, 0.8535890677661556, 0.8555160842754593, 0.39817133302133767, 0.5548874457026951, 0.0, 0.01947150703989009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11401909526647236, 0.09888840644373542, 0.1455768943549951, 0.08319800325312132, 0.13688304020929176, 0.08580561616337468, 0.08690985289551367, 0.10153734001118542, 0.12876132512440874, 0.1465582391536855, 0.11576208418370648, 0.12429889348137291, 0.09288845341382435, 0.05707923269865656, 0.058922786806573146, 0.10220252081244396, 0.07473977843605117, 0.024336764957698653, 0.9204547347505415, 0.9464205945076631, 0.09907279673045977, 0.08698347063749479, 0.08925759790268584, 0.07670978195277334, 0.12852507740398578, 0.10969484613816494, 0.08609985648616636, 0.14838935578459933, 0.11429409425770065, 0.0811365128980317, 0.15249134326652547, 0.14998861343472858, 0.10956072523469307, 0.3828062565638476, 0.3517517882404453, 0.3901404590242813, 0.21395357427528805, 0.1355754022058231, 0.1313015965386306, 0.21311783506050475, 0.2738915886191138, 0.1893348767360118, 0.12116444519122982, 0.15137336309087968, 0.1769247220005571, 0.12710461497996295, 0.0, 0.0, 0.21930986762673887, 0.171087034197677, 0.18988100939342445, 0.17102272875819124, 0.2113490114019323, 0.14738711207523447, 0.14343487252201814, 0.12916131158786015, 0.13013823201200558, 0.1287689819720208, 0.14491097771452255, 0.15389163959251562, 0.15301602877475928, 0.10720747866587443, 0.11615018072299865, 0.0, 0.0, 0.0, 0.07733767749968323, 0.0, 0.0, 0.0, 0.005768932919294811, 0.1460711775388085, 0.06436731749191038, 0.051770067221066696, 0.08713924452760913, 0.03847465104990755, 0.0, 0.02562548015449484, 0.14060611413040058, 0.06349713258031298, 0.12302561122815336, 0.0, 0.15018107302991757, 0.11823269484661292, 0.0, 0.0, 0.08429513475563088, 0.0, 0.0, 0.0, 0.08239951418435232, 0.09741050099698678, 0.11229898809277838, 0.015279260986967302, 0.0013221307020819806, 0.012734647463868543, 0.12425481774045, 0.18839727224499525, 0.12283258368704775, 0.4928821060639007, 0.4585810366632178, 0.4960206036357109, 0.49518847071650307, 0.49197828265819166, 0.4884905106294798, 0.4671110896814764, 0.45555473746310615, 0.4291432206926321, 0.09291636194678432, 0.05730655144431129, 0.06132346680105838, 0.08053277951816473, 0.06954620950950652, 0.12085419166582145, 0.17746425866086502, 0.15165451881443592, 0.08226346565653897, 0.17462160476719624, 0.17892230431849365, 0.1637258022248279, 0.21040533629226588, 0.15855937344585258, 0.20168459088217783, 0.17721529042338002, 0.18227651038149473, 0.18764837405206614, 0.3296044699853683, 0.3111009568746167, 0.40661090486895646, 0.2736863791179318, 0.23164884072219194, 0.15843114293847715, 0.19456446078065037, 0.2614330759683924, 0.20930476717756397, 0.0823306116597371, 0.2174960486709917, 0.13840904659583253, 0.21716165234207474, 0.16687551693885194, 0.17980349355163616, 0.17752744965604983, 0.33165196507548367, 0.23569080604168824, 0.2164054167860875, 0.1863901941366034, 0.17755585390349893, 0.23114007116733315, 0.22683427946896595, 0.20005248399081088, 0.22897355848174117, 0.20494329525752852, 0.21709224281621642, 0.20651424929564444, 0.21747487289068468, 0.19107178645355538, 0.1984620203565678, 0.19079357615107628, 0.20491249503857611, 0.1830561522562626, 0.18628282253374095, 0.1838651445523063, 0.1218609024476982, 0.1857287615890817, 0.17247861588912072, 0.928283551460418, 0.199694267739418, 0.9174533648219519, 0.1179928734316179, 0.1699914553449402, 0.1468219300669329, 0.6909434535693166, 0.1560916400344471, 0.2003453133254226, 0.36967984012399735, 0.15621183491119406, 0.4758643153090829, 0.6416616666460445, 0.6060034102698346, 0.1643208381966006, 0.1810372427869702, 0.19591567615849803, 0.19200418362844152, 0.17707593787321496, 0.19457209966855182, 0.17981552077549456, 0.16792277630155295, 0.19237628284465846, 0.2224251878268626, 0.08003894835543146, 0.06311678423181988, 0.06988192343365407, 0.08662639339624367, 0.09194786542516509, 0.0769030715473975, 0.09117857626838721, 0.09215611949200664, 0.07121048030324295]}, "mutation_prompt": null}
{"id": "67f9a9a9-2611-41e9-90a4-b7bd14735a02", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    mutation_scale = 0.5 * (1.0 - _ / self.max_iter)  # Dynamic mutation scale\n                    mutation = mutation_scale * cauchy.rvs(size=self.dim)  # Cauchy mutation\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i] + mutation\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "DynamicMutationPSO", "description": "Improve EnhancedPSO by adding a dynamic mutation strategy based on Cauchy distribution to update particle positions.", "configspace": "", "generation": 54, "fitness": 0.15857652490704496, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.3101978297126622, 0.3287865797522498, 0.3129132921435467, 0.3423951404848916, 0.31600418010344056, 0.36947559004718933, 0.3005103344874013, 0.3268093439302635, 0.29442009414036063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06682477417897281, 0.04703913053830544, 0.06912019131502112, 0.06321885024362639, 0.07845642808175435, 0.08802751107314999, 0.074094715243465, 0.0917307103534335, 0.07583089654772213, 0.048925083095381905, 0.04578187852846316, 0.04798980569570954, 0.06322914740347274, 0.06508598456851256, 0.06037879403421886, 0.05967820573482585, 0.07228876633906034, 0.06534808074791332, 0.9941894229847229, 0.9944834600500477, 0.9935220303386879, 0.9928242020640419, 0.9957305171268253, 0.9919773540721305, 0.994040206565524, 0.9948181271338702, 0.9916057309582823, 0.17942336524701674, 0.13806640360685363, 0.15605661274953708, 0.14738797623114896, 0.18162732131475767, 0.14639379717286516, 0.13294561065567012, 0.1660391227079654, 0.1560415123540101, 0.19242171904523708, 0.1873365382267913, 0.16248441738200126, 0.18777731028993272, 0.19701508798053569, 0.17973241160179332, 0.13749821087049185, 0.13373708582827382, 0.16188915190140674, 0.0795756082289597, 0.008516949767290893, 0.04703097928334321, 0.11013710725010717, 0.10823224795547937, 0.09484186815369211, 0.08452326581234448, 0.046891974714874385, 0.09412676868917702, 0.08460912007204391, 0.09469606101856187, 0.08432023341523742, 0.08307626999989592, 0.03956474532950216, 0.12337983034044209, 0.01897092347837892, 0.05354794236365634, 0.027943556634662303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04151823498777374, 2.6204403335894355e-05, 0.049873011041947524, 0.020385006022584973, 0.0, 0.0, 0.05061605701804983, 0.03152570321274395, 0.04135851902560794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040929645580676355, 0.02346456124670293, 0.03243708497924758, 0.042984085089086355, 0.030261729194390852, 0.0741570612742325, 0.04186085375446491, 0.04587398327824088, 0.028410330834166442, 0.3116065892022989, 0.3046602204034492, 0.31677599524194233, 0.3167529547976444, 0.2888391261653097, 0.3233671545782104, 0.26692159714863706, 0.2926301204903522, 0.3018127036924271, 0.06538830452745881, 0.07177095984923576, 0.06981005740245094, 0.06403028733939431, 0.05161747433633279, 0.07338329160518442, 0.0672740614409133, 0.0689054476450095, 0.06539746715841754, 0.15282795638292979, 0.14504178564723536, 0.14309061299239167, 0.16019667016924255, 0.12614355694921653, 0.15342915881633234, 0.1631141509769315, 0.1405630653056663, 0.14945512016648133, 0.22344974317605815, 0.2100354884024429, 0.21703787208730696, 0.21557740470227582, 0.23024285870859662, 0.17729267279000271, 0.24049224195777652, 0.23782671406856148, 0.2411150101308489, 0.18541542402038869, 0.15573094271968035, 0.15757531703638794, 0.1212627061709094, 0.15675526063698175, 0.15009344816518388, 0.16772716618417616, 0.1786231570590764, 0.11561121104772609, 0.17902651968202177, 0.13322252120048328, 0.15734282639417707, 0.17016052693932504, 0.17074104271992419, 0.15095138492361515, 0.18691200648375828, 0.17209800878620007, 0.16314903585159246, 0.15523562332386642, 0.1715007279880898, 0.15860698298211062, 0.17176097366858123, 0.16258306435401426, 0.16653569536245172, 0.150718360682912, 0.1649156020029563, 0.177021374967683, 0.16215697892914827, 0.16469841317134704, 0.14944082369643397, 0.17890472579028027, 0.18757875508861777, 0.11993727717993297, 0.17435448637169282, 0.1695322821258124, 0.16134192591266072, 0.23860408429412916, 0.1455466944553151, 0.14238634942865758, 0.17708726988703316, 0.20096818656366866, 0.16141301353279724, 0.20673429345204442, 0.20829575276527612, 0.2075108373306399, 0.18076266251718376, 0.18039163284175297, 0.1932766091687811, 0.19624919946503383, 0.17388489082768943, 0.1852660041105475, 0.23208328823086788, 0.16640357369195025, 0.1920123994528492, 0.06461118458189863, 0.05568145889069476, 0.05830997714119435, 0.06833356768744814, 0.05914172035624632, 0.062106264902213715, 0.06330763181425703, 0.061125579825813126, 0.05264320819422441]}, "mutation_prompt": null}
{"id": "04932022-4658-4467-84a2-610db910b363", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "6302b987-ee3d-446e-8cc4-9ce8967f7a26", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "b553d97b-8707-4e16-a8ed-55313195a542", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n        population_size = self.swarm_size\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n            # Dynamic population size adaptation\n            if np.random.rand() < 0.1:\n                population_size = np.clip(int(population_size * 1.1), 1, 100)\n\n        return gbest", "name": "AdaptivePSO", "description": "Improve the diversity exploration by incorporating a dynamic population size that adapts based on the fitness landscape.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 30 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 30 is out of bounds for axis 0 with size 30')", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {}, "mutation_prompt": null}
{"id": "ceb6d969-3cdb-4486-92e2-c65dd924e13f", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "3df0d067-ca14-4f33-b3a4-ac59710e3558", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "36db6d23-9727-4c57-ba22-58055961076b", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "a01e01f3-0491-4234-8046-e045e4b71145", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "b8135631-a848-4143-b56e-02d3e67880c3", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "77a0e263-99db-4245-8e06-7d6087c1d9fc", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    adaptive_swarm = swarm * np.abs(np.random.normal(1, 0.5, self.dim))\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - adaptive_swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "AdaptivePSO", "description": "Improve PSO algorithm by incorporating a dynamic swarm adaptation mechanism based on the performance of individual particles.", "configspace": "", "generation": 63, "fitness": 0.14776332653827243, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.2452706313347629, 0.3090540117706878, 0.2524260624740795, 0.22384570264298032, 0.2598922474269564, 0.2746477554733485, 0.23854552637095927, 0.2452281718103364, 0.26365529525162457, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0733910803145511, 0.08310645716647846, 0.06466753684320115, 0.051539582568830844, 0.06931980051446807, 0.05057760132690314, 0.05146180764305641, 0.059340692258760264, 0.06009794841848648, 0.06204648043911676, 0.06299778586839766, 0.05391399805142005, 0.047537766122259906, 0.04509787036183244, 0.059393620178530226, 0.04763991536030865, 0.03715234619305807, 0.05447653207341663, 0.9935350607462122, 0.9941956236308204, 0.9925389649893432, 0.9922122858399443, 0.9907694678616839, 0.9920766486220299, 0.9947233148809372, 0.9937617770892019, 0.9929364413526228, 0.12324179766218935, 0.1085353050209078, 0.08915991233646126, 0.13101853733894508, 0.11527526218051243, 0.14398590937558187, 0.11814354266093707, 0.10994353179435568, 0.10101206553859787, 0.19892456579599127, 0.1891074752274079, 0.19224633344381348, 0.17065868950372898, 0.17882746779881653, 0.15874760778503438, 0.13772929195761896, 0.13964139179626, 0.15621980268856783, 0.05730283667293512, 0.0622859231791979, 0.09570093758567122, 0.05415994669561819, 0.08512551792706913, 0.01863558272181598, 0.08674540483929127, 0.017261199277536443, 0.09160593083533097, 0.11057184548846266, 0.10958149176599452, 0.13400339171693265, 0.09931754841975748, 0.12548952636396404, 0.13707388541971322, 0.10978223405931098, 0.004130185727878821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06354909735181302, 0.0010175957756440868, 0.022405273878759346, 0.042709838290201474, 0.0, 0.0, 0.014887144339193026, 0.046900095894654936, 0.00393346235716685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007471404995449404, 0.0, 0.0, 0.000750118065885319, 0.013038487264142362, 0.013973175410932126, 0.011026122851195974, 0.01157160287330028, 0.006039241427247877, 0.2192061442232427, 0.25216572876782006, 0.2714165700916762, 0.2451628086756218, 0.23211948492682755, 0.27480995992684365, 0.2697307088087365, 0.26681545849747235, 0.2572949297146532, 0.06025206646258341, 0.07211753170746737, 0.05207123104687983, 0.06381253417062527, 0.04655133539861456, 0.06647266213237579, 0.06178343173449352, 0.0766163138320729, 0.0666200812939145, 0.12822055771394147, 0.11649306196006926, 0.13296945604467802, 0.14283739274854945, 0.14672823802610202, 0.145542079045478, 0.13763194968851822, 0.1364825275770185, 0.11407124009866598, 0.18844341216236715, 0.20551929156606952, 0.17534565775120314, 0.19296080444938668, 0.25888646965770956, 0.242179680566444, 0.20208968431030594, 0.18460835912210172, 0.1789134029138817, 0.10352201347059686, 0.12695456107487457, 0.15624315180191806, 0.15215340440209746, 0.12403846427999565, 0.12268933474888977, 0.14229246406386942, 0.1295928368259709, 0.11003569533516344, 0.1662094900746799, 0.16417592776850254, 0.16605516378973184, 0.1678220213420747, 0.18527516593937676, 0.15139631062558978, 0.18287656122251061, 0.18710855548555594, 0.181460843345441, 0.16491908756455687, 0.15634071453162235, 0.16516430900709567, 0.15212002118838786, 0.15630053225209972, 0.17854810084066342, 0.15673093466691024, 0.16799505748747123, 0.1638013982874934, 0.2125646373172856, 0.1654476958860338, 0.12681846156588328, 0.22527585355777424, 0.1766699502903455, 0.1759743888717954, 0.09279461620254792, 0.16259585794261144, 0.13456675644527183, 0.22446441569075537, 0.13604566310881205, 0.16434883378100562, 0.18199557699693614, 0.23626987934147858, 0.17818909319270038, 0.19872431502231758, 0.18268360713405685, 0.19846705594439373, 0.18717226464034553, 0.18027597381015004, 0.18428195278377058, 0.16835037051527013, 0.18701377157092103, 0.177571644026291, 0.1916122816737974, 0.172120385127292, 0.17841969829081683, 0.06118453546711278, 0.04631158468510188, 0.07297516963812156, 0.06947919597558572, 0.06617830815938519, 0.06806125574328181, 0.059947927427265846, 0.05151560328576921, 0.05693149676351261]}, "mutation_prompt": null}
{"id": "ff8c31da-aedd-4387-bc91-4e4e97997544", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "3ea344d0-fc91-4525-b50c-31eb82ba5136", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "59df3bfd-6d6f-4458-8e57-3b5b0aadc99c", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "ff9ca897-d4c2-4453-9a72-4555779900ee", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        cognitive_weight = 2.0  # Initialize cognitive weight\n        social_weight = 2.0  # Initialize social weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = cognitive_weight * r1 * (pbest[i] - swarm[i])\n                social_component = social_weight * r2 * (gbest - swarm[i])\n                velocity[i] = inertia_weight * velocity[i] + cognitive_component + social_component\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Improve EnhancedPSO algorithm by dynamically adjusting the cognitive and social components of each particle's velocity update based on its historical performance.", "configspace": "", "generation": 67, "fitness": 0.2337275699155708, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.25.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.8465147701420715, 0.8525988096417979, 0.8342808545722886, 0.8611316626433962, 0.18856008217560316, 0.8421799407142241, 0.8606692514642721, 0.8475926036552045, 0.854002264639822, 0.0, 0.0, 0.0, 0.0, 0.04570867098075415, 0.0, 0.04908633779476457, 0.05479910436124247, 0.6217564419224442, 0.13651956376457097, 0.13274440676721422, 0.11144099727961532, 0.10535785895682293, 0.14732485756071, 0.08353858156914717, 0.11068950067142358, 0.1196751874123716, 0.17913069817885985, 0.14438409564325616, 0.1478672560045261, 0.11534187562923293, 0.09142570174891484, 0.14757800035615654, 0.11709619603815369, 0.16394290762847485, 0.13171278224957772, 0.11357316216381408, 0.9933620731516192, 0.9941291589985412, 0.9942866647988456, 0.9922963340322144, 0.9907277741147905, 0.9892015008224715, 0.992538277255559, 0.9941614847736984, 0.9936047208939792, 0.29796541857940806, 0.05544489329802205, 0.059607724854681465, 0.1471944759382322, 0.20816517527201162, 0.1525058644302728, 0.36313175266381115, 0.08879410726701498, 0.08437755336914288, 0.1695955235016363, 0.21578328803198477, 0.32645456905353076, 0.20151277079553853, 0.1878470379704369, 0.1915186387643184, 0.32478678084126333, 0.12517789578474936, 0.17193941578863847, 0.15804811903999727, 0.15514911398118425, 0.09211983835977644, 0.1243426695559059, 0.12483473137842016, 0.09462289657780021, 0.2035392431648585, 0.12856071295427718, 0.15054851221208587, 0.14598189676289297, 0.015283931955003438, 0.15860200809533276, 0.13770805658420304, 0.1395894637548024, 0.16289751862060475, 0.1610032186615319, 0.029800179704575713, 0.2407718368074846, 0.0, 0.0, 0.0, 0.02166275825500308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02643373424118267, 0.026151789441408946, 0.04839725703200315, 0.08568969207461341, 0.0, 0.014314726041425474, 0.03134963319826434, 0.02306446337337653, 0.025059317237240974, 0.046033015226352836, 0.044333347061205175, 0.13697934535877687, 0.1108193018505852, 0.0908033397411202, 0.07281996711866634, 0.09222070478844757, 0.23067243737336462, 0.0685144674971434, 0.13345500487734208, 0.04081642524926188, 0.09102989946710749, 0.08614657493814137, 0.005982852018847962, 0.006002588689729804, 0.05316601861271408, 0.05476673049780112, 0.15854435212770734, 0.5210986022288181, 0.4838664283388664, 0.4834913714195487, 0.5084976710274182, 0.4624552594924024, 0.5008924494904308, 0.4924458384954967, 0.48729768189136213, 0.496603855084749, 0.08311708044640331, 0.08462915749552191, 0.08540318736160168, 0.08557462314740483, 0.07418994045064575, 0.1217978307664267, 0.06671473852620491, 0.07559813682797778, 0.061406701154821386, 0.2055257486600517, 0.2360879653372655, 0.16972728411918614, 0.24212351088334783, 0.25811747032085, 0.2476945202757319, 0.34086704465351936, 0.2300564618017521, 0.22232709793367078, 0.13558905383673014, 0.18114525192794007, 0.3385273073759446, 0.3338023940107052, 0.31235107720834754, 0.21134858070117668, 0.29255419363724655, 0.3710716991997749, 0.18244868501451872, 0.24427718076364757, 0.22988459359844526, 0.19683495218357017, 0.2024767734993217, 0.15523050159035479, 0.23937675812726977, 0.2537927801328488, 0.29238845825252335, 0.20920955421921272, 0.1950435703612753, 0.16685495636299197, 0.16706725316868432, 0.20243588839046023, 0.23191985267840465, 0.17161897720208763, 0.20409687253059927, 0.18140966525093516, 0.20898925029598048, 0.24350335201524687, 0.23994050755266405, 0.24320172901116333, 0.22470733709734036, 0.2884816289495311, 0.2015259858259678, 0.2006144147541502, 0.19208501165941705, 0.23703135801146769, 0.8854373854549125, 0.1627861537653431, 0.11478875548186751, 0.864062622444344, 0.1989533977179906, 0.19693742748927345, 0.12272144362839332, 0.16937045701309072, 0.18536381850151862, 0.6935500627209518, 0.15498733015470822, 0.5465314017788017, 0.28104927575754723, 0.21787360145202528, 0.20627771871412537, 0.2025346216178896, 0.20579897853113183, 0.4878911922345537, 0.17619986388886533, 0.1936146102810058, 0.17857765686897087, 0.19826409433816483, 0.2039359716557103, 0.18371284051906556, 0.21085642018290307, 0.19086710111195293, 0.17565453206854909, 0.12356827140287208, 0.08673615910042787, 0.0743081371533304, 0.0754820704588135, 0.07777325601592766, 0.07067458986359176, 0.10110217312582315, 0.07336876245699608, 0.07012889184573035]}, "mutation_prompt": null}
{"id": "67b0a51d-86b7-4eac-9a22-f1da2da7f5c1", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "668ee2eb-24cc-4f2e-b5e1-d0327e578683", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "614fc4d6-5dd5-4de5-886e-d0a077c34444", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "1828d455-4d45-4c23-9ec3-29790c818b3e", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "f14fcde7-6bb1-42d3-a131-2fad6563346e", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "488c9f01-170f-4539-a003-c717b3d4e20a", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "e31c7b0e-0847-45b5-af81-76b43d879a67", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "93480d05-74f8-4b2d-a181-5e32d77c660a", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "6dde1e68-bbe9-4e03-ad5a-8c086578edfd", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "87eb5749-ca22-45be-939e-ecd30b04dcae", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "e1c0128f-52d5-469a-953c-f451750e960d", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "75808c32-00e5-487c-8ec8-13a5707b1fb0", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "76d07cd1-0fc6-4a56-be26-762d78b59adc", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "88729e25-d266-46a5-9519-69d8d59daab2", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "b63ba527-0fe8-4deb-8022-256b960f6aca", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicSwarmSizePSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            if np.random.rand() < 0.2:  # 20% chance to dynamically adjust swarm size\n                self.swarm_size = max(10, min(self.swarm_size + np.random.randint(-5, 5), 50))\n                swarm = np.concatenate((swarm, [chaotic_init() for _ in range(self.swarm_size - len(swarm))]))\n                velocity = np.concatenate((velocity, np.zeros((self.swarm_size - len(velocity), self.dim)))\n                pbest = np.concatenate((pbest, swarm[-self.swarm_size:].copy()))\n                pbest_fitness = np.array([objective(ind) for ind in pbest])\n                gbest_idx = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_idx].copy()\n                gbest_fitness = pbest_fitness[gbest_idx]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "DynamicSwarmSizePSO", "description": "Enhance the PSO algorithm by incorporating a dynamic update mechanism for the swarm size during optimization.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 34, 17, '                pbest = np.concatenate((pbest, swarm[-self.swarm_size:].copy()))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 34, 17, '                pbest = np.concatenate((pbest, swarm[-self.swarm_size:].copy()))\\n'))", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {}, "mutation_prompt": null}
{"id": "9212a55b-f8c1-44d8-a645-379a16ff2b43", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "4ede1dab-54fe-4012-b701-a54c8ac77582", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "8b0f8eef-5c02-4d42-b5c5-34b7165e538c", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "6b9f1805-0299-42a6-98d2-d44093d388a3", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "0f74f878-0ac2-48e7-8adf-43bff0ce892e", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:\n                    step = 0.01 * cauchy.rvs(size=self.dim)\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    cognitive_comp = 2.0 * r1 * (pbest[i] - swarm[i])\n                    social_comp = 2.0 * r2 * (gbest - swarm[i])\n                    velocity[i] = inertia_weight * velocity[i] + cognitive_comp + social_comp\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Improve exploration-exploitation balance by incorporating a dynamic parameter adaptation strategy based on particle fitness and swarm diversity.", "configspace": "", "generation": 87, "fitness": 0.25274071123529335, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "6b8c97c5-1bfe-4b86-a476-51a2a0fbd719", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "dd516f3e-1f79-4ff4-9bc4-099c706b96ec", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "86544e0c-1f4b-4cb6-b316-efa656b149a2", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "8908140a-1789-420d-aaeb-3df60f4c0540", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "7b2794db-11c1-41e7-b822-9f225d8f3d43", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "4cf0d5b7-b4c9-4d1a-b78a-7c3514b1fed4", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "b535b5f1-a771-4e2e-b470-22e1b8bc2d1c", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "bea53082-0159-4274-a31d-a895f5cbdcdc", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "aa0680c0-398d-4050-8d24-82d4ee436239", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "8f421eb3-023c-457c-ab60-071f9df9216a", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass DynamicPopulationPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n        swarm_reduction = int(0.1 * self.max_iter)  # Number of iterations after which we reduce swarm\n\n        for t in range(self.max_iter):\n            if t % swarm_reduction == 0 and self.swarm_size > 5:\n                self.swarm_size -= 5\n                swarm = swarm[:self.swarm_size]\n                velocity = velocity[:self.swarm_size]\n                pbest = pbest[:self.swarm_size]\n                pbest_fitness = pbest_fitness[:self.swarm_size]\n\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "DynamicPopulationPSO", "description": "Introducing a dynamic population size control strategy to adapt swarm size during optimization.", "configspace": "", "generation": 97, "fitness": 0.20270125766049954, "feedback": "The algorithm DynamicPopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.5241239176593895, 0.6390729413650056, 0.6711276563860237, 0.6778589651217917, 0.6215548875306607, 0.6746556591696375, 0.7105834259340256, 0.6050908342725592, 0.5577192157546433, 0.0, 0.04207539323188503, 0.0, 0.0, 0.06331435088925408, 0.0, 0.0, 0.05868718721383104, 0.02492398046626043, 0.14548119315983277, 0.1795790515002489, 0.11155170963037597, 0.114432314806037, 0.06901131371840186, 0.08013980148202171, 0.06280380355225001, 0.14310559355201335, 0.11813158035692573, 0.0820217635057583, 0.1410856428492061, 0.07165814115841185, 0.04648705116952079, 0.18557068852397995, 0.07829287336300117, 0.08073572443499921, 0.11696799005774716, 0.08367551527719663, 0.994217612633768, 0.9947907316055113, 0.994695770115636, 0.987754218525179, 0.9900090588347762, 0.9913983389600257, 0.9924419292529811, 0.9946598205490241, 0.9918268405289691, 0.17860709267743857, 0.061861164591521245, 0.2004592148003469, 0.22714605281676903, 0.22167162328155865, 0.2462020394626877, 0.2697515020671696, 0.12601433804604034, 0.2654153723685325, 0.22749293584489083, 0.3070081527924211, 0.16166179258530355, 0.19458944027731784, 0.12076539766463412, 0.19072997453857843, 0.18430436467012978, 0.13764623995500846, 0.2389899358699108, 0.1896941695523927, 0.14503527782125492, 0.2650654422937665, 0.12796920494312214, 0.13269661356817197, 0.10912256599829273, 0.1458269305852813, 0.11723498096544549, 0.12740458716674652, 0.12762813446326948, 0.119376437121965, 0.3104272657174241, 0.13045149646210574, 0.17582803714109685, 0.16635371665871257, 0.12864684846797614, 0.0, 0.15104434451775617, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0329458783796206, 0.02703655402494365, 0.10359635545969681, 0.06372817727422331, 0.002642537442905213, 0.005786931250312932, 0.037788196236367866, 0.0381701611782308, 0.07362566445270535, 0.07605705511914584, 0.0, 0.057255717782801696, 0.031520973763443205, 0.046935204284832444, 0.015632022573313642, 0.021889694848108765, 0.02858416869525282, 0.02139059599528903, 0.049927798561470116, 0.04270207405359594, 0.10601978406701962, 0.0459813244242292, 0.15743750965680015, 0.008879834629026084, 0.08281549169634295, 0.08280836456640883, 0.10535670480365023, 0.42064469201044763, 0.455016388832587, 0.4251468473632929, 0.42497478887203466, 0.48723049213870995, 0.3825640053910824, 0.40600202309823574, 0.40335327549181876, 0.40054273739007484, 0.09184238619643004, 0.06115634625368571, 0.10000148041668089, 0.15715802150768554, 0.07340292335130039, 0.06866136754851482, 0.06433904677976077, 0.1147079885297948, 0.11176166766125883, 0.2721290555576916, 0.18658523147590445, 0.12167594735380571, 0.20455476750851176, 0.21207612268416653, 0.15705033692504689, 0.172591948418786, 0.2551641839489964, 0.1922033088716848, 0.2306343632728053, 0.26172955421872846, 0.28937441368362804, 0.253306740419856, 0.1993291070910913, 0.24969448776465175, 0.22910094415857785, 0.2947233533735396, 0.2158758706237831, 0.12642301322468774, 0.17352360358823515, 0.16147163612009552, 0.12050034645732377, 0.15283827289719376, 0.20817000730905044, 0.20662472978455293, 0.19340733746995642, 0.1306261604422604, 0.17483717730595494, 0.13597798715321663, 0.1754681396832113, 0.1426165166733373, 0.17889881704273192, 0.15287630961752896, 0.16471163940503497, 0.19142601146373162, 0.14718152695220998, 0.19865322947317932, 0.1923765346823172, 0.20046552453315014, 0.19822684660465606, 0.17168909331706184, 0.1772249540679357, 0.19726820554037694, 0.22022654617823345, 0.18389308932237902, 0.1651068710168676, 0.16894700669195606, 0.1544907810424584, 0.1712892721012499, 0.20025935366047787, 0.13106701740064763, 0.11821038091146874, 0.17007771675773076, 0.7782760312223569, 0.3240356667488373, 0.2246667208843366, 0.11263765366835232, 0.20517460775795193, 0.168126122368623, 0.20890190819970256, 0.21261076181287542, 0.21296647844059136, 0.16543078753242757, 0.170536350433388, 0.20215523140299496, 0.18956177120367224, 0.1761229975042954, 0.1873053728628371, 0.182951801807409, 0.17246676211761192, 0.20335676710354633, 0.16593889649077098, 0.07869381704899092, 0.06518706510563721, 0.05242822371589939, 0.07173662337119058, 0.09084244987286327, 0.07830558730891002, 0.05106453327755189, 0.06036249429039131, 0.058318347963228545]}, "mutation_prompt": null}
{"id": "ed019935-c7a5-41a6-b34a-ac0d0f4f8d8b", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
{"id": "cf1f2756-b036-4fad-bc5e-0beae7d4aff8", "solution": "import numpy as np\nfrom scipy.stats import cauchy\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def chaotic_init():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def objective(x):\n            return func(x)\n\n        swarm = np.array([chaotic_init() for _ in range(self.swarm_size)])\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([objective(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            inertia_weight -= 0.8 / self.max_iter\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # 10% chance for Levy flight\n                    step = 0.01 * cauchy.rvs(size=self.dim)  # Levy flight step\n                    velocity[i] = step\n                    swarm[i] += velocity[i]\n                else:\n                    velocity[i] = inertia_weight * velocity[i] + 2.0 * r1 * (pbest[i] - swarm[i]) + 2.0 * r2 * (gbest - swarm[i])\n                    swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                fitness = objective(swarm[i])\n                if fitness < pbest_fitness[i]:\n                    pbest[i] = swarm[i].copy()\n                    pbest_fitness[i] = fitness\n                    if fitness < gbest_fitness:\n                        gbest = swarm[i].copy()\n                        gbest_fitness = fitness\n\n        return gbest", "name": "EnhancedPSO", "description": "Enhance the diversity of the population by introducing a dynamic inertia weight based on fitness improvement.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa79-4178-494c-b49c-7fd23cf864e4", "metadata": {"aucs": [0.7814119263719238, 0.8194925101351265, 0.8421939257747091, 0.8520573870049292, 0.7537855145948774, 0.8372857784899929, 0.829125195917318, 0.7686046915715619, 0.8474068171766908, 0.15800040077746602, 0.41208374306517703, 0.26231866205223964, 0.35323921046893014, 0.14434479018920865, 0.3925990299513624, 0.32827107528557786, 0.4183546714537105, 0.33787324367150273, 0.14849948936865398, 0.11769270000820908, 0.16590258917550404, 0.07224308314469441, 0.06806512699930123, 0.1107111076565277, 0.10684406378162059, 0.1722745170231319, 0.15320014374312452, 0.10784352055719415, 0.10533496262101949, 0.12969173187014182, 0.1153271184546174, 0.10635197775540361, 0.15052847105611344, 0.1105137013326819, 0.12432203330889369, 0.12528855734492395, 0.9939373133874123, 0.9939293288493884, 0.9942004210814055, 0.9877754386602016, 0.988447531967707, 0.9911400908228581, 0.9924569052317874, 0.9942754282355613, 0.9919388796727661, 0.29913760665439326, 0.3521756140876733, 0.2508542370004594, 0.283956001618883, 0.1874679869119491, 0.25023133536748754, 0.27883318007327784, 0.36352628601908676, 0.3257059552217073, 0.22923246192073965, 0.21703916802318146, 0.20752781824903754, 0.20158114594976728, 0.2092746925793908, 0.26652714545838185, 0.34956480757699915, 0.12464220219795641, 0.21224506104399354, 0.28324781759755, 0.13117674777416577, 0.1562560827302495, 0.12401689713758934, 0.12694859792742585, 0.1276099083860478, 0.15462164357271724, 0.24113691791143343, 0.14622840400004422, 0.2844400164790517, 0.11984149264855826, 0.15847709554377454, 0.14050133191031933, 0.282342722813654, 0.17574970415595292, 0.15701839279361707, 0.0, 0.09732831649079521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04458329811649364, 0.03920345990009777, 0.04109605922717274, 0.044328084324729344, 0.012865405941421382, 0.007863150748696701, 0.03795578700273694, 0.05711573965812278, 0.06266411932879723, 0.04591550907826458, 0.03247620740353663, 0.04502898963825064, 0.0726895158672809, 0.18058508780878257, 0.1998970392802345, 0.0936536390163838, 0.1916228553771564, 0.06754502889375036, 0.14028404510978798, 0.04005446466033258, 0.0366587447053347, 0.2706860916031528, 0.06902215647499765, 0.059766558984470586, 0.08341623874791437, 0.0805056127265481, 0.19928434276321882, 0.4970746590130003, 0.48588154170967823, 0.47627457898334546, 0.47339019274463745, 0.48932030162380824, 0.5013502766599498, 0.47011862012123196, 0.4808505523655824, 0.5038013793232754, 0.09439759408448156, 0.08435946667264183, 0.09259938274326218, 0.08207641405994659, 0.10917113997403172, 0.10987041352480464, 0.07153774763443621, 0.15265585227350764, 0.1198308033298412, 0.17802395993387543, 0.31328344001236974, 0.1551039504597258, 0.2167040441474939, 0.2811600021181432, 0.22690975741455566, 0.39986091412966085, 0.22942051844113498, 0.20541666284646376, 0.23032525982529684, 0.22913625914170022, 0.33668184856201555, 0.2767760265477782, 0.2238905523641781, 0.3072797517381052, 0.3759130413094822, 0.4340074519447431, 0.4131100713871585, 0.15046815264877333, 0.16856321171749478, 0.1915741670127421, 0.1569448957998113, 0.21297480859755868, 0.25579138743288277, 0.28694765619081375, 0.27196987210783397, 0.23461404277377773, 0.22660855277810432, 0.13178549199578882, 0.20328185156806022, 0.18209774767369558, 0.1986704644455234, 0.1867768499368676, 0.2176012324136184, 0.17311862607604322, 0.261505502726729, 0.20285978675229677, 0.21989538521777208, 0.208158209057149, 0.4154353254259109, 0.22229627881668235, 0.20454460742942815, 0.19823974101472985, 0.19332064903946855, 0.20670528656710396, 0.16378723299949594, 0.8226993869547616, 0.15402538273070676, 0.7962031798262776, 0.19852022977713635, 0.1921728881010154, 0.099644590471067, 0.16918317167000207, 0.19673904225548544, 0.20298357759341512, 0.15681676336213946, 0.11247776597134618, 0.26968175452701926, 0.32260815494876327, 0.20503636905174794, 0.21167760147790404, 0.21152562664476726, 0.426796638919692, 0.20550232861833162, 0.22026250214596765, 0.17959426241704768, 0.19610558530310995, 0.21761265633434912, 0.2221857757474498, 0.21749244011182667, 0.1662565803109508, 0.20003317052714942, 0.07074144286457451, 0.09636479017519106, 0.07098755836874426, 0.05451807880671189, 0.08114096932454917, 0.08857721639642602, 0.08185769675613341, 0.08239958545033388, 0.08705058222164885]}, "mutation_prompt": null}
