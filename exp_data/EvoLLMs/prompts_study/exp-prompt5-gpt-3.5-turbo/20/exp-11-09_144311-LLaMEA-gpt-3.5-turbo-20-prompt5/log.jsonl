{"id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 0, "fitness": 0.29571774420725727, "feedback": "The algorithm HDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "23084084-35bc-4d47-95ab-f4520d452dcd", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "3cf4d794-d92f-4cd0-b2f4-faee1f0255a7", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "495fbd6d-9376-4b86-b161-74658b0c20c1", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.history_weight = 0.1  # New parameter\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_solution_history = np.copy(best_solution)  # New variable\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    history_mutation = self.history_weight * best_solution_history  # New line\n                    new_population[i] = sa_mutation(population[i] + history_mutation, best_solution, t)  # Updated line\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Enhancing population diversity and convergence by incorporating a mutation strategy based on the best individual's history.", "configspace": "", "generation": 3, "fitness": 0.09381301550373523, "feedback": "The algorithm EnhancedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.19.", "error": "", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.10184367587632459, 0.15174149201022025, 0.17537264436918754, 0.11327810157063178, 0.1473158347520077, 0.13225753886239344, 0.09764688937120058, 0.16526935991768454, 0.12439744452418111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03882448483042367, 0.02184262733483522, 0.030367063203857625, 0.029439079516546895, 0.0012186513362246743, 0.0037264603658618833, 0.018248263482334326, 0.0038709574263237068, 0.013713377864575937, 0.03206636324444612, 9.999999999998899e-05, 0.009352212195629206, 0.01959972157639278, 9.999999999998899e-05, 0.04536417881482924, 0.02002399122563603, 0.0009977339432147847, 0.012360358126493498, 0.9898183501831921, 0.9859366887120077, 0.9892006870401663, 0.9913884114267668, 0.9902755337781284, 0.9907773450913642, 0.9894121323651422, 0.9767105132736271, 0.9917627838442884, 9.999999999998899e-05, 9.999999999998899e-05, 0.03014689456458819, 0.01740704306390728, 0.00031549654350837564, 0.01986361878538956, 9.999999999998899e-05, 0.011293333694524565, 0.014012615338424461, 0.10027683525177622, 0.03775594762470191, 0.08313688242057249, 0.05978659419766663, 0.04827592616803644, 0.024088701347011354, 0.05322641716540599, 0.14863013985070228, 0.036794405962527144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013293889341722598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14393611828374286, 0.14690814074850456, 0.18066139448102858, 0.14444043528791084, 0.12834535283562964, 0.18511959327380978, 0.15570247452480124, 0.11639502828806403, 0.18012909521211584, 0.015143608986383894, 0.008326717360676583, 0.030629263841692067, 0.01474260835094754, 0.018783136846867277, 0.01759993274736349, 0.04523237526573831, 0.021976583047334297, 0.0267656688986897, 0.08556671965895457, 0.07216978409246999, 0.0841362058183065, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.0870740420100723, 0.08826456627528534, 0.07726393575557644, 0.1240991236033202, 0.1218628502006528, 0.1328805040988782, 0.11921748804489285, 0.10517400601137339, 0.12451829260466452, 0.14852267756024407, 0.12927377394630934, 0.12080632011873804, 0.07547630878086331, 0.048840969377771604, 0.06480830226289347, 0.11135574938461434, 0.06252396875171595, 0.06693640819196878, 0.08780600002381456, 0.05003843529594709, 0.07113808506719799, 0.14780473955115225, 0.12372465392467968, 0.14340850127123517, 0.1752690572432033, 0.12046153218082545, 0.13606984180022774, 0.13583408832622412, 0.12382006504110865, 0.16142366077293568, 0.12742969460876086, 0.1294582245817104, 0.15355238525716308, 0.1336840477562029, 9.999999999998899e-05, 0.15034431136443704, 0.049869359485125275, 9.999999999998899e-05, 0.1392392190062679, 0.07954515095741077, 0.11888123236503689, 0.07492452135878302, 0.09321405734478683, 0.1207914665021157, 0.07574453096720368, 0.10056759175482477, 0.07390728909942246, 0.09113084660109105, 0.09810865928916612, 0.06405434908685748, 0.05814350416594338, 0.041247008866584056, 0.07543175133574442, 0.057534911336730166, 0.07532734846182088, 0.033431844775788755, 0.06778007027437272, 0.1569429203771464, 0.12093576287027485, 0.14763022729669195, 0.15743572800450512, 0.11518591943541234, 0.13203354991079574, 0.13816456241168673, 0.1274514605199527, 0.14689007985489466, 0.03130742670477116, 0.019167384503222307, 0.03301878512996703, 0.04892598894775324, 0.045299716823326674, 0.034493433778735705, 0.020660394262046244, 0.011765542567236609, 0.053124976363703724]}, "mutation_prompt": null}
{"id": "c5321848-27de-4173-a713-f36d5f23f3ff", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "35bd5797-0e79-49df-8b35-28bdd72a60c2", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.beta = 0.5\n\n    def chaotic_mutation(self, candidate, best, t):\n        chaos = np.sin(t)  # Custom chaotic function for mutation\n        return candidate + self.beta * chaos * (best - candidate) + self.sigma * np.random.normal(0, 1, self.dim)\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = self.chaotic_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Enhance the diversity of the solution space by introducing a novel mutation operator based on chaotic dynamics.", "configspace": "", "generation": 5, "fitness": 0.20158769911739954, "feedback": "The algorithm EnhancedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.3542024984705412, 0.35138456675766416, 0.35728404816372894, 0.35870745366840817, 0.3499509337902944, 0.3620339779056764, 0.3861613360988685, 0.35538617996948474, 0.3719553993074073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005883339431967949, 0.0023630929874965956, 9.999999999998899e-05, 0.015890063510023533, 9.999999999998899e-05, 0.10495678251475549, 0.1086045644495578, 0.13211329087212276, 0.10641873521365464, 0.10948084605161457, 0.11927678751725013, 0.10106098408678332, 0.1048173366535724, 0.11789464750719891, 0.09272839153749302, 0.10380517123396149, 0.08873048780876291, 0.08233870345427763, 0.0915672616983757, 0.12012217461581676, 0.08836362312218482, 0.08952718291312556, 0.08472983457668537, 0.9884725887643112, 0.9928819785134207, 0.9910255526646546, 0.9856557287283535, 0.9923685036889283, 0.9885726128601927, 0.9808424220369839, 0.9867317304621198, 0.9825632777968113, 0.24522094429897956, 0.23260759838775247, 0.22933620929819098, 0.24087401500371275, 0.2476146542805373, 0.21840906905184676, 0.22486870450611696, 0.18996763612477485, 0.2551045691057702, 0.30472540624717404, 0.31252810413074184, 0.32052353165454917, 0.2822774998496702, 0.3166482143326025, 0.3420149371458896, 0.215039414063525, 0.2839048131345375, 0.29073507503267415, 0.13642519373952122, 0.12392812480074078, 0.1459520478984183, 0.1349343429007306, 0.14730389378402564, 0.15322817907263853, 0.14267231134218705, 0.13883103185274448, 0.13802871404655415, 0.13997185788189692, 0.1324962696677685, 0.13111702493038702, 0.13120910828442645, 0.13131046270379798, 0.13845553834461954, 0.16918810701828257, 0.14563336593742837, 0.1489091088341813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032508658512935273, 0.03148191662841415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048453942517521886, 0.14382531293566592, 0.0779634353830102, 0.04581223683666236, 0.042113355749691106, 0.10536129417618834, 0.03471173638443903, 0.062046205055223624, 0.009457576385690114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0684573883255718, 0.08327558415915359, 0.0719686335230022, 0.07787130295747702, 0.08289936212003124, 0.07743080108160771, 0.0699817623339033, 0.09013862199087763, 0.07557800499437906, 0.3557938101432975, 0.35214598333943337, 0.3553182615852126, 0.3639411984707642, 0.35701029593307476, 0.35572895416514294, 0.3813635218124507, 0.3462122940126544, 0.3867041133514434, 0.09793706538675195, 0.09396832292118051, 0.10399767655807624, 0.12018731115334735, 0.10532313919197933, 0.10822320433616717, 0.10460489623358404, 0.09683982940535574, 0.09891495513349435, 0.2013767565530047, 0.19576112708767124, 0.17587564554473212, 0.20010839216833531, 0.14918075391234342, 0.19838443708256603, 0.24935573327648497, 0.1693910951901877, 0.18685772131113287, 0.2537410019933145, 0.2675361973174384, 0.27541118906674855, 0.25799279700757105, 0.2522091313656041, 0.25568131796200066, 0.27081164760213783, 0.2575561193848843, 0.25768372574064113, 0.2079573892247204, 0.21563947298382424, 0.19394576877992775, 0.1998925159323225, 0.18786856720125833, 0.20113041852556968, 0.19885386869039656, 0.18799418604432572, 0.2003313453160367, 0.20211387197115072, 0.20264989522189258, 0.19390805565579805, 0.2404014898673691, 0.21070093906598464, 0.2378121149877621, 0.2216021373352366, 0.19535746708302226, 0.1932027346785108, 0.17927338811229643, 0.17760538116724345, 0.21644102517050623, 0.18496350717058718, 0.19279277601514067, 0.18580721083667506, 0.1887391750956463, 0.18863753363088298, 0.1861387285539512, 0.18431689773849036, 0.1696115953115781, 0.18506579704259463, 0.5235658181829183, 0.19465967554021257, 0.16719608458792645, 0.48247443237631327, 0.16134792491106142, 0.16627199799854875, 0.4844757370002277, 0.1529793028162243, 0.15340483258874194, 0.4596138030664221, 0.16633093583973535, 0.3999562399789339, 0.21008967049326965, 0.38627700887985206, 0.10413790658471156, 0.19569901692243763, 0.20375913418653036, 0.1860504679977002, 0.1802475779874838, 0.18902708734289964, 0.18883225542834436, 0.17693745894825186, 0.20561112380237945, 0.19391506233292966, 0.09910637476508277, 0.08214452437304987, 0.09368454617528355, 0.07582352595718422, 0.07360867007991057, 0.13039077791670806, 0.08411918703362065, 0.08327582890445606, 0.11021063725308122]}, "mutation_prompt": null}
{"id": "fba0e964-c420-4ef4-a6b2-1027097ccbe9", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "cc6b1b92-3617-4a3b-99df-a8d6783485ee", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "1742a6e2-dd72-426d-94fb-707c556c374b", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "4e363b44-4f8a-4323-907e-da99eea0c4ab", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "e1e927f3-e952-4b2e-8aad-b8424ede1b3c", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "eb4664d3-64aa-4f53-b0f8-2375801a12ad", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "e0216459-0604-445d-a7a4-ccc6f38538dd", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "4fe24417-28da-4135-9e8e-7b1a54044fbb", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "0c5f15cb-1cc7-4290-9b77-cdd36e20fb22", "solution": "import numpy as np\n\nclass EHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.sigma_min = 0.01\n        self.sigma_max = 0.5\n        self.sigma_decay = 0.95\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            adaptive_sigma = self.sigma_min + (self.sigma_max - self.sigma_min) * np.exp(-t * self.sigma_decay)\n            return candidate + adaptive_sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EHDESA", "description": "Enhanced Hybrid Differential Evolution with Simulated Annealing (EHDESA) integrates a dynamic adaptation mechanism for the mutation parameters based on the population diversity.", "configspace": "", "generation": 14, "fitness": 0.2907054258536249, "feedback": "The algorithm EHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.7875853575466805, 0.8006632277895579, 0.8188709504387176, 0.78803878297185, 0.7462206531189065, 0.8095954401038306, 0.81693813309636, 0.7949168166816272, 0.8044878377340812, 0.4757763204835528, 0.5751572337963873, 0.6641843382596928, 0.5850681009263932, 0.5881497313857849, 0.5097689251601589, 0.586929768205362, 0.6381350419745827, 0.5921114664437093, 0.10324333378480532, 0.10597326639230509, 0.09111379087432903, 0.08084862859243858, 0.09258949298449548, 0.11060219134218385, 0.10855493536540783, 0.08823712432065856, 0.09141399836400399, 0.09797945009623543, 0.08639077543799611, 0.08538378847708517, 0.07090087936329947, 0.07784409173447182, 0.09100680411710382, 0.09109447162293871, 0.09272106226482335, 0.08228798735856835, 0.9839044736556367, 0.9847979938937129, 0.9872762445034665, 0.9927921209941445, 0.988445027877027, 0.9900833377501865, 0.9874805909711971, 0.9886503805705044, 0.9895055451923987, 0.37108787756822403, 0.3924609620430852, 0.39473710548498386, 0.4124395870016653, 0.4358805791012603, 0.4039310443798281, 0.37939348829134134, 0.34068983554083765, 0.33273366680972927, 0.4020141575590238, 0.59863111111439, 0.6626531587128818, 0.6931108508377091, 0.5539136374557028, 0.5500157693818701, 0.47275920273958305, 0.3504878122804759, 0.3171013487550084, 0.15111079257675464, 0.11820048418431839, 0.12706683873287783, 0.17095865891472317, 0.13519756966152485, 0.0685155226933557, 0.12660008924167687, 0.09496091753308045, 0.11291251536778368, 0.11008158175858407, 0.15132722228868678, 0.14934372405071972, 0.09318983446435702, 0.11461893060732742, 0.13318115370852934, 0.17143425909628007, 0.0836052368641691, 0.15437118354182788, 0.3049316716259889, 0.3451931929253329, 0.3009709405584645, 0.31729143270634497, 0.2811670597143432, 0.2402050061113452, 0.22710439773950453, 0.26044306952809204, 0.31832292779341476, 0.4332243430820758, 0.38124256826752767, 0.37204279583081623, 0.40113817194090595, 0.40025010738351785, 0.425983208481178, 0.5381526860703963, 0.44208817921005317, 0.4060842531147091, 9.999999999998899e-05, 9.999999999998899e-05, 0.021032611235970444, 0.08227679222693207, 0.10409604425976504, 0.1057976821570199, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26483896229641957, 0.28566841531674814, 0.2870894689403092, 0.35063766436599575, 0.35741466229152274, 0.3369123748054417, 0.3173104193636206, 0.281329343651195, 0.3177806331826528, 0.7069940211318817, 0.6820034797349985, 0.7008471644832539, 0.6619972643362142, 0.6039976649784313, 0.549224989471714, 0.6542063315352857, 0.6228789284500675, 0.6877839417238656, 0.07771262948511537, 0.07809805551623028, 0.08042946841575127, 0.07672349753043506, 0.07799230276238944, 0.08411811106202094, 0.07743589130328388, 0.09311639853254072, 0.08286406747616826, 0.11732719362367483, 0.13048634541877724, 0.1379116801231698, 0.0994511478670107, 0.12353977950354111, 0.11983367883991047, 0.159370014839202, 0.1299221831969748, 0.1283624370178219, 0.24865948499704615, 0.18521682233705383, 0.22446951667691295, 0.22595446434430233, 0.25064604269429736, 0.20868182964155169, 0.22040328032636303, 0.1977451640736645, 0.20964503840525817, 0.16215814761508862, 0.15227228340098298, 0.151997331304346, 0.18372338444481706, 0.18628929343076195, 0.1692629813200025, 0.15976682774289153, 0.1518243872327707, 0.19701376595333397, 0.17169061155397702, 0.18452572961946767, 0.18201084753952224, 0.16678313151945168, 0.17180698968446817, 0.18061718975630847, 0.1826571818626701, 0.16526567873956377, 0.1977538860940976, 0.19586219199071309, 0.18553775768741454, 0.18352028929483466, 0.18261271645970212, 0.18014087446859262, 0.1738611139358205, 0.18765748191876763, 0.19307961595234935, 0.17989134643529814, 0.15147090662160412, 0.1726462923190245, 0.1543578076258918, 0.189268784734427, 0.17570778469959658, 0.14938864952621023, 0.10526115213990561, 0.20780879900008586, 0.19465246275951098, 0.2367752789395592, 0.17430904413042314, 0.2525925466903852, 0.2686611066453737, 0.15852915616351182, 0.20458092750094703, 0.14672682299472617, 0.22728729667564063, 0.18671202422582056, 0.15665910845919095, 0.16048482704102462, 0.1686495379252554, 0.16994604483679154, 0.16990111369489513, 0.17594045200689745, 0.20027977750878612, 0.16890716960232222, 0.17511786407691, 0.07032456783945384, 0.06665406799801699, 0.08257773537283664, 0.06834261349229742, 0.07632634915288239, 0.06680965407265527, 0.06583124388740869, 0.06688893142945895, 0.0674020232386141]}, "mutation_prompt": null}
{"id": "d176a500-805c-4517-95d9-5bd9c1e0c5f1", "solution": "import numpy as np\n\nclass EHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.min_cr = 0.5\n        self.max_cr = 0.9\n        self.min_f = 0.3\n        self.max_f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx, cr, f):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            cr = self.min_cr + (self.max_cr - self.min_cr) * t / self.budget\n            f = self.max_f - (self.max_f - self.min_f) * t / self.budget\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i, cr, f)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EHDESA", "description": "Enhanced Hybrid Differential Evolution with Simulated Annealing (E-HDESA) algorithm with adaptive control parameters for improved convergence.", "configspace": "", "generation": 15, "fitness": 0.2894294429526523, "feedback": "The algorithm EHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.8406108932344494, 0.846200862233941, 0.8436536687342668, 0.810616782490278, 0.8367920030419036, 0.830160488188178, 0.8504257519738145, 0.8381564296328227, 0.8536831165938186, 0.6987126816553766, 0.6149020439401791, 0.5004393114058365, 0.5634265662023605, 0.5939005430741195, 0.47792467943695716, 0.6171699673226627, 0.5491849914113278, 0.7028873393351958, 0.13689602368216436, 0.15095200043625168, 0.12942644123985936, 0.13956923751372596, 0.14968296611180065, 0.14676776533893932, 0.1281898876744817, 0.13619593288557952, 0.13876218756938108, 0.13370935883458335, 0.13780810520584363, 0.1331064326038751, 0.145129753274301, 0.11585993915616544, 0.1288635987238007, 0.13407364428928648, 0.14987979193231005, 0.1458222450002422, 0.9856312787105108, 0.9833282379140157, 0.9911556593702084, 0.9846351586681212, 0.9881145960645314, 0.9868770857929853, 0.9856531604644932, 0.9898066882485708, 0.9833739854620369, 0.46830767950794483, 0.4483113204298448, 0.5248670943260219, 0.45462146408517623, 0.4842011062613275, 0.4961509554921486, 0.43064488654070754, 0.46837509076857065, 0.40397560590360826, 0.5870911834773973, 0.4645578645139874, 0.3190640195188098, 0.5145483315457238, 0.6775899804790225, 0.6403636816327023, 0.3069054717458626, 0.31551928564770004, 0.48838354528401173, 0.20895818668175237, 0.1300961700766784, 0.2076212776659786, 0.12906145304688832, 0.1360612348561977, 0.18282542160635717, 0.21609211295707242, 0.28720498593456756, 0.19030322620793982, 0.18760678729513192, 0.164161960806115, 0.18266050199085648, 0.18399491633246812, 0.14512417687419277, 0.17920602915023698, 0.16789034326074093, 0.19249576735987373, 0.19126020373318964, 0.05454933283820518, 0.07771600418645375, 0.06793248431103871, 0.06050308023514939, 0.04006528560778477, 0.06276333765805575, 0.0632744225133336, 0.05109246398419931, 0.08290883505202584, 0.11379966816563569, 0.17250977293038683, 0.16354110301877223, 0.18052244717133947, 0.14650809430696698, 0.09983137554845611, 0.1589654036150978, 0.21191258641562194, 0.18653970704842415, 0.006979031566881511, 0.018058462343483184, 0.022276903889891453, 0.03558592592658838, 0.01485279251979732, 0.022469687683433603, 0.0015617927715347868, 0.011296509379696396, 0.006728762954438583, 0.24312857525191378, 0.22176832381231892, 0.21665386557597732, 0.22402123214490866, 0.22176408652287205, 0.25401342447269704, 0.21319402313140368, 0.22620719845185444, 0.221316787656875, 0.601517064955713, 0.5722576917809741, 0.6095012733847809, 0.5913473112288297, 0.5555047378376093, 0.5685810588011675, 0.6156132135767662, 0.6397660230065099, 0.5711828355705316, 0.09587252048018347, 0.09238377722087987, 0.08115845804610267, 0.08389221536891545, 0.07888922723471536, 0.0842649832090403, 0.1128193256426262, 0.08739529341969832, 0.08952119565764771, 0.16408042591397587, 0.1402078558016967, 0.1333209605598049, 0.13773146258681646, 0.15384183063233503, 0.14604062595427314, 0.17064891891167244, 0.15509419475421948, 0.14361924527090164, 0.25835569361466304, 0.25272558935235645, 0.23007896990564225, 0.2674543127983119, 0.25588734267379054, 0.23839504516726606, 0.24854888502504868, 0.24860697157142086, 0.217188083004904, 0.17236309925198967, 0.18867126028498338, 0.19595969437578165, 0.18906837620037442, 0.182473721461345, 0.18918629918040708, 0.1921000694687658, 0.18675221526798935, 0.1898999882750788, 0.17216897224681382, 0.183083462569114, 0.18264786553693868, 0.1990160689768815, 0.20790648173901682, 0.21175834005607796, 0.19474930757741626, 0.1929503881189769, 0.18420822563685457, 0.19800341521513232, 0.21690550435222833, 0.20404881578488931, 0.22463991003840178, 0.21023478412110364, 0.19590505164248007, 0.2456831866728113, 0.21089291275768207, 0.2273902618816852, 0.18508379200662162, 0.16712383243745133, 0.22143271308638446, 0.518410373403448, 0.18201554187194713, 0.39504077343442345, 0.34784134472060824, 0.30431798078909644, 0.21648641332714325, 0.4243488118491229, 0.24276491288343904, 0.41296012424223183, 0.2095013721792438, 0.22084635779163908, 0.23123314942369277, 0.28059990877353735, 0.23343311962514512, 0.14756938955827315, 0.19510508200243326, 0.17991569988901823, 0.17555994950471543, 0.2009625510901838, 0.16987939873164304, 0.18797241648426266, 0.16907811612605672, 0.17722367223553048, 0.1755377212511785, 0.10403146650281703, 0.08597141892293292, 0.0760132326784243, 0.0755263413652496, 0.07084275825990793, 0.0838830427202647, 0.07132271355901776, 0.08260325884789288, 0.071323231849034]}, "mutation_prompt": null}
{"id": "837c1d88-aee6-4f1f-9c04-66f1db4fba69", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "2ffdb3d6-81d0-4aff-8ba5-7a76a498b6fc", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "241898d8-e22b-4b83-8c61-a0e6713070e2", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx, successful_de):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + successful_de * self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t, successful_de):\n            return candidate + (1 - successful_de) * self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n        successful_de = 0.5  # Initial probability of choosing successful DE mutation\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i, successful_de)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                    successful_de = successful_de + 1 / (t + 1)  # Update successful DE probability\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t, successful_de)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Enhancing the HDESA algorithm by dynamically adapting the mutation strategies based on the success rate of DE mutations.", "configspace": "", "generation": 18, "fitness": 0.16958867963210084, "feedback": "The algorithm EnhancedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.22.", "error": "", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.7292242331617891, 0.728862206214874, 0.6367874078754163, 0.5444369979541039, 0.3963453765863766, 0.5918090747383926, 0.5868008999110815, 0.6828436179297722, 0.6759832564651981, 0.05929277028215785, 0.03017680277078727, 9.999999999998899e-05, 0.05570233996028873, 9.999999999998899e-05, 0.1028049734912051, 9.999999999998899e-05, 0.18008567659551955, 0.16302274297987662, 0.10031400797291046, 0.07695747092695127, 0.0637943829394162, 0.0531869613774375, 0.07910204664133036, 0.069111343822434, 0.06013368566360566, 0.08994101551369038, 0.05071979861055387, 0.07013756493207368, 0.06358743029863179, 0.07801830733037163, 0.08504329274426636, 0.046809860122472347, 0.06658101339377076, 0.06727934189241092, 0.06882416235758337, 0.05486320994580196, 0.995856751139838, 0.9814153880552917, 0.9926602822021132, 0.9932904778689929, 0.992007934816184, 0.9858995220461293, 0.986455146041615, 0.9915694871237828, 0.9879039417445706, 0.16539591927615005, 0.004410279124903549, 0.154862026730338, 0.140107020078449, 0.03558847873478865, 0.27221970185601974, 0.07436957806599243, 0.022536935152809745, 9.999999999998899e-05, 0.315413246273371, 0.6337121535102487, 0.16939632819258155, 0.1952431344895761, 0.3028763281652117, 0.11689171801632514, 0.14879822391324893, 0.2909728979383802, 0.11897947141154086, 0.0928713812253169, 0.06857997741299027, 0.048160033243597744, 0.07591359526318975, 0.029960251073906097, 0.042673937332056266, 0.07592717672517701, 0.037376283650477626, 0.07600819984666507, 0.13596130228195014, 9.999999999998899e-05, 0.0730107363349849, 0.1366787040717763, 0.02612516260992903, 0.07196896939313935, 0.13801988665858722, 9.999999999998899e-05, 0.04028758720255121, 9.999999999998899e-05, 0.02620619896541032, 9.999999999998899e-05, 9.999999999998899e-05, 0.010300224012342318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004632845334549662, 9.999999999998899e-05, 0.024988160165644313, 0.03715548346449282, 0.05186121596819393, 9.999999999998899e-05, 9.999999999998899e-05, 0.07473760557568843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1271915857615924, 0.07248423763469658, 0.06689617505380518, 0.028980111416649024, 0.05447452685218501, 0.048858528618819896, 0.0692594884047345, 9.999999999998899e-05, 0.005398800935387915, 0.3986620254189698, 0.35374842531925166, 0.2705415101893677, 0.4475971017548628, 0.39133414856593485, 0.10144358406825482, 0.2922193705247135, 0.5311555770332733, 0.4084050164027382, 0.06275268705956094, 0.07619402551883869, 0.03466624394500872, 0.06143140390868651, 0.06878442529880735, 0.06779035768525188, 0.06344014136933607, 0.06542313355384799, 0.06800203941604199, 0.0967859673404764, 0.12467682084756138, 0.09424966783451927, 0.09855305120349966, 0.11582735874555894, 0.12088999171406545, 0.08502178656444526, 0.09502767997858974, 0.0811489216728869, 0.2369599278063229, 0.22794541680650582, 0.19559923663090717, 0.2246660345505458, 0.20916519652100007, 0.19755028912352113, 0.22287770832375153, 0.22396862975240228, 0.19725086142776205, 0.1421124868649185, 0.0992207420733292, 0.11318600873147022, 0.14467425561131442, 0.11673705871178297, 0.13136157689806383, 0.14344287081108975, 0.1193973244732961, 0.09606246264868645, 0.15016824980912968, 0.12724179327726903, 0.1643599760931993, 0.158265719795039, 0.14291722366711945, 0.17324712872399528, 0.16625838081234467, 0.12801739124586908, 0.1645998198505213, 0.16122324668537746, 0.14868041995032766, 0.18131652346784666, 0.16950797888008362, 0.1474629919056144, 0.15817289308454652, 0.1612507712739243, 0.16036043726439797, 0.06518112713819368, 0.2584967444397642, 0.12410231190470111, 0.1426962511506059, 0.16018845764672385, 0.1429364482994342, 0.1435983160733837, 0.09430899371488433, 0.17812171917355812, 0.11837924212238393, 0.2341210030333456, 0.19483697260522082, 0.1098646311022985, 0.1779945551511739, 0.07825380667884785, 0.17208162440665908, 0.18715819209268392, 0.2440236847510996, 0.13667100983270797, 0.16565987328413834, 0.15342253245839677, 0.15156532642932286, 0.1621357931918952, 0.14315353957553945, 0.16929862752587355, 0.14410857492693818, 0.1357075202854343, 0.15700436129421447, 0.06545471545430936, 0.0627285742561613, 0.0628332295138333, 0.05871802353809563, 0.05627243880940436, 0.05258631999645569, 0.0698092228756585, 0.06234549320500027, 0.061270028246316555]}, "mutation_prompt": null}
{"id": "8ae106e4-d048-45b8-9564-ae4dad8d5418", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "5a2d45e0-810f-4217-9f16-05d972ee25c6", "solution": "import numpy as np\n\nclass IHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cmin = 0.1\n        self.cmax = 0.9\n        self.fmin = 0.2\n        self.fmax = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx, f):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > np.random.uniform(self.cmin, self.cmax):\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            f = np.random.uniform(self.fmin, self.fmax)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i, f)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "IHDESA", "description": "Improved Hybrid Differential Evolution with Simulated Annealing (IHDESA) algorithm enhances the exploration and exploitation balance by adjusting mutation rates dynamically during optimization.", "configspace": "", "generation": 20, "fitness": 0.2733144092764378, "feedback": "The algorithm IHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.8026481092475627, 0.763167464329817, 0.7984943519169352, 0.7974628627672157, 0.8145278174183348, 0.7687589162155644, 0.7979370096255947, 0.7889978432018532, 0.801369529524778, 0.43222423568761115, 0.4669297598154303, 0.43452363799835225, 0.48912822546743695, 0.4690440577508571, 0.4264303046395037, 0.4938206922152202, 0.44636559669368525, 0.464413969412232, 0.15224864862833087, 0.15116222626120945, 0.16106836719834994, 0.22146605623569138, 0.13947513299448988, 0.1580496204605084, 0.19626767108639065, 0.16786021650496552, 0.16293301864821075, 0.17746266010313316, 0.1405423578709286, 0.15675222556680068, 0.14844677612207036, 0.13673222096187287, 0.14401050296406315, 0.16188361220154313, 0.1549361011737267, 0.13636953421315445, 0.9810624547153802, 0.9764107285084178, 0.9760570623667965, 0.9744219843844752, 0.9668934824320151, 0.9747927957857202, 0.9642977767382616, 0.9805880573279342, 0.9813640071126808, 0.5250120454421365, 0.49540718362524727, 0.4928907753237629, 0.4212816797053308, 0.5135246752350666, 0.4562903983674197, 0.44523205949987055, 0.38586491543462176, 0.46950668255927175, 0.34193650471352943, 0.31876417861506967, 0.3063162525044828, 0.31485851649884344, 0.46488776670417453, 0.40543013309496845, 0.43469575851342923, 0.5294706299950332, 0.36096421731617834, 0.22631758226073273, 0.16542585946224353, 0.2033347634780558, 0.16934337942553723, 0.16800107611428317, 0.21173475857329271, 0.20703435929677128, 0.24655683423293973, 0.1687166878192864, 0.19619447876358154, 0.23917735026877185, 0.23229974341728377, 0.22888209586905717, 0.2129948173013022, 0.1755447946036327, 0.2216354139024892, 0.15761444391672907, 0.16204372710504467, 0.017072862450807413, 0.0006707478644198961, 0.0068777908852866165, 0.025347479545399954, 0.004572455435823408, 0.01012429737595888, 0.0038501200630902677, 0.018062748930279482, 0.013312440972711781, 0.10813628699911548, 0.1010823614211207, 0.15150939690522824, 0.11524896505376858, 0.0697952176389266, 0.07963447228076748, 0.09002541864564173, 0.14942175668468283, 0.19165156298815267, 0.00033743205472980264, 0.006667343639997991, 0.014729876589746671, 9.999999999998899e-05, 0.0013159912293231324, 0.0389027096690705, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1648995871576091, 0.14836435729274033, 0.18352539383784938, 0.18484574275985055, 0.19944584204323224, 0.21685674367816332, 0.16357070068386115, 0.1507729860617083, 0.17785115401796703, 0.5702559474089429, 0.5294998177760926, 0.5453012391983176, 0.5375995142496814, 0.5060191857225502, 0.5060432445339098, 0.5518981078454783, 0.5292743900933952, 0.5497176504892256, 0.09909847926717119, 0.10377561266343349, 0.1068794964423887, 0.12318564359454098, 0.10018177904598502, 0.09540283458819743, 0.0893196537905766, 0.0979175857390917, 0.10697407676649595, 0.14822442129079405, 0.18380466353106062, 0.15021503956357452, 0.14862857428453102, 0.17155774505705923, 0.15785235612636495, 0.1568444228832352, 0.1353683368686197, 0.14773103690100764, 0.2620428069711348, 0.24210259905360976, 0.22622587871247946, 0.2465417829105213, 0.23612565818449172, 0.2591844032346726, 0.26239723732246234, 0.24159069495765106, 0.2387114696319702, 0.1963766766523587, 0.19161357308261417, 0.19077262510451232, 0.1925759409103993, 0.1945099984259584, 0.19244939394752314, 0.2147992587988249, 0.19786773538883173, 0.1769789363584352, 0.1980308384068612, 0.19957066579251015, 0.20882964940309312, 0.19668235644851473, 0.1814981213913085, 0.200540609007417, 0.20653068553158327, 0.20436149316557817, 0.18305839304013616, 0.22654143495293433, 0.23542197088466543, 0.2682878761947419, 0.23184878965144562, 0.23336944118743141, 0.23096092782421818, 0.21397721031502315, 0.22775612961819014, 0.22147409427606846, 0.18391655430964327, 0.39256961235867016, 0.2145980191162331, 0.3057014599226522, 0.18807800161326482, 0.36917749448795, 0.46729374437332105, 0.17415289732311245, 0.17867600427376984, 0.2001325373929933, 0.33739925223769673, 0.14248788332075324, 0.3464101726904275, 0.231121055353263, 0.2353362453828719, 0.25371655956727, 0.18686700713856919, 0.23548335513413865, 0.17544454162078693, 0.18102391145022223, 0.18230620191241065, 0.17462075814539346, 0.17624859788794234, 0.18778936954867764, 0.19219649949699258, 0.19075346155874429, 0.19478289899929702, 0.09012915300347246, 0.08368713452668941, 0.09121658366192753, 0.09598192925104854, 0.07694503719659584, 0.07720697662296339, 0.07873592604939772, 0.08281990696176567, 0.09685898304612861]}, "mutation_prompt": null}
{"id": "5468ba38-5cb3-410e-a1f7-8a800793525a", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "1457484e-857a-4c83-b460-5ab6ddcd8390", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "73137e42-3a16-43da-95b9-c5e9b2ff0b0e", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.max_pop_size = 20\n        self.min_pop_size = 5\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n            if np.random.rand() < 0.1 and self.pop_size < self.max_pop_size:\n                self.pop_size += 1\n            elif np.random.rand() < 0.1 and self.pop_size > self.min_pop_size:\n                self.pop_size -= 1\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Enhancing the HDESA algorithm by incorporating a dynamic population size adjustment to adapt to the problem landscape.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {}, "mutation_prompt": null}
{"id": "f68ec646-e9bd-4cbd-96a9-020d88ea97e2", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "79ca7339-15ab-4013-89fb-484f832cb858", "solution": "import numpy as np\n\nclass EHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.f_min = 0.2\n        self.f_max = 0.9\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx, f):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t, sigma):\n            return candidate + sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            f = self.f_min + (self.f_max - self.f_min) * t / self.budget\n            cr = self.cr_min + (self.cr_max - self.cr_min) * t / self.budget\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i, f)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    sigma = np.clip(self.sigma * np.exp(-t * self.alpha), 0.001, 0.5)\n                    new_population[i] = sa_mutation(population[i], best_solution, t, sigma)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EHDESA", "description": "Enhanced Hybrid Differential Evolution with Simulated Annealing (EHDESA) algorithm that incorporates a dynamic adaptation mechanism for mutation parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 25, "fitness": 0.2675229928082349, "feedback": "The algorithm EHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.686914629731248, 0.6540793947904635, 0.6322425224349766, 0.6579160054862604, 0.6585533386604683, 0.6690368452497271, 0.6682812100719017, 0.6732886529601088, 0.6519594552201993, 0.23231263037822514, 0.21193680520350044, 0.2630655525415688, 0.3043596007591194, 0.2823989133407123, 0.25475954037638526, 0.2757412598721829, 0.2192584237919617, 0.3639127731204349, 0.08385852412744188, 0.1266326126118511, 0.09008826150993243, 0.11034148603191496, 0.09711999028793017, 0.10683042853826441, 0.10343725543348514, 0.08854264928763789, 0.0788621506221665, 0.08303026437993344, 0.07809669833867228, 0.08274578364038121, 0.09518735970564973, 0.07890576535433269, 0.0770378741045844, 0.10015837210084322, 0.08177225948622724, 0.08746632466287696, 0.9666889721504621, 0.9455951573413621, 0.9628442033732802, 0.9389153302073332, 0.975824315608511, 0.9393564138097356, 0.9573420420068298, 0.964950733116543, 0.944699283578655, 0.3673154642274721, 0.32938369189859995, 0.3093071084225498, 0.37616546486032576, 0.330814968566708, 0.39643444955389395, 0.37258786336301997, 0.36023544570856325, 0.37109895286636263, 0.30843716851800895, 0.31818734355603107, 0.326625683143727, 0.3312855747905912, 0.4868124654036283, 0.5430653726594424, 0.31902089711146475, 0.616374481351557, 0.32501241711580175, 0.1627779895056949, 0.1956363292734532, 0.22947928193396927, 0.19616357075268642, 0.16506059014006857, 0.15688280000791588, 0.17806947401216455, 0.15016039289494587, 0.18796376943769788, 0.16140352236734257, 0.18183303277781404, 0.12908307736197366, 0.15850026269929385, 0.1594649692279978, 0.17005416720291666, 0.18186092614582905, 0.1393728084919823, 0.14843547654499767, 0.2711147441843139, 0.25956352653189974, 0.2839867652257341, 0.205080322122992, 0.26446866208677944, 0.3227839034221993, 0.2756453999794344, 0.25835437753588597, 0.265443900923486, 0.4896877537859309, 0.4737360705186132, 0.44431587614210644, 0.42207327825449215, 0.36806996538985837, 0.4464620073264689, 0.4756162193797391, 0.4761612610649739, 0.4495261155348593, 9.999999999998899e-05, 0.001953920719138136, 9.999999999998899e-05, 0.020263006263598116, 9.999999999998899e-05, 0.03494302055630705, 0.0028949013345794805, 9.999999999998899e-05, 9.999999999998899e-05, 0.244800603297595, 0.2841914416128246, 0.2351723884189999, 0.24290202388235116, 0.2549090186452341, 0.30010392615246273, 0.2364107442268154, 0.31371746039086834, 0.2713073689181207, 0.6192365203790047, 0.5125372345726981, 0.5774496517483094, 0.6123393138525584, 0.5186111902199778, 0.6025254542612267, 0.5980865373398291, 0.6014216214374637, 0.56940621013685, 0.09096887603504178, 0.08971278275913264, 0.08124746442688957, 0.08424356038084735, 0.08433240176772017, 0.0975387022435793, 0.08226159042026737, 0.07815325572486109, 0.07610123934149449, 0.1440064029352598, 0.11367624744614457, 0.14573660074804606, 0.18433460390151002, 0.14720819628368986, 0.1476005107759476, 0.12380322741578254, 0.14196997665367128, 0.18256384822051397, 0.19740548777838296, 0.19759747026293895, 0.2011953716423528, 0.2047541597449304, 0.22554268140449163, 0.20987674442825155, 0.2046178567399104, 0.19851350659373923, 0.20712819876943478, 0.16807450336579366, 0.1790729164345285, 0.1590575167723125, 0.16387910485799095, 0.18018442129432022, 0.1513094803635695, 0.16591210279631619, 0.15715322762152284, 0.15396325757914642, 0.1979463429755003, 0.18307350278733803, 0.19241173301396775, 0.1924649134959977, 0.18919075580137057, 0.17791158268376972, 0.1956065547940773, 0.20670822207387063, 0.21213143313872074, 0.18541822084441406, 0.1832993767740353, 0.19954629167799198, 0.18571368505489505, 0.19521617082228027, 0.21499043836662068, 0.1852269297929573, 0.18097538011229164, 0.19278762389792758, 0.27562320276437835, 0.15802659624922422, 0.24292156415879207, 0.3230271093701369, 0.1698179747122729, 0.3555195958351799, 0.15452073782834108, 0.1539385092868244, 0.1669783708724244, 0.3080920945142621, 0.2731917033227923, 0.2551468626031147, 0.19426967214596524, 0.2738805869551144, 0.296666869789329, 0.1574804962181614, 0.1308335645825477, 0.181578546110005, 0.18700445123862774, 0.17366984462477775, 0.18094831864739924, 0.18381283227349654, 0.17981250053297826, 0.17139382329474517, 0.17442593994616495, 0.17375082148689203, 0.1787278249986779, 0.08201845700984411, 0.07071439219507014, 0.07452042696654548, 0.07621984972621698, 0.07930246078329584, 0.0806492225276857, 0.06234430333019736, 0.06760635561560013, 0.07072488294395085]}, "mutation_prompt": null}
{"id": "4bba1e50-3e9e-4c13-996d-0f0aef515f6d", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "081b217e-e76e-44c0-a87e-da15ba6f1cc7", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "45d5deae-b918-4144-9953-def43b4285b2", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "32783ce3-fc10-407c-ad91-29dc3b4e5d3d", "solution": "import numpy as np\n\nclass ImprovedHDESA(HDESA):\n    def __call__(self, func):\n        def de_mutate(population, target_idx, best_solution):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1]) + self.f * (best_solution - population[target_idx])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i, best_solution)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Improving the exploration by adding a mutation strategy that incorporates a global best solution.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'sa_mutation' is not defined\").", "error": "NameError(\"name 'sa_mutation' is not defined\")", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {}, "mutation_prompt": null}
{"id": "4501acb8-1feb-45b9-bb50-3e1eae105825", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "364b5e54-5ac5-4b94-8ebd-bd608d5b45bd", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "09e61667-5d16-4ffb-a813-eec6f1ebc92f", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "57a23efd-6c15-442a-9aa1-a4ed8b5088b9", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "3fa70b55-b800-4de6-a090-ad879b78d94f", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "eaa14bef-8986-4487-b6f4-fe9f6283f966", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "2be8c0d9-3b9c-45ce-aa1b-91e3b5ee567c", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Hybrid Differential Evolution with Simulated Annealing (HDESA) algorithm that combines the exploration capability of Differential Evolution with the exploitation ability of Simulated Annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.822121410161827, 0.8050236107462669, 0.777312722240443, 0.7976388933168366, 0.8136144018851785, 0.8132962691922695, 0.8051591714660399, 0.7804163565826547, 0.7957206413153697, 0.5090857589502972, 0.6105170969888611, 0.6609505590478799, 0.5877789060303938, 0.6070259656612117, 0.6281351511701128, 0.5453887774617789, 0.6077691286240248, 0.493034923796691, 0.08931588363110754, 0.10325936663554436, 0.0931292359433068, 0.09916924159568663, 0.10280179542463286, 0.11313838562942269, 0.08542646665297493, 0.08901141481874053, 0.09891346386839306, 0.09558568165317305, 0.0822960474691885, 0.10222355675186989, 0.09823908178782226, 0.07943520320582087, 0.07645846823431202, 0.09336063849031107, 0.10455441465624338, 0.09383040225040062, 0.9838975084258293, 0.9880953495082893, 0.9872704967769619, 0.9927921822303678, 0.9876320091957397, 0.9854233652031709, 0.987480551318725, 0.9820088069921147, 0.9887306369726095, 0.3972257272241182, 0.42687516179431373, 0.3970019621363885, 0.39288479060088743, 0.34997877262434085, 0.42640052347915447, 0.35973811576746173, 0.3801621696562839, 0.35928955151744335, 0.4943530606589499, 0.6488941976010401, 0.3216022283576062, 0.48774631366477483, 0.5427585192750712, 0.6797944775809133, 0.4513716917522631, 0.444914736172746, 0.5809248284874825, 0.14125112815045193, 0.06284278575093827, 0.09514821157502706, 0.07454695820867496, 0.09717108527760321, 0.12527233300055507, 0.1642002646202313, 0.1012283269969394, 0.13667545585920893, 0.15312606014849828, 0.13262959728333845, 0.12970239571092168, 0.13319576490923368, 0.056844278005564464, 0.1545815353022736, 0.09163174596942303, 0.05094646046512985, 0.15678392318719436, 0.3013900017626838, 0.2854825284030027, 0.26218677476278096, 0.22447503139895875, 0.26754578109835225, 0.28285123001292833, 0.337539038482199, 0.25782000155611917, 0.2778485205819877, 0.44724713271268035, 0.5016209299719081, 0.456967690434109, 0.46212720858472844, 0.46145478309993193, 0.40838828227581714, 0.39685061235763774, 0.4521875065214924, 0.48690663120240874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1645712405330505, 0.044040198554588406, 0.1420574108014815, 9.999999999998899e-05, 9.999999999998899e-05, 0.019920421924403464, 0.2973212878082836, 0.2990506363936154, 0.3102539012892276, 0.3327049298471966, 0.33328243256302337, 0.3527159604416794, 0.30414313975890483, 0.2950302297486025, 0.2999060710014423, 0.6667798242696643, 0.6877489086811952, 0.6923168109803052, 0.681441942078477, 0.6484824922483075, 0.6234490293796561, 0.6727399743696263, 0.6676826911947609, 0.6687980722545577, 0.0867666968032258, 0.08324525063695853, 0.07863149988063867, 0.07855204888141343, 0.08101013986686811, 0.08408098513899698, 0.08454343006185994, 0.06564637546345109, 0.08809352506690649, 0.15798979396449253, 0.12613838695861745, 0.10674763773221607, 0.12912507840849707, 0.1340642089200793, 0.11092653927090701, 0.11732095842011636, 0.1264611126491827, 0.1157892758142518, 0.2122951545594174, 0.1972175076985856, 0.22306490950119517, 0.22077262116357044, 0.20651530165513587, 0.22499196146303013, 0.22436494603727353, 0.2046332629019304, 0.21172050065649173, 0.16351711288167914, 0.1708871456076294, 0.15128215713101034, 0.1536985536228842, 0.1477544545318249, 0.17069695369010152, 0.17565406533304884, 0.17615425529897422, 0.15790490425334736, 0.1775830670372308, 0.15905116087558802, 0.17374295442838505, 0.19194744164167765, 0.17730748077608438, 0.1794223257113987, 0.19414105121385672, 0.17037503855316316, 0.18127773730382746, 0.1723353307035752, 0.17887705811425236, 0.18704049423661018, 0.1871057728682055, 0.1717050513751638, 0.1877049042212151, 0.19458297967038996, 0.1679646212786201, 0.18621827689506298, 0.1465979636378819, 0.15102862556146557, 0.11716394002595731, 0.1526438634969165, 0.2391827152640562, 0.3176872898160359, 0.16098864896198006, 0.14093274115783916, 0.16482424992026823, 0.38919215321384604, 0.271675879023933, 0.643330873438078, 0.23686500720798254, 0.42008147340165847, 0.1526567935526062, 0.26574575604118966, 0.14121241824498088, 0.17155550183008583, 0.16405049263551597, 0.16913666136251848, 0.16569679566653372, 0.17355338701229173, 0.15883870118708598, 0.16240022054758607, 0.16934780974948693, 0.15608675296816987, 0.17554762547502412, 0.06604445940998938, 0.06836886034619127, 0.07490383275275048, 0.06644522386537521, 0.06286499562469017, 0.06693356418883234, 0.06325570272079062, 0.05974128663683009, 0.06281719391591378]}, "mutation_prompt": null}
{"id": "f7805814-c659-4587-93ab-c1136e1a11fd", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Enhancing the exploration-exploitation balance through adaptive control of mutation parameters based on best solution history.", "configspace": "", "generation": 37, "fitness": 0.30420896485973326, "feedback": "The algorithm HDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "17d667b5-9f32-42f6-9f6a-dd9200cfdab1", "metadata": {"aucs": [0.7718550973431102, 0.8013467119844339, 0.8008265086456201, 0.7728832765952842, 0.7312037523244725, 0.7691774371989166, 0.7847022619966566, 0.7409915197504824, 0.7531808299656544, 0.4251357031874611, 0.2228060513347523, 0.4050803322657851, 0.2642665768501675, 0.4183314330295651, 0.3546241006447125, 0.3230601860540506, 0.4580176804415165, 0.275820618301411, 0.10908279117405195, 0.10413350676713584, 0.08394736428643468, 0.096575005181608, 0.09253530135303967, 0.10463041683833652, 0.10605094143644, 0.11223752065450832, 0.10075568700121473, 0.09493386356338451, 0.08481698417636452, 0.10411300387657252, 0.09945590990991515, 0.09637833387644001, 0.101004918560332, 0.08786735671751944, 0.07549904837921384, 0.08027252450290656, 0.9897579628139409, 0.9876805151069707, 0.9880006840248572, 0.967544833744314, 0.9942845187614143, 0.9831462938672236, 0.959911361992247, 0.9916410483782021, 0.9793903487075484, 0.38785116537494946, 0.38631248829882636, 0.3440635864686793, 0.376635182933446, 0.34848378437199, 0.3768093706209996, 0.30373961231688107, 0.4414512134259334, 0.3980130880102115, 0.4360015435059271, 0.6691573385572334, 0.6021694037790049, 0.698319837592744, 0.6687412346829726, 0.694870626706786, 0.434446543977587, 0.4987194761200985, 0.6591246246953073, 0.11778295827861895, 0.10968329508624697, 0.18048360751635606, 0.17807833711032528, 0.1788072585848851, 0.15472669566853636, 0.20857206883611912, 0.200119058621559, 0.1993073619979514, 0.21851586235543474, 0.11997504063338116, 0.22481518817929114, 0.20501221317026086, 0.18343778291180368, 0.17927272264718197, 0.18233012632876666, 0.1513007366510064, 0.15691919746059735, 0.25485015066290406, 0.27080376872089873, 0.2136805232731761, 0.2898226110983704, 0.26194775882831245, 0.21863311369404026, 0.3134825745623758, 0.24217704063844026, 0.3998946242175213, 0.45621282147068964, 0.48154530434263365, 0.510607864874757, 0.46123353807655243, 0.40947516416029106, 0.3927820239103248, 0.4685338286395999, 0.45402595800687295, 0.47779958576205805, 0.0035839480689638936, 0.041454196038615776, 0.0009921399036502132, 0.10754507164465499, 0.00671102528061196, 0.10283775871265277, 0.08454047195493442, 9.999999999998899e-05, 9.999999999998899e-05, 0.27513689705590016, 0.3247673528670796, 0.3273173155673338, 0.2562844860526421, 0.3686112374866597, 0.3570411022201585, 0.28953080255892594, 0.32092896066793797, 0.3120832560061374, 0.6312852701079028, 0.6109528797248354, 0.7108643369068017, 0.6308734186616736, 0.6130601420946065, 0.6768007272487271, 0.6778585043086519, 0.705868564246662, 0.6575265020379328, 0.09548131646773583, 0.09171509077092865, 0.09185355359219138, 0.10160522118742177, 0.09269148591049381, 0.0820051446896305, 0.08586399584496085, 0.09830160390157161, 0.08068189856070618, 0.13015248337328844, 0.14277986392062758, 0.15715469864771714, 0.13439614162739688, 0.14300167804040442, 0.12523667560214358, 0.13005106594507487, 0.1452674789198647, 0.14323503540326188, 0.2503480727655609, 0.2293229290311538, 0.24641020845446937, 0.23268101506411154, 0.25343644964172496, 0.25358988223968293, 0.22465116152507159, 0.21829162476027508, 0.23230745999303115, 0.17351572239888768, 0.18226453681529675, 0.19765751682301147, 0.1925906690175272, 0.18070987113107262, 0.21205568334034974, 0.19001977987323226, 0.20831430637788817, 0.182775204940257, 0.18423612509080645, 0.2104247618338433, 0.18343571398130876, 0.20046869556394464, 0.20375167491581314, 0.21216511376295777, 0.1877273347074, 0.18286531759932034, 0.1892434540502167, 0.2015952581551934, 0.1901108567246802, 0.19618659889723056, 0.2134873635475868, 0.18584415504653073, 0.2096248986361977, 0.19870343306148885, 0.1982551618980789, 0.20120226062141644, 0.25499150561839024, 0.22902984461408538, 0.2722448326367989, 0.3825351959951335, 0.17746453012470353, 0.46486359957004375, 0.3564999838625069, 0.26565620802038825, 0.5340133904084103, 0.316995923140042, 0.30991467908251946, 0.49954115963342194, 0.24589546989450906, 0.26917862392242453, 0.46539938023746985, 0.19009485469536347, 0.2902290667895199, 0.19418185535565624, 0.17212807204626313, 0.17606535062412476, 0.17405876155040534, 0.17142550009052115, 0.18047357885047366, 0.1808827308671821, 0.17813335707337197, 0.18549967429981684, 0.17419198776315026, 0.0643091313044899, 0.07664351042242656, 0.07608419633001573, 0.07654919124112824, 0.08229852994767717, 0.09324751014461852, 0.09110197326463254, 0.08882515207034025, 0.07157101410975975]}, "mutation_prompt": null}
{"id": "5e254bcb-617a-4b92-88b6-13caf2a15aeb", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.global_best = None\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    if self.global_best is None or candidate_fitness < func(self.global_best):\n                        self.global_best = candidate\n                    new_population[i] = sa_mutation(population[i], self.global_best, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Enhancing the exploration-exploitation balance through adaptive control of mutation and crossover parameters based on global and local solution histories.", "configspace": "", "generation": 38, "fitness": 0.22795574245587708, "feedback": "The algorithm EnhancedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "f7805814-c659-4587-93ab-c1136e1a11fd", "metadata": {"aucs": [0.5918652684279386, 0.6428222762173896, 0.644034292209806, 0.5956335739969673, 0.5637318140752369, 0.5895076415422331, 0.615230852546782, 0.5471983451452876, 0.5659888944225293, 0.21957288514929518, 0.08302009679085931, 0.19720011505319124, 0.13967620226152688, 0.2332623488039185, 0.20759076545426358, 0.13845625137526496, 0.21821440067554787, 0.15131835415687578, 0.09165372498766677, 0.07868024693019393, 0.07242697175780377, 0.0806604328710222, 0.0748330422329, 0.09425464189267074, 0.07097000180158808, 0.09463668809345327, 0.07815456664532816, 0.07451582164738813, 0.07232618351998898, 0.08764735731643103, 0.0904052751119292, 0.08566561830058295, 0.0884955689033945, 0.0711035024130009, 0.06858422762376326, 0.06255322096547189, 0.9848403915004574, 0.9811567650932221, 0.9808691577638453, 0.9470274295945295, 0.9916832814001006, 0.9740309368676789, 0.9350671768970721, 0.9868886330012621, 0.9660808419001906, 0.25584121177429187, 0.23416651096281416, 0.24236219077354004, 0.24140526515987348, 0.22212388071652578, 0.23870457388542576, 0.2059550727728222, 0.28206542747369456, 0.22548204168825237, 0.28869991713165033, 0.3603896418798058, 0.31261187077272246, 0.4225623283166676, 0.3651593442532106, 0.4203109495464641, 0.26345654350574377, 0.3209392440125852, 0.34018471869703004, 0.10349696390158136, 0.07929629965715179, 0.1433953985200367, 0.1459507236087706, 0.1404597240161315, 0.12975591698701539, 0.1638055199740147, 0.15801812610245236, 0.13630642386197955, 0.1487958860491786, 0.0966007934778994, 0.1803191709175047, 0.16120182719261533, 0.1483751413229738, 0.14912447562359699, 0.13202418973292718, 0.11135454699324232, 0.13160975396799657, 0.10941517771030618, 0.10072858826604625, 0.07525766283551605, 0.13025453681464938, 0.11904462279119454, 0.06428008590580425, 0.1546858979658613, 0.10146547320084298, 0.1535503479867253, 0.25562014169187264, 0.25357175899362394, 0.29414492926515756, 0.2461132181797333, 0.24761766225738902, 0.2797094109265137, 0.30104238120135984, 0.25870582466741165, 0.270415756227518, 9.999999999998899e-05, 0.0010842660601952936, 9.999999999998899e-05, 0.04915350576434918, 9.999999999998899e-05, 0.02802420012910789, 0.021271876938033674, 9.999999999998899e-05, 9.999999999998899e-05, 0.16296189383404158, 0.1919771024839585, 0.18916641034048265, 0.14684636123466221, 0.2038930642949376, 0.21653084395802003, 0.19405580050678595, 0.18406765359073007, 0.18011157114144571, 0.4524045140302021, 0.4507381441792223, 0.5120996905032653, 0.4849192114966119, 0.45878096862784945, 0.48612438500030253, 0.49355360497633405, 0.5164973996345197, 0.4788811727943303, 0.08365298673035082, 0.07845358253061951, 0.07440040562753203, 0.08254261688391873, 0.06843011609166894, 0.06946936075223709, 0.0631859879599257, 0.07056920585150728, 0.06791912958104929, 0.11417700695695909, 0.12009164713360132, 0.15008586987190753, 0.12929068486858453, 0.12552626545506063, 0.11632821996165221, 0.11435348444220506, 0.10992875662998502, 0.13557805254116229, 0.21681591296616476, 0.20199236917919983, 0.21503814203840999, 0.2022886392308001, 0.22648371888374208, 0.2205143257368548, 0.20262625415890534, 0.20354894053208628, 0.20461041964539795, 0.13932102122133105, 0.16343709426394015, 0.1565109634878752, 0.15823835470631908, 0.14660878829957347, 0.17165254757082116, 0.1607171133482791, 0.16896501652418483, 0.15481611334334833, 0.18020778698078832, 0.19072759315479093, 0.1739803307569482, 0.19135399673709874, 0.19521806383942542, 0.19830636989964767, 0.1731834398560229, 0.16861224536359865, 0.18319489577802495, 0.18752907789295847, 0.17936638642436042, 0.18759012765616123, 0.19912461770584855, 0.17368548155831554, 0.1940050892346017, 0.17967246950464455, 0.18616615844579565, 0.17979620898636017, 0.22984541262488078, 0.19764119162804994, 0.21521574872557303, 0.2939677249179473, 0.16967735033827336, 0.34029458669301926, 0.2674048161342998, 0.1582249009113904, 0.3551829122841029, 0.2666044734615798, 0.22987840046418695, 0.3657339074128323, 0.19060561282661614, 0.18678457927112235, 0.3031942356245442, 0.17327785664949114, 0.1949741211594943, 0.17903767860546016, 0.16514743842915902, 0.172627285420205, 0.16050641224010032, 0.1716573545623178, 0.1711694670984638, 0.17988867256934937, 0.170714523634662, 0.18432424962403116, 0.1634637098087729, 0.0602525004503206, 0.07005559164515907, 0.06829654562127585, 0.07116002137810884, 0.06286560880218806, 0.07704901881769843, 0.07541025338160179, 0.0728969295757117, 0.062405003919956625]}, "mutation_prompt": null}
{"id": "92c0f405-63e6-4dd1-8e15-8407f7eec8f8", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Enhancing the exploration-exploitation balance through adaptive control of mutation parameters based on best solution history.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7805814-c659-4587-93ab-c1136e1a11fd", "metadata": {"aucs": [0.7718550973431102, 0.8013467119844339, 0.8008265086456201, 0.7728832765952842, 0.7312037523244725, 0.7691774371989166, 0.7847022619966566, 0.7409915197504824, 0.7531808299656544, 0.4251357031874611, 0.2228060513347523, 0.4050803322657851, 0.2642665768501675, 0.4183314330295651, 0.3546241006447125, 0.3230601860540506, 0.4580176804415165, 0.275820618301411, 0.10908279117405195, 0.10413350676713584, 0.08394736428643468, 0.096575005181608, 0.09253530135303967, 0.10463041683833652, 0.10605094143644, 0.11223752065450832, 0.10075568700121473, 0.09493386356338451, 0.08481698417636452, 0.10411300387657252, 0.09945590990991515, 0.09637833387644001, 0.101004918560332, 0.08786735671751944, 0.07549904837921384, 0.08027252450290656, 0.9897579628139409, 0.9876805151069707, 0.9880006840248572, 0.967544833744314, 0.9942845187614143, 0.9831462938672236, 0.959911361992247, 0.9916410483782021, 0.9793903487075484, 0.38785116537494946, 0.38631248829882636, 0.3440635864686793, 0.376635182933446, 0.34848378437199, 0.3768093706209996, 0.30373961231688107, 0.4414512134259334, 0.3980130880102115, 0.4360015435059271, 0.6691573385572334, 0.6021694037790049, 0.698319837592744, 0.6687412346829726, 0.694870626706786, 0.434446543977587, 0.4987194761200985, 0.6591246246953073, 0.11778295827861895, 0.10968329508624697, 0.18048360751635606, 0.17807833711032528, 0.1788072585848851, 0.15472669566853636, 0.20857206883611912, 0.200119058621559, 0.1993073619979514, 0.21851586235543474, 0.11997504063338116, 0.22481518817929114, 0.20501221317026086, 0.18343778291180368, 0.17927272264718197, 0.18233012632876666, 0.1513007366510064, 0.15691919746059735, 0.25485015066290406, 0.27080376872089873, 0.2136805232731761, 0.2898226110983704, 0.26194775882831245, 0.21863311369404026, 0.3134825745623758, 0.24217704063844026, 0.3998946242175213, 0.45621282147068964, 0.48154530434263365, 0.510607864874757, 0.46123353807655243, 0.40947516416029106, 0.3927820239103248, 0.4685338286395999, 0.45402595800687295, 0.47779958576205805, 0.0035839480689638936, 0.041454196038615776, 0.0009921399036502132, 0.10754507164465499, 0.00671102528061196, 0.10283775871265277, 0.08454047195493442, 9.999999999998899e-05, 9.999999999998899e-05, 0.27513689705590016, 0.3247673528670796, 0.3273173155673338, 0.2562844860526421, 0.3686112374866597, 0.3570411022201585, 0.28953080255892594, 0.32092896066793797, 0.3120832560061374, 0.6312852701079028, 0.6109528797248354, 0.7108643369068017, 0.6308734186616736, 0.6130601420946065, 0.6768007272487271, 0.6778585043086519, 0.705868564246662, 0.6575265020379328, 0.09548131646773583, 0.09171509077092865, 0.09185355359219138, 0.10160522118742177, 0.09269148591049381, 0.0820051446896305, 0.08586399584496085, 0.09830160390157161, 0.08068189856070618, 0.13015248337328844, 0.14277986392062758, 0.15715469864771714, 0.13439614162739688, 0.14300167804040442, 0.12523667560214358, 0.13005106594507487, 0.1452674789198647, 0.14323503540326188, 0.2503480727655609, 0.2293229290311538, 0.24641020845446937, 0.23268101506411154, 0.25343644964172496, 0.25358988223968293, 0.22465116152507159, 0.21829162476027508, 0.23230745999303115, 0.17351572239888768, 0.18226453681529675, 0.19765751682301147, 0.1925906690175272, 0.18070987113107262, 0.21205568334034974, 0.19001977987323226, 0.20831430637788817, 0.182775204940257, 0.18423612509080645, 0.2104247618338433, 0.18343571398130876, 0.20046869556394464, 0.20375167491581314, 0.21216511376295777, 0.1877273347074, 0.18286531759932034, 0.1892434540502167, 0.2015952581551934, 0.1901108567246802, 0.19618659889723056, 0.2134873635475868, 0.18584415504653073, 0.2096248986361977, 0.19870343306148885, 0.1982551618980789, 0.20120226062141644, 0.25499150561839024, 0.22902984461408538, 0.2722448326367989, 0.3825351959951335, 0.17746453012470353, 0.46486359957004375, 0.3564999838625069, 0.26565620802038825, 0.5340133904084103, 0.316995923140042, 0.30991467908251946, 0.49954115963342194, 0.24589546989450906, 0.26917862392242453, 0.46539938023746985, 0.19009485469536347, 0.2902290667895199, 0.19418185535565624, 0.17212807204626313, 0.17606535062412476, 0.17405876155040534, 0.17142550009052115, 0.18047357885047366, 0.1808827308671821, 0.17813335707337197, 0.18549967429981684, 0.17419198776315026, 0.0643091313044899, 0.07664351042242656, 0.07608419633001573, 0.07654919124112824, 0.08229852994767717, 0.09324751014461852, 0.09110197326463254, 0.08882515207034025, 0.07157101410975975]}, "mutation_prompt": null}
{"id": "41996b41-5382-4e5c-b67a-81301de3ffdb", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Enhancing the exploration-exploitation balance through adaptive control of mutation parameters based on best solution history.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7805814-c659-4587-93ab-c1136e1a11fd", "metadata": {"aucs": [0.7718550973431102, 0.8013467119844339, 0.8008265086456201, 0.7728832765952842, 0.7312037523244725, 0.7691774371989166, 0.7847022619966566, 0.7409915197504824, 0.7531808299656544, 0.4251357031874611, 0.2228060513347523, 0.4050803322657851, 0.2642665768501675, 0.4183314330295651, 0.3546241006447125, 0.3230601860540506, 0.4580176804415165, 0.275820618301411, 0.10908279117405195, 0.10413350676713584, 0.08394736428643468, 0.096575005181608, 0.09253530135303967, 0.10463041683833652, 0.10605094143644, 0.11223752065450832, 0.10075568700121473, 0.09493386356338451, 0.08481698417636452, 0.10411300387657252, 0.09945590990991515, 0.09637833387644001, 0.101004918560332, 0.08786735671751944, 0.07549904837921384, 0.08027252450290656, 0.9897579628139409, 0.9876805151069707, 0.9880006840248572, 0.967544833744314, 0.9942845187614143, 0.9831462938672236, 0.959911361992247, 0.9916410483782021, 0.9793903487075484, 0.38785116537494946, 0.38631248829882636, 0.3440635864686793, 0.376635182933446, 0.34848378437199, 0.3768093706209996, 0.30373961231688107, 0.4414512134259334, 0.3980130880102115, 0.4360015435059271, 0.6691573385572334, 0.6021694037790049, 0.698319837592744, 0.6687412346829726, 0.694870626706786, 0.434446543977587, 0.4987194761200985, 0.6591246246953073, 0.11778295827861895, 0.10968329508624697, 0.18048360751635606, 0.17807833711032528, 0.1788072585848851, 0.15472669566853636, 0.20857206883611912, 0.200119058621559, 0.1993073619979514, 0.21851586235543474, 0.11997504063338116, 0.22481518817929114, 0.20501221317026086, 0.18343778291180368, 0.17927272264718197, 0.18233012632876666, 0.1513007366510064, 0.15691919746059735, 0.25485015066290406, 0.27080376872089873, 0.2136805232731761, 0.2898226110983704, 0.26194775882831245, 0.21863311369404026, 0.3134825745623758, 0.24217704063844026, 0.3998946242175213, 0.45621282147068964, 0.48154530434263365, 0.510607864874757, 0.46123353807655243, 0.40947516416029106, 0.3927820239103248, 0.4685338286395999, 0.45402595800687295, 0.47779958576205805, 0.0035839480689638936, 0.041454196038615776, 0.0009921399036502132, 0.10754507164465499, 0.00671102528061196, 0.10283775871265277, 0.08454047195493442, 9.999999999998899e-05, 9.999999999998899e-05, 0.27513689705590016, 0.3247673528670796, 0.3273173155673338, 0.2562844860526421, 0.3686112374866597, 0.3570411022201585, 0.28953080255892594, 0.32092896066793797, 0.3120832560061374, 0.6312852701079028, 0.6109528797248354, 0.7108643369068017, 0.6308734186616736, 0.6130601420946065, 0.6768007272487271, 0.6778585043086519, 0.705868564246662, 0.6575265020379328, 0.09548131646773583, 0.09171509077092865, 0.09185355359219138, 0.10160522118742177, 0.09269148591049381, 0.0820051446896305, 0.08586399584496085, 0.09830160390157161, 0.08068189856070618, 0.13015248337328844, 0.14277986392062758, 0.15715469864771714, 0.13439614162739688, 0.14300167804040442, 0.12523667560214358, 0.13005106594507487, 0.1452674789198647, 0.14323503540326188, 0.2503480727655609, 0.2293229290311538, 0.24641020845446937, 0.23268101506411154, 0.25343644964172496, 0.25358988223968293, 0.22465116152507159, 0.21829162476027508, 0.23230745999303115, 0.17351572239888768, 0.18226453681529675, 0.19765751682301147, 0.1925906690175272, 0.18070987113107262, 0.21205568334034974, 0.19001977987323226, 0.20831430637788817, 0.182775204940257, 0.18423612509080645, 0.2104247618338433, 0.18343571398130876, 0.20046869556394464, 0.20375167491581314, 0.21216511376295777, 0.1877273347074, 0.18286531759932034, 0.1892434540502167, 0.2015952581551934, 0.1901108567246802, 0.19618659889723056, 0.2134873635475868, 0.18584415504653073, 0.2096248986361977, 0.19870343306148885, 0.1982551618980789, 0.20120226062141644, 0.25499150561839024, 0.22902984461408538, 0.2722448326367989, 0.3825351959951335, 0.17746453012470353, 0.46486359957004375, 0.3564999838625069, 0.26565620802038825, 0.5340133904084103, 0.316995923140042, 0.30991467908251946, 0.49954115963342194, 0.24589546989450906, 0.26917862392242453, 0.46539938023746985, 0.19009485469536347, 0.2902290667895199, 0.19418185535565624, 0.17212807204626313, 0.17606535062412476, 0.17405876155040534, 0.17142550009052115, 0.18047357885047366, 0.1808827308671821, 0.17813335707337197, 0.18549967429981684, 0.17419198776315026, 0.0643091313044899, 0.07664351042242656, 0.07608419633001573, 0.07654919124112824, 0.08229852994767717, 0.09324751014461852, 0.09110197326463254, 0.08882515207034025, 0.07157101410975975]}, "mutation_prompt": null}
{"id": "8b44b3a5-54c8-4ca5-a3d0-cf8b5e831b82", "solution": "import numpy as np\n\nclass HDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            donor_vector = population[target_idx] + self.f * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            return candidate + self.sigma * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HDESA", "description": "Enhancing the exploration-exploitation balance through adaptive control of mutation parameters based on best solution history.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7805814-c659-4587-93ab-c1136e1a11fd", "metadata": {"aucs": [0.7718550973431102, 0.8013467119844339, 0.8008265086456201, 0.7728832765952842, 0.7312037523244725, 0.7691774371989166, 0.7847022619966566, 0.7409915197504824, 0.7531808299656544, 0.4251357031874611, 0.2228060513347523, 0.4050803322657851, 0.2642665768501675, 0.4183314330295651, 0.3546241006447125, 0.3230601860540506, 0.4580176804415165, 0.275820618301411, 0.10908279117405195, 0.10413350676713584, 0.08394736428643468, 0.096575005181608, 0.09253530135303967, 0.10463041683833652, 0.10605094143644, 0.11223752065450832, 0.10075568700121473, 0.09493386356338451, 0.08481698417636452, 0.10411300387657252, 0.09945590990991515, 0.09637833387644001, 0.101004918560332, 0.08786735671751944, 0.07549904837921384, 0.08027252450290656, 0.9897579628139409, 0.9876805151069707, 0.9880006840248572, 0.967544833744314, 0.9942845187614143, 0.9831462938672236, 0.959911361992247, 0.9916410483782021, 0.9793903487075484, 0.38785116537494946, 0.38631248829882636, 0.3440635864686793, 0.376635182933446, 0.34848378437199, 0.3768093706209996, 0.30373961231688107, 0.4414512134259334, 0.3980130880102115, 0.4360015435059271, 0.6691573385572334, 0.6021694037790049, 0.698319837592744, 0.6687412346829726, 0.694870626706786, 0.434446543977587, 0.4987194761200985, 0.6591246246953073, 0.11778295827861895, 0.10968329508624697, 0.18048360751635606, 0.17807833711032528, 0.1788072585848851, 0.15472669566853636, 0.20857206883611912, 0.200119058621559, 0.1993073619979514, 0.21851586235543474, 0.11997504063338116, 0.22481518817929114, 0.20501221317026086, 0.18343778291180368, 0.17927272264718197, 0.18233012632876666, 0.1513007366510064, 0.15691919746059735, 0.25485015066290406, 0.27080376872089873, 0.2136805232731761, 0.2898226110983704, 0.26194775882831245, 0.21863311369404026, 0.3134825745623758, 0.24217704063844026, 0.3998946242175213, 0.45621282147068964, 0.48154530434263365, 0.510607864874757, 0.46123353807655243, 0.40947516416029106, 0.3927820239103248, 0.4685338286395999, 0.45402595800687295, 0.47779958576205805, 0.0035839480689638936, 0.041454196038615776, 0.0009921399036502132, 0.10754507164465499, 0.00671102528061196, 0.10283775871265277, 0.08454047195493442, 9.999999999998899e-05, 9.999999999998899e-05, 0.27513689705590016, 0.3247673528670796, 0.3273173155673338, 0.2562844860526421, 0.3686112374866597, 0.3570411022201585, 0.28953080255892594, 0.32092896066793797, 0.3120832560061374, 0.6312852701079028, 0.6109528797248354, 0.7108643369068017, 0.6308734186616736, 0.6130601420946065, 0.6768007272487271, 0.6778585043086519, 0.705868564246662, 0.6575265020379328, 0.09548131646773583, 0.09171509077092865, 0.09185355359219138, 0.10160522118742177, 0.09269148591049381, 0.0820051446896305, 0.08586399584496085, 0.09830160390157161, 0.08068189856070618, 0.13015248337328844, 0.14277986392062758, 0.15715469864771714, 0.13439614162739688, 0.14300167804040442, 0.12523667560214358, 0.13005106594507487, 0.1452674789198647, 0.14323503540326188, 0.2503480727655609, 0.2293229290311538, 0.24641020845446937, 0.23268101506411154, 0.25343644964172496, 0.25358988223968293, 0.22465116152507159, 0.21829162476027508, 0.23230745999303115, 0.17351572239888768, 0.18226453681529675, 0.19765751682301147, 0.1925906690175272, 0.18070987113107262, 0.21205568334034974, 0.19001977987323226, 0.20831430637788817, 0.182775204940257, 0.18423612509080645, 0.2104247618338433, 0.18343571398130876, 0.20046869556394464, 0.20375167491581314, 0.21216511376295777, 0.1877273347074, 0.18286531759932034, 0.1892434540502167, 0.2015952581551934, 0.1901108567246802, 0.19618659889723056, 0.2134873635475868, 0.18584415504653073, 0.2096248986361977, 0.19870343306148885, 0.1982551618980789, 0.20120226062141644, 0.25499150561839024, 0.22902984461408538, 0.2722448326367989, 0.3825351959951335, 0.17746453012470353, 0.46486359957004375, 0.3564999838625069, 0.26565620802038825, 0.5340133904084103, 0.316995923140042, 0.30991467908251946, 0.49954115963342194, 0.24589546989450906, 0.26917862392242453, 0.46539938023746985, 0.19009485469536347, 0.2902290667895199, 0.19418185535565624, 0.17212807204626313, 0.17606535062412476, 0.17405876155040534, 0.17142550009052115, 0.18047357885047366, 0.1808827308671821, 0.17813335707337197, 0.18549967429981684, 0.17419198776315026, 0.0643091313044899, 0.07664351042242656, 0.07608419633001573, 0.07654919124112824, 0.08229852994767717, 0.09324751014461852, 0.09110197326463254, 0.08882515207034025, 0.07157101410975975]}, "mutation_prompt": null}
{"id": "e1916024-1b6c-472d-a474-5e6795eac265", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 42, "fitness": 0.3067158634603232, "feedback": "The algorithm ImprovedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "f7805814-c659-4587-93ab-c1136e1a11fd", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "dc9865ba-5f38-4e56-95e2-d35c75a614cd", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "c5c9b338-1113-4402-bbae-0931044c480c", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "edabc7b1-33bc-45e0-b6cb-813da564fe8c", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            scale_factor = np.random.uniform(0.5, 1.5, self.dim)  # Variable scale factor\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1]) * scale_factor\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            scale_factor = np.random.uniform(0.5, 1.5, self.dim)  # Variable scale factor\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim) * scale_factor\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a novel adaptive mutation strategy based on a variable scale factor.", "configspace": "", "generation": 45, "fitness": 0.2609278634222695, "feedback": "The algorithm EnhancedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.8041686006634348, 0.7562768572740273, 0.7686819268471816, 0.7956615688516535, 0.818003120494268, 0.8095808579842206, 0.805511647725945, 0.7390437844541775, 0.8070775903736985, 0.3896232684166031, 0.3512073562976318, 0.4002757249585285, 0.3760695114956878, 0.4623700777872466, 0.5844868547389699, 0.487912284092029, 0.4264125145683444, 0.34668262351136814, 0.10811071975437392, 0.09684064391824998, 0.10561363824679537, 0.10356426485907888, 0.11923342255881031, 0.10874936004699498, 0.10864740464240552, 0.12219304231185657, 0.10172133166022779, 0.09283645422157294, 0.10530706247662436, 0.09489821719151514, 0.09175758920407373, 0.10567293758444052, 0.12747707758123472, 0.1009148438084454, 0.0955988237977925, 0.09525337521735477, 0.9925444840993238, 0.9857971589101272, 0.9890010253789056, 0.9760893178784227, 0.9842092102793086, 0.9857116751376349, 0.9751620482544432, 0.986213891889289, 0.9851339671491869, 0.4430132076299902, 0.4097248082449513, 0.3986303313036694, 0.44391816522862193, 0.39804973146871425, 0.45287190440131686, 0.43933821076462065, 0.33810835638023584, 0.3604514087338513, 0.6084121161248612, 0.31165029728171023, 0.34372629005420163, 0.6628882693067057, 0.5035834695094557, 0.5658468265183489, 0.4280017604492278, 0.5859955959228905, 0.5606647582791386, 0.127000899088907, 0.15396120847558215, 0.2061826297776732, 0.15107898644989015, 0.13044409866645323, 0.17172299397071056, 0.2008500482930966, 0.22839363169354598, 0.18720474297824052, 0.2037894625335538, 0.17569127582274102, 0.17150551341186726, 0.18519180349627062, 0.1375588311885193, 0.18460020922507192, 0.20963824813122323, 0.17099138294337712, 0.15667500265248124, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017964783684292218, 9.999999999998899e-05, 9.999999999998899e-05, 0.059253481820759735, 0.04497148704895715, 0.09298636288170059, 0.037921062796133054, 0.00385462650306867, 0.05602312945473609, 0.0371899319597484, 0.00016727033993013674, 0.08398873914028337, 9.999999999998899e-05, 9.999999999998899e-05, 0.018154556630881835, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020628974654806065, 0.03256276905587696, 9.999999999998899e-05, 0.007232965786909462, 0.18508151533165818, 0.18111153707457517, 0.17908143154648148, 0.19358932758332115, 0.1922694819047962, 0.19170648540728707, 0.1643388910752257, 0.15977163242611336, 0.1955700195437411, 0.5110811848488934, 0.5483252897066354, 0.5239545568029154, 0.5509335094436161, 0.5417097560977036, 0.5083864325090304, 0.5237431691013211, 0.5751198637012289, 0.5557471024313969, 0.08885924653790389, 0.06911058808118209, 0.08722537495456584, 0.09854138635193521, 0.07478126585388745, 0.09037751753834455, 0.08132440512370664, 0.10151291173100163, 0.09391528995788556, 0.13322447616985778, 0.14827667083925267, 0.15513012028676243, 0.12312152153456313, 0.1392214931657163, 0.14936896351058715, 0.1355393030243418, 0.11673343806983827, 0.1728499310560172, 0.24674349641148086, 0.24466566076273855, 0.23856955856086337, 0.22456534988220778, 0.22356417286887953, 0.27989845945531555, 0.2357907282714682, 0.23199412588164925, 0.2734859459709622, 0.20927163141177807, 0.1796071183409611, 0.19480238211541867, 0.20272563865641835, 0.17549495490282352, 0.20280089908581, 0.1429684256686201, 0.1986427941868848, 0.19081044759129084, 0.18482790546579653, 0.1948261812665748, 0.19563287639025062, 0.17396278220341066, 0.17224094283162683, 0.17458399751151732, 0.1878258640138707, 0.1660797519823889, 0.22037591852539617, 0.18299480306036742, 0.2008864970874059, 0.1950948752013596, 0.19599408701760623, 0.19409775807141783, 0.19792999716388893, 0.20869284548593603, 0.1863199519937574, 0.19443736936092504, 0.17518471350683007, 0.178391636127616, 0.3831279687436441, 0.38652810076840083, 0.29808680164854917, 0.31691242300050704, 0.16726073167581612, 0.17788420316592346, 0.16826608369980056, 0.2845942691107942, 0.3837293660134641, 0.2018140778987383, 0.16470813320070987, 0.4258054137724764, 0.23852197292685084, 0.17649514783221187, 0.2745916019358343, 0.20714532655564022, 0.17582920030243243, 0.18994239783751976, 0.17099589911813784, 0.1680604379377748, 0.17734435558314732, 0.1775810626510671, 0.18142778050060182, 0.20292638301699395, 0.1744306643697846, 0.07651834594647333, 0.06769777820583256, 0.08081650312553634, 0.08685588214426809, 0.07546092510236924, 0.08203722008279568, 0.07169963561875281, 0.07688848474807586, 0.0908948921043633]}, "mutation_prompt": null}
{"id": "d83bc780-ed37-4a32-aae6-418035b64718", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "aab071df-5b27-4ab9-ba39-cb8681996b17", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "34b1b304-7b76-4fdc-992f-720c64684d07", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "2c298bbb-73b7-4445-9258-d4c9d93d33c7", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "baeaa9bb-bff8-4467-b7f8-d81542a20f97", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "3d8bc085-28b1-4823-b5dc-81040c5279f2", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def crowding_selection(population, candidate, candidate_fitness):\n            distances = np.linalg.norm(population - candidate, axis=1)\n            sorted_indices = np.argsort(distances)\n            for idx in sorted_indices:\n                if candidate_fitness < func(population[idx]):\n                    return population[idx]\n            return candidate\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                candidate = crowding_selection(population, candidate, candidate_fitness)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Enhancing the population diversity by introducing a crowding-based selection mechanism to maintain a balanced exploration-exploitation trade-off.", "configspace": "", "generation": 51, "fitness": 0.06372046547633685, "feedback": "The algorithm EnhancedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.12494123688500769, 0.12663440935010528, 0.13315081775359972, 0.05827146715199438, 0.10617699590702556, 0.07444566610233538, 0.0967716826358237, 0.11125034025764857, 0.11318368255750644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028527716404561754, 0.019273336530035157, 0.011915240500487423, 0.03297238732776464, 0.033437002970876706, 0.017863149539620315, 0.030309114764468403, 0.028061384454173832, 0.011922147521462478, 0.032653179005994626, 0.014164074458832276, 0.021887076067895528, 0.052945592779911954, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033108731704308836, 9.999999999998899e-05, 9.999999999998899e-05, 0.13153546915158099, 0.07807900081886399, 0.09576983943536521, 0.12136076035563348, 0.09422246761591468, 0.0811481460753084, 0.07609122056931084, 0.127681097662112, 0.06608399304655355, 0.05689974599086034, 0.029546643608397205, 0.05540017470374825, 0.008511283409931458, 0.014789476436197546, 0.047012346949238615, 0.02902057071826769, 0.028494007957427292, 9.999999999998899e-05, 0.11496203273218708, 0.06318595536743343, 0.06442713652439691, 0.07046373383872451, 0.048023535895438396, 0.05737595857007094, 0.0546135976511376, 0.06446465553739678, 0.11351353951333953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002333477158084518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000603211509442203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027436831684114593, 0.015725586186766116, 0.04096992644492403, 0.0050478639158187955, 0.0039678999928335346, 0.01214524972328368, 0.048446389435554016, 0.027592972678308292, 0.010114821341959734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1658591381411485, 0.1634774370588049, 0.1651448968547553, 0.11326445894499815, 0.13759475815824995, 0.14684306958336946, 0.15912917212037303, 0.1430507394389784, 0.15716819955377248, 0.02537174138177889, 0.018151889599947735, 0.00017051555100611182, 0.02824701056381551, 0.020571211566166703, 0.04478145337391326, 0.009594895646613644, 0.024842761416536407, 0.04415551005835039, 0.10700611833244589, 0.1034496500618276, 0.09923853223866463, 0.11830687089027159, 0.10973477162099443, 0.11203663824369736, 0.1217430013690064, 0.16559099705045932, 0.11271514791973081, 0.12123537109307692, 0.13807815580764582, 0.11769816511442932, 0.1386493750991532, 0.14745848786988303, 0.13242111963464198, 0.13756140558631502, 0.13277950977181896, 0.1293033012995365, 0.08446360378824103, 0.07403740103581435, 0.06380375886209855, 0.09560871512078994, 0.09983076145986436, 0.09985197254017242, 0.08508639176904198, 0.079898669001081, 0.07073219300598754, 0.1588291001305877, 0.10670781062601731, 0.15231987273244318, 0.13808881907524428, 0.10671834029642546, 0.1342644172967815, 0.14153732394292295, 0.12502150038874826, 0.1661907622188542, 0.13835267844499832, 0.07138405073851084, 0.12337384082698388, 0.11931183088522901, 0.1307112716821317, 0.13757888933944018, 0.1409243874819044, 0.10017802703816103, 0.10067554491427633, 0.09135327907511559, 0.14839362920346322, 0.12118001288283253, 0.11501562813367838, 0.15615999977662998, 0.12308625492197312, 0.10001983371308343, 0.10008288282241795, 0.11158452773215488, 0.09265529112299287, 0.06486842181351327, 0.11073540637784973, 0.0869936247802201, 0.08335155483905277, 0.07550395319727776, 0.05941539511005178, 0.0797683701815165, 0.09528586947814477, 0.168816744899153, 0.171479702570703, 0.17409449159741286, 0.16224431291866181, 0.15123805196397366, 0.15837304505910654, 0.16802630402760022, 0.169480386397308, 0.16240520338715947, 0.03527493611257615, 0.036635040810433006, 0.042877734988805094, 0.03494642454325059, 0.02872260574669705, 0.03799634967399357, 0.03385030542717138, 0.02798041578753363, 0.048987944852835086]}, "mutation_prompt": null}
{"id": "dfb7be27-fead-43af-8587-a56376f3b084", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "26015441-6f30-4757-8aee-6fd3b659c980", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "89159aa5-27d0-4108-a0a6-dd61ea99475a", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HybridDESA", "description": "Implementing a hybrid algorithm by combining Differential Evolution with Simulated Annealing for improved search capability.", "configspace": "", "generation": 54, "fitness": 0.3067158634603232, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "8ddbb43b-0d28-439b-b1d3-e58d9a85826f", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "b7fb75c6-c572-44cd-a027-cdeb8cfb91f8", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "ffb577ec-a233-4c6f-a146-ab567d4f0a20", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "ba608b7d-f8e4-4fa6-8c85-1f708705c54e", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.w = 0.729\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def pso_update_velocity(velocity, position, pbest, gbest):\n            r1 = np.random.rand(self.dim)\n            r2 = np.random.rand(self.dim)\n            return self.w * velocity + self.c1 * r1 * (pbest - position) + self.c2 * r2 * (gbest - position)\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        pbest = np.copy(population)\n        gbest = np.copy(population[best_idx])\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            new_velocity = np.zeros_like(velocity)\n            for i in range(self.pop_size):\n                # PSO velocity update\n                new_velocity[i] = pso_update_velocity(velocity[i], population[i], pbest[i], gbest)\n                \n                # PSO position update\n                candidate = population[i] + new_velocity[i]\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    pbest[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                        gbest = np.copy(candidate)\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n            velocity = new_velocity\n\n        return best_solution", "name": "HybridDEPSO", "description": "Implementing a hybrid algorithm by combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 58, "fitness": 0.12888481091847517, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.27051058797280525, 0.10502167586802369, 0.17666098252410045, 0.24494192587759023, 0.3045943811340297, 0.17903845464312385, 0.3603039343028507, 0.34081698539172733, 0.1384455900137317, 9.999999999998899e-05, 0.2600349808099348, 9.999999999998899e-05, 0.043461295190242666, 0.22840386623704778, 9.999999999998899e-05, 0.1462160593529026, 9.999999999998899e-05, 0.12880337083321536, 0.0663609931406427, 0.015635561966229172, 0.04974691175277679, 0.08238948061121731, 0.048976853430368616, 0.07093906071428413, 0.10693402344365077, 0.027654292295305805, 0.04498941334000317, 0.06285540239447751, 0.0031643668057455, 9.999999999998899e-05, 0.0488290400954855, 0.006893910950004467, 0.014782332599559744, 0.028463236233608247, 0.025318133069283433, 9.999999999998899e-05, 0.9972719471333824, 0.9954722498907278, 0.9963364558951238, 0.9959356025064657, 0.9972857207780574, 0.9941671076613608, 0.44979461704020385, 0.9975458533441065, 0.9955387016948647, 0.08870567634310156, 0.04146255214859451, 0.050233845127449106, 0.04429520671819753, 0.027449587987434243, 0.005549359398447806, 0.05686271465725623, 0.11731855679458492, 0.03286366046774436, 0.13170204525194562, 0.08300632383524187, 0.20854860221586924, 0.17190661456484535, 0.1651351046334779, 0.16588283247888502, 0.09595061707150321, 0.13201924400385, 0.16011214794929185, 0.08762806100461462, 9.999999999998899e-05, 0.1230895084583048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0433815811870365, 0.05900268557078303, 0.12725586775658138, 9.999999999998899e-05, 9.999999999998899e-05, 0.012606642443683591, 0.012226434146846987, 0.009720277372974984, 9.999999999998899e-05, 0.11129142064626174, 9.999999999998899e-05, 0.07813815106918975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08479222955974142, 0.006603814437481592, 0.07823074209003644, 0.05858331707928699, 9.999999999998899e-05, 9.999999999998899e-05, 0.08786295318595205, 0.05614089093207786, 0.008823217316932808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01860879464006504, 0.021793770660127887, 0.05351630878998681, 0.02219041392630494, 9.999999999998899e-05, 9.999999999998899e-05, 0.07893576584892092, 9.999999999998899e-05, 0.03053798042644007, 0.24292190521691437, 0.1759136235306913, 0.30142735685085864, 0.26128007143727994, 0.28637994241700526, 0.23148117215698072, 0.1868102410598289, 0.14445265959911735, 0.2661477312669617, 0.058722613124701284, 0.00730331796973549, 0.07372972376890652, 0.06687727372310814, 0.032573429216464556, 0.03659314697868776, 0.019693395906248745, 0.03388404690758651, 0.03479485987954978, 0.16185177175666687, 0.15541893217960911, 0.10280729072459815, 0.1573945778090372, 0.1034272628844648, 0.11789358652720461, 0.09946452065207723, 0.0969263375475814, 0.10341932526340902, 0.13193103486248214, 0.15083530693665637, 0.12018144797129793, 0.12622428733222002, 0.13665892744532726, 0.1776933735396442, 0.17047671821151722, 0.18914418888129125, 0.1216898989437103, 0.06019351802343098, 0.1041092082763202, 0.13212075408606894, 0.11140015948408766, 0.1037548853125092, 0.08835030151409651, 0.09208806402020198, 0.1575872417606401, 0.09574224206508553, 0.17081107828666842, 0.08124523851670129, 0.1332186979181531, 0.14531031346398082, 0.11108925193761354, 0.1457674612956591, 0.19643038988844885, 0.13127661742267227, 0.15063755332355955, 0.16449615818732033, 0.15454947634721394, 0.17899245182432677, 0.16925506216740838, 0.15965392951767643, 0.13356425074212352, 0.17543247200522416, 0.17239697269134324, 0.18139637936678232, 0.09048498113600545, 0.11635403151395363, 0.10430399733161067, 0.20824119183398992, 0.16818796644056966, 0.1286876190843692, 0.09822378524151631, 0.08864680644585665, 0.1073563522652714, 0.044583998390550605, 0.08681359883391393, 0.3009135892410466, 0.22619894953345476, 0.07933803221695801, 0.11294531273399966, 0.03423593387593249, 0.16620263365412324, 0.08209211670825356, 0.16740776181989314, 0.15222620348898286, 0.18063759688389258, 0.1635210281121957, 0.18567135340613783, 0.1505845885310857, 0.1797811319951308, 0.16018583038762246, 0.17150349785000307, 0.05095406767015154, 0.02487509505380281, 0.047499452498902084, 0.07294173809648763, 0.04130326760566627, 0.04700382572727935, 0.013198354559543657, 0.04808069503999701, 0.04843646412213565]}, "mutation_prompt": null}
{"id": "0bb16f0c-4108-44b9-ba19-aaef2f15d92d", "solution": "import numpy as np\n\nclass MultiSwarmImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n        self.num_swarms = 3  # Number of swarms\n        self.swarm_radii = np.full(self.num_swarms, 0.1)  # Initial swarm radii\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        def move_swarm(swarm_center, radius):\n            return swarm_center + radius * np.random.normal(0, 1, self.dim)\n\n        swarms = [np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim)) for _ in range(self.num_swarms)]\n        fitness = [np.array([func(individual) for individual in swarm]) for swarm in swarms]\n        best_solutions = [swarm[np.argmin(f)] for swarm, f in zip(swarms, fitness)]\n        t = 0\n\n        while t < self.budget:\n            new_swarms = []\n            for idx, swarm in enumerate(swarms):\n                new_swarm = np.zeros_like(swarm)\n                for i in range(self.pop_size):\n                    candidate = de_mutate(swarm, i)\n                    candidate_fitness = func(candidate)\n                    if candidate_fitness < fitness[idx][i]:\n                        new_swarm[i] = candidate\n                        fitness[idx][i] = candidate_fitness\n                        if candidate_fitness < func(best_solutions[idx]):\n                            best_solutions[idx] = candidate\n                    else:\n                        new_swarm[i] = sa_mutation(swarm[i], best_solutions[idx], t)\n                    t += 1\n                new_swarms.append(new_swarm)\n\n            for idx in range(self.num_swarms):\n                swarms[idx] = move_swarm(np.mean(new_swarms[idx], axis=0), self.swarm_radii[idx])\n\n        return best_solutions[np.argmin([func(sol) for sol in best_solutions])]", "name": "MultiSwarmImprovedHDESA", "description": "Enhancing global exploration by introducing a novel multi-swarm approach to diversify the search space.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 6 is out of bounds for axis 0 with size 5').", "error": "IndexError('index 6 is out of bounds for axis 0 with size 5')", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {}, "mutation_prompt": null}
{"id": "f4229b45-3aaf-479c-b73f-43b053cf143e", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "047d4c28-a81c-4b9e-bbfe-9da0e9daf58e", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "43fe58ea-5601-4932-bb4b-43c6d7450c76", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "325afcb5-ffd9-4d13-899f-6db98270f57a", "solution": "import numpy as np\n\nclass ImprovedHDESARefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            levy_vector = np.random.standard_cauchy(self.dim)\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * levy_vector\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            levy_vector = np.random.standard_cauchy(self.dim)\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * levy_vector\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESARefined", "description": "Enhancing the exploration by introducing a novel mutation strategy based on Levy flights to promote diverse search behaviors.", "configspace": "", "generation": 63, "fitness": 0.18785315651484005, "feedback": "The algorithm ImprovedHDESARefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.3604459890504699, 0.3454597565693396, 0.353184930255916, 0.3673136759345491, 0.36177435125170687, 0.35661267196191804, 0.36316315160713697, 0.3530541630556464, 0.40603981244343246, 0.013038347768277392, 0.0010436013563885904, 0.028238399252156654, 0.002532528398725087, 0.011543818710571419, 0.011290140246251745, 0.005056866959084472, 0.0005265898751395381, 0.002637368466570811, 0.08533607128470544, 0.08346921926599893, 0.08757434833283295, 0.1064060453062099, 0.09061086038191202, 0.09979607740641261, 0.09262399333330873, 0.08819456231026013, 0.09214052714466248, 0.08404181849671599, 0.09450015519458943, 0.09650765522926286, 0.08490514099171109, 0.09544674838244227, 0.10299076652881634, 0.09363250083627295, 0.08346916360217405, 0.09426468040011748, 0.9937092768694031, 0.9911418713158762, 0.9763447012316647, 0.9958689264650086, 0.9890781491873095, 0.9824021224710705, 0.9798430859408174, 0.9876785789301161, 0.9896386766967135, 0.19064032157348187, 0.19179140775442638, 0.21365041833511111, 0.17944403349815496, 0.1827399141263909, 0.1708424681496976, 0.17346068698939288, 0.18911119757044847, 0.1831654328420399, 0.19608530978583538, 0.20764165399201595, 0.18301417514880514, 0.2381250054870695, 0.20555023034446207, 0.22879301594682733, 0.21116986106213798, 0.20161299065220206, 0.1965877545772644, 0.18334971295634173, 0.12640001595655304, 0.11902942549927342, 0.1305589060256136, 0.13457501687103413, 0.12901051576646294, 0.14273719903686855, 0.12840452247009526, 0.13522250813332282, 0.12122343614398923, 0.13088934992234103, 0.12335357881908549, 0.11864454108036371, 0.12129429338404785, 0.12483422812776734, 0.13386344607406642, 0.13314151762140025, 0.13288782862911208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035499535515438607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029455987522013838, 0.01941019946733391, 0.09556434644340517, 0.04302529296040647, 0.030904390756028133, 0.08788664972788451, 0.07962646303352594, 0.0279992809976497, 0.03367775057097255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048066775014033336, 0.0595067541710127, 0.05294561350291427, 0.06394549819290074, 0.05899986663306245, 0.07429201523185824, 0.04025290574884688, 0.049039658476636716, 0.05518314207244912, 0.3440808562717176, 0.3474058136712206, 0.3348609717345612, 0.3351899931058352, 0.3175545486296105, 0.32133663312289473, 0.35053237959229344, 0.370710951323696, 0.3371203822808184, 0.07992493197439998, 0.0725993898900833, 0.07288461558209691, 0.08018894356167583, 0.08074539684517079, 0.08881243144846374, 0.06338038991957129, 0.0747945735366502, 0.08461477081347435, 0.15746667120573254, 0.19197793097835014, 0.18321287335290415, 0.19774163779531484, 0.18551317927796063, 0.19984792207599145, 0.19006870014701827, 0.1595817149290475, 0.1567883780201682, 0.23554238760788448, 0.24717429107533728, 0.22339545401039662, 0.2222066440317454, 0.2172321767393619, 0.23276058930976218, 0.2435824566635988, 0.2333987682537747, 0.24437003974225546, 0.17929734348231718, 0.16526761540130064, 0.17285338296266506, 0.19347342292793124, 0.1774332443977208, 0.1784145417171128, 0.17492704050875163, 0.16830051227418463, 0.16819151348784855, 0.19328355711151757, 0.1869636496359709, 0.21000498344336616, 0.21231023621176948, 0.1899294485808607, 0.2066762482799115, 0.18202268683597045, 0.16352174287030463, 0.1819050371079829, 0.18066947624324436, 0.18043821902596724, 0.1823255927663623, 0.20472415257083953, 0.19527629100275634, 0.19648800043088643, 0.18472391046443126, 0.18493172359040277, 0.1846637831635447, 0.16937741205401058, 0.16864342872707605, 0.3884226269735773, 0.4785348874111579, 0.1839329551034773, 0.42718864355452835, 0.35569278220168865, 0.1745693802111702, 0.2679404040471951, 0.3270081471052533, 0.27673387920197234, 0.33943482648749035, 0.20325259292582987, 0.2541933390375498, 0.355539110907534, 0.27489308470343576, 0.16059465506328086, 0.2152311726814542, 0.1974224376094319, 0.1646325735953693, 0.16924789812190322, 0.18837633120833897, 0.18275245535548323, 0.19408147394927178, 0.1765085733074775, 0.1667744703709222, 0.19192140223422338, 0.0722904410869245, 0.06950096890535773, 0.07891322033227477, 0.08220134247106248, 0.0750808216524127, 0.0817888645868583, 0.07687559913049535, 0.08066911488766981, 0.07599299385788838]}, "mutation_prompt": null}
{"id": "3336bee2-9feb-4aca-8b81-c865af0047cc", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "f99fae68-d44f-4587-bff6-4cc5d48d106e", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        def opposition_based_mutation(candidate, best, t):\n            return 2 * best - candidate\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(opposition_based_mutation(population[i], best_solution, t), best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedOppositionBasedHDESA", "description": "Introducing a novel opposition-based learning approach to enhance exploration in the search space.", "configspace": "", "generation": 65, "fitness": 0.16502429739170113, "feedback": "The algorithm EnhancedOppositionBasedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.2777561989638201, 0.2651496979446407, 0.25300937130735845, 0.26060082577130717, 0.3526505527010705, 0.2668026635247225, 0.3142655790220129, 0.2963389174694364, 0.3485855576251644, 0.04272849261990774, 0.03196693258405181, 0.051034214412600476, 0.06741197429141177, 0.0026048880738844815, 0.03419005344996584, 0.018605753008778647, 0.0067097691492610245, 0.01914671095223819, 0.06537107729763614, 0.07261132926959413, 0.09562768840178437, 0.06770086533561714, 0.06894720353360428, 0.0626948941936758, 0.08504606542163651, 0.08110440621582349, 0.08046974965421727, 0.05090141073009913, 0.05395677619133499, 0.048857933337417725, 0.05710719987043955, 0.04617667982677742, 0.0519469889234615, 0.06469496419140286, 0.07014481300894826, 0.06461557341056778, 0.9942051955222946, 0.9937534727329531, 0.9968320788402166, 0.9874138606170104, 0.9974587026426972, 0.986651967433038, 0.9935948917395357, 0.9934777834071727, 0.9836318208123334, 0.1463139727746542, 0.09404481809672194, 0.11026762781556432, 0.15896368092798252, 0.1346617832959891, 0.130932063690953, 0.15097290999268098, 0.14035264262349123, 0.0920067164413757, 0.27322662632644446, 0.24544355354874903, 0.19669593782303652, 0.2499334369670836, 0.24282672505369185, 0.18120535460261367, 0.21537008551044412, 0.22697381693710772, 0.16241051389586847, 0.09100473462578962, 0.05294775676008978, 0.09324784016301979, 0.0689449550538167, 0.11217241202180284, 0.05527237222553616, 0.10087127583474975, 0.05807707250240857, 0.11752055915172055, 0.09313925672298906, 0.005725257604678569, 0.129544412900237, 0.1084303051775578, 0.060723881019364434, 0.09630735496919784, 0.10060979863970243, 0.009060720767553376, 0.08147242784942299, 9.999999999998899e-05, 0.01589064597714407, 9.999999999998899e-05, 0.0338263512437077, 9.999999999998899e-05, 0.001330557213101935, 0.026454122322561724, 9.999999999998899e-05, 0.009369196900166354, 0.183528901405964, 0.17214229997423336, 0.15482475911875104, 0.22773606429865578, 0.03337500291593021, 0.23816977472025447, 0.11390002460632076, 0.12463420291164762, 0.2011385477220219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08828730502291948, 0.07492202221381117, 0.10867117640904767, 0.05435037682289856, 0.053174219323893324, 0.019833921348473282, 0.07665369800277766, 0.0640218508423055, 0.0716816797760721, 0.3383124876675886, 0.2964560220302055, 0.38546821669569453, 0.35544412730981123, 0.27928747419238276, 0.3485107912652079, 0.3620998079796559, 0.25278396033147843, 0.37326227157629643, 0.05492540247116573, 0.08119878183254203, 0.07980321894028808, 0.057564580996672166, 0.061452055835772956, 0.08740490369616472, 0.07843167499128578, 0.052314167630139075, 0.06652991279148046, 0.14386440234842535, 0.09929845140116211, 0.11853290584443088, 0.11643959304209106, 0.11286715371758815, 0.11449451215186368, 0.1273588036579889, 0.08534838405898193, 0.10979108049390363, 0.21745203916090006, 0.18099005580566363, 0.22131413812794798, 0.22172679250527194, 0.16418535049153293, 0.21258084175458014, 0.21891642555905244, 0.19106047520427893, 0.188075431093072, 0.1551070084837649, 0.12579146288669707, 0.1493837803791792, 0.1696516160353292, 0.1380690087315768, 0.15337483085256898, 0.13534083909515415, 0.14714415277098525, 0.174664656848605, 0.1830488240024064, 0.13755730265927868, 0.16421013926562011, 0.16714868243361414, 0.14734486456992546, 0.16703604812459838, 0.17553618774347546, 0.16196744431758547, 0.18302957681488552, 0.17370298459375821, 0.1640217623193876, 0.1759692728906601, 0.15807773198166308, 0.1656235928721258, 0.17943189320922592, 0.17189071642193487, 0.16540760711803215, 0.15763611443877856, 0.16045912812084895, 0.18369974608916273, 0.16233950700825917, 0.2653491854626503, 0.1731931596271732, 0.15660243691686415, 0.13493019182281352, 0.12351848769106455, 0.20849487183701854, 0.15319719276854138, 0.1885817351796668, 0.17122787139464668, 0.12816942216819494, 0.16212882400247908, 0.21097432427898744, 0.14165426098700606, 0.12461968144840252, 0.177761106483722, 0.15210991128427664, 0.1509628444539718, 0.16439453586510877, 0.17452591271811124, 0.16453371148039386, 0.19098849070552548, 0.15935059318603595, 0.15616607966493523, 0.16948065948763746, 0.06886238860657434, 0.06049799109458831, 0.07902654927106145, 0.05476101912914, 0.047228560386119556, 0.06338595515360557, 0.06375150530461815, 0.0664446958919489, 0.06771599628323766]}, "mutation_prompt": null}
{"id": "6b3eeeda-8d7c-4978-a6b6-a10593be0c71", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_pop_size = 6\n        self.max_pop_size = 12\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(len(population)), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.min_pop_size, self.dim))  # Start with minimum population size\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros((len(population), self.dim))  # Initialize new population based on dynamic size\n            for i in range(len(population)):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            if np.std(fitness) > 0.1:  # Adjust population size based on fitness diversity\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                fitness = np.append(fitness, func(population[-1]))\n\n            if len(population) > self.max_pop_size:  # Maintain population size within bounds\n                worst_idx = np.argmax(fitness)\n                population = np.delete(population, worst_idx, axis=0)\n                fitness = np.delete(fitness, worst_idx)\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Introducing a dynamic population size adjustment mechanism based on fitness diversity to enhance exploration.", "configspace": "", "generation": 66, "fitness": 0.10917543325822424, "feedback": "The algorithm ImprovedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.21657347481097644, 0.18969102194281784, 0.22474247383228985, 0.22365570510263244, 0.21182211958214403, 0.2161502153408359, 0.1817279080688612, 0.20057404459408157, 0.21776818475107584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06986785120323835, 0.05883904960733921, 0.04465364336630662, 0.059793274568624155, 0.05652701576958785, 0.05014921907392256, 0.0570955219481033, 0.0626714048277146, 0.05540488038825475, 0.04742899458145844, 0.0689550593324948, 0.05855907827031992, 0.05291848393196397, 0.04200545518322085, 0.0322707796616134, 0.05258011766108028, 0.0405267475984179, 0.04337706978568312, 0.12295376290851268, 0.9445140287334368, 0.7718607395555563, 0.09922668266485579, 0.1220105891259875, 0.11066869605869323, 0.12362389591482137, 0.10910446825722997, 0.12452231944962533, 0.13302618132224286, 0.1218835173354682, 0.06995434892174435, 0.07127491890201831, 0.08273323152450263, 0.06276284010278721, 0.07059071560468999, 0.08914191546380312, 0.10465255748430757, 0.15008978879500556, 0.14331768851682025, 0.15102403535461695, 0.15154077772167052, 0.13756691712939506, 0.13645397449933028, 0.15576587837268796, 0.122551465404099, 0.15699523942045968, 0.02473270842370834, 0.02531567369403598, 0.004595311342248221, 0.004722532700066173, 9.999999999998899e-05, 0.01563653579646762, 0.027385056126527862, 0.01898797670655783, 0.0026478493384802793, 0.05749498567036371, 0.01992973632927697, 0.01356282824163102, 0.016971193919765537, 0.021123911903946246, 0.027567554089134694, 0.003787482935413977, 0.05440565419931298, 0.010533743743411983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.063882447212539, 0.056611378791101896, 0.05637222823559862, 0.06600465138535405, 0.04378235153256449, 0.059416911110121484, 0.131720885532721, 0.06265752004553038, 0.07687221925284304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0097746564787069, 0.00017158778706616307, 0.005039291999194173, 0.004056898824004174, 0.005722907506181207, 0.01730792029512318, 0.0037110868974501443, 9.999999999998899e-05, 0.2127722945337126, 0.22740979677704032, 0.21487442528032763, 0.232042033779971, 0.2549004021297617, 0.22096370306524382, 0.26814633870992255, 0.2574194185419373, 0.22585547949084495, 0.06541111063157534, 0.056127603057086195, 0.05808153953375972, 0.04787061341653531, 0.04618007999125806, 0.07060158875100919, 0.047624360772882346, 0.047525993979271486, 0.06425878625397541, 0.15385581311622665, 0.1408938635538638, 0.13074305435678146, 0.14273984279658214, 0.14093566875464547, 0.15541029094148084, 0.12489158711779869, 0.15780988192793388, 0.1396611949270078, 0.20240825906913362, 0.18113100458582398, 0.18018723077317989, 0.17889846921073582, 0.203849642064593, 0.17069719091127988, 0.17761384389643553, 0.17556116349940099, 0.16707548583977716, 0.11210762866258828, 0.12237865221517918, 0.13506719665342448, 0.12654971800779857, 0.11677428047192062, 0.12300685057354077, 0.11762515346776237, 0.11797912247492293, 0.11857310731772064, 0.16394251733822507, 0.16552624169365648, 0.1731658024603857, 0.15460658997128718, 0.19623930119690436, 0.16650070140491813, 0.15758568535090467, 0.18481439583731485, 0.1635603916062175, 0.1504727266199436, 0.16294033982935308, 0.15168977612949253, 0.15560547758605403, 0.15287507528885147, 0.16866737435797108, 0.16318502682051184, 0.15873696281419947, 0.15105391000981294, 0.1702141421983031, 0.2750235821950614, 0.17479450309347777, 0.1702248133831632, 0.1685058186895967, 0.16606339535162373, 0.1882030922333371, 0.17056767695234598, 0.15084257902612608, 0.2062529209358871, 0.20079215846927978, 0.2592241753595178, 0.2678405728882517, 0.13802679181190303, 0.16053939096537562, 0.2162091993976245, 0.1688149249619284, 0.12217963526856379, 0.17127618567837832, 0.18449275541312904, 0.17660114309204078, 0.17863893319292512, 0.18184228142882508, 0.17629005803980602, 0.18128007201251106, 0.17682122480108176, 0.17686010945417707, 0.05184763834011119, 0.06231371784115325, 0.06176975416471975, 0.07051954189096254, 0.07519120747580077, 0.051998075331920135, 0.05473974293485029, 0.05159002514310562, 0.058197034784037927]}, "mutation_prompt": null}
{"id": "b71efb0b-f5c0-4c71-9831-aed65adfdc41", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "aab5239b-46f8-4a82-9be7-f8f52df42921", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "3c45621b-2190-464f-880a-1cebdb47144f", "solution": "import numpy as np\n\nclass ImprovedHDPEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.init_pop_size = 10\n        self.min_pop_size = 5\n        self.max_pop_size = 20\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(len(population)), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            # Adaptive control for population size\n            success_rate = np.sum(fitness < np.array([func(individual) for individual in new_population])) / self.pop_size\n            if success_rate > 0.6 and self.pop_size < self.max_pop_size:\n                self.pop_size += 1\n            elif success_rate < 0.4 and self.pop_size > self.min_pop_size:\n                self.pop_size -= 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDPEA", "description": "Introducing adaptive population size control to dynamically adjust the number of individuals in the population based on performance.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (9,) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (9,) ')", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {}, "mutation_prompt": null}
{"id": "3c055484-ffbe-4254-bf5f-c39e5383adca", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "51ca296c-bdba-40ac-98a3-aa3714cb1c22", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "4605bfc2-58bf-4ecf-ae28-776e131ccb11", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "8bc66e0c-baa2-4dea-b2a7-69cee14d1d7f", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def crowding_selection(self, population, new_population, fitness):\n        combined_population = np.vstack((population, new_population))\n        combined_fitness = np.array([func(individual) for individual in combined_population])\n        sorted_indices = np.argsort(combined_fitness)\n        selected_indices = sorted_indices[:self.pop_size]\n        return combined_population[selected_indices], combined_fitness[selected_indices]\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population, fitness = self.crowding_selection(population, new_population, fitness)\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Enhance diversity by introducing a novel crowding-based selection mechanism to maintain a diverse population for better exploration.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {}, "mutation_prompt": null}
{"id": "c0e8cf66-0bb0-49d1-acfe-0ce094cad583", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "c6981b60-a168-4c98-ba62-62b7b514ddd7", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "0b330318-9d72-4393-88ff-945584248473", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "1a6e9ff7-4d95-4334-a4a3-df55cac09b96", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "f5f19216-3451-4a22-b245-c3d4b1bd415d", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "e8a1603e-511f-4ef9-bf19-03394a6731e3", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "45c1f113-2314-4dc5-862e-3789fb5b7bfa", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "c0ae2e52-6bd3-460a-96c1-f34db62ac2d5", "solution": "def levy_flight(dim):\n    beta = 1.5\n    sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n    u = np.random.normal(0, sigma, dim)\n    v = np.random.normal(0, 1, dim)\n    step = u / np.absolute(v) ** (1 / beta)\n    return step\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector + levy_flight(self.dim)\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim) + levy_flight(self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Introducing Levy flight behavior to enhance exploration in the optimization process.", "configspace": "", "generation": 81, "fitness": 0.07621972530982649, "feedback": "The algorithm ImprovedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.20.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.07181397830146763, 0.06432772651221763, 0.08237988959495246, 0.06874497400578916, 0.05267361210777377, 0.12565380125458891, 0.07175644535324521, 0.05163064099738546, 0.08213274403879678, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011271057525702566, 0.01467079663371329, 9.999999999998899e-05, 0.033665121446787794, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 0.005841458399849064, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9865263090076694, 0.9950309871056998, 0.9917125068537305, 0.9892213107162728, 0.9952583615558743, 0.9859118573081639, 0.9916215314777325, 0.9905806100168862, 0.9802096847700871, 9.999999999998899e-05, 0.006540404252174614, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.0160792997341479, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.011647780639531424, 0.02457580827839234, 9.999999999998899e-05, 0.005238255550383819, 0.026279303607937843, 9.999999999998899e-05, 0.025888533215274068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08781257924046171, 0.1070271971752389, 0.14838054695461433, 0.10094764340419404, 0.10593794422808878, 0.11117216072184, 0.1240568991094797, 0.09808560426026436, 0.15452819961579822, 0.018811772918711722, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.01893826885105776, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.06735693451091307, 0.05468846648487902, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.08019206695653702, 0.10605926106155461, 0.07726393575557644, 0.09766530384299366, 0.0962505644704219, 0.13123429978333045, 0.11995067717721342, 0.0929354279754463, 0.15967244304496997, 0.11420206329748472, 0.12005967514538685, 0.09566230418660582, 0.05694192696575606, 0.030850512655025697, 0.03464785118471059, 0.05823875718368343, 0.04524107964173818, 0.037870490273532065, 0.05648699256316181, 0.038530072755655564, 0.03265854286169689, 0.0916346253723066, 0.08680765325237605, 0.11089882950468877, 0.1309222076432991, 0.08478701447916592, 0.11102742193071335, 0.12245976138762271, 0.14177960098981568, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10817041673315175, 0.056143274529988574, 0.07458801207863996, 0.0726837108280528, 0.1207914665021157, 0.0688642448183171, 0.06088618922663591, 0.056615725614002965, 0.07366790419967961, 0.03824121102611444, 0.03967402848431323, 0.05459479328453731, 0.035074862574344445, 0.021600351495484005, 0.045511073114331335, 0.04432283333218878, 0.019773787893659245, 0.04143420019681854, 0.10096019244302157, 0.12017502569002791, 0.1693168445036397, 0.10735471808377628, 0.11402400224796383, 0.16204853283336673, 0.10809762588674854, 0.1145022105542064, 0.14689007985489466, 0.007658970673574683, 0.012204213037243616, 0.031393493129599714, 0.012141010644244665, 0.006771602390485687, 0.00826091239954263, 0.015787338000846418, 9.999999999998899e-05, 0.007627790426266823]}, "mutation_prompt": null}
{"id": "0b80dda2-61be-405b-a621-ef4a74515aa0", "solution": "import numpy as np\n\nclass EnhancedGravitationalHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def gravitational_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            gravitational_force = (best - candidate) / np.linalg.norm(best - candidate) ** 2  # Gravitational force direction\n            return candidate + self.sigma * gravitational_force\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = gravitational_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedGravitationalHDESA", "description": "Enhancing the algorithm by introducing a new mutation strategy inspired by gravitational forces to improve exploration-exploitation trade-off.", "configspace": "", "generation": 82, "fitness": 0.11229254691389698, "feedback": "The algorithm EnhancedGravitationalHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.17.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.24017772227816614, 0.15996844557984968, 0.19463869013952328, 0.09369379056284799, 0.258936554292616, 0.25554680256100837, 0.12793719465736486, 0.15652413325880765, 0.10787162122662597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040973992841192186, 0.06997536778234004, 0.0265763577628364, 0.051512143839118285, 0.034323850157901736, 0.04220943311429892, 0.05310660593761529, 0.045406131395183236, 0.052062707400133745, 0.0, 0.03753886673828233, 0.03845269415337316, 0.04176193973904807, 0.02655743568512081, 0.01980801397752041, 0.02191467476292841, 0.022745505803041133, 0.019772447885508915, 0.1758662826745263, 0.9895169706501743, 0.973093986663199, 0.9913070043865941, 0.9897280619282364, 0.9738847002880443, 0.9775005097673809, 0.20664090361276644, 0.9858132183641188, 0.0976048060832998, 0.015247999417523861, 0.054580664900417464, 0.049257729446295695, 0.06716084972110781, 0.06907386587398034, 0.0, 0.05678416333006697, 0.0, 0.15107901103412003, 0.20524607557584884, 0.10874721236912077, 0.17141640805910952, 0.07011860657910185, 0.14821330092069296, 0.06483108245732216, 0.09280114879829549, 0.17215578809709842, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04383592274569437, 0.0, 0.05322910342693543, 0.0, 0.0045589869651696535, 0.0, 0.04647314250417345, 0.007394643224243325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13809949270490873, 0.030356199874969958, 0.0, 0.07818244502633698, 0.023402249450335533, 0.024736102466569765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011431810769346296, 0.21614911404764114, 0.15025176238925875, 0.2411163133383084, 0.16490406865318252, 0.13328691733636444, 0.19148373075920921, 0.1735255201952145, 0.22872864673869053, 0.23045005761310267, 0.020035172865623507, 0.07687673737723921, 0.010278595683287817, 0.0897046253867898, 0.05832301167245335, 0.043515084995553455, 0.04964695311245482, 0.06445585032662615, 0.060046693742665025, 0.10122753699690124, 0.10919095103619314, 0.11267973331101622, 0.11528754057402912, 0.1076103691089404, 0.11450984171513556, 0.13898523365219684, 0.08379874046658364, 0.12191054085293451, 0.1754377283768621, 0.1525201302646526, 0.1325574928888109, 0.17560406927581207, 0.15031751512675295, 0.14724091564450115, 0.15370450512526967, 0.14331873115448945, 0.11813925576631046, 0.11315784000053064, 0.09149770489641484, 0.12078232456528226, 0.11868728902629577, 0.0881767120381517, 0.12079700191046272, 0.09098133476532333, 0.09215098007962441, 0.1122181816088681, 0.1779154310459693, 0.13760377963312964, 0.16161708951197107, 0.1550224390704661, 0.10374555286431364, 0.1347100221118206, 0.16199296757620318, 0.1360026574197304, 0.15258215054960111, 0.15939585673622314, 0.1619659995806706, 0.12598104899551477, 0.14164677756408384, 0.14221191205188566, 0.16141872017838255, 0.15423195268868972, 0.13835613336510255, 0.16437510154432988, 0.11846226633910883, 0.13419089008320406, 0.10922051316548531, 0.29042275395310646, 0.16500208419100382, 0.13592355948454338, 0.16541887210971784, 0.15496259288113978, 0.11947329215844182, 0.2101149808561369, 0.16995464286706652, 0.09903665963554054, 0.09141255392345826, 0.11199446095493293, 0.11457479035026863, 0.08790357700320905, 0.10219576631844152, 0.16128069183049376, 0.17720096179395473, 0.17760802976577839, 0.1678187027229573, 0.17535302947603992, 0.17545065280961047, 0.16433747190131598, 0.1548939900850269, 0.16172675018085192, 0.1546734442011024, 0.025267270228988337, 0.05726683621226114, 0.08118635552986075, 0.06649841163874204, 0.04276546485033739, 0.05489551912883395, 0.05401086844846248, 0.03705534195428539, 0.05022786172855909]}, "mutation_prompt": null}
{"id": "c4b20ced-ae3c-41f7-8253-52dda69aa4ae", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "9d3e5bb6-5096-4db4-8b4d-9c6343a79fe8", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "0ff84a0e-9e52-4d67-90a5-809a9495082c", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        def opposition_based(candidate):\n            return 2.0 * np.mean(candidate) - candidate\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    candidate_opposite = opposition_based(candidate)\n                    if func(candidate_opposite) < func(candidate):\n                        new_population[i] = candidate_opposite\n                    else:\n                        new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Improving the diversity of candidate solutions by incorporating opposition-based learning to enhance exploration.", "configspace": "", "generation": 85, "fitness": 0.08778743010767974, "feedback": "The algorithm ImprovedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.19.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.17128322586432188, 0.06643331994683688, 0.09482016869335874, 0.07230163940937784, 0.09593089723473236, 0.11280396629429379, 0.15422746067343274, 0.07632038387716233, 0.09768283178039472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031135776366004175, 0.10097020337962781, 9.999999999998899e-05, 9.999999999998899e-05, 0.019779187329822534, 0.01467079663371329, 0.007472694399048629, 0.033213224787090656, 0.032636531497736154, 0.019420373781610434, 0.05752056141565176, 0.026401215276040446, 0.007857863553229594, 0.03141233337273586, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 0.020585406760531222, 9.999999999998899e-05, 0.01669380225318362, 0.9921666512799838, 0.985397057835374, 0.9814563025756796, 0.9811607847411917, 0.9946056013613799, 0.9577672779966758, 0.9768456444013738, 0.9785320685808335, 0.9887304685442936, 0.027006661911426644, 9.999999999998899e-05, 0.05127894714537484, 0.015562862438895708, 0.00031549654350837564, 9.999999999998899e-05, 0.014594021046632433, 0.036053958917727336, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.03601355052715938, 0.046518836147024234, 0.02058659166675647, 0.14853965454518148, 0.029080354916398155, 0.05731350525576295, 0.06928789928329293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02794667682626273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06662842345856312, 9.999999999998899e-05, 9.999999999998899e-05, 0.018730277163315656, 9.999999999998899e-05, 9.999999999998899e-05, 0.1733652722049288, 0.12648509199648184, 0.24790548927874612, 0.19369902797932936, 0.11335504308390842, 0.10755841603758576, 0.1240568991094797, 0.13616059650426982, 0.12237401594798025, 0.01622339956075336, 0.006190021422436853, 0.030487702675029538, 0.0321730870975534, 9.999999999998899e-05, 0.01759993274736349, 0.021864493480910685, 9.999999999998899e-05, 0.0267656688986897, 0.09339990510779994, 0.06735693451091307, 0.10037610274090092, 0.09855305120349966, 0.06581597144687368, 0.09765812593528367, 0.1090684845275337, 0.06329610224836446, 0.07726393575557644, 0.13303958664514648, 0.10353870229303708, 0.1193360973570119, 0.12045025443049184, 0.11400989399479455, 0.11026327259801294, 0.11420206329748472, 0.1001363042967901, 0.11852386173393659, 0.0702613404284459, 0.06475471432714763, 0.05661751270394999, 0.06219917604462155, 0.07332617688909049, 0.06905141827291061, 0.05648699256316181, 0.049577373436184624, 0.05341825593024463, 0.10198806373740499, 0.1131283756128223, 0.14539070204137716, 0.10412335827926833, 0.06747178230817008, 0.1410379121401898, 0.12245976138762271, 0.07530829758001123, 0.1391782836023393, 0.12756110108293628, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14364870362022064, 0.14427991021548892, 9.999999999998899e-05, 9.999999999998899e-05, 0.08334762630255754, 0.056143274529988574, 0.06834330981822911, 0.11412172716581481, 0.1207914665021157, 0.08685754157764658, 0.09854012283364733, 0.0715461919065068, 0.07123377559090482, 0.09279956053889671, 0.03967402848431323, 0.08665520993336684, 0.0443616528852635, 0.021600351495484005, 0.07293957550965302, 0.02484423084223597, 0.02796560529841352, 0.08399991312478827, 0.12378104264307899, 0.12870670035604403, 0.1647186110750617, 0.12509623605509046, 0.11402400224796383, 0.12699290433713029, 0.13565574891053878, 0.11413161241891923, 0.15749435847516668, 0.0033836862974170323, 0.012204213037243616, 0.04339167021252088, 0.025206331607689036, 0.0058749879062220955, 0.03400832219320382, 0.028404749794500805, 0.024809184460171663, 0.0158874123956515]}, "mutation_prompt": null}
{"id": "50f9eb19-4cf2-4668-877d-099c48fe23f2", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def adjust_population_size(self, fitness):\n        diversity = np.std(fitness)\n        if diversity < 0.1:\n            self.pop_size = min(20, self.pop_size + 5)\n        elif diversity > 0.5:\n            self.pop_size = max(5, self.pop_size - 3)\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            self.adjust_population_size(fitness)\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Introducing a dynamic population size adjustment mechanism based on fitness diversity to balance exploration and exploitation.", "configspace": "", "generation": 86, "fitness": 0.22788037598392907, "feedback": "The algorithm EnhancedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7039260045979607, 0.7178009577526354, 0.6969865210832993, 0.6368455848454861, 0.7186995732579295, 0.7290798195960182, 0.7348646360623459, 0.6910390718920436, 0.7031223178853421, 0.29160583998507295, 0.26544807853608277, 0.2679568185013783, 0.3528556507071101, 0.35958976861222813, 0.19735012194752377, 0.05502340022368901, 0.20236021396677284, 0.39566669081995676, 0.07906283804203229, 0.10990035828398215, 0.0921103724653054, 0.11056452771330405, 0.0881285088743261, 0.11328309561398309, 0.08287368398432904, 0.09781699211880313, 0.08814266670541437, 0.08287393061220827, 0.07053178564497153, 0.0929584258780467, 0.08907991085861544, 0.07651033154197007, 0.0637713474633127, 0.07965847852072638, 0.08271228090264138, 0.08922961478301095, 0.9925907120516618, 0.9903051866595013, 0.9953096627791502, 0.9855662527844465, 0.9886609679113318, 0.987431617554058, 0.9764026737497731, 0.9958774100756209, 0.9865535717758204, 0.2729777325585556, 0.240660518540046, 0.37178980231239533, 0.25293136273589745, 0.22510226454019344, 0.27659925509219496, 0.17054051177479068, 0.1911439917387222, 0.29475875954151065, 0.25223490364147605, 0.2907485223325298, 0.2831496027454946, 0.3542307446252374, 0.6202637451353974, 0.7013715209588824, 0.23573074115057602, 0.29620138870734336, 0.3341658103029267, 0.20460259065141828, 0.09909440827059735, 0.1885891995573692, 0.09686143703269534, 0.052667645935631446, 0.14001439951602557, 0.10620621953735132, 0.044105838312849865, 0.19483002493334112, 0.12763930557242142, 0.11305481887955571, 0.15613634116329778, 0.12247981632868943, 0.10718404369956902, 0.060823933676628084, 0.11153554590129133, 0.15223273298415696, 0.20266265859629506, 0.014358603832554606, 0.03297963828636474, 0.03583136789571906, 0.013078974129360321, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025211741940145416, 0.005590345634441274, 0.05009699438400561, 0.18118336868779483, 0.12749228158251824, 0.09420090522078484, 0.08082210278498003, 0.03683041987757474, 0.07015153751513714, 0.23166206324088945, 0.09201935832691721, 0.08793535528398311, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016766092022305057, 0.0019245492636571493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22355482646293512, 0.2555171528006014, 0.2817424777740326, 0.24969205266040362, 0.21933014864630884, 0.23772805648379958, 0.20555023996190736, 0.2123273470836874, 0.18529937550824638, 0.5235734865560429, 0.48581446785757276, 0.513955538636153, 0.41133454171342587, 0.45521941913455255, 0.42049260419123313, 0.5003137153933712, 0.48731748022357335, 0.5300003193584018, 0.08906496055201218, 0.08511889407363449, 0.07204346489161995, 0.08509196859864354, 0.0810278725640945, 0.06533274686117951, 0.057331032795459036, 0.06825239685308793, 0.0943503104093445, 0.135592463178125, 0.11608034407220746, 0.1738748369635914, 0.15794278817805518, 0.13474699781675759, 0.11775984186625499, 0.11797032675169172, 0.11053267969965486, 0.13448818953660724, 0.16452042834254277, 0.18415268944004493, 0.2223635123176061, 0.22706723087926772, 0.1992687875267718, 0.17480233661411115, 0.19412146859098045, 0.22504805800174676, 0.21613753192337404, 0.20462243059015273, 0.12217135718252647, 0.12458083911691686, 0.16144562386721684, 0.1426793795314577, 0.1193602592617905, 0.12196070026975181, 0.1327816553953346, 0.13699067445364377, 0.18018646757251722, 0.1825323738068595, 0.16978992019389116, 0.1759213451706828, 0.1723585708593799, 0.17119740485717794, 0.1960355416482028, 0.18118978415106246, 0.16152371656294584, 0.17537929724373624, 0.18219725221894312, 0.18140464523510524, 0.20177239959859317, 0.19223131052412967, 0.19108119931622902, 0.18720309401563695, 0.19151800040637734, 0.1762080845428411, 0.16517199077721723, 0.16764633599201695, 0.31957546706111994, 0.41384998499080516, 0.16527112529012045, 0.2606840125884593, 0.16830918365172642, 0.15487075802334216, 0.15257851396339173, 0.18613564648718695, 0.1761527156862418, 0.23634154330159196, 0.4317740609684618, 0.20271580384070065, 0.14176526645846477, 0.22349211192683205, 0.20340065781445493, 0.23062689824598415, 0.1684801546440312, 0.1763741484722121, 0.17517170831055806, 0.17636575271538446, 0.178336129284965, 0.17963175533391096, 0.18040041030925458, 0.19619069063759675, 0.16379950747426208, 0.0893194764274935, 0.06815594022907245, 0.07473730062470807, 0.07834103025544703, 0.06850451168750915, 0.0820043448515706, 0.07431320293626564, 0.07253108892178484, 0.05244475501375401]}, "mutation_prompt": null}
{"id": "8c9e2eec-7bfc-4f6c-8e96-2a9dbaabeb27", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def levy_flight(self, dim):\n        beta = 1.5\n        sigma = (math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        levy = np.random.normal(0, sigma, dim)\n        return levy\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            levy = self.levy_flight(self.dim)\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1]) + levy\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            levy = self.levy_flight(self.dim)\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * levy\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Augmenting the search diversity by introducing Levy flights for enhanced exploration capabilities.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'math' is not defined\").", "error": "NameError(\"name 'math' is not defined\")", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {}, "mutation_prompt": null}
{"id": "d004e5d8-adb3-4b2d-b71f-c09198f2fc47", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "2720059e-3486-4db6-81eb-6c7093d12b1e", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "7e6d66ba-ee2d-46aa-bbb9-29e6922cbebe", "solution": "import numpy as np\n\nclass EnhancedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def tournament_selection(population, fitness, target_idx):\n            candidates_idx = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 2, replace=False)\n            if fitness[candidates_idx[0]] < fitness[candidates_idx[1]]:\n                return population[candidates_idx[0]]\n            else:\n                return population[candidates_idx[1]]\n\n        def de_mutate(population, fitness, target_idx):\n            candidates = [tournament_selection(population, fitness, target_idx) for _ in range(3)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, fitness, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "EnhancedHDESA", "description": "Improving the selection mechanism by incorporating a tournament selection strategy to enhance diversity and convergence.", "configspace": "", "generation": 90, "fitness": 0.30257146420930936, "feedback": "The algorithm EnhancedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7976410127360105, 0.7807117759506783, 0.8033973400283883, 0.792151201683789, 0.7551136410673907, 0.7522985436804965, 0.7896258037522017, 0.8049191500320962, 0.7841485356539841, 0.35745451445135346, 0.297561540063246, 0.36421980423361344, 0.45806169234970495, 0.322749300902329, 0.4027240039127381, 0.35795508574715007, 0.5229659288895778, 0.5272206490574762, 0.10568304489880742, 0.09087372630458246, 0.09126588282574066, 0.1025714882421409, 0.10753510014843892, 0.10729563515417906, 0.11021188732358678, 0.1067546277969208, 0.11154659394180266, 0.10229337332018729, 0.10983943007489816, 0.09062144396366734, 0.09074352522859896, 0.09118904174067122, 0.1031803037449689, 0.09538374315648457, 0.08454732579664925, 0.09268014225814736, 0.9784280504544897, 0.9848159604591, 0.9819326327506878, 0.9783587505460558, 0.9847713452252194, 0.9748899350360328, 0.9787707451119022, 0.9809933435469788, 0.9724074215858486, 0.47228184771671544, 0.4194433658900599, 0.49836416522865445, 0.4692441947506901, 0.4412590437415357, 0.43011051346156004, 0.4234553311115825, 0.33842499075026966, 0.46484462879333577, 0.7560688924283274, 0.372402081381239, 0.578665995570387, 0.5152592288726141, 0.6111180264909171, 0.7188287286877415, 0.5948510966516684, 0.47232548355361137, 0.4836211425205508, 0.1959877534891209, 0.09287518640138137, 0.2763296038971117, 0.11456395688008869, 0.12773987659929842, 0.16070120808937916, 0.16502017085785736, 0.12222547339777357, 0.16660512049805076, 0.1625670379199059, 0.14634006253073584, 0.135722468983263, 0.17605073464671572, 0.09868660410415253, 0.13808722669776885, 0.17892957934339393, 0.22224423144309946, 0.16255657718331862, 0.37043484106393243, 0.3332685246960545, 0.3628262218713798, 0.27047451915086684, 0.23808628149246214, 0.3599895157752706, 0.28069564697786686, 0.3568161454498837, 0.3539074857739348, 0.40845644390409774, 0.39455628233683915, 0.5331445589457227, 0.49424897770517917, 0.4518875442189765, 0.5012137378523194, 0.4730739589939974, 0.43120045714516353, 0.38380097727276696, 0.012844549866436128, 9.999999999998899e-05, 0.016192907175306526, 0.08609416254428548, 0.04449778019452211, 0.06568177395956887, 9.999999999998899e-05, 9.999999999998899e-05, 0.014590856090627713, 0.3260999948290674, 0.3536054539512137, 0.30839245714377395, 0.37430113275542476, 0.35015068973153274, 0.3144761490506862, 0.3350167290559468, 0.31950786711370416, 0.3246629577700937, 0.6361863734579949, 0.6219412713924006, 0.6246947938775851, 0.6285993868065689, 0.5465458756265162, 0.6284246808824248, 0.6227114938434459, 0.6128961699358979, 0.6751182793400836, 0.08198194738597542, 0.07349120460667835, 0.09405272065328552, 0.08400236870284494, 0.1169669551686564, 0.07663564768875131, 0.08156550734051249, 0.09580992684514111, 0.08977627613019612, 0.12726141369574484, 0.1272651983957419, 0.14766815073128436, 0.11570091569682395, 0.15736676538259142, 0.13279347744295322, 0.16207990877698053, 0.1274571809224141, 0.1464773948892113, 0.22059537100917392, 0.24302176977792023, 0.22971254724393653, 0.22745776958081076, 0.24568564750857114, 0.27095092371926877, 0.2524499476461971, 0.23054910527410744, 0.21620456112060016, 0.1739083323851146, 0.17087371795447692, 0.15153570486007284, 0.18818021240128568, 0.1566056070494415, 0.18626418789806887, 0.22557351874224663, 0.20495547226686117, 0.18147348378015693, 0.17898059906439467, 0.1941307539040179, 0.21174660459130856, 0.17510100542325469, 0.17643433843670808, 0.19178314065301483, 0.1641490464743034, 0.1844592622570287, 0.21139463832020366, 0.18090820963460474, 0.19703571698413325, 0.19553396632202635, 0.18249052071757643, 0.17804578514571967, 0.2000598625446406, 0.19062080559161376, 0.17949046431947424, 0.18454256826666482, 0.16572902336949336, 0.18306362802535237, 0.2375090830804093, 0.17642196612911232, 0.37683507696739105, 0.28025898324191767, 0.4764347649777494, 0.3056844137467001, 0.2776070940630029, 0.18983347800998462, 0.3245909013998668, 0.4886066963637684, 0.16982978133722793, 0.33890323788781285, 0.17428058923172607, 0.19502949162130157, 0.2133539123562116, 0.26288075652134923, 0.17915760107458478, 0.1857605869722675, 0.183367003810172, 0.1880894516772489, 0.17557642495804993, 0.1934414706544776, 0.18144640122631928, 0.17951955773762363, 0.17989721257001634, 0.07355613288001661, 0.07809382155236977, 0.07126135735216399, 0.06128342483848215, 0.07346896626160981, 0.07577480525232327, 0.07352665706739159, 0.07428386317321078, 0.07389896008262908]}, "mutation_prompt": null}
{"id": "6cc2426a-8d0f-4ae5-a354-24539e5209e2", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "HybridDESA", "description": "Incorporating a hybrid strategy by combining Differential Evolution with Simulated Annealing for enhanced exploration-exploitation balance.", "configspace": "", "generation": 91, "fitness": 0.3067158634603232, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "78527f36-7111-4e52-8fd3-89189a7d1051", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "e6006b8c-490d-49cb-88f4-ee57d1c1ac86", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            # Levy flight mutation\n            levy_vector = np.random.standard_cauchy(self.dim)\n            donor_vector = population[target_idx] + self.f * levy_vector\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the search diversity by introducing a novel mutation scheme based on Levy flights.", "configspace": "", "generation": 93, "fitness": 0.19433057923061842, "feedback": "The algorithm ImprovedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.38830300765339776, 0.37229427430517725, 0.386590194742254, 0.3636705993013537, 0.37308333803550153, 0.40149110248582465, 0.36789014237070894, 0.3635723184165123, 0.41093503307091706, 0.0051682488720840025, 0.026496887673531644, 0.008375066746894144, 0.005241119608426881, 0.006410569094859375, 0.018281125464540526, 0.023330227868200937, 0.027473035326731066, 0.0019571663301085618, 0.10591450769163546, 0.09381704916031885, 0.09289998185790715, 0.09446311143542074, 0.09652754097894944, 0.10801951005268506, 0.10698393132185158, 0.12279144008395071, 0.09952558079606444, 0.10343159719975847, 0.08359689600626552, 0.08394247774109642, 0.0916373061253235, 0.09567836114860873, 0.10005974473253643, 0.08448516082160218, 0.08644119060834676, 0.09111877390420453, 0.973781470966132, 0.9738042137862638, 0.9776103350427476, 0.9923162497307229, 0.9803966819207308, 0.9868834663183206, 0.9788515642925713, 0.9785134062649594, 0.9855621540992694, 0.21348768952610775, 0.21477937012518955, 0.21285828943861618, 0.19914376337587614, 0.22983862794838883, 0.19891286888933668, 0.20064545819826485, 0.1965483434243741, 0.1924358822928347, 0.21659238934841252, 0.23793167583698227, 0.22598749258327266, 0.28887812926308953, 0.24956964288381467, 0.25410726268641115, 0.2096855078900518, 0.22755858806165707, 0.24019771539723922, 0.13488297705924857, 0.1725096735646252, 0.14524799150832313, 0.12385171826027086, 0.12235796067885751, 0.1473880245921917, 0.13447168310596902, 0.13018074981781613, 0.12927614161806011, 0.12056029878909325, 0.12289727701434183, 0.1533141787460861, 0.13836649617216845, 0.132245380667929, 0.1366007804783712, 0.12413258134089988, 0.1251722726015072, 0.13591949307183437, 9.999999999998899e-05, 9.999999999998899e-05, 0.002808727718389137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850259825732573, 0.04525552830594037, 0.03903175031707817, 0.06592985348787117, 0.07363131040925908, 0.04412205574729777, 0.059113974523778645, 0.04553870258359438, 0.07441947436108987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08401535620988887, 0.06460621529539057, 0.05822383669443898, 0.08365801343850965, 0.07381210836858387, 0.07107222934803303, 0.06931638929777195, 0.06260469711179317, 0.06964615820607145, 0.34159747755567693, 0.3713258103668695, 0.37310309182918167, 0.3406471964883456, 0.33871674600778856, 0.34307555936609246, 0.35400619179949055, 0.3381114181037791, 0.3539548429691697, 0.09340694785407089, 0.11659566740588778, 0.10326414423703101, 0.07796172078272434, 0.07329092965978312, 0.0897292124028134, 0.10149558619085342, 0.08347018438190645, 0.09343561445236648, 0.17361574579569627, 0.21089366564752843, 0.16654778605084253, 0.1993330155278169, 0.24207287544137845, 0.21615176928802637, 0.18406523636851435, 0.15361848197124905, 0.1751014436185815, 0.21474502447211952, 0.22633544866094013, 0.2056155772724112, 0.21841446963667022, 0.2412781868537418, 0.2360513805610902, 0.2452081151657619, 0.23312982489201484, 0.23119206615220644, 0.16680094263881706, 0.16441725066876245, 0.17989802944743427, 0.17368881817132353, 0.17429571950133793, 0.15895529819889087, 0.17260341932707324, 0.17321837553482533, 0.16232314578282825, 0.19968768992948716, 0.18873054319523164, 0.18928621427319348, 0.1856932955515348, 0.18553259556678403, 0.18732543684796898, 0.1860395262188268, 0.18571290144484698, 0.19028710181451702, 0.1923529422897755, 0.19628073634890608, 0.19309771004344878, 0.1782870730384224, 0.20160117112498943, 0.19547174081028518, 0.1906986037492201, 0.20455405450247222, 0.18726946660408028, 0.33155209260509866, 0.3903000152780379, 0.47276522530100007, 0.46814597715944894, 0.2958765855455273, 0.42071698951528014, 0.1889972426674802, 0.17322603566114958, 0.17311896685343386, 0.3444215376761941, 0.2316062400132899, 0.33989715915336416, 0.23673510410195575, 0.34612469141558455, 0.20479289545530666, 0.243005454696828, 0.1763409414250009, 0.20246291239699332, 0.17609518834836257, 0.17717430980163795, 0.18285796411619482, 0.18077712704719218, 0.1787059741449586, 0.179570709540679, 0.18909700017239128, 0.16945467737406106, 0.19307599929528252, 0.07339979903635485, 0.08115969801747125, 0.07045681130678694, 0.0766492773349835, 0.08333938535054586, 0.0699825236272571, 0.07419021954441196, 0.06908403701239219, 0.08041957057104987]}, "mutation_prompt": null}
{"id": "61e43dff-f1b8-45b6-ae7b-3bb1fcd04838", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "e86283e6-4d25-4156-9be5-92f456f27f24", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
{"id": "189b45de-35c5-44a1-8663-55c049e20831", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            # Introducing Levy flight for enhanced exploration\n            levy = np.random.standard_cauchy(self.dim)\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1]) + 0.01 * levy\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            # Introducing Levy flight for enhanced exploration\n            levy = np.random.standard_cauchy(self.dim)\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * levy\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Introducing Levy flight for enhanced exploration in the mutation process.", "configspace": "", "generation": 96, "fitness": 0.24773438573412088, "feedback": "The algorithm ImprovedHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.5732509065954423, 0.5973421026818901, 0.6128493303771497, 0.5735178930826982, 0.588862907748211, 0.5905446837724238, 0.5880843645921208, 0.5965047502353505, 0.6037667257503097, 0.18106534313943434, 0.1832671991148569, 0.1745941163702449, 0.18945679241211788, 0.16921541690101494, 0.14653990753917367, 0.21091505353139983, 0.14364883300784548, 0.1722451442850239, 0.1029385513751635, 0.11124914223911764, 0.08751809310043568, 0.1130565955426559, 0.10036113064266083, 0.09474306390133425, 0.10662186675655139, 0.0868417868432716, 0.10042312192248615, 0.09070989785433081, 0.10047147134412449, 0.09579368145242151, 0.09307238996972234, 0.08813434988807511, 0.09100771012499065, 0.09620831876004743, 0.09927288106317589, 0.09095707553825905, 0.9925184827016464, 0.9946014086040498, 0.9889721095574119, 0.9916011765195075, 0.9872001189466977, 0.9873174009892309, 0.9914553143787355, 0.9887576184488992, 0.9747389375595618, 0.3524173305962601, 0.34722130927382744, 0.3351748738396806, 0.3386761374447036, 0.3570027801331246, 0.36016012636585615, 0.2951281173222592, 0.335772105255694, 0.35273855693935074, 0.529675905474226, 0.4580294311232028, 0.3330684650644221, 0.8140819233458423, 0.6783387248713966, 0.620931928851364, 0.5232690693660393, 0.48215156942391746, 0.6842221708492993, 0.1393341081074968, 0.17814416560088353, 0.18807665421646103, 0.1924516930280461, 0.14738159445411092, 0.14891228080060082, 0.1256144859321825, 0.1533103120166155, 0.19458398785408704, 0.1674575564365114, 0.1444686069068548, 0.1785840224227997, 0.14211559122881678, 0.1421290839096182, 0.14037638421271914, 0.17659332728281074, 0.13447482808661648, 0.16009299553605327, 0.08192399640639891, 0.07308998269324474, 0.07558879107605976, 0.060208450446620376, 0.08238358114119915, 0.08933125687295074, 0.1017858861121369, 0.10033742478581553, 0.13721697982608616, 0.12903907938067316, 0.15441416750775483, 0.17643853519360764, 0.11032623361812044, 0.10255530336852259, 0.12026763751085545, 0.1426273452090583, 0.14884556626880807, 0.134610500999935, 0.01594790865868123, 9.999999999998899e-05, 0.005784389782788613, 0.012139461647407535, 0.033677686321780476, 0.00978578216110837, 9.999999999998899e-05, 0.005947624972261978, 0.0018444985723740093, 0.16098263844961425, 0.16297538273082335, 0.19387932870706392, 0.16896512432994715, 0.1717765098512558, 0.1730503012263196, 0.17585908442744935, 0.16948911541942469, 0.16124636770614176, 0.46467378820567384, 0.4704434840535514, 0.46578561357865134, 0.48650590852620146, 0.46686308276652, 0.49332557307529945, 0.4605877019653766, 0.4696174646808259, 0.476533972554014, 0.09866025398664169, 0.10283039939364369, 0.07789233864842715, 0.07822337691272441, 0.0834127793074596, 0.09888064512811401, 0.08416374705436425, 0.09405169121969936, 0.10978073926456478, 0.1327940003890038, 0.12380121319153237, 0.12905852863048517, 0.11949588631765595, 0.12571132960840348, 0.13739037978945345, 0.1337258795076094, 0.14201770213745857, 0.14984749210459813, 0.26197239928178184, 0.23942658550298024, 0.24128972390291303, 0.24677232195511167, 0.24879980645221478, 0.23467273196974114, 0.23599468204732688, 0.24343256067215557, 0.20730753245822076, 0.18534274595005196, 0.18267908709213032, 0.18899033354720673, 0.19728441053211887, 0.17613757213586556, 0.20006014862211086, 0.18227746530801636, 0.17992245628350922, 0.19693675981290582, 0.21762681094724923, 0.17827171013976317, 0.19466501997236962, 0.20633236741941097, 0.19473250630158245, 0.195346429990922, 0.20591751384054957, 0.17706168544319045, 0.2105725042417863, 0.20196455034945793, 0.19241880200719164, 0.1927846458683995, 0.182305407399879, 0.2025437859103313, 0.1876413372973471, 0.20330720520928414, 0.19372179051134986, 0.2005167328702928, 0.28517756477304335, 0.34035704662972666, 0.3361341631052086, 0.33749294882656855, 0.17998716267241577, 0.27577480701074564, 0.34118524297132513, 0.2537127780858678, 0.165267988078037, 0.34121358319195916, 0.2870193906710624, 0.4210486398655221, 0.2691535107033991, 0.3393195011782163, 0.438826649083068, 0.3136293530618893, 0.20509333083969628, 0.19369657277946561, 0.17886968686794358, 0.16622575524887873, 0.16975794086792106, 0.17068648204315418, 0.18025266926699113, 0.18745041368147708, 0.16619873354039227, 0.17947710132014238, 0.18661380071358957, 0.0749677270832515, 0.07499825301091878, 0.08108896256785192, 0.07671457046516494, 0.08190325576490742, 0.08351290929676092, 0.06934285554214237, 0.07881606398192487, 0.07763550841749656]}, "mutation_prompt": null}
{"id": "bb627c9d-9bbd-4c42-9d2b-00d3e96f587b", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n        self.inertia_weight = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        def pso_mutate(target, best):\n            r1 = np.random.rand(self.dim)\n            r2 = np.random.rand(self.dim)\n            velocity = self.inertia_weight * velocity + self.c1 * r1 * (best - target) + self.c2 * r2 * (best - target)\n            return target + velocity\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        velocity = np.zeros((self.pop_size, self.dim))\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = pso_mutate(population[i], best_solution)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Introducing a novel adaptive mutation strategy based on particle swarm optimization to enhance exploration and exploitation in the optimization process.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'de_mutate' is not defined\").", "error": "NameError(\"name 'de_mutate' is not defined\")", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {}, "mutation_prompt": null}
{"id": "4d745198-306d-4fff-b6fe-114bd0da0445", "solution": "import numpy as np\n\nclass LevyHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def levy_mutate(self, population, target_idx):\n        levy_vector = np.random.standard_cauchy(self.dim)\n        candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 2, replace=False)]\n        self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n        self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n        donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1]) + levy_vector\n        for i in range(self.dim):\n            if np.random.rand() > self.cr:\n                donor_vector[i] = population[target_idx][i]\n        return donor_vector\n\n    def __call__(self, func):\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = self.levy_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "LevyHDESA", "description": "Improving diversity by introducing a new mutation approach based on Levy flights for exploration in the search space.", "configspace": "", "generation": 98, "fitness": 0.14577333607855517, "feedback": "The algorithm LevyHDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.2723149920659367, 0.2641380410448412, 0.24292800263284064, 0.26787651838752935, 0.25288802046557435, 0.2777614684935764, 0.25775671326950556, 0.2739433643022271, 0.2732585352509327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08434969499082257, 0.06893424436652973, 0.07358941142015574, 0.07130657947312324, 0.077714495180218, 0.07613962211490122, 0.06904242503383462, 0.07165010828373886, 0.06884275990339961, 0.05880054701310944, 0.09985321388808022, 0.05221131187407313, 0.05805563078519227, 0.06096242698952903, 0.06767250755451792, 0.06191683520287572, 0.05192398884175509, 0.05875821386166391, 0.9898592955593556, 0.9943650217702228, 0.9782649864180942, 0.9900693986469189, 0.9889662307866538, 0.9852436001331982, 0.9886545285591033, 0.9935096624484432, 0.9896452027687861, 0.13241637674470552, 0.11505731042061229, 0.11708721739465167, 0.10440683098850256, 0.10862047230218941, 0.12090326338012003, 0.13368975299242936, 0.1333079742798573, 0.11184239553804742, 0.1652067289933089, 0.15808244381023362, 0.16580944990940794, 0.185830868093261, 0.18957871695706874, 0.15246126684736372, 0.1597378935351127, 0.15559281951205262, 0.15655373465999933, 0.04542761878435375, 0.07195999059975966, 0.060775693277846266, 0.03568560121330133, 0.05440466057892879, 0.05614058039146308, 0.04934315695750391, 0.07193939586575016, 0.05157606103198009, 0.07295065029645975, 0.06446708337566831, 0.04171953857511579, 0.06460537131372834, 0.015298000953917312, 0.047111760499429556, 0.06974389180127472, 0.05771989729455451, 0.06415256322075857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0053346054317433556, 0.0015403408133828345, 9.999999999998899e-05, 0.030997131054047222, 9.999999999998899e-05, 0.0006616379924722082, 0.005478848473957854, 0.0021618922473107816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01321952097006529, 0.022328449124699223, 0.007385562293704462, 0.0214712897466528, 0.0332736247366614, 0.019562811786141165, 0.02048627543679382, 0.00801919319372335, 0.02095414207063606, 0.2586578431974269, 0.2584427590268379, 0.2640958451595422, 0.2857775626378777, 0.2636312207425314, 0.2662013175043315, 0.29768796106105444, 0.2560321473671887, 0.2644273136962001, 0.07010623134617633, 0.06565402249297125, 0.0598385190564783, 0.058185915011440215, 0.06143893469095274, 0.0620683096537088, 0.06616125720335952, 0.07440454431556809, 0.07294292839700756, 0.1195586402008928, 0.11623402204768751, 0.11565171455174772, 0.13024519225940534, 0.125912884336991, 0.11391141357315615, 0.10578170460860059, 0.15351770925941144, 0.11561190816224332, 0.1884311366902438, 0.20126206412825431, 0.19097366446124686, 0.18522183096985123, 0.19907819977256946, 0.18473305939916995, 0.19040507233657067, 0.1998463655695134, 0.18394924527093648, 0.1214390241673644, 0.134996431717341, 0.1256759818141161, 0.14087673925685462, 0.1301833961399077, 0.13643894454458128, 0.1388253596902621, 0.1345685801178823, 0.14214520434874156, 0.1923933527500964, 0.1549126381367112, 0.16997915883781356, 0.16451624135000653, 0.17763692746959991, 0.15541337718728554, 0.17109746489401279, 0.16864067292198126, 0.15473893282858064, 0.1657074339967668, 0.1662012788702406, 0.16526493136976295, 0.16273284176530667, 0.16711156376465575, 0.16474125279127438, 0.17026446398670836, 0.15731475942319284, 0.15825365090127164, 0.18566172137317916, 0.1844581827957571, 0.1409979295427627, 0.16386014633537327, 0.19844649175542672, 0.1879539494861856, 0.1872302237343716, 0.16977457156957643, 0.1545304878683581, 0.1654106814025199, 0.18111351460080605, 0.1541199121695015, 0.14636265270730164, 0.15450424190909762, 0.1584236879645634, 0.23283501237834114, 0.14770931543080057, 0.17097957067173097, 0.17110735071279126, 0.15839157034850782, 0.1898777511005969, 0.18312760243013915, 0.16474830218814118, 0.16620290082185674, 0.16422864560475448, 0.1608314453382922, 0.16474107063874888, 0.07398819172509885, 0.06578919129017435, 0.060668269119401375, 0.06926750561024908, 0.05911480535003977, 0.061973742780518704, 0.06339778351802683, 0.053854094835571464, 0.06295705311392319]}, "mutation_prompt": null}
{"id": "06a3895e-68c0-47bf-9387-89cdcbc79501", "solution": "import numpy as np\n\nclass ImprovedHDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.cr = 0.9\n        self.f = 0.8\n        self.alpha = 0.9\n        self.sigma = 0.1\n        self.adaptive_param = 0.1  # Adaptive control parameter\n        self.learning_rate = 0.05  # Dynamic learning rate\n\n    def __call__(self, func):\n        def de_mutate(population, target_idx):\n            candidates = population[np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)]\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            donor_vector = population[target_idx] + (self.f + self.learning_rate) * (candidates[0] - candidates[1])\n            for i in range(self.dim):\n                if np.random.rand() > self.cr:\n                    donor_vector[i] = population[target_idx][i]\n            return donor_vector\n\n        def sa_mutation(candidate, best, t):\n            self.sigma = max(0.01, min(0.5, self.sigma + np.random.normal(0, self.adaptive_param)))  # Adaptive control\n            self.learning_rate = max(0.01, min(0.1, self.learning_rate + np.random.normal(0, self.adaptive_param)))  # Dynamic learning rate adjustment\n            return candidate + (self.sigma + self.learning_rate) * np.exp(-t * self.alpha) * np.random.normal(0, 1, self.dim)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        t = 0\n\n        while t < self.budget:\n            new_population = np.zeros_like(population)\n            for i in range(self.pop_size):\n                candidate = de_mutate(population, i)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[i]:\n                    new_population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < fitness[best_idx]:\n                        best_solution = candidate\n                        best_idx = i\n                else:\n                    new_population[i] = sa_mutation(population[i], best_solution, t)\n                t += 1\n\n            population = new_population\n\n        return best_solution", "name": "ImprovedHDESA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic learning rate for mutation and adaptive control of differential weight.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e1916024-1b6c-472d-a474-5e6795eac265", "metadata": {"aucs": [0.7956188036657412, 0.7885173354149777, 0.7801282412716706, 0.7700161996597086, 0.7840722796171324, 0.7977981769599569, 0.773992972626806, 0.7841528399688265, 0.8214197921515434, 0.5353186496955, 0.2654183616817023, 0.5605354205199535, 0.3515647073873439, 0.507803230024513, 0.514857032872863, 0.5834699596574828, 0.5762524352860343, 0.34222013857065614, 0.09971302900095413, 0.11273788224029979, 0.0936608532754204, 0.10661282700980024, 0.11417563239856354, 0.09895649161832876, 0.1086723966181351, 0.12322544832520066, 0.10716444383734602, 0.09843570751100483, 0.10170285707929394, 0.10228261370630387, 0.0964434069376986, 0.08645958474415871, 0.09935917966796182, 0.08979668004999053, 0.11008016890444983, 0.09974431336627787, 0.9930995406592996, 0.9920307889282947, 0.9765388887321731, 0.9720534203822896, 0.9830926565743969, 0.9808263630448668, 0.9845826453956393, 0.9853884463552617, 0.9867014745667783, 0.37333795421495053, 0.3633858219537669, 0.4053471625566809, 0.44342792580965606, 0.39686780006428357, 0.36422155405981593, 0.3864386623620045, 0.3519035077243938, 0.3220374370541158, 0.649345609520106, 0.4643737176577951, 0.6082227955166695, 0.699788675719895, 0.799370872018077, 0.6963754785925775, 0.6298342892576052, 0.5251559374583064, 0.4519042381187055, 0.1490156790668543, 0.1732351486553162, 0.19975583628410543, 0.1780422162245976, 0.07416829050870566, 0.16467968375857378, 0.16899380751445492, 0.14893407669782666, 0.17907171041349013, 0.27010460362098276, 0.14065748875697914, 0.19201256347677742, 0.1485591492531958, 0.14533831623834736, 0.19659179991515885, 0.20175732610323294, 0.1408902789544172, 0.1560745335064948, 0.34047446764881995, 0.3592316671967517, 0.3845776720866484, 0.3071448946794866, 0.27988481080683447, 0.27905802700916016, 0.29904097972778654, 0.36123864363333924, 0.2772840763109463, 0.29010597077625333, 0.38359920090857214, 0.3926950334404006, 0.3919033671841845, 0.36272432518047715, 0.3079023077740266, 0.4479975929569737, 0.43626912491485104, 0.45893205245871216, 0.0019510769599708766, 0.036263568060890816, 0.01631902069704505, 0.016174377210602886, 0.04847363068934463, 0.04210986316535659, 0.0011764866087223824, 0.004862946042349048, 0.014982359044960813, 0.32275246575570105, 0.3403102866941973, 0.33129038440448777, 0.3169882594812573, 0.3367672318442714, 0.3799421361789507, 0.3565334716799341, 0.33090872823763284, 0.2987916636924727, 0.634978564608734, 0.6784283686959987, 0.624941439115737, 0.6392280323660988, 0.6935519640071807, 0.6699714103041479, 0.6418793630469883, 0.7040060720457577, 0.663511572404589, 0.09624051652905541, 0.09345807385363347, 0.10114428333761372, 0.0917765659907851, 0.09899607126904397, 0.083164325490647, 0.09219701968691829, 0.07967570939536339, 0.08740974034814952, 0.14739455076450503, 0.14322428701063605, 0.14500600199467373, 0.14569170906958606, 0.12573923552967803, 0.14979619181424442, 0.13124435031311765, 0.13916665496102265, 0.1315687834757806, 0.24460295967966317, 0.27171203477220585, 0.24793906478526928, 0.24420951746637642, 0.2310362754236286, 0.25300852492781245, 0.23051207973549448, 0.2535872912402256, 0.24032519169247302, 0.1692697356446573, 0.18831247843553922, 0.17243200146949234, 0.1805829674534376, 0.17962034090337708, 0.17849689795619228, 0.18228427688740978, 0.16041840892038584, 0.18189206438307137, 0.19122929906768005, 0.2074207978812359, 0.18986862134227434, 0.17318496242942782, 0.20361575839355694, 0.2049140804944991, 0.18381210277494553, 0.18962210459693452, 0.18843736878602102, 0.19860031823515156, 0.1868915934136255, 0.19177489464018138, 0.20106738273377944, 0.20350700357615548, 0.2237751553414561, 0.20460727298652714, 0.18542835517076506, 0.19757206194218824, 0.18245659099556155, 0.18332438963693465, 0.3138963580812377, 0.46685262903629543, 0.1847702930100995, 0.3743363910968309, 0.24338567944399025, 0.3385236407436788, 0.15141471975245113, 0.25765506286830553, 0.41175469843051005, 0.23168004242563245, 0.2593335836003522, 0.1839789487001776, 0.2775132942855909, 0.24605914670894846, 0.3306605539932781, 0.31771688424374567, 0.17178983456456665, 0.18625635897829684, 0.177680303343435, 0.1984117987333982, 0.17228955006223912, 0.18588863034724534, 0.19457474609940673, 0.17823194517477992, 0.17880239898092642, 0.07959662711177118, 0.0808896182842973, 0.07542976941958002, 0.08310407765176187, 0.07796840890313395, 0.09849623726270307, 0.08336347016618006, 0.08330155071381162, 0.06769773385196676]}, "mutation_prompt": null}
