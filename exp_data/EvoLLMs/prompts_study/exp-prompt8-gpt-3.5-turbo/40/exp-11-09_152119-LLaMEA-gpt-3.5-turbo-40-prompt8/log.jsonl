{"id": "f565e5cc-d8a3-488d-8a46-f1ad1f6c7b43", "solution": "import numpy as np\n\nclass HybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n        return global_best_pos", "name": "HybridFPSO", "description": "Hybrid Firefly-Particle Swarm Optimization (Hybrid-FPSO) algorithm that combines the global exploration capability of firefly algorithm with the local exploitation ability of particle swarm optimization.", "configspace": "", "generation": 0, "fitness": 0.1988031474807075, "feedback": "The algorithm HybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6719746200922458, 0.6827845791234578, 0.7580059919516178, 0.7086889420840842, 0.5621056025384954, 0.6651912257078629, 0.6648438749264116, 0.6498265413230215, 0.5899046313855691, 0.09053640089160853, 9.999999999998899e-05, 0.006815729984789298, 0.006431712061752637, 0.010856459462585955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0531378190322741, 0.12753559192169983, 0.05007788127406043, 0.09789564874335466, 0.05929044274108386, 0.06277493064508366, 0.07069078185135169, 0.04484954119889828, 0.1311334518082482, 0.019075926103078955, 0.07078929060786521, 9.999999999998899e-05, 0.08658749257546805, 0.07478178164521998, 0.02230602558739725, 0.09328116253021401, 0.03540408108170068, 0.01627116200135259, 0.9854199599514609, 0.978828002626356, 0.9678209921923503, 0.7319908732119746, 0.8623950890972931, 0.9632925441510167, 0.9853350352699066, 0.7866812779053326, 0.9731472570609867, 0.44348055209356363, 0.3121722431747225, 0.34824019761294245, 0.3512573501659385, 0.2582788252377135, 0.2068607298787447, 0.27498143568567335, 0.2999891810024511, 0.22659207793248948, 0.13097436612064006, 0.11651924433004823, 0.061612355502011606, 0.06769854890046301, 0.10599218556522683, 0.029349430151052514, 0.09396854251906717, 0.11003030167023897, 0.1377985814813799, 0.17792140883330299, 0.16137351414359802, 0.1172447653183295, 0.24277788333085615, 0.15576918191007605, 0.08129039557521012, 0.2990645929092931, 0.18262845167179653, 0.1865768923662927, 0.1713947660778562, 0.21078341970182413, 0.0945898869869376, 0.18432823219714034, 0.19608297325575885, 0.11800933808356129, 0.19636011602695913, 0.24822898824511208, 0.03207552574792405, 9.999999999998899e-05, 0.045153508677496346, 9.999999999998899e-05, 0.03391984762090583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.091609986926666, 0.05192402731756407, 0.0235787687389567, 0.07123046584730441, 0.06466869642778861, 9.999999999998899e-05, 0.0007919000679906807, 0.09617708567105943, 0.02898922162125761, 0.04290348272288125, 9.999999999998899e-05, 0.12397451843376583, 0.18032781743751658, 0.055139782407881976, 0.17775182814760648, 0.1375932910112304, 0.12286580881192599, 0.10958054888580826, 0.006122641888272717, 0.049027643794258946, 0.22421961344240815, 0.09548029128193247, 0.10415929019418713, 0.1895132118943258, 0.0001218036509986753, 0.17558861217532395, 0.13594820449229994, 0.06809321491068443, 0.4913252345424124, 0.4872715021767594, 0.4652119109967139, 0.5044022926668541, 0.450862856932959, 0.5277798551540092, 0.4534741939269825, 0.5542035914147512, 0.4720905026265225, 0.024237403847073402, 0.053315668135010874, 9.999999999998899e-05, 0.057797014693672044, 0.04515155864499554, 0.0713439741165699, 0.09242163933672942, 0.05604525934431426, 0.08433009664359725, 0.20907744507633108, 0.24874934256656567, 0.11002939884086371, 0.15398356442238093, 0.19720077974991435, 0.18291606170713304, 0.16970647760829383, 0.13792853143342765, 0.19125958960587663, 0.12988157204373618, 0.1552797931351001, 0.14392990024243935, 0.1444145835562809, 0.17442595111891246, 0.136573105265969, 0.13770796374409, 0.22077154682912759, 0.12929590634742105, 0.0711425406212991, 0.10739345571495318, 0.10992788849594659, 0.07380026790993854, 0.1327128270231196, 0.0843135666873237, 0.0705174401998434, 0.2229818773719755, 0.06272375848388934, 0.17515888947066638, 0.18110755873946704, 0.16503229284927, 0.28126172665562144, 0.20757488005541136, 0.2148005179164083, 0.2119702801088339, 0.24338665700946283, 0.1961925254831226, 0.15880508873389731, 0.2119178631918237, 0.18217520602431803, 0.16055661024047785, 0.1736956178210558, 0.16927101599295968, 0.18209936501594315, 0.20206709135036827, 0.16783577053031729, 0.0903886353557597, 0.1895676268982026, 0.1527636545882458, 0.1718828922636778, 0.20158041050464293, 0.20160276771232588, 0.0994387724513659, 0.16657987451352163, 0.16091360921484577, 0.08204754846721773, 0.21218596013892133, 0.05056961673888127, 0.10049574959615437, 0.13991672487133577, 0.20606519737017692, 0.5549785182185487, 0.1644163812770878, 0.32002235726837425, 0.2510415106161187, 0.22367913777852044, 0.22654699854623572, 0.24139908028408785, 0.25028792187092597, 0.2561765286139994, 0.20389141872551186, 0.3000831483051828, 0.25466615688408456, 0.08276981654049764, 0.05092424582820476, 0.058376546904438165, 0.07752090419949798, 0.06421055068598269, 0.04899615872619556, 0.07653859927355755, 0.08882600651326356, 0.0762982296406961]}, "mutation_prompt": null}
{"id": "a563f3c5-da50-4b2c-9b3c-0e559e2ff3de", "solution": "import numpy as np\n\nclass HybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n        return global_best_pos", "name": "HybridFPSO", "description": "Hybrid Firefly-Particle Swarm Optimization (Hybrid-FPSO) algorithm that combines the global exploration capability of firefly algorithm with the local exploitation ability of particle swarm optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f565e5cc-d8a3-488d-8a46-f1ad1f6c7b43", "metadata": {"aucs": [0.6719746200922458, 0.6827845791234578, 0.7580059919516178, 0.7086889420840842, 0.5621056025384954, 0.6651912257078629, 0.6648438749264116, 0.6498265413230215, 0.5899046313855691, 0.09053640089160853, 9.999999999998899e-05, 0.006815729984789298, 0.006431712061752637, 0.010856459462585955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0531378190322741, 0.12753559192169983, 0.05007788127406043, 0.09789564874335466, 0.05929044274108386, 0.06277493064508366, 0.07069078185135169, 0.04484954119889828, 0.1311334518082482, 0.019075926103078955, 0.07078929060786521, 9.999999999998899e-05, 0.08658749257546805, 0.07478178164521998, 0.02230602558739725, 0.09328116253021401, 0.03540408108170068, 0.01627116200135259, 0.9854199599514609, 0.978828002626356, 0.9678209921923503, 0.7319908732119746, 0.8623950890972931, 0.9632925441510167, 0.9853350352699066, 0.7866812779053326, 0.9731472570609867, 0.44348055209356363, 0.3121722431747225, 0.34824019761294245, 0.3512573501659385, 0.2582788252377135, 0.2068607298787447, 0.27498143568567335, 0.2999891810024511, 0.22659207793248948, 0.13097436612064006, 0.11651924433004823, 0.061612355502011606, 0.06769854890046301, 0.10599218556522683, 0.029349430151052514, 0.09396854251906717, 0.11003030167023897, 0.1377985814813799, 0.17792140883330299, 0.16137351414359802, 0.1172447653183295, 0.24277788333085615, 0.15576918191007605, 0.08129039557521012, 0.2990645929092931, 0.18262845167179653, 0.1865768923662927, 0.1713947660778562, 0.21078341970182413, 0.0945898869869376, 0.18432823219714034, 0.19608297325575885, 0.11800933808356129, 0.19636011602695913, 0.24822898824511208, 0.03207552574792405, 9.999999999998899e-05, 0.045153508677496346, 9.999999999998899e-05, 0.03391984762090583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.091609986926666, 0.05192402731756407, 0.0235787687389567, 0.07123046584730441, 0.06466869642778861, 9.999999999998899e-05, 0.0007919000679906807, 0.09617708567105943, 0.02898922162125761, 0.04290348272288125, 9.999999999998899e-05, 0.12397451843376583, 0.18032781743751658, 0.055139782407881976, 0.17775182814760648, 0.1375932910112304, 0.12286580881192599, 0.10958054888580826, 0.006122641888272717, 0.049027643794258946, 0.22421961344240815, 0.09548029128193247, 0.10415929019418713, 0.1895132118943258, 0.0001218036509986753, 0.17558861217532395, 0.13594820449229994, 0.06809321491068443, 0.4913252345424124, 0.4872715021767594, 0.4652119109967139, 0.5044022926668541, 0.450862856932959, 0.5277798551540092, 0.4534741939269825, 0.5542035914147512, 0.4720905026265225, 0.024237403847073402, 0.053315668135010874, 9.999999999998899e-05, 0.057797014693672044, 0.04515155864499554, 0.0713439741165699, 0.09242163933672942, 0.05604525934431426, 0.08433009664359725, 0.20907744507633108, 0.24874934256656567, 0.11002939884086371, 0.15398356442238093, 0.19720077974991435, 0.18291606170713304, 0.16970647760829383, 0.13792853143342765, 0.19125958960587663, 0.12988157204373618, 0.1552797931351001, 0.14392990024243935, 0.1444145835562809, 0.17442595111891246, 0.136573105265969, 0.13770796374409, 0.22077154682912759, 0.12929590634742105, 0.0711425406212991, 0.10739345571495318, 0.10992788849594659, 0.07380026790993854, 0.1327128270231196, 0.0843135666873237, 0.0705174401998434, 0.2229818773719755, 0.06272375848388934, 0.17515888947066638, 0.18110755873946704, 0.16503229284927, 0.28126172665562144, 0.20757488005541136, 0.2148005179164083, 0.2119702801088339, 0.24338665700946283, 0.1961925254831226, 0.15880508873389731, 0.2119178631918237, 0.18217520602431803, 0.16055661024047785, 0.1736956178210558, 0.16927101599295968, 0.18209936501594315, 0.20206709135036827, 0.16783577053031729, 0.0903886353557597, 0.1895676268982026, 0.1527636545882458, 0.1718828922636778, 0.20158041050464293, 0.20160276771232588, 0.0994387724513659, 0.16657987451352163, 0.16091360921484577, 0.08204754846721773, 0.21218596013892133, 0.05056961673888127, 0.10049574959615437, 0.13991672487133577, 0.20606519737017692, 0.5549785182185487, 0.1644163812770878, 0.32002235726837425, 0.2510415106161187, 0.22367913777852044, 0.22654699854623572, 0.24139908028408785, 0.25028792187092597, 0.2561765286139994, 0.20389141872551186, 0.3000831483051828, 0.25466615688408456, 0.08276981654049764, 0.05092424582820476, 0.058376546904438165, 0.07752090419949798, 0.06421055068598269, 0.04899615872619556, 0.07653859927355755, 0.08882600651326356, 0.0762982296406961]}, "mutation_prompt": null}
{"id": "7917a8b1-6866-4740-80ef-278bc9af7f78", "solution": "import numpy as np\n\nclass HybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n        return global_best_pos", "name": "HybridFPSO", "description": "Hybrid Firefly-Particle Swarm Optimization (Hybrid-FPSO) algorithm that combines the global exploration capability of firefly algorithm with the local exploitation ability of particle swarm optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f565e5cc-d8a3-488d-8a46-f1ad1f6c7b43", "metadata": {"aucs": [0.6719746200922458, 0.6827845791234578, 0.7580059919516178, 0.7086889420840842, 0.5621056025384954, 0.6651912257078629, 0.6648438749264116, 0.6498265413230215, 0.5899046313855691, 0.09053640089160853, 9.999999999998899e-05, 0.006815729984789298, 0.006431712061752637, 0.010856459462585955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0531378190322741, 0.12753559192169983, 0.05007788127406043, 0.09789564874335466, 0.05929044274108386, 0.06277493064508366, 0.07069078185135169, 0.04484954119889828, 0.1311334518082482, 0.019075926103078955, 0.07078929060786521, 9.999999999998899e-05, 0.08658749257546805, 0.07478178164521998, 0.02230602558739725, 0.09328116253021401, 0.03540408108170068, 0.01627116200135259, 0.9854199599514609, 0.978828002626356, 0.9678209921923503, 0.7319908732119746, 0.8623950890972931, 0.9632925441510167, 0.9853350352699066, 0.7866812779053326, 0.9731472570609867, 0.44348055209356363, 0.3121722431747225, 0.34824019761294245, 0.3512573501659385, 0.2582788252377135, 0.2068607298787447, 0.27498143568567335, 0.2999891810024511, 0.22659207793248948, 0.13097436612064006, 0.11651924433004823, 0.061612355502011606, 0.06769854890046301, 0.10599218556522683, 0.029349430151052514, 0.09396854251906717, 0.11003030167023897, 0.1377985814813799, 0.17792140883330299, 0.16137351414359802, 0.1172447653183295, 0.24277788333085615, 0.15576918191007605, 0.08129039557521012, 0.2990645929092931, 0.18262845167179653, 0.1865768923662927, 0.1713947660778562, 0.21078341970182413, 0.0945898869869376, 0.18432823219714034, 0.19608297325575885, 0.11800933808356129, 0.19636011602695913, 0.24822898824511208, 0.03207552574792405, 9.999999999998899e-05, 0.045153508677496346, 9.999999999998899e-05, 0.03391984762090583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.091609986926666, 0.05192402731756407, 0.0235787687389567, 0.07123046584730441, 0.06466869642778861, 9.999999999998899e-05, 0.0007919000679906807, 0.09617708567105943, 0.02898922162125761, 0.04290348272288125, 9.999999999998899e-05, 0.12397451843376583, 0.18032781743751658, 0.055139782407881976, 0.17775182814760648, 0.1375932910112304, 0.12286580881192599, 0.10958054888580826, 0.006122641888272717, 0.049027643794258946, 0.22421961344240815, 0.09548029128193247, 0.10415929019418713, 0.1895132118943258, 0.0001218036509986753, 0.17558861217532395, 0.13594820449229994, 0.06809321491068443, 0.4913252345424124, 0.4872715021767594, 0.4652119109967139, 0.5044022926668541, 0.450862856932959, 0.5277798551540092, 0.4534741939269825, 0.5542035914147512, 0.4720905026265225, 0.024237403847073402, 0.053315668135010874, 9.999999999998899e-05, 0.057797014693672044, 0.04515155864499554, 0.0713439741165699, 0.09242163933672942, 0.05604525934431426, 0.08433009664359725, 0.20907744507633108, 0.24874934256656567, 0.11002939884086371, 0.15398356442238093, 0.19720077974991435, 0.18291606170713304, 0.16970647760829383, 0.13792853143342765, 0.19125958960587663, 0.12988157204373618, 0.1552797931351001, 0.14392990024243935, 0.1444145835562809, 0.17442595111891246, 0.136573105265969, 0.13770796374409, 0.22077154682912759, 0.12929590634742105, 0.0711425406212991, 0.10739345571495318, 0.10992788849594659, 0.07380026790993854, 0.1327128270231196, 0.0843135666873237, 0.0705174401998434, 0.2229818773719755, 0.06272375848388934, 0.17515888947066638, 0.18110755873946704, 0.16503229284927, 0.28126172665562144, 0.20757488005541136, 0.2148005179164083, 0.2119702801088339, 0.24338665700946283, 0.1961925254831226, 0.15880508873389731, 0.2119178631918237, 0.18217520602431803, 0.16055661024047785, 0.1736956178210558, 0.16927101599295968, 0.18209936501594315, 0.20206709135036827, 0.16783577053031729, 0.0903886353557597, 0.1895676268982026, 0.1527636545882458, 0.1718828922636778, 0.20158041050464293, 0.20160276771232588, 0.0994387724513659, 0.16657987451352163, 0.16091360921484577, 0.08204754846721773, 0.21218596013892133, 0.05056961673888127, 0.10049574959615437, 0.13991672487133577, 0.20606519737017692, 0.5549785182185487, 0.1644163812770878, 0.32002235726837425, 0.2510415106161187, 0.22367913777852044, 0.22654699854623572, 0.24139908028408785, 0.25028792187092597, 0.2561765286139994, 0.20389141872551186, 0.3000831483051828, 0.25466615688408456, 0.08276981654049764, 0.05092424582820476, 0.058376546904438165, 0.07752090419949798, 0.06421055068598269, 0.04899615872619556, 0.07653859927355755, 0.08882600651326356, 0.0762982296406961]}, "mutation_prompt": null}
{"id": "b5f3c477-4d78-4bfe-8835-af1fceeaa2fa", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos, inertia_weight):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + inertia_weight * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, inertia_weight):\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            inertia_weight = 0.4 + 0.6 * np.exp(-4 * _ / self.max_iter)\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    population[i] = firefly_move(population[i], global_best_pos, inertia_weight)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, inertia_weight)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n        return global_best_pos", "name": "DynamicInertiaHybridFPSO", "description": "Implement a dynamic inertia weight that adapts based on the fitness landscape to balance exploration and exploitation in the algorithm.", "configspace": "", "generation": 3, "fitness": 0.18597444680926642, "feedback": "The algorithm DynamicInertiaHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "f565e5cc-d8a3-488d-8a46-f1ad1f6c7b43", "metadata": {"aucs": [0.7507775111334155, 0.707937064316962, 0.7376621815217972, 0.7657576063197744, 0.6181303355209966, 0.7597482408055012, 0.7762247179130966, 0.7494691942255298, 0.7101399849262686, 0.16155280564466012, 0.04695836751947535, 0.018855942099712752, 0.04569700111700736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06338607712440336, 0.03271831717963947, 0.03260419233432699, 0.08822953975464698, 0.08774352380294281, 0.0347702714219702, 0.049140375486903975, 0.04504321547047896, 0.13759232816774825, 0.013114509071469715, 0.022991918216568985, 9.999999999998899e-05, 0.0856759524426075, 0.02360736403051855, 9.999999999998899e-05, 0.11812713661972118, 0.010959765152543932, 9.999999999998899e-05, 0.9424309433933009, 0.6756917938642754, 0.8137597563527075, 0.7446758078164797, 0.5154513747619851, 0.627819291354778, 0.9605872169498634, 0.5050527848424078, 0.8608025066485276, 0.4196299249701747, 0.28939733671701884, 0.18702943249946802, 0.4722417145593114, 0.3288640842778777, 0.3131268013289086, 0.427381877918244, 0.31791503882370453, 0.03268052529035781, 0.13098336121176946, 0.07405780439231857, 0.019947059247414134, 0.056200886681230466, 0.03985357902504205, 0.017208835238244347, 0.05004787106783393, 0.10627470965265506, 0.013495975547295203, 0.046249256998590726, 0.0005351451344326463, 0.12220203904469495, 0.3356913917750224, 0.1897523231785211, 0.11839843076820233, 0.4347785234752013, 0.17106148081270312, 0.17768122412779974, 0.20907194616800262, 0.1963623161421718, 0.11869613338357976, 0.21159208473031743, 0.16188709007277335, 0.17269225037251568, 0.22000397455095888, 0.07120858230786031, 0.0878592065731224, 9.999999999998899e-05, 9.999999999998899e-05, 0.0040615430142828535, 0.05574003847307174, 0.000282974809898362, 9.999999999998899e-05, 0.0033875664700262487, 9.999999999998899e-05, 0.05312829283512277, 0.05337180117550255, 0.02561376525986747, 0.06642432960042532, 0.06606404853773762, 9.999999999998899e-05, 9.999999999998899e-05, 0.1378570767175723, 0.055083519446540774, 0.0441384099980483, 0.11072297281896304, 0.15427336098094568, 0.1529692841991498, 0.09129798233222242, 0.17104675744114006, 0.06828726558593756, 0.18896419596645064, 0.10454195489179963, 0.028753703239923545, 0.07404021318903631, 0.179939809604302, 0.1148035599967776, 0.012191963633094716, 0.0013211273219753128, 9.999999999998899e-05, 0.10616156843758706, 0.243637844044857, 0.09100347280938315, 0.5518596746337034, 0.4943376142820435, 0.4988055637868408, 0.4963650895621019, 0.43240062831375436, 0.3966510318180314, 0.5254879100261254, 0.5532203530009806, 0.4683201259071532, 0.017582111725343186, 0.002033871973179724, 9.999999999998899e-05, 0.03673003998994284, 0.006641258576816966, 0.0987498032485199, 0.016835101946903297, 0.039752150856097845, 0.07445822257396428, 0.09504584498919899, 0.10185733800068575, 0.11811970719255749, 0.1482417959157305, 0.14569536127177285, 0.1711961180107906, 0.18003761918344263, 0.09071683108192696, 0.11350327019143658, 0.11256492605635704, 0.17211616882513814, 0.12526389346095768, 0.1448275808771543, 0.16370664125565415, 0.13819099393667, 0.1389963095724952, 0.18534561294894414, 0.10340020752878332, 0.07675710171760752, 0.041166785351709034, 0.08322503577653984, 0.07382790461673272, 0.07799314163962756, 0.08818085321811309, 0.07079268607666223, 0.1993255131392382, 0.056093115531232085, 0.20491471305236797, 0.22236946552934034, 0.1458675932260981, 0.2795969082115628, 0.14805959865189544, 0.20108564785545002, 0.17192860016605194, 0.14411120458991844, 0.15722574860801675, 0.16720805899921543, 0.1791193596256806, 0.17398907428371602, 0.16604125723041163, 0.1719395099261094, 0.17989672694350378, 0.179601685800149, 0.18573781699519576, 0.16843351554396635, 0.10467003680897957, 0.18948667655709772, 0.15335628726828687, 0.17265327121185725, 0.20070997046608285, 0.20154381193583348, 0.09979362715487716, 0.1683807818384535, 0.16162309029736766, 0.08297322784526773, 0.20476638034814232, 0.05111480475321262, 0.10420575229751283, 0.14111521776726332, 0.1994780154416248, 0.48156752732688235, 0.16323101072881596, 0.2807965389124518, 0.2052507928724483, 0.24612353579823243, 0.2511600664465815, 0.2619585944575348, 0.2371456591676404, 0.20657467189286738, 0.27988916572617983, 0.229486403122504, 0.2777898045080066, 0.07960367714624517, 0.052517615242798854, 0.04595312647162608, 0.06572454098956293, 0.06650034850133657, 0.02158762221345456, 0.05791601131589663, 0.038648585194585805, 0.06798132972472082]}, "mutation_prompt": null}
{"id": "9c082e48-c670-4d34-bf2c-cf167fc1540e", "solution": "class EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, inertia_weight, cognitive_weight, social_weight):\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        inertia_weight = 0.9\n        cognitive_weight = 2.0\n        social_weight = 2.0\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, inertia_weight, cognitive_weight, social_weight)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n                inertia_weight = max(0.4, inertia_weight - 0.005)\n                cognitive_weight = max(1.0, cognitive_weight - 0.01)\n                social_weight = max(1.0, social_weight - 0.01)\n        \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Introducing dynamic inertia weight with adaptively updated cognitive and social weights to enhance convergence speed.", "configspace": "", "generation": 4, "fitness": 0.1265893795317877, "feedback": "The algorithm EnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.15.", "error": "", "parent_id": "f565e5cc-d8a3-488d-8a46-f1ad1f6c7b43", "metadata": {"aucs": [0.6841645950718636, 0.22594695069287318, 0.4230964893756429, 0.22085417970984644, 0.10267900121182061, 0.19163548541690645, 0.19643087369464807, 0.34078198040626206, 0.19817080592656444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025254862311637094, 0.056744361671270616, 0.0337177814189652, 0.09674730557541666, 0.0725694651262826, 0.04921797194019184, 0.06817069695698152, 0.0235885878108274, 0.08374504842517161, 0.03246707031154261, 0.061322780963460666, 0.06064078462190359, 0.06984555342144827, 0.04405514328204241, 0.012596886872556556, 0.10658919451469773, 0.026276537774281628, 9.999999999998899e-05, 0.9910440380536722, 0.9929205536667953, 0.09303624245417708, 0.10280230032376203, 0.14578644755036818, 0.13448394420554977, 0.9932561916582192, 0.07529689845737397, 0.9884870514164975, 0.0697500302319537, 9.999999999998899e-05, 0.04051068591243823, 0.061218320323272235, 0.03161551648510341, 0.07352202185256573, 0.17541922245956898, 0.03797726768432019, 0.0032003821387784903, 0.1455131454043691, 0.11832638371807536, 0.0720424231805935, 0.07371340141561267, 0.0811093853236422, 0.0003695962406942144, 0.05788016523589723, 0.11341594016955747, 0.0899823874229092, 0.12609855890263677, 0.12913450611171007, 9.999999999998899e-05, 0.019729666704439874, 0.06100150500784274, 9.999999999998899e-05, 0.10454682987290542, 0.00018691473543241965, 0.04996350423533091, 0.1677368962358592, 0.17145159924920972, 0.12153452853405311, 0.08893863513970324, 0.08055423694984087, 0.06369620000981557, 0.04945480638450028, 0.43913312418928063, 0.08059605144637716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051142121599159096, 0.023882252548405813, 0.06658782855226841, 0.06536120815205271, 9.999999999998899e-05, 0.0004262309503026973, 0.12352661222521422, 0.004595438723319578, 0.037887746651513954, 9.999999999998899e-05, 0.09934545460884692, 0.058913422976211716, 9.999999999998899e-05, 0.09811145268097643, 0.015561036144597473, 0.08031202484061561, 0.007231547161878682, 0.009408869810097698, 9.999999999998899e-05, 0.0806112212664899, 0.07832517256030092, 9.999999999998899e-05, 0.0002977592825343933, 9.999999999998899e-05, 0.056858483194026976, 0.04985978132659197, 0.026815592689524603, 0.3584884696778652, 0.2763717997058487, 0.2593651521125728, 0.1934406046764069, 0.1696212330242839, 0.14827861186056746, 0.18858134505203894, 0.48389833326842313, 0.2137770887923932, 0.027271814900811875, 0.03244168374015877, 9.999999999998899e-05, 0.08856216929495297, 0.03242534646462103, 0.06912607663994563, 0.09578408904587321, 0.04116623960251131, 0.0494716321062717, 0.10915328134105806, 0.17890959670641937, 0.11490325388523326, 0.16758875265428874, 0.14324614033306826, 0.15554144557742766, 0.18078205654334722, 0.1289907702450882, 0.27957756698991054, 0.1261095247498748, 0.1349531412880971, 0.12952314082141203, 0.14475108038826134, 0.18566462193596944, 0.15156370293690158, 0.1421391703611018, 0.245736559197975, 0.11141414600622634, 0.08979344791435984, 0.10500735820552087, 0.09558429171520366, 0.1313397308899421, 0.11291538528499878, 0.09839176322665388, 0.12059805783497213, 0.1511899966688125, 0.06500169810424117, 0.2192876805531403, 0.21083456594124095, 0.21400797501151114, 0.21309616666568598, 0.18158939608166258, 0.24650192794798143, 0.19463301848572168, 0.22672818118922933, 0.15650637456186411, 0.040207580790727504, 0.2011177896986931, 0.18253522995785898, 0.16627085122412266, 0.17059041867908686, 0.197801455333102, 0.20025457396382107, 0.2096590961897764, 0.15832775326567228, 0.08521957892398291, 0.1889568999185346, 0.15153377626532494, 0.15988682128588882, 0.20126269200112556, 0.16649929539519892, 0.11866306578051877, 0.1549200953228792, 0.16368579194502086, 0.07880230802769983, 0.14811939495961857, 0.046561838343548545, 0.08353724334819657, 0.08705814146050994, 0.3466419715447955, 0.1014797461755681, 0.26666705502240917, 0.12677340812383264, 0.22892191437356046, 0.2418144597023536, 0.23540955460240542, 0.20855418184748664, 0.2542737757648551, 0.25389753006037596, 0.23781554818158213, 0.21781614415400896, 0.240265756881469, 0.0534365742063424, 0.07478893708076917, 0.0792381200274258, 0.05837685046734986, 0.06370070354279012, 0.0481702430584966, 0.07491266606443914, 0.04949220478745864, 0.06605112376076794]}, "mutation_prompt": null}
{"id": "79887aac-ef6f-43d1-b8f7-938d1886ab40", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, diversity):\n            inertia_weight = 0.5 + 0.5 * np.exp(-diversity)  # Dynamic inertia weight based on population diversity\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            diversity = np.mean([np.linalg.norm(ind - np.mean(population, axis=0)) for ind in population])  # Measure population diversity\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, diversity)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n        return global_best_pos", "name": "DynamicInertiaHybridFPSO", "description": "Introducing a dynamic inertia weight based on population diversity to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 5, "fitness": 0.1988031474807075, "feedback": "The algorithm DynamicInertiaHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "f565e5cc-d8a3-488d-8a46-f1ad1f6c7b43", "metadata": {"aucs": [0.6719746200922458, 0.6827845791234578, 0.7580059919516178, 0.7086889420840842, 0.5621056025384954, 0.6651912257078629, 0.6648438749264116, 0.6498265413230215, 0.5899046313855691, 0.09053640089160853, 9.999999999998899e-05, 0.006815729984789298, 0.006431712061752637, 0.010856459462585955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0531378190322741, 0.12753559192169983, 0.05007788127406043, 0.09789564874335466, 0.05929044274108386, 0.06277493064508366, 0.07069078185135169, 0.04484954119889828, 0.1311334518082482, 0.019075926103078955, 0.07078929060786521, 9.999999999998899e-05, 0.08658749257546805, 0.07478178164521998, 0.02230602558739725, 0.09328116253021401, 0.03540408108170068, 0.01627116200135259, 0.9854199599514609, 0.978828002626356, 0.9678209921923503, 0.7319908732119746, 0.8623950890972931, 0.9632925441510167, 0.9853350352699066, 0.7866812779053326, 0.9731472570609867, 0.44348055209356363, 0.3121722431747225, 0.34824019761294245, 0.3512573501659385, 0.2582788252377135, 0.2068607298787447, 0.27498143568567335, 0.2999891810024511, 0.22659207793248948, 0.13097436612064006, 0.11651924433004823, 0.061612355502011606, 0.06769854890046301, 0.10599218556522683, 0.029349430151052514, 0.09396854251906717, 0.11003030167023897, 0.1377985814813799, 0.17792140883330299, 0.16137351414359802, 0.1172447653183295, 0.24277788333085615, 0.15576918191007605, 0.08129039557521012, 0.2990645929092931, 0.18262845167179653, 0.1865768923662927, 0.1713947660778562, 0.21078341970182413, 0.0945898869869376, 0.18432823219714034, 0.19608297325575885, 0.11800933808356129, 0.19636011602695913, 0.24822898824511208, 0.03207552574792405, 9.999999999998899e-05, 0.045153508677496346, 9.999999999998899e-05, 0.03391984762090583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.091609986926666, 0.05192402731756407, 0.0235787687389567, 0.07123046584730441, 0.06466869642778861, 9.999999999998899e-05, 0.0007919000679906807, 0.09617708567105943, 0.02898922162125761, 0.04290348272288125, 9.999999999998899e-05, 0.12397451843376583, 0.18032781743751658, 0.055139782407881976, 0.17775182814760648, 0.1375932910112304, 0.12286580881192599, 0.10958054888580826, 0.006122641888272717, 0.049027643794258946, 0.22421961344240815, 0.09548029128193247, 0.10415929019418713, 0.1895132118943258, 0.0001218036509986753, 0.17558861217532395, 0.13594820449229994, 0.06809321491068443, 0.4913252345424124, 0.4872715021767594, 0.4652119109967139, 0.5044022926668541, 0.450862856932959, 0.5277798551540092, 0.4534741939269825, 0.5542035914147512, 0.4720905026265225, 0.024237403847073402, 0.053315668135010874, 9.999999999998899e-05, 0.057797014693672044, 0.04515155864499554, 0.0713439741165699, 0.09242163933672942, 0.05604525934431426, 0.08433009664359725, 0.20907744507633108, 0.24874934256656567, 0.11002939884086371, 0.15398356442238093, 0.19720077974991435, 0.18291606170713304, 0.16970647760829383, 0.13792853143342765, 0.19125958960587663, 0.12988157204373618, 0.1552797931351001, 0.14392990024243935, 0.1444145835562809, 0.17442595111891246, 0.136573105265969, 0.13770796374409, 0.22077154682912759, 0.12929590634742105, 0.0711425406212991, 0.10739345571495318, 0.10992788849594659, 0.07380026790993854, 0.1327128270231196, 0.0843135666873237, 0.0705174401998434, 0.2229818773719755, 0.06272375848388934, 0.17515888947066638, 0.18110755873946704, 0.16503229284927, 0.28126172665562144, 0.20757488005541136, 0.2148005179164083, 0.2119702801088339, 0.24338665700946283, 0.1961925254831226, 0.15880508873389731, 0.2119178631918237, 0.18217520602431803, 0.16055661024047785, 0.1736956178210558, 0.16927101599295968, 0.18209936501594315, 0.20206709135036827, 0.16783577053031729, 0.0903886353557597, 0.1895676268982026, 0.1527636545882458, 0.1718828922636778, 0.20158041050464293, 0.20160276771232588, 0.0994387724513659, 0.16657987451352163, 0.16091360921484577, 0.08204754846721773, 0.21218596013892133, 0.05056961673888127, 0.10049574959615437, 0.13991672487133577, 0.20606519737017692, 0.5549785182185487, 0.1644163812770878, 0.32002235726837425, 0.2510415106161187, 0.22367913777852044, 0.22654699854623572, 0.24139908028408785, 0.25028792187092597, 0.2561765286139994, 0.20389141872551186, 0.3000831483051828, 0.25466615688408456, 0.08276981654049764, 0.05092424582820476, 0.058376546904438165, 0.07752090419949798, 0.06421055068598269, 0.04899615872619556, 0.07653859927355755, 0.08882600651326356, 0.0762982296406961]}, "mutation_prompt": null}
{"id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 6, "fitness": 0.20264038330989498, "feedback": "The algorithm AdaptiveHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "f565e5cc-d8a3-488d-8a46-f1ad1f6c7b43", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "b0dff76e-967f-42ad-84d8-01c73982d2ff", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "fd5f4669-fc3e-4675-b16a-5443370b0bbb", "solution": "import numpy as np\n\nclass DynamicMutHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + self.mutation_rate * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n                    self.mutation_rate *= 0.9  # Adjust mutation rate based on individual improvement\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "DynamicMutHybridFPSO", "description": "Enhance convergence speed by introducing a dynamic mutation strategy that adjusts mutation rates based on individual search history.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {}, "mutation_prompt": null}
{"id": "7ed0cabc-ead1-43bf-983a-6a761754dc1f", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "6b8f88f1-85a3-42ac-8433-131f1090549c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, iter_count):\n            inertia_min = 0.4\n            inertia_max = 1.0\n            inertia_weight = inertia_max - (inertia_max - inertia_min) * iter_count / self.max_iter\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for iter_count in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, iter_count)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - iter_count / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedAdaptiveHybridFPSO", "description": "Enhance convergence speed by introducing a dynamic inertia weight update mechanism during swarm movement.", "configspace": "", "generation": 10, "fitness": 0.20264038330989498, "feedback": "The algorithm EnhancedAdaptiveHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "ca09688c-addd-46e8-b47a-abb4854c1d85", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.inertia_min = 0.4  # Minimum inertia weight\n        self.inertia_max = 1.0  # Maximum inertia weight\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, iter_count):\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (self.max_iter - iter_count) / self.max_iter\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for iter_count in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, iter_count)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - iter_count / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance convergence speed by incorporating a dynamic inertia weight that adjusts based on function evaluations.", "configspace": "", "generation": 11, "fitness": 0.20264038330989498, "feedback": "The algorithm EnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "a4218259-385f-4d1d-b4c1-f428db9c07ce", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "9a2ba9a9-941b-4f0d-b608-c0232e3af1cf", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "77186f89-96c8-4600-8d39-84351a65589f", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "bee0f621-cea9-4585-a443-ed8bd38e55a4", "solution": "import numpy as np\n\nclass DynamicHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            learning_rate = 0.1\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * learning_rate * (best_pos - curr_pos) + social_weight * np.random.rand() * learning_rate * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "DynamicHybridFPSO", "description": "Improve convergence speed by introducing a dynamic learning rate for velocity updates in the swarm_move function.", "configspace": "", "generation": 15, "fitness": 0.10221471729259292, "feedback": "The algorithm DynamicHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.09.", "error": "", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.20598890095205347, 0.21912404205951863, 0.504727879314607, 0.11644534104074022, 0.08948217939560543, 0.16886049832272898, 0.14107015092365605, 0.14888866063237471, 0.08593375335664244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04247837996157011, 0.056754792577983215, 0.049051088536396836, 0.09070322255701069, 0.08918873674860628, 0.09810580318090256, 0.07669675652089991, 0.05944240767811393, 0.11688778076702999, 0.04587671121119585, 0.06502555537604549, 0.026745329125068773, 0.07605818802859032, 0.05322901141860581, 0.02838632950814024, 0.05647063467009916, 0.02005318571601633, 0.017495556457467698, 0.0490654402638977, 0.03680704534151269, 0.04585182050369019, 0.056136128717998335, 0.051406981355036074, 0.040288129401518935, 0.06746092872942122, 0.05330947131182018, 0.0419579253013217, 0.0640629988214465, 0.025036567029093515, 0.049785834458731415, 0.08783103521084923, 0.07100536292386517, 0.06356652563006338, 0.05986857938826429, 0.029479684079389168, 9.999999999998899e-05, 0.16348654231639614, 0.11110218761725954, 0.09825081105289979, 0.08946176203255785, 0.07445135564541483, 0.03912478275260178, 0.10253880707158003, 0.1156379830919173, 0.13863306455714342, 0.1452010067187539, 9.999999999998899e-05, 0.04848955789985088, 0.0007167734350772559, 0.022961023581620776, 9.999999999998899e-05, 0.1469508859351505, 9.999999999998899e-05, 0.0013132701139327851, 0.1370143746739526, 0.1425246766250946, 0.030505850930348966, 0.12802961840228855, 0.150588720888852, 0.09710918166571914, 0.1228262093355943, 0.051010174822871734, 0.031233738268466205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055643161245777284, 0.02646333322125083, 0.0619488262206318, 0.06204993662265201, 9.999999999998899e-05, 0.000813789432846157, 0.07985451278033184, 0.049712351913938746, 0.035251649852066635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12901953686613776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.389048668595553, 0.21989641396513449, 0.21602037237773453, 0.15679056663708812, 0.155824426198358, 0.1228036285725208, 0.18936888960412868, 0.43584130111601094, 0.28432349742300045, 0.012852701303780467, 0.01857888878788816, 9.999999999998899e-05, 0.07770240272140783, 0.06326277455150542, 0.07979865068225223, 0.12562887749534735, 0.074894894095485, 0.04494912810079332, 0.10051242452367892, 0.23887412357888393, 0.12464461028004903, 0.1468183219765915, 0.11798894207235822, 0.13149202412257932, 0.17601437346992022, 0.18003395900447372, 0.12927027235274058, 0.13939547223927784, 0.25918846207231194, 0.15511208998738335, 0.2011441547184375, 0.1924060331150247, 0.165399262763265, 0.13828941602299005, 0.24631956223708407, 0.12641589744856752, 0.07420866314148822, 0.19261334869830948, 0.0877004738130629, 0.12592631662850695, 0.17155415742153113, 0.138225268661898, 0.06845861603781034, 0.14991405501100386, 0.06856414190142279, 0.2285305900063781, 0.2123725308587071, 0.24546438960644668, 0.2078084099252382, 0.22759521778208014, 0.2831721413198047, 0.24004719594717616, 0.24243250437679098, 0.2494981177188581, 0.15742035265994925, 0.16738464818726095, 0.1546468567457161, 0.18761962171683444, 0.1772309521039468, 0.189249788918478, 0.15780191692284895, 0.1759189911931902, 0.15154710141741212, 0.1155586151435205, 0.18333826877313064, 0.10311473493555989, 0.16615573430567343, 0.16661184306653487, 0.24485558054490952, 0.1161986700318075, 0.13197587208192707, 0.14324392805460906, 0.21634723635600517, 0.2369719000359628, 0.09341817443694778, 0.10638346683133115, 0.0884687797724335, 0.26886798838047454, 0.15396071669512967, 0.2632215498066609, 0.10123724685123181, 0.18610598044140525, 0.17009798595596892, 0.1905754722927745, 0.18025334882278898, 0.20678635043534643, 0.2031574955396923, 0.1980018993960636, 0.1883895834824133, 0.19580445436542637, 0.08188754928996989, 0.07711478884906153, 0.06964477005758107, 0.08814283528189604, 0.10352807457104751, 0.10621742019834823, 0.07425063689144606, 0.0801196763366141, 0.07244766185605]}, "mutation_prompt": null}
{"id": "efcd4f0b-5c17-493c-b305-105580e1da8e", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "61c52602-325b-41a6-8f67-538745cdf4e5", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "beb9efc7-c356-48e7-811b-67719e5c1d5b", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "53f1674b-5410-4445-98b4-233f771d1afe", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "e5974ebe-5558-4eaf-94de-493cadc0aa59", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "130abfc9-ab7c-429b-a3bf-52aebecc69aa", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "5322f3f9-dfaa-4161-a6fb-d22cf0a38d8e", "solution": "import numpy as np\n\nclass AdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def firefly_move(curr_pos, best_pos):\n            attractiveness = 1 / (1 + np.linalg.norm(curr_pos - best_pos))\n            return curr_pos + 0.1 * (best_pos - curr_pos) + 0.01 * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = firefly_move(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "AdaptiveHybridFPSO", "description": "Introduce adaptive global search strategy by dynamically adjusting the exploration and exploitation behavior based on function evaluations.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.6641004986947903, 0.7134253241152024, 0.7566326109457823, 0.7444115935868456, 0.6067852931936154, 0.6854509514268284, 0.6746169123199884, 0.7215087371722307, 0.6779824580750118, 0.08762477303123872, 0.005999462986051585, 0.04849352669304463, 0.06266493875844226, 0.0020643605775774176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05314048467373955, 0.12708958139530002, 0.04978551935901232, 0.09801600474698158, 0.05946346546301884, 0.06283421067659545, 0.07082426363087668, 0.04496577909711286, 0.1312122992860626, 0.019093688045631274, 0.07078946231326388, 9.999999999998899e-05, 0.0867498621773104, 0.057457920254504136, 0.021969429070682778, 0.09358054239529834, 0.035403623709096554, 0.015733722130995886, 0.9854199599514609, 0.978828002626356, 0.968810609061791, 0.8643248474182144, 0.8188029536701674, 0.9641766312780938, 0.9853350352699066, 0.8664027979903219, 0.9731472570609867, 0.48117585170912436, 0.38186190645667495, 0.3652770579602789, 0.33778900954512237, 0.3269611598998021, 0.4016663385056346, 0.3353000381455622, 0.44998970434085694, 0.1694353716787773, 0.13097436612064006, 0.10742183219357682, 0.061612355502011606, 0.06769854890046301, 0.09830818465683588, 0.03805939064763275, 0.0939661923298385, 0.10936569963882425, 0.13426524096950654, 0.1817676220326706, 0.15718431094849017, 0.04979567963688036, 0.2369979810335192, 0.12818709894235913, 0.1001455296260596, 0.2955924589819461, 0.17852523301678758, 0.17650498981589646, 0.1684113584070761, 0.19533409867728335, 0.07531575488419862, 0.1855218156428764, 0.20308063327088832, 0.12547039227595125, 0.17561341134034614, 0.23918409234328597, 0.13256154525007913, 9.999999999998899e-05, 9.999999999998899e-05, 0.004590669333710107, 0.02683482751497046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0068583576370998545, 0.05265591908208922, 0.02452176895925806, 0.0695657295606199, 0.06626505364966784, 9.999999999998899e-05, 0.0009165455635277153, 0.09150625098121923, 0.030347233064952572, 0.04309795910059333, 0.015457105982659813, 0.14631071050342692, 0.20118281063954102, 0.027998140685446926, 0.1471515510949183, 0.15223698188431523, 0.13966225572956048, 0.1155155237898029, 0.007089628388405433, 0.07427004148994942, 0.2829429343619003, 0.07590865261753899, 0.056349426013485804, 0.21137575914408913, 0.09278860779047648, 0.16662045227985922, 0.07994689542746014, 0.06510151075964787, 0.5244122131491307, 0.47082096215014657, 0.49746312312363583, 0.4664024248090408, 0.3808370843038851, 0.49498637103657683, 0.4295445751738828, 0.4987157658330379, 0.4697076325040145, 0.02423556558561435, 0.05303654738602204, 9.999999999998899e-05, 0.05780226125674526, 0.036731401457581025, 0.0715361407968127, 0.09256836457513395, 0.05585286550251545, 0.08415545715518147, 0.22082979433192296, 0.1838987718277434, 0.1058452514960938, 0.1571617720691567, 0.17555508956694232, 0.1844593527897519, 0.16262478153076243, 0.14231282608659135, 0.1804589275500481, 0.1296996633683919, 0.15528078086792152, 0.14403047900972432, 0.14440031196165615, 0.17605359630367023, 0.1365436231441165, 0.13770811816679618, 0.2518927574240106, 0.1292793436617956, 0.07114303326695559, 0.10736734483458954, 0.10974309837227392, 0.07380059334675004, 0.13268187334287773, 0.08431889376835766, 0.07055137789159982, 0.22380203446670677, 0.06277812120651938, 0.1834108105999095, 0.1788838852936171, 0.17110349375802492, 0.28544892125305865, 0.21572196359018347, 0.2221215349844209, 0.21093044294161423, 0.21902924419417635, 0.2030240419969851, 0.15602610607974365, 0.21187674631981868, 0.1820390483643194, 0.16174254509120456, 0.1736328578059665, 0.16929253629053287, 0.18223910946819433, 0.2020841086284657, 0.16801240105379023, 0.09010248118782294, 0.18958923695805985, 0.15237189814057928, 0.1719633603327515, 0.2015076884902658, 0.20164026865546514, 0.09941922225593247, 0.1661012832034785, 0.15888813604464158, 0.08230405731541324, 0.21169466061403053, 0.05077293500550262, 0.10092750201475742, 0.14230518745507237, 0.2074051439282386, 0.5749353320317392, 0.16490711664231839, 0.3909539478355638, 0.2725878951091175, 0.25961365808701575, 0.2546903403769124, 0.25362129982724924, 0.23577019279489608, 0.26076312399900536, 0.18740613532230288, 0.2610743347427198, 0.21296082778107617, 0.08286112723629213, 0.05216880320711048, 0.058910120176523195, 0.07759947222259744, 0.06433195284520021, 0.04906451358316877, 0.0764997362299511, 0.08859398146660591, 0.07655470396384301]}, "mutation_prompt": null}
{"id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 23, "fitness": 0.2137545928303034, "feedback": "The algorithm EnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "167d1e0c-14f6-45e1-b58d-4c47f7388ec3", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "5bac5b9f-7d68-4d19-bb56-87bba5cd64dc", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "7b12f63a-3f6d-4db2-8af0-fca29c615f27", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.local_search_prob = 0.2  # Probability of applying local search\n        \n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def local_search(individual, best_pos):\n            return 0.5 * individual + 0.5 * best_pos\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    if np.random.rand() < self.local_search_prob:\n                        population[i] = local_search(population[i], global_best_pos)\n                    else:\n                        population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance convergence by adding a local search mechanism to exploit promising regions within the population.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 34, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 34, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {}, "mutation_prompt": null}
{"id": "48c615c7-5ad5-46fe-9459-78e945aa303a", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "d2e4cc21-7897-4d05-bdd2-0440f8ee6a3b", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "9b7a3946-d0e4-4e55-8c3c-3b3ccfbeea3d", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "d89f9615-f64b-499b-8ef6-d6c53823eb18", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "4f4c1aaa-c040-4d98-af88-074297a24929", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "598379a5-eb94-465f-874b-9d647cd7caa5", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_inertia(inertia_weight, global_best_pos, curr_pos, best_pos):\n            inertia_weight = 1 / (1 + np.linalg.norm(global_best_pos - curr_pos))\n            velocity = inertia_weight * np.zeros(self.dim)\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity += cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity, inertia_weight\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        inertia_weight = 0.7\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i], inertia_weight = dynamic_inertia(inertia_weight, global_best_pos, population[i], global_best_pos)\n                else:\n                    velocity = np.zeros(self.dim)\n                    velocity += inertia_weight * np.random.rand() * (global_best_pos - population[i])\n                    population[i] = population[i] + velocity\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "DynamicInertiaHybridFPSO", "description": "Enhance convergence speed by incorporating a dynamic inertia weight update strategy based on population performance.", "configspace": "", "generation": 31, "fitness": 0.1501105818012581, "feedback": "The algorithm DynamicInertiaHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.41856873056382204, 0.43083919473858223, 0.403653747449503, 0.18320878041441446, 0.38990498551739394, 0.1987312685105308, 0.26954167196109013, 0.28917320462841944, 0.23661386656998395, 0.07790889387210387, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08061451055448143, 0.13154251136868622, 0.05161456088880334, 0.05772012571489993, 0.08090211311305973, 0.02594836334252526, 0.0449443521039522, 0.05677356830665303, 0.08077016544976867, 0.08420637686354127, 0.12064989768432766, 0.03170923991140229, 0.0970915335307374, 0.032534771533363704, 0.03714959621566649, 0.053980884753336844, 0.02800372620883196, 9.999999999998899e-05, 0.988399626132517, 0.9976872271779562, 0.9967766254871122, 0.12676617823948177, 0.9932939423565382, 0.9879977391157285, 0.9948044302643299, 0.99306041327963, 0.9489532456866925, 0.11485306035118048, 0.027039549920482187, 0.07079691519121711, 0.06645529264983285, 0.18246558115044076, 0.16038963149434804, 0.08527549485688324, 0.18048579931135467, 0.027207417035951198, 0.21866359794355983, 0.20223205469097294, 0.075106824158792, 0.11215966605828764, 0.08313284229519247, 0.03966823069481529, 0.06324538601390761, 0.13735770821249693, 0.17632456078977943, 0.010360992211769782, 0.12206325037514654, 9.999999999998899e-05, 0.05135054365164382, 0.005737661645611625, 9.999999999998899e-05, 0.13038707166772423, 0.13089920828482915, 0.10622129221012766, 0.173087838435095, 0.14096173592667216, 0.07155735700217569, 0.20696068116378974, 0.15065893468458524, 0.024179923398598313, 0.0015433144405462285, 0.13295336913062727, 0.06248822275858168, 9.999999999998899e-05, 0.014858631383161125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0801757184402373, 0.0751143562834432, 0.07966243969257414, 0.06413495317849971, 0.06476519532444713, 0.006666875429092167, 0.1967776684900402, 0.0720917077067903, 0.05529778157601539, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05872761552322814, 0.15818269336022572, 0.05274830656379259, 0.02715776289851024, 9.999999999998899e-05, 9.999999999998899e-05, 0.06768354301707202, 0.1363295182613976, 0.058302495979686286, 0.2827945700208735, 0.22963213181660347, 0.4926828314537517, 0.14999794824753176, 0.19924027674068723, 0.17168894310636607, 0.24537569449646357, 0.3513944227853475, 0.3677655682429448, 0.017739695749064754, 0.02237876835600805, 9.999999999998899e-05, 0.035207995366548284, 0.053947081731677504, 0.05966903969737647, 0.04511036011706804, 0.04414231048352979, 0.07308120962816067, 0.1181883036900474, 0.1759483265380255, 0.1447481592594344, 0.14235933899081332, 0.12506151271103205, 0.14993415045847136, 0.16062764852711386, 0.10639379630133716, 0.17749933698439913, 0.1321543021120033, 0.14278990905435585, 0.11902066714804937, 0.16356669070198737, 0.15633905870716602, 0.12604729215005228, 0.17730314614859943, 0.22442154344713805, 0.1557943470728349, 0.07516058521296365, 0.10268046172537781, 0.08499908228479869, 0.09541054034175123, 0.11646408360912941, 0.07222068444250984, 0.121874208635534, 0.14094725770718852, 0.04703457890342688, 0.13873822748725384, 0.14046565310430337, 0.17329547436728376, 0.17595804841904628, 0.16147702987751966, 0.18799901114344297, 0.26036729017783367, 0.17584183709586976, 0.23555166470238176, 0.18333603552418765, 0.1685342658893072, 0.18161459972032123, 0.20199226588727504, 0.15666023654992955, 0.14922518657939599, 0.20736287531370112, 0.15998703283512727, 0.16501116692012385, 0.3711930797210927, 0.1255241901028119, 0.1344517215385609, 0.14100133760614353, 0.20042502605767176, 0.19583546367570526, 0.12167502630992566, 0.16993916956820299, 0.0967572940353788, 0.4770996221768212, 0.17736241168803313, 0.051528238442037355, 0.11336929404726326, 0.48071479888922664, 0.1645035293927818, 0.1000039377685702, 0.3136918827031917, 0.2041493733932035, 0.143398820688466, 0.21498890757451594, 0.1658881676989158, 0.200264677376761, 0.19567132124886466, 0.18801374005361682, 0.1958199522576466, 0.20181400615809642, 0.2376333852815975, 0.06086326016268051, 0.05623534975304301, 0.07071318228172763, 0.09837104713662226, 0.057263405052523586, 0.0279059558274255, 0.1018036633512569, 0.05759477759583276, 0.05207254753058732]}, "mutation_prompt": null}
{"id": "1e6dc312-739e-4c79-a60d-9626982f73e8", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "74742693-8b2f-4bde-aafb-16d389fa18b7", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "4c80b8bc-2544-4cff-9752-da455086c098", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "53a468b0-9df1-4296-b984-e5b1db92c1de", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "af4f82da-8805-40f3-8013-6dc932d0a77e", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "3d3c95fd-d422-46ff-b61f-b9b01d49193d", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "c17a368e-765b-4e87-ac4b-ee9f63160fb2", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "aa3fd20e-f479-44b0-bebd-5539f601b59d", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = 0.5 / np.sqrt(1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve the exploration phase by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.5039048470341412, 0.5331889408594228, 0.5289644637037918, 0.5184832767575955, 0.520152277375093, 0.49832261093519736, 0.5170589021575234, 0.5339192440976617, 0.48806670285232234, 0.03678389837789564, 0.010461544655984145, 9.999999999998899e-05, 0.05565568962752421, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13242030979289188, 0.11828477568307805, 0.11609980061463843, 0.12745895757357206, 0.12366415718131318, 0.10927989872516863, 0.13022931499544044, 0.09054641125880358, 0.1422449663788189, 0.11083304148535045, 0.10058591582107401, 0.10789015776684852, 0.07842773611358367, 0.10160160291882725, 0.0955735267558041, 0.12774152271125805, 0.1167125184930059, 0.0999081112601059, 0.9856553810753205, 0.9734602427893183, 0.9746058359955633, 0.9504485920880316, 0.9519070821270618, 0.9678400315612267, 0.9783531639841605, 0.9377173716710376, 0.9766981966414846, 0.2627529179221203, 0.2983384055665306, 0.35329176860705824, 0.3176721362695868, 0.30821302915758575, 0.31762617773412916, 0.28554318183483496, 0.2778524011474577, 0.27147224820501303, 0.2914928450536056, 0.3222915485749286, 0.23758569190278567, 0.3023153013069585, 0.2743970442959529, 0.2044129472112407, 0.2262608363586931, 0.21167901670851197, 0.23378941294743083, 0.15932731496396157, 0.16210559246548384, 0.1565595449555609, 0.20543127134130812, 0.1491375074599418, 0.16051742882554665, 0.1309844222594584, 0.13954884061264272, 0.17004587997064047, 0.1400148921600789, 0.19642771674438986, 0.11485820855083839, 0.15594216190205756, 0.13811557588067513, 0.13322527200659262, 0.16358501124634406, 0.13076811019953716, 0.0998536761919031, 9.999999999998899e-05, 0.002566609860134683, 9.999999999998899e-05, 0.03925064323213667, 9.999999999998899e-05, 0.000355134306934457, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169849659122297, 0.1006789673170333, 0.04303195639922486, 0.11712911682118377, 0.061992505897857875, 9.999999999998899e-05, 9.999999999998899e-05, 0.12058829801403792, 0.042856425474840254, 0.0521911053298274, 0.018043976798894024, 0.027643642940953894, 0.012664953892922659, 0.0016877873481473404, 0.07018851158151118, 0.03255759015857351, 0.008947254605164767, 0.037758924509323166, 0.006516702579879907, 0.15592069148690602, 0.1424863871372829, 0.10430696695983865, 0.037554532211430014, 0.05513458142690253, 0.03863122848540845, 0.12855140108647956, 0.05438806080058767, 0.07342757569016434, 0.4222889975296381, 0.41666122034882014, 0.4110918016508791, 0.4285180622437005, 0.40681743717350227, 0.4147121473143176, 0.4302884414424014, 0.435275539333591, 0.4254299441169621, 0.08801815021778858, 0.10126730481856827, 0.11770677933371931, 0.12815622691488404, 0.12688533072850383, 0.120821581817384, 0.08847196155762593, 0.11639381042394437, 0.08397127675258542, 0.20242150993255503, 0.234116318480306, 0.28484927035050367, 0.19487234398511089, 0.2453411659700816, 0.20875760900331952, 0.25387324347790086, 0.17940133670559877, 0.24210250138125955, 0.2733802377294995, 0.278369593968944, 0.23469624657690158, 0.21093832003188562, 0.28930660302062483, 0.2192659150065719, 0.22155344745678585, 0.2813606225411752, 0.24262360016881723, 0.1944086699605052, 0.2173333314415209, 0.15654369532784873, 0.23375677888552404, 0.2025905991387984, 0.1779262265613032, 0.16897848390511372, 0.2413996766347768, 0.11016034773053474, 0.26471350215045975, 0.2466579071698678, 0.23940459321544727, 0.2156829742194033, 0.2124643797959762, 0.20201864970202676, 0.2032610042408628, 0.20747501762079112, 0.20116421450067679, 0.20129096480904485, 0.2168327871624086, 0.22213537393104332, 0.20713892432564784, 0.21555762953601798, 0.18259300761001285, 0.18249738503479418, 0.21251045032357174, 0.18518772188665833, 0.7625750865582788, 0.18890467681086953, 0.15390484806661153, 0.17233524289025792, 0.20168157329670744, 0.20141066222925852, 0.09939487619432474, 0.16961433067260423, 0.16409785140728217, 0.08296105820376265, 0.21252012992234992, 0.05100757036693071, 0.10419538290762775, 0.15271872488185312, 0.42509609311815477, 0.5855693536272527, 0.16706752715919215, 0.36699130859887574, 0.20235191523184892, 0.17435664057293, 0.1892594259119228, 0.1793401760374711, 0.20458661761067176, 0.16836983830942975, 0.1953488579379692, 0.1825453807264561, 0.16951066202056042, 0.09445367971595986, 0.10705271761347135, 0.08279304390846243, 0.07689850780008689, 0.1258404802495655, 0.0747220183323094, 0.08894536175292234, 0.08503173346258641, 0.08121211152829]}, "mutation_prompt": null}
{"id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 40, "fitness": 0.23977605205900843, "feedback": "The algorithm EnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "8049384a-ff42-44e0-9f89-b5d0b67430a9", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "7e6bbeb4-f9b8-41bd-9325-e660a3825dc1", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO_FasterConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n                    self.mutation_rate *= 0.95  # Adjust mutation rate based on individual performance\n            \n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO_FasterConvergence", "description": "Introduce adaptive mutation strength based on individual performance for faster convergence during exploration.", "configspace": "", "generation": 41, "fitness": 0.19714604123119056, "feedback": "The algorithm EnhancedHybridFPSO_FasterConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8608390230189453, 0.7456342102659632, 0.9021974422911623, 0.44928775389534836, 0.18607737903264265, 0.8977454962670603, 0.4080976469254407, 0.8881004955188059, 0.3401617141286726, 0.05633136381841031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038593291714938305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061170393935995215, 0.0862945026337536, 0.07942609740421724, 0.10170154361996553, 0.07762156246981666, 0.08607968362443663, 0.08628725772809032, 0.07543197702660231, 0.12468272729849594, 0.04542740948867918, 0.06389705501640841, 0.030077433553081234, 0.08308266377680706, 0.06348066051638068, 0.07640923507493647, 0.08655056628054258, 0.057469381629015825, 0.014347536989657628, 0.9856391411814796, 0.9701485874256798, 0.9744993215969578, 0.9526270640247045, 0.8782282882634762, 0.9678037823671799, 0.9853412211731635, 0.8925252055456765, 0.9760470193704749, 0.1658038056101172, 0.1378481422649489, 0.1105152494596725, 0.1972135490698036, 0.2649421620102943, 0.1089893758508963, 0.1559576096018791, 0.08874435962517824, 0.0804549483544974, 0.24578636830200962, 0.33283350298606185, 0.16432382170107995, 0.11789180974646918, 0.19067627614289717, 0.0950544361401151, 0.08580540718734175, 0.12876306223941192, 0.05739227534393665, 0.15559131724470177, 0.003533600024896666, 0.10835315365366116, 0.2941131464593214, 0.18561629849058803, 9.999999999998899e-05, 0.13830514488585066, 0.03207617883698599, 0.0957760075930244, 0.1832459044357373, 0.17810629967894387, 0.006663086596014778, 0.1586383443114764, 0.12333801259574884, 0.13517752612596212, 0.12772764554633032, 0.24317867584876995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05867955230894151, 0.04517207369325793, 0.0775711671636713, 0.06773033570127085, 9.999999999998899e-05, 0.002456367939696835, 0.12365808961770852, 0.06448993241764489, 0.05641890375042602, 0.2883884535821851, 0.15821829403909504, 0.2542100454535555, 0.07453029642429498, 0.17123312581239503, 0.11302720542708788, 0.07809359365371837, 9.999999999998899e-05, 0.017727342351929964, 0.16531528363329984, 0.28514660521138435, 0.09560852920802387, 9.999999999998899e-05, 0.009928900065998447, 9.999999999998899e-05, 0.19060238126610518, 0.049807786462171655, 0.08401614787475409, 0.4233125422483167, 0.44653903593247724, 0.4861937639198459, 0.48754956692336004, 0.4355880387765856, 0.4963499336386562, 0.4877442543961623, 0.5419498525358049, 0.4458294825658198, 0.042785515765745186, 0.05113456039041375, 0.03946453831768015, 0.0625078535145751, 0.045419652178542824, 0.08638053359034858, 0.11150906625809898, 0.08399405107160585, 0.05288533285049357, 0.19971906737970513, 0.2773004940784687, 0.202498434107801, 0.3219416822475728, 0.34732039508686774, 0.2771272813337756, 0.3516629384049751, 0.1696314363222038, 0.22772529722476398, 0.11860426081810838, 0.16413461441119392, 0.15209146902944848, 0.15453547692451597, 0.19643605808884446, 0.17986338370499289, 0.143630808228844, 0.29247349867930894, 0.10049796372220121, 0.09552053799751847, 0.136888201758103, 0.1565397907308339, 0.07827095765386038, 0.2446282730766639, 0.08954152687990424, 0.09349841106857071, 0.36943776045019183, 0.06493724603282658, 0.2132237776486069, 0.23837289460216315, 0.1910657743303904, 0.2743648345141866, 0.16834036681516462, 0.22374579667426464, 0.2593879942227265, 0.18435889455870158, 0.2060507347665863, 0.1721303984309439, 0.19048722651393468, 0.1914249492021337, 0.18819711084902824, 0.18074562175942577, 0.18920693415066803, 0.19257035665904554, 0.17577216216166458, 0.17311087781619694, 0.3497168175410992, 0.18945722163177803, 0.15376136987331834, 0.1722323743464782, 0.20189657639989056, 0.20151213330159412, 0.09948179210085417, 0.16974014866390008, 0.15620673918908523, 0.08302137600690607, 0.21253664892284774, 0.05142027087283474, 0.10397492408426912, 0.13547094813778948, 0.21074544145679996, 0.370263159824314, 0.16738355456527676, 0.21611471819518346, 0.1942931785765114, 0.17386916634121008, 0.21678796167458425, 0.21084223805636637, 0.23120630959933408, 0.24664468560346708, 0.2514502813610585, 0.23699484951032745, 0.1850684401964453, 0.07556190458397594, 0.10105327014291465, 0.0640107888352317, 0.0979998319559865, 0.06061945465553986, 0.05910115112746772, 0.07000492467277819, 0.06546172415322637, 0.06345693086779025]}, "mutation_prompt": null}
{"id": "5f2bf880-f702-4240-b4f3-551e6fa55204", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "be8ddb60-4e52-47a7-9bc5-a7033b7608b3", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "83da6eed-7a7f-4833-86c8-68863aff7bd3", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ParallelEnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        with ThreadPoolExecutor() as executor:\n            population = np.array(list(executor.map(initialize_population, range(self.population_size))))\n            global_best_pos = population[np.argmin([func(ind) for ind in population])]\n            \n            for _ in range(self.max_iter):\n                for i in range(self.population_size):\n                    if np.random.rand() < self.explore_prob:\n                        population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                    else:\n                        population[i] = swarm_move(population[i], population[i], global_best_pos)\n                    \n                    if func(population[i]) < func(global_best_pos):\n                        global_best_pos = population[i]\n                \n                self.mutation_rate *= 0.95  # Update mutation rate\n                self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "ParallelEnhancedHybridFPSO", "description": "Implement a parallelized version of the EnhancedHybridFPSO algorithm where each individual in the population explores and exploits concurrently, leading to faster convergence.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('initialize_population() takes 0 positional arguments but 1 was given').", "error": "TypeError('initialize_population() takes 0 positional arguments but 1 was given')", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {}, "mutation_prompt": null}
{"id": "475a807f-cb74-4556-839a-7174f3d792b4", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "86bc519e-68b8-4037-9e2f-864c0f918f59", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "d404ce69-63bf-47b5-ab8b-15060873c99f", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "f0ed2439-d00f-4dfe-aed8-f7f27930a2d9", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "4c6a3545-a063-443d-9f5f-1aaa8f037dff", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "7083ce6a-a4a3-40ed-acee-44f42bcd1934", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "8c809d26-d740-4e2e-b05c-0f87f5f39bb3", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "7c8c207f-0f5a-4885-8da2-cb44cdc092f2", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "2b380a0a-daef-4a7d-a056-c6e17605eb44", "solution": "import numpy as np\n\nclass FastAdaptiveHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.5 + 0.4 * np.exp(-0.1 * np.linalg.norm(curr_pos - global_best_pos))\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)\n            \n        return global_best_pos", "name": "FastAdaptiveHybridFPSO", "description": "Implement a novel adaptive inertia weight mechanism based on the distance to the global best position to enhance convergence speed.", "configspace": "", "generation": 53, "fitness": 0.23977605205900843, "feedback": "The algorithm FastAdaptiveHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "2dc6a92c-0fb0-494d-aac2-c8272382ee1b", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "5c5f74c1-3ee7-49d3-8617-78fe9518fab1", "solution": "import numpy as np\n\nclass EnhancedFastAdaptPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10  # Initialize with a smaller population size\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)\n            \n            # Adapt population size based on individual performance\n            if _ % (self.max_iter // 5) == 0:  # Adjust population size every 20% of the iterations\n                best_individual = population[np.argmin([func(ind) for ind in population])]\n                if func(best_individual) < func(global_best_pos):\n                    self.population_size = min(30, self.population_size + 5)  # Increase population size\n                else:\n                    self.population_size = max(10, self.population_size - 5)  # Decrease population size\n                self.max_iter = budget // self.population_size\n        \n        return global_best_pos", "name": "EnhancedFastAdaptPSO", "description": "Introduce a dynamic population size adaptation mechanism based on individual performance to improve convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'budget' is not defined\").", "error": "NameError(\"name 'budget' is not defined\")", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {}, "mutation_prompt": null}
{"id": "e2bf938e-ce0c-4cc4-8c58-90f436e80792", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "16b82201-4376-45cc-83aa-7955d1e7fc25", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "96ccf67f-2923-4cd0-8f9a-f3f68dfcd534", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "34fed50c-acff-4a28-9cff-76ac7cdc6368", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "821852da-0e5f-4b60-b7d2-23eb29c24628", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "428aa3b0-86ce-439a-bde6-ce457b143b63", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n        self.inertia_weight = 0.7  # Initial inertia weight for balancing exploration and exploitation\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = self.inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            self.inertia_weight = 0.5 + 0.2 * np.cos(2 * np.pi * _ / self.max_iter)  # Update inertia weight dynamically\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation during optimization.", "configspace": "", "generation": 61, "fitness": 0.23977605205900843, "feedback": "The algorithm EnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "0992e64d-648e-4dcf-ac15-608c140d1cf6", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "76bf4a98-09fa-4c59-8428-35ef9e97a2ea", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "b33a19e0-ff3f-44d8-b0e7-9fd286494d83", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "383591c4-0b0f-4b32-b1ea-1a1e40aba050", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "0a601a8e-898a-4003-924d-ac9e2bd606e5", "solution": "import numpy as np\n\nclass EnhancedFastFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], population[np.argmin([func(ind) for ind in population])])\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedFastFPSO", "description": "Improve convergence speed by enhancing individual exploration through a dynamic mutation strategy based on personal best position.", "configspace": "", "generation": 66, "fitness": 0.1462091365274848, "feedback": "The algorithm EnhancedFastFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.3943099098525845, 0.34192341898406586, 0.43445618865791347, 0.4315069200217314, 0.2644908691289046, 0.40992247163046847, 0.38119483547222854, 0.38887078694703126, 0.3179552125157129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06675197516937847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06967755448370316, 0.07871933467125813, 0.05686473127865088, 0.07549841183816264, 0.076484899289743, 0.06266026627955756, 0.05833202479301092, 0.07156670413441335, 0.09024067589382523, 0.051638541523331694, 0.054632607440533554, 0.022709046461224736, 0.07053852373114622, 0.06009408197993382, 0.08672674311229545, 0.08419807502963339, 0.057987310849920815, 0.02025164084106723, 0.9276815903918304, 0.8575279114361789, 0.8525512688663425, 0.575544080574464, 0.5370094754095205, 0.8036322112068918, 0.9265742639682709, 0.10984957837571852, 0.8621302504243464, 0.1935244232632094, 0.0987018431089729, 0.15635742678060072, 0.13543261765155634, 0.1429920518444755, 0.1101292728570179, 0.1387067526278819, 0.14288304253544926, 0.03878351808084768, 0.28628566599619776, 0.22530244320937787, 0.12731506155039374, 0.13276400290015977, 0.2359322048751662, 0.09044303988626923, 0.09467906805653659, 0.12053622006553522, 0.0734715029727735, 0.10958834177786281, 9.999999999998899e-05, 9.999999999998899e-05, 0.10340678843969364, 0.15851594212325126, 9.999999999998899e-05, 0.14926377675333857, 0.08031539923899167, 0.1152497532295722, 0.1264489131859935, 0.1305526019862434, 0.005774498553430707, 0.10752882223749782, 0.10776212095191529, 0.10194917589000019, 0.10695751878611504, 0.1626431810229888, 0.12354502627931829, 9.999999999998899e-05, 0.005410014220931014, 9.999999999998899e-05, 0.008615953126193232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054814068122358894, 0.0355396887176499, 0.02848897777501791, 0.06422982565623281, 9.999999999998899e-05, 0.00010629286280305905, 0.06286604967697274, 0.017523281506639288, 0.037630872062058396, 0.004465405509410991, 0.010206614786150037, 0.019286559107863477, 9.999999999998899e-05, 0.012768044528332578, 0.0006121174006035179, 9.999999999998899e-05, 0.0021713156382565657, 9.999999999998899e-05, 0.06256132989143293, 0.08846686135754467, 0.06690245386769589, 9.999999999998899e-05, 0.0003002746776870069, 9.999999999998899e-05, 0.07762338913362565, 0.04584178449503307, 0.07318173772160375, 0.38669252012617494, 0.3358621272379384, 0.36636030759746074, 0.31915504984918674, 0.25903566011946355, 0.3259061332098284, 0.32828500347987655, 0.34802243880709616, 0.29783635075061043, 0.04005465583142631, 0.04904971000612168, 0.007980055929501795, 0.06521994275178566, 0.039020728256431325, 0.07952115460618658, 0.0688184638143361, 0.06095259569769318, 0.0561491645220612, 0.17058502937709275, 0.20594196836179712, 0.13393837141593246, 0.2067932107993442, 0.20816811332523055, 0.10345074996101489, 0.217398083877826, 0.16060605720528343, 0.09334191459077879, 0.12162238148529925, 0.20223161357145947, 0.13522098135855054, 0.15849479299539415, 0.1758182566825539, 0.1682031429565699, 0.14449802714505933, 0.23020028931491854, 0.11650556107477639, 0.13000202286182394, 0.1099189570086635, 0.07873677135665658, 0.15679009913422537, 0.1870410525222298, 0.0812963277905574, 0.0765725384420004, 0.20918674159598472, 0.05921929323049513, 0.15408123974450794, 0.18922919397631366, 0.14827828669369847, 0.17834189474735362, 0.1795826086433362, 0.16734842450877618, 0.16401967553894026, 0.14062558593643026, 0.1860163624854898, 0.14749841537611807, 0.1761944178016851, 0.15700836841388277, 0.15170269186344576, 0.1689575152206626, 0.1691613169716213, 0.18158827752911966, 0.16303614763879137, 0.1567956982598273, 0.34347680298333094, 0.18351830728943141, 0.1439988693828227, 0.16372815308347277, 0.1967917495152035, 0.19263346874677545, 0.09554661531511888, 0.1629051735421575, 0.13210569731095168, 0.08025335910746256, 0.19560330889940503, 0.04690569031387826, 0.09856706640647717, 0.1136615967965432, 0.18279380234702103, 0.3217243530328818, 0.15297836257582276, 0.20883033080288083, 0.1583208005706369, 0.15224007930619987, 0.17467348941938277, 0.16969578613461667, 0.18203809053330622, 0.1800276903923419, 0.16911951200244435, 0.1468741350965478, 0.19758600850423358, 0.06246987101870349, 0.06352891025626961, 0.044644456864776694, 0.08246276417222798, 0.07501796439689656, 0.04338211143426052, 0.0805501795133603, 0.034215952356327906, 0.04467312390212008]}, "mutation_prompt": null}
{"id": "752e71c5-c4e9-44e1-8056-21858f6013fe", "solution": "import numpy as np\n\nclass ImprovedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos, fitness_progress):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos) + fitness_progress)\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        fitness_progress = 0\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos, fitness_progress)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n                    fitness_progress += 1  # Update fitness progress\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "ImprovedHybridFPSO", "description": "Improve convergence speed by enhancing the mutation strategy with a dynamic adjustment based on individual fitness progress.", "configspace": "", "generation": 67, "fitness": 0.1431033853652021, "feedback": "The algorithm ImprovedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.2495736579161768, 0.22991169112939647, 0.5105652769081217, 0.354057225549089, 0.18975575942618284, 0.20544236714523267, 0.22128693757856976, 0.33296420489212597, 0.16658864658884853, 0.006445737164735732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050400872005374575, 0.11249648735305096, 0.04474626174166463, 0.0836014538433576, 0.05670645597360113, 0.05030289412464639, 0.07339489847985115, 0.06505293745776053, 0.14661838105540426, 0.019246212607169633, 0.023580002729546634, 0.026274022168345068, 0.07535824416047776, 0.05437863414020716, 0.04045732864179752, 0.09127148340391888, 0.05611381967749607, 0.010904223569314087, 0.9856390434142235, 0.9700908349059073, 0.9716233631467489, 0.13436856820124832, 0.7570076238212093, 0.967718313936904, 0.9853413459158954, 0.14877347525648243, 0.976050698000373, 0.09517332222912245, 0.0651452394338683, 0.07928872916377583, 0.09860921377921494, 0.06128044981774694, 0.08295926492918315, 0.0643675639821697, 0.1055922273619252, 0.015466489726441046, 0.13097510673223078, 0.2567332000807443, 0.13578789662819035, 0.07495756096696948, 0.08877695803009011, 0.035813799394254775, 0.09368759299982243, 0.10557974478535181, 0.05511745829508852, 0.12830842553739807, 9.999999999998899e-05, 0.005342960444155276, 0.2013069102999856, 0.13162451444303092, 9.999999999998899e-05, 0.10333486482927112, 0.10285812064302025, 0.04963231465506557, 0.04434920761175287, 0.12276448654677152, 0.1265602992369006, 0.1433021329534978, 9.999999999998899e-05, 0.1292301938303212, 0.06299994401342679, 0.14495103430175382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337174602956238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004778572862768171, 0.1016957135245038, 0.08863400954250411, 0.09539995186720429, 0.08515387762004156, 9.999999999998899e-05, 0.05881952452415151, 0.17210535426979656, 0.07028114628534732, 0.06118124034363914, 0.015777296654150064, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034443685352152364, 9.999999999998899e-05, 0.1401891952055867, 9.999999999998899e-05, 9.999999999998899e-05, 0.013889222309722893, 0.0014972502002957855, 0.35054897941223495, 0.15068366258894816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04391239010995307, 9.999999999998899e-05, 0.03011973995993178, 0.4405074635241375, 0.3106941283216622, 0.2780819303636699, 0.27009929106632, 0.20285125656923597, 0.2572600790277062, 0.25595780669524637, 0.3335247587733067, 0.325102237429178, 0.03110140681609863, 0.05061187793161703, 9.999999999998899e-05, 0.08360536599814372, 0.03809299639423025, 0.0910233584577147, 0.1357500785110971, 0.08416993471508327, 0.07130758835303208, 0.10841174913331275, 0.15072593918140798, 0.1781076516783101, 0.22350134060585247, 0.1896710279838424, 0.2122999375181095, 0.19271031123471782, 0.1327005227095306, 0.18169880887466372, 0.12328340817306249, 0.14822424085690433, 0.14325216298336652, 0.14753346512987686, 0.1642644522247767, 0.15308298713496404, 0.13566191752499468, 0.2147541945610727, 0.10080365315270678, 0.08728100478455436, 0.1048910732003353, 0.08525324310169513, 0.07317238301197304, 0.14109218297147474, 0.08358285776612884, 0.0789089647926634, 0.16983875286157346, 0.05904991204375487, 0.1884169819083441, 0.20186654660288472, 0.22680137355962426, 0.2260886504060644, 0.14554358913385135, 0.19554656616685728, 0.18702428096168555, 0.23626915160928674, 0.17994171570415707, 0.15237654477863594, 0.21164012472307892, 0.17684936333766832, 0.15748076979159464, 0.1785011941191953, 0.17945637156963168, 0.16425407588213148, 0.17981377553757227, 0.17188555801722105, 0.16231790002763757, 0.188363818344655, 0.14902410930423682, 0.16900105654673103, 0.2012004043328931, 0.19890675332990115, 0.09918633490160633, 0.16326114920288437, 0.14052712223483466, 0.07724638388989946, 0.20912015715491217, 0.04862853210027607, 0.0972184576361882, 0.1091047517089413, 0.16769069159131778, 0.3887630958874393, 0.15944439854834347, 0.14309522523899754, 0.19278243778643245, 0.20680836751255816, 0.18528119633406126, 0.2305498472263433, 0.19798621377979464, 0.21770740876144867, 0.2248380573995169, 0.17406759872333188, 0.2584639558560742, 0.07530735364632068, 0.1020948026509444, 0.04238797453685583, 0.10114917404838886, 0.09506317762433847, 0.05251052523335997, 0.07734852315348706, 0.06691628613062606, 0.054276376413537]}, "mutation_prompt": null}
{"id": "e9a8fe9c-a2e1-4eda-b7b9-d5390106dca5", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "7d4a4709-a9fc-43d6-8280-aba3874e9129", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "47fdbc93-4e6f-417b-9de1-e09d40140694", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n        self.inertia_range = [0.4, 0.9]  # Range for inertia weight\n        self.diversity_rate = 0.1  # Rate for diversity calculation\n        \n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def update_inertia(population):\n            diversity = np.std(population, axis=0)\n            inertia_weight = self.inertia_range[0] + (self.inertia_range[1] - self.inertia_range[0]) * (1 - np.mean(diversity) / np.max(diversity))\n            return inertia_weight\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, inertia_weight):\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + np.random.rand() * (best_pos - curr_pos) + np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            inertia_weight = update_inertia(population)\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, inertia_weight)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Introduce a dynamic inertia weight updating strategy based on the population's diversity to improve convergence speed.", "configspace": "", "generation": 70, "fitness": 0.16330712879001508, "feedback": "The algorithm EnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.7946949910953285, 0.7862127757927426, 0.818283518421912, 0.767352504354895, 0.19012831978753297, 0.7978286720181916, 0.7873413099892175, 0.7751193696591687, 0.24838833790607306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04796617205318521, 0.1388861823352241, 0.0488042226494072, 0.1110509192401643, 0.08468022729158897, 0.1045717938167321, 0.07687376394467116, 0.09950257987555056, 0.10437709114091265, 0.07391899930411505, 0.04022532593796713, 0.015278541990005223, 0.08704826866794024, 0.04908533315372965, 0.0018328823484700107, 0.03544715051474645, 0.03914793283138329, 0.00945969940878022, 0.07987432764367153, 0.05560565505976989, 0.0754641096615023, 0.09334637067067286, 0.08647591594127402, 0.0765280469614158, 0.11456704731501666, 0.0873324965267086, 0.06658766996272703, 0.1457946870487825, 0.06415314217890244, 0.10654341025893466, 0.6122483444827813, 0.16040374792451018, 0.1243127529160265, 0.31728521295867695, 0.08739598813780469, 0.08189345413906102, 0.25264779149191874, 0.1147339351045985, 0.08994623705640947, 0.19317668014676892, 0.16737651981716828, 0.08472533548982752, 0.11311752207784032, 0.14463230725427367, 0.057872120812489825, 0.1728289798718442, 0.16410806389079358, 9.999999999998899e-05, 0.14006621171949485, 0.27809451988998213, 0.23811547127516153, 0.15603185280695797, 0.17514252496595906, 0.1493995927277283, 0.14759025446171303, 0.1691872803427561, 0.16060460103326968, 0.2772349594196464, 9.999999999998899e-05, 0.140724909865793, 0.2375019104852356, 0.12311202067919802, 0.16938647962627296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07364902149245223, 0.024250111147089082, 0.08251295669818504, 0.06642277790077422, 9.999999999998899e-05, 9.999999999998899e-05, 0.08640538349393734, 0.05708463120066831, 0.06052465942832519, 9.999999999998899e-05, 0.14409910167268247, 0.1769172227586332, 0.08599967162052125, 0.10781181138382456, 0.12186718464926649, 0.19642246758967308, 0.10985730137539851, 0.0667561246664049, 0.02402756726189781, 0.15867797504384706, 0.12929125017018073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10107251385161631, 0.16154542797469928, 0.0532389988270906, 0.4751554809525954, 0.5136267196360619, 0.4608504754759942, 0.24990260299371914, 0.3867992765563548, 0.23730531562899737, 0.44092166273146227, 0.4608318843129746, 0.47330333100281896, 0.023503928772485194, 0.0184022038282452, 0.006079128910419063, 0.06652467519809435, 0.038682468241718726, 0.09187866286573043, 0.059324138141989335, 0.07095891022809098, 0.07526734997004647, 0.2538078031579466, 0.38937475911199193, 0.24805650956326952, 0.1756271095047297, 0.19741007323361426, 0.3402168494255725, 0.371740720607432, 0.24172637938987596, 0.13755020637506332, 0.1443205782080722, 0.33556782643018235, 0.1585722793813713, 0.1718227972735933, 0.2015220253775346, 0.2375112679035778, 0.16052197158222592, 0.48397663151137327, 0.1163039920551715, 0.11462826798894088, 0.21837955764701933, 0.14659749234708652, 0.1644298032211038, 0.22228511090673375, 0.14913452901633395, 0.1586511442549272, 0.30394517031711377, 0.0677674931241421, 0.1928965271428833, 0.19590744665399729, 0.21817848378994276, 0.24641600393302476, 0.2108344592854522, 0.24005049332239026, 0.21043743538913207, 0.1989308829638311, 0.25507414743529366, 0.19694665281246193, 0.19635669132380995, 0.17646129370749075, 0.16371840367051682, 0.1998647702790538, 0.19751797532516835, 0.1799316598880789, 0.2002054585675681, 0.1609614517234853, 0.3586079830049834, 0.1689718435860199, 0.15220545627020732, 0.17362330310660146, 0.20024592176709677, 0.19991108829384918, 0.12191787053671432, 0.1680083804266973, 0.1559352251526276, 0.08135509685069497, 0.18796757853042578, 0.05099331231205939, 0.16209517841829368, 0.11094499823454229, 0.19852026066490813, 0.10463528862041638, 0.16671279310573717, 0.16814869342282568, 0.1831819418171251, 0.23916493462278765, 0.2608886048178928, 0.23698921067541423, 0.2080846975833366, 0.23449258898615055, 0.268549281311779, 0.18735147676031272, 0.25559856344314635, 0.09398824626687019, 0.08485085630165246, 0.06051678592754428, 0.09176464392672845, 0.07814592151474531, 0.14702052395477216, 0.08738583647529397, 0.05648202361715482, 0.08991509892032923]}, "mutation_prompt": null}
{"id": "3d0734c1-227a-4816-869d-655b8fde09d4", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "5687b767-12bf-473f-8be8-036b812162d2", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "e1fd4999-51b0-47fa-8212-1864fe0ed75b", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "75955620-5df6-4ff1-978d-07d91e1c38c1", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "f88913cc-0a1b-421a-90e6-74648472ce4e", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5 * (1 - np.exp(-2.0 * _ / self.max_iter))  # Dynamic cognitive weight\n            social_weight = 1.5 * np.exp(-2.0 * _ / self.max_iter)  # Dynamic social weight\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the algorithm by introducing a dynamic adjustment of cognitive and social weights to adapt exploration and exploitation based on population performance.", "configspace": "", "generation": 75, "fitness": 0.21937171114668944, "feedback": "The algorithm EnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.24.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8136187839638247, 0.803411624273523, 0.8257205363749482, 0.8184091537518293, 0.7942821572986382, 0.8269676130035835, 0.8222899828229583, 0.8296331439212568, 0.8110394521868853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1680906669694241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07675874113404535, 0.10987223501207921, 0.05225777710932911, 0.10445630654663929, 0.06098415020937442, 0.07771819970801574, 0.05181704035076562, 0.07134481491676237, 0.14248803019038292, 0.04867712906073429, 0.07935254810725911, 0.03341088452286112, 0.07521055391603937, 0.06371472355856445, 0.08582644648118598, 0.07765024886032657, 0.05598951499123683, 0.0620181453664298, 0.9854824620073797, 0.9671421988336538, 0.9699583362331937, 0.928127094245726, 0.9135042606984178, 0.9657865392380983, 0.9853395299370764, 0.8640822197069606, 0.9759728161663598, 0.6142203216121997, 0.3630851599005154, 0.16773134883943308, 0.628513907712285, 0.5948709267809127, 0.20931351471995896, 0.4031861088172485, 0.13182136612568773, 0.04252606791007418, 0.39473074629578964, 0.22382006209451277, 0.14015117913678188, 0.21292112217742298, 0.16887337738652364, 0.06254428617722896, 0.10914731140294065, 0.12874167908129897, 0.1180266710668777, 0.15244363800028493, 9.999999999998899e-05, 0.006337221370660506, 0.22296128565939, 0.19613743664862282, 9.999999999998899e-05, 0.23401703558464404, 0.1429479394293348, 0.15165744992117347, 0.16382150622456026, 0.18535872934146413, 0.1285654009697308, 0.14651880521386595, 0.16510480360842172, 0.13416347056700084, 0.18847511496058955, 0.3543050984949665, 0.11880061524413887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0644570931934284, 0.04228054638121215, 0.03324768700973346, 0.06117983486910017, 9.999999999998899e-05, 0.0012762630390540375, 0.11277836554651599, 0.01097924026978403, 0.04700251905386976, 0.2420098864683995, 0.17542788602856563, 0.1843177169606357, 0.05762962417323547, 0.1616733750332392, 0.09002885734733623, 0.17157562745766408, 0.1408736392721074, 0.017755244981217944, 0.10126055686216606, 0.28734432583340863, 0.140824735168822, 0.07694794354527479, 0.008881779441069937, 9.999999999998899e-05, 0.15886066151874367, 0.09075217508720557, 0.11290273342098955, 0.48010847799948164, 0.4676644329737234, 0.45617784930944216, 0.5073744935163793, 0.4372744651231687, 0.5225456247320124, 0.47821144582443853, 0.4945787690537998, 0.5138069744635537, 0.038559577663157873, 0.03806814413462545, 0.003998419547063703, 0.07982335980495392, 0.06825476731436297, 0.08071068123553327, 0.14299394908792384, 0.08460204921013792, 0.11155303767927294, 0.20324216644870807, 0.31276011253812297, 0.17109342050058207, 0.5255527680495913, 0.2218486622620499, 0.28674157798829214, 0.28696327033318136, 0.19365691818430963, 0.21859446966870943, 0.14880013880736664, 0.19939800504354666, 0.15771591782245709, 0.19085797322185505, 0.1881277728673787, 0.16036645042928344, 0.14716894572662365, 0.2832631338332129, 0.12200951040353647, 0.07119986537412804, 0.11392060092573375, 0.13879791783377982, 0.07999445147873396, 0.25731100068177304, 0.13050712493517602, 0.152978905452407, 0.21203750545983502, 0.05599909293750238, 0.2214373947519418, 0.2021807915435272, 0.22370030749513925, 0.21108143629626486, 0.18679643553496794, 0.21610924340513205, 0.19406024697177005, 0.20573605780280246, 0.18990568578422318, 0.1936882255683764, 0.18001707995901994, 0.19819598319862608, 0.18862253089836545, 0.19296346603181558, 0.17185331082459054, 0.20933565230059314, 0.1701375816674281, 0.16926201487696269, 0.5636767545191232, 0.18923239583516738, 0.15370820198561486, 0.17241169572201542, 0.20200470846540752, 0.2015179850582487, 0.09961598999808607, 0.1697691114488502, 0.16320683963618088, 0.08302241331727034, 0.21288571192053496, 0.05086009224475163, 0.10414810893062243, 0.14381516866092459, 0.21034835007010566, 0.35429266832925443, 0.1672958987824621, 0.2175937631679663, 0.1872881881886579, 0.19402640506433033, 0.20964907388623433, 0.2421060538490648, 0.20935739079171556, 0.2294655664298939, 0.22278381179715379, 0.2507120130262789, 0.2447490700438666, 0.09624478473608777, 0.0862504148866643, 0.07558595822193948, 0.08834491979289816, 0.12330963203920142, 0.05693196936213607, 0.09421227869239934, 0.06194422771458652, 0.09100926016168664]}, "mutation_prompt": null}
{"id": "0413c012-3dce-4cc7-be9b-d2f135492971", "solution": "import numpy as np\n\nclass DynamicParallelSwarmFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5\n        self.mutation_rate = 0.5\n        self.num_subswarms = 4  # New parameter for dynamic subswarm exploration\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        subswarm_size = self.population_size // self.num_subswarms  # New subswarm size calculation\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                subswarm_idx = i // subswarm_size\n                subswarm_best_pos = population[subswarm_idx * subswarm_size + np.argmin([func(ind) for ind in population[subswarm_idx * subswarm_size: (subswarm_idx + 1) * subswarm_size])]\n                \n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], subswarm_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)\n            \n        return global_best_pos", "name": "DynamicParallelSwarmFPSO", "description": "Introducing dynamic parallel swarm exploration to enable multiple sub-swarm interactions for enhanced global search capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 36, 187, '                subswarm_best_pos = population[subswarm_idx * subswarm_size + np.argmin([func(ind) for ind in population[subswarm_idx * subswarm_size: (subswarm_idx + 1) * subswarm_size])]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 36, 187, '                subswarm_best_pos = population[subswarm_idx * subswarm_size + np.argmin([func(ind) for ind in population[subswarm_idx * subswarm_size: (subswarm_idx + 1) * subswarm_size])]'))", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {}, "mutation_prompt": null}
{"id": "2820adfe-b937-41b5-97b1-53dbba8d2d3e", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "bc789e43-b8ed-43b2-9fc9-695a2726f894", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO_Elitism:\n    def __init__(self, budget, dim, elite_frac=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n        self.elite_frac = elite_frac\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            new_population = []\n            elites_count = int(self.elite_frac * self.population_size)\n            elites = population[np.argsort([func(ind) for ind in population])[:elites_count]]\n            \n            for i in range(self.population_size):\n                if i < elites_count:\n                    new_population.append(elites[i])\n                    continue\n                \n                if np.random.rand() < self.explore_prob:\n                    new_individual = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    new_individual = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(new_individual) < func(global_best_pos):\n                    global_best_pos = new_individual\n                new_population.append(new_individual)\n            \n            population = np.array(new_population)\n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO_Elitism", "description": "Introduce elitism by preserving a fraction of the best individuals in each iteration to maintain promising solutions and accelerate convergence.", "configspace": "", "generation": 78, "fitness": 0.2111317329702075, "feedback": "The algorithm EnhancedHybridFPSO_Elitism got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.7677314326150229, 0.7935200939168832, 0.8215964623691088, 0.8213839505099192, 0.7754574888913242, 0.7861219004607282, 0.8128876886702767, 0.7953348664138249, 0.7607845977066563, 0.05647927095191774, 0.08181573304053713, 0.0011088513594240679, 0.14515037182816648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018730585716365544, 0.0942420337709391, 0.032966570848361854, 0.048818277419213185, 0.10506416161213405, 0.06173239002611641, 0.081984867749618, 0.032442775893903875, 0.08841647946373088, 0.02817352897391323, 0.04823033203208016, 0.029787783030224668, 0.08510242215170472, 0.08452139413413007, 0.013789892963496642, 0.00970822171120067, 0.064568228949062, 0.022319638754706106, 0.9637004151271835, 0.9282260029018949, 0.982388197485558, 0.90565176357659, 0.9400310892863001, 0.939563127524628, 0.935538382551474, 0.8340624801587389, 0.9477742137362238, 0.537250497406107, 0.5898388780884365, 0.42017990282243256, 0.5580771931746384, 0.5277527757532423, 0.5466704831742815, 0.27486665755389794, 0.12493725375702158, 0.21024372406791525, 0.32921661559324644, 0.08205618850248897, 0.12891580012245762, 0.21125444888974154, 0.21809724658401541, 0.08207184938640932, 0.07371801335629957, 0.13095233402394146, 0.07166487731505133, 0.12968327568694527, 0.14199154408351256, 0.3319808691169285, 0.24575421257109953, 0.2742668218745744, 0.19844922239867369, 0.24364833172001876, 0.12094908575751417, 0.152250533057684, 0.16740654868646165, 0.2009699336229721, 0.017868803746257433, 0.18187744159009023, 0.1495284056180599, 0.14885204916512262, 0.175806411514287, 0.1326660484712323, 0.032358668173621985, 9.999999999998899e-05, 0.027201316964883704, 9.999999999998899e-05, 0.03117602197360736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207672799208763, 0.05209824673679431, 0.0240650784400257, 0.0685141111159191, 0.05406793653407549, 0.008917297522629486, 0.0003398764656558084, 0.08112846955136432, 0.05864993982006017, 0.04998423475679081, 0.30920725758542245, 0.06668094412377035, 0.19115369278764527, 0.09058844752149653, 0.08482019152547093, 0.10526087320392685, 0.07461266456756765, 0.03229058823584141, 0.10573573178191187, 0.029029294353607238, 0.13380986619935686, 0.26745526366978434, 0.1198409124928217, 0.06706137203187768, 0.06238574189236845, 0.2433295996168775, 0.07864923945462976, 0.11378410683159834, 0.46809416365279144, 0.5546061786246836, 0.473004453360496, 0.4475763005346146, 0.45697641557735524, 0.4382107897454536, 0.4826485369282264, 0.4844132115604922, 0.4757472270694926, 0.014083519244504128, 0.020793333786257917, 0.021994211694778665, 0.09183532444321807, 0.02514652392928196, 0.0516403779655491, 0.09765483248027174, 0.036120565375055036, 0.048920364639688185, 0.1328176554497832, 0.22635911999945846, 0.14982062299392707, 0.3201077352637295, 0.32307169288457593, 0.1715840296536547, 0.20719626864235496, 0.1466888895318118, 0.10491944742932702, 0.1527534331848388, 0.32866222362803343, 0.135766909699909, 0.19106748717233613, 0.19047671849396686, 0.15283769521604895, 0.1356674083589553, 0.2847425473242552, 0.10571501502485958, 0.06484201646692889, 0.08313253938025023, 0.12980974287075242, 0.08046617077723406, 0.08618087784320161, 0.1346018663435964, 0.0900041432284695, 0.20285538764927624, 0.0499955243678647, 0.18707153886257055, 0.18895553771231055, 0.1431654482624346, 0.17170487585107808, 0.2084440166532815, 0.2069353573965078, 0.22613339611171368, 0.1767628121735939, 0.1865277646642839, 0.18023931561128992, 0.18970734648774312, 0.1714633177269257, 0.17225758470174768, 0.17431565506040647, 0.18189009616430407, 0.20685522680284874, 0.20388597325703772, 0.1889323667721836, 0.10443449886969924, 0.1255689726480561, 0.15356352499066017, 0.1707315971622787, 0.19968830873472432, 0.20096073808492498, 0.09981703482157356, 0.16860791797140917, 0.16154964855622989, 0.08196324131872512, 0.20617687100629944, 0.12399976831242987, 0.10295185476256064, 0.16889507161496642, 0.19950680272300514, 0.1049812361220751, 0.4336920364109914, 0.23438212395410196, 0.20842016583414325, 0.22457882138592078, 0.19817187535375658, 0.21704389753550513, 0.21087997800559533, 0.2478165358141753, 0.23046160737923727, 0.20892383282796279, 0.21300068081774814, 0.08153915711282822, 0.07288925709035188, 0.06156808186081686, 0.09094067835607167, 0.05841898028949477, 0.046699762433112135, 0.0641064308723962, 0.04946046420108141, 0.0790788332990815]}, "mutation_prompt": null}
{"id": "f67cce4f-0207-4667-8df3-de6962a5a368", "solution": "import numpy as np\n\nclass CooperativeHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, other_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos) + social_weight * np.random.rand() * (np.mean(other_pos, axis=0) - curr_pos)\n            return curr_pos + velocity\n\n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                other_pos = np.delete(population, i, axis=0)\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, other_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "CooperativeHybridFPSO", "description": "Improve convergence speed by introducing a cooperative learning strategy where individuals exchange information to guide the search.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 31, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {}, "mutation_prompt": null}
{"id": "3298ede4-863f-482d-96b6-28c09136c158", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "fec9a701-8d88-4e0f-a5f5-639796b89136", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "3431107d-2af1-4e6f-a109-4a4c4ebe2ac0", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "44116463-fd55-44bf-a918-0a592cf93fab", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n\n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n\n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.max_iter):\n            self.population_size = 20 + int(10 * np.sin(np.pi * _ / self.max_iter))  # Dynamic population size adaptation\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n\n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n\n            self.mutation_rate *= 0.95\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)\n\n        return global_best_pos", "name": "EnhancedDynamicPopulationFPSO", "description": "Enhance convergence speed by introducing a dynamic population size adaptation mechanism based on individual fitness performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {}, "mutation_prompt": null}
{"id": "e62d59ba-05ed-4778-ac74-e8cd0d288924", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "e6744d28-2412-4771-af65-ff6c5760cf9c", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "7b369eaf-ad81-4224-b5b7-01526b0edab5", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5 / np.sqrt(1 + np.linalg.norm(best_pos - curr_pos))\n            social_weight = 1.5 / np.sqrt(1 + np.linalg.norm(global_best_pos - curr_pos))\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Improve convergence speed by introducing dynamic adjustment of cognitive and social weights in the swarm movement to enhance the exploitation and exploration balance.", "configspace": "", "generation": 86, "fitness": 0.20762187648795916, "feedback": "The algorithm EnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8013953904559998, 0.8031340428984213, 0.8207388386069218, 0.7795955866903146, 0.7348580275934659, 0.7980648079073557, 0.8025639763773738, 0.766715131376561, 0.7757699987988216, 0.023226409094858846, 0.008843198366105032, 0.0004775557024108146, 9.999999999998899e-05, 0.027201204558798042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949423449214008, 0.0712487804103521, 0.07355863152969466, 0.11014439494700767, 0.09624503527835426, 0.11425339098701204, 0.08003325205229617, 0.0677662229152014, 0.09107089643532673, 0.06289068000558762, 0.06272582906039392, 0.06899226812871928, 0.05836250598165027, 0.06266233356744555, 0.023638091433301867, 0.06281081278710754, 0.038404829567386, 0.038609693196686945, 0.2059042709519343, 0.10642204669745736, 0.13762345740782544, 0.13000034603045219, 0.5666212249135751, 0.13782676743194133, 0.5112130625122545, 0.11984710712380675, 0.5051742459275956, 0.6068168804466041, 0.1446341931896855, 0.5459689271184469, 0.6703637985033397, 0.594180871870357, 0.5590408543197684, 0.6285797559117224, 0.13502944438754616, 0.18782666328892483, 0.23921936728203308, 0.16172002203532265, 0.11237739524598289, 0.3521897116782867, 0.1525063691690226, 0.0834889140233881, 0.11214796280857531, 0.13147576314305187, 0.15878224805911945, 0.17755911221657228, 0.12637660289412378, 0.40443303724328084, 0.1721961047955709, 0.08633290683321992, 0.2111375647042354, 0.16778461643773612, 0.20611073467919727, 0.17795221280022744, 0.13191915355293637, 0.14327263892626396, 0.11003838874912941, 0.15250711729623123, 0.13322867121051973, 0.13003191415562654, 0.14875419456734085, 0.12242340131152418, 0.15338119043065113, 0.003576958927497653, 9.999999999998899e-05, 0.004446767898564574, 0.04141518939339717, 0.007458484563442447, 9.999999999998899e-05, 0.03739167378165931, 9.999999999998899e-05, 0.046698828774404455, 0.08155108257408539, 0.09476766238858436, 0.06343914189311817, 0.054167362321440704, 0.002813909328195807, 0.033225379644913455, 0.11416859480145991, 0.09101347810459415, 0.08527356584999746, 0.21910150767780145, 0.11927205301316735, 0.11051679120740354, 0.08617382312277899, 0.11329119018834954, 0.12228063181788418, 0.16635733523281526, 0.19351576199030096, 0.05108234036178472, 0.1863861982587781, 0.12565374676128538, 0.16292494378583744, 0.028865144612108762, 0.04772273828142992, 0.022589698824876714, 0.08117813501615712, 0.0943505030704177, 0.07898615061249326, 0.5016364957718376, 0.502137255168067, 0.4954178372879725, 0.5094953309224808, 0.48043081115582886, 0.4662162498172777, 0.49958142467315425, 0.4965698980490787, 0.5331362880489492, 0.01632635369128732, 0.03187641859674828, 0.0021182320843634583, 0.0689791890547411, 0.07221626244403179, 0.07218960737117852, 0.07624265111982675, 0.13187681257830863, 0.10088370989655449, 0.22187793749153673, 0.2582466386741874, 0.120179574717168, 0.1423759370572676, 0.1920058468799266, 0.18878844707747444, 0.16493027264677895, 0.2463418297890646, 0.2700390895001702, 0.14061454576312427, 0.2826391152693233, 0.16260132215393808, 0.19002238797954774, 0.1865342973012598, 0.19862349707089455, 0.14318300528586314, 0.31509951035529393, 0.1388383851818571, 0.07594626102126822, 0.22564211438134008, 0.10171264417252202, 0.14030131574169413, 0.1869456572812055, 0.13695840143569527, 0.08411474180166445, 0.21336141706652556, 0.06237826635497801, 0.21181604065523174, 0.23100063923223801, 0.249762185383421, 0.24956721254643688, 0.281412203218089, 0.2339209680954908, 0.21104193679800864, 0.24865515953306516, 0.2756844957651712, 0.1629811801167692, 0.17601472863268608, 0.19045517798240386, 0.17189452925988336, 0.19989345670655212, 0.1687258502232578, 0.17829846621761247, 0.17577670128710687, 0.17739342195732044, 0.7963257686860559, 0.1865196443313032, 0.12951390931597306, 0.8161778715707292, 0.19828110315085667, 0.16593018402219628, 0.12257236114824077, 0.16753698993071398, 0.15011996853507137, 0.6640301115187307, 0.7870447366139438, 0.43469004313840276, 0.20512247905511838, 0.1661436174590908, 0.6937414910239381, 0.10440815530024605, 0.16609825288325408, 0.26207839632332364, 0.21397185378077643, 0.2357695716648639, 0.20876755311471829, 0.25244637496230404, 0.21097127717733932, 0.20405943984232366, 0.30242132123205256, 0.236285044871136, 0.25837015455785883, 0.10244580169564799, 0.07093172321509866, 0.06791803417300801, 0.09905457417894281, 0.0808905659446556, 0.10739936261554683, 0.07232401635457897, 0.07817652916915163, 0.0854853384814831]}, "mutation_prompt": null}
{"id": "412a9059-cad0-4553-93b2-1c41f76c9b83", "solution": "import numpy as np\n\nclass DynamicPopSizeEnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_population_size = 30\n        self.min_population_size = 10\n        self.max_iter = budget // self.min_population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(-5.0, 5.0, size=(size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population_size = self.max_population_size\n        global_best_pos = initialize_population(population_size)[np.argmin([func(ind) for ind in initialize_population(population_size)])]\n        \n        for _ in range(self.max_iter):\n            population = initialize_population(population_size)\n            for i in range(population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n\n            if _ % (self.max_iter // 5) == 0 and population_size > self.min_population_size:\n                population_size -= 1  # Reduce population size for better exploration\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "DynamicPopSizeEnhancedHybridFPSO", "description": "Improve convergence speed by incorporating a dynamic population size adaptation based on individual performance.", "configspace": "", "generation": 87, "fitness": 0.19195727804205573, "feedback": "The algorithm DynamicPopSizeEnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.42935920063534905, 0.4048372831703303, 0.4145228398726808, 0.3214085868116514, 0.3690586088909372, 0.34285460418532543, 0.3804793416167732, 0.3470163160226073, 0.3755335766943677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02843434128012723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06695892479161902, 0.07493396227884219, 0.12116383075137038, 0.0664694952061543, 0.0994506924921279, 0.07631254226208928, 0.059700949653079816, 0.08542331813373916, 0.09694121199667771, 0.064702102889593, 0.06424721538503197, 0.06906825336045552, 0.08758237706998628, 0.06743232903546181, 0.06969876043972911, 0.080710783398805, 0.06413190265542412, 0.08033100916049296, 0.9774640244003776, 0.9897378464517494, 0.9506688510481565, 0.9744103751204767, 0.9796169474762466, 0.9836152066625514, 0.9875340962911809, 0.9740196234691862, 0.9167995629150361, 0.2450039954780675, 0.18282532431054155, 0.20418525385807607, 0.2008762812053677, 0.16548134470708797, 0.1851761367280319, 0.15022895016060756, 0.17157777280933262, 0.1922064154354568, 0.20660536590851708, 0.21754109666986987, 0.21795501800817196, 0.2242396008655667, 0.2670831195365847, 0.2157515443456518, 0.2139645063186093, 0.22319343663694402, 0.19428033178866655, 0.15576888538905242, 0.1621667619644659, 0.1756630908756277, 0.07086816232649362, 0.12823573758619222, 0.1311004171794633, 0.11546283148484004, 0.22120352949219213, 0.19283373280925176, 0.1473728220849454, 0.1296969339142513, 0.21677709581246918, 0.13918439772275248, 0.12012829707628847, 0.16369092245949723, 0.12980705870085296, 0.2180670218906705, 0.19448353217684244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02037039105123184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08497972322968539, 0.06351251857387119, 0.09410853279372555, 0.0720523434606477, 0.058697565154081865, 0.041946592361197466, 0.038762339522692146, 0.07404250982370231, 0.09123427818283725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00605372649149527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06193828758611852, 0.025090420757159837, 0.03398701725324793, 0.05433129718533314, 0.06788451564524278, 0.09989989091514762, 0.08926283528085444, 0.036070950349447184, 0.016226578519642265, 0.3822172777523649, 0.3597184757055457, 0.3704155581490406, 0.3727819639021476, 0.37349368516313375, 0.3533671641215116, 0.3411737738343802, 0.4080723797499265, 0.3401564850113745, 0.09961943282980223, 0.08976202784254295, 0.04975003182946125, 0.06559880569801657, 0.09261570131239438, 0.08146595100571863, 0.09997034736333332, 0.145990707107285, 0.08723968833635676, 0.24498746453026943, 0.15088398667808856, 0.1912238028637877, 0.16702060826462162, 0.2072673635047323, 0.20968605212506686, 0.19487206034196936, 0.20075504395267418, 0.15689197634016527, 0.22173582121949142, 0.25736431483263533, 0.2207451333625967, 0.258837170666278, 0.2750250365479652, 0.24258664190863732, 0.2536281441383045, 0.22442109710567004, 0.1861372334375042, 0.17924924843827716, 0.17378956617174646, 0.12044237594031837, 0.16265826733196942, 0.1916132980283083, 0.1826188259152428, 0.20703224888759397, 0.12684066233601643, 0.15688486516513056, 0.17831901657990656, 0.16461313275027312, 0.2220693453075937, 0.16935545704986288, 0.1744136502015231, 0.2129486613685727, 0.1953457975332481, 0.16861370541458964, 0.20242203059062536, 0.16336794643028552, 0.17304798946386202, 0.1860121668413235, 0.17583021517688047, 0.20407990088041184, 0.18717966150101983, 0.17710307039462203, 0.17883874557798585, 0.18549301343693214, 0.18493668029037258, 0.19193040957263108, 0.6645707552162089, 0.15853548620354163, 0.36104887869194013, 0.22257336985824316, 0.1723743019581796, 0.16823563142993303, 0.37684722343638266, 0.5094342736303555, 0.3225623525897857, 0.27827392964933306, 0.29750000682625166, 0.16777958089869027, 0.3812274841892569, 0.16040352697824678, 0.31272446089745864, 0.2813748549581162, 0.17294704543708994, 0.18034478837141155, 0.18165280199009814, 0.17618364537232012, 0.16791518555249163, 0.18667701866019815, 0.17598743976517983, 0.18513630960518845, 0.18899594650747276, 0.07767515372996603, 0.06595983297733687, 0.0686336971852245, 0.06490653779828515, 0.07538922757480793, 0.08206351790917743, 0.05938084725266812, 0.09840339009114318, 0.07835525694968182]}, "mutation_prompt": null}
{"id": "d9042f5f-63a8-4a64-8446-6532cef1d9b7", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "5eea9350-a2a5-447d-8a19-abe72af67aca", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Enhance the exploration phase by incorporating a dynamic adaptive mutation strength based on individual and global performance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "96502e83-87f4-4b3c-9b24-49a5faa72b78", "solution": "import numpy as np\n\nclass AcceleratedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n        self.inertia_min = 0.4  # Minimum inertia weight\n        self.inertia_max = 0.9  # Maximum inertia weight\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, inertia_weight):\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        inertia_weight = self.inertia_max\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, inertia_weight)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - _ / self.max_iter)  # Adapt exploration probability\n            inertia_weight = self.inertia_min + (_ / self.max_iter) * (self.inertia_max - self.inertia_min)  # Update inertia weight\n            \n        return global_best_pos", "name": "AcceleratedHybridFPSO", "description": "Accelerate convergence by introducing a novel adaptive inertia weight strategy based on individual and global performance.", "configspace": "", "generation": 90, "fitness": 0.23977605205900843, "feedback": "The algorithm AcceleratedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8350770893500191, 0.8171586884321558, 0.8234171450334196, 0.8447367699782669, 0.8003805300311809, 0.8267927737332907, 0.802733511875926, 0.8288854301953419, 0.8044738507366029, 0.06559303679648387, 0.013286693841359942, 9.999999999998899e-05, 0.131527063618885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07699742356348527, 0.13329306614724445, 0.09171037279721328, 0.08659008477758123, 0.0662329756050909, 0.07287998928429695, 0.0663339386127787, 0.08376905180564376, 0.10220013070074563, 0.069214991809457, 0.05671666182741397, 0.028231662635786248, 0.08490712981036264, 0.08602212429521228, 0.0762756762284833, 0.12141816249065596, 0.07096242606329473, 0.01587344334115004, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.64069513772774, 0.604506746338044, 0.6589881968746132, 0.6699379140459655, 0.6626656686712141, 0.6760341429922971, 0.6567372499664595, 0.5987022430625695, 0.2652758449032748, 0.3932756803804984, 0.23211146352824985, 0.16970973767447117, 0.16854371654654643, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.04303667576332826, 0.15165572951639683, 0.06449756018834718, 0.18808367744333532, 0.2824708004295383, 0.20527362229628998, 0.10685804988567926, 0.17017561044927276, 0.13854744576717404, 0.18930850690921186, 0.2201158353651147, 0.21947355500562282, 0.19839925404258785, 0.19372382903940222, 0.2189795928191428, 0.13362129895283392, 0.1984456952626913, 0.24253571481613445, 0.11248744157829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040671473481368015, 0.026569749076172378, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035683137369042495, 0.010469922865035786, 0.07212270851786928, 0.06730958473975757, 0.05029961395092819, 0.07468563103787618, 0.0017364068042745595, 0.03976704619299887, 0.1473903384038434, 0.109906780446698, 0.07222237248594632, 0.21124688038026573, 0.17704369729978575, 0.1337856111494169, 0.06486988765731816, 0.16432044738076457, 0.10536278372657215, 0.1576179838429682, 0.2375218324610041, 0.0485556169750152, 0.09933523045141868, 0.2960839229207959, 0.15768146594378307, 0.042824804777991665, 0.06032207030445824, 9.999999999998899e-05, 0.14432358931074363, 0.11408975270509636, 0.09177676344023733, 0.5130500813351433, 0.512516602359485, 0.53315915037792, 0.506542817563248, 0.5274062544395928, 0.5024102555438836, 0.5152282382434601, 0.5111435645910842, 0.5305435350283603, 0.0568395302399165, 0.04629353855131324, 0.008460438817256555, 0.09192328883588419, 0.04691692226626709, 0.11255360526409297, 0.12386353831721175, 0.07934239802570775, 0.07670557821798174, 0.3398013090178088, 0.29942986970944974, 0.19541926691759115, 0.3092666569011484, 0.32131419093459357, 0.33302746025267804, 0.2734334160213018, 0.14620346175224386, 0.20476508928259984, 0.12752989744520915, 0.169294058172605, 0.12885498266572626, 0.18359983109447964, 0.16636067250718445, 0.19683043940172607, 0.1539430017133644, 0.3016809698611068, 0.11801994339468425, 0.07572102054972218, 0.12315774716174599, 0.09227063200311691, 0.08995555607621808, 0.23507469470280207, 0.10415712388675058, 0.07774546383049652, 0.3215724293068446, 0.05994303061390416, 0.21700673939758575, 0.21923428196058636, 0.21534943798484096, 0.23753583783617793, 0.16963044159057494, 0.2425381610766424, 0.16516602058701224, 0.1863356470820089, 0.2143122715587007, 0.1785490732395989, 0.18301139564861146, 0.17944167990498716, 0.184899233912591, 0.18344662946220347, 0.19338159261725973, 0.20924740437341216, 0.1598222878050437, 0.169622394519221, 0.8698951805683075, 0.18923536125821916, 0.15370204097406315, 0.1724275278045514, 0.20179704002812815, 0.20142941354481414, 0.09947817972914585, 0.16971422487950583, 0.16369754419523275, 0.08302358833975776, 0.21210580295314763, 0.051322728077034974, 0.10414327758947872, 0.15033500468034833, 0.21034903883123313, 0.4350357248634238, 0.16754175653836734, 0.4614309513234822, 0.18941484326719893, 0.20197960350487432, 0.2677103708355896, 0.21453664338671674, 0.2489598640502394, 0.22069336098329373, 0.243186328919339, 0.23552016565279843, 0.2793298952312665, 0.08060811999169692, 0.10659838789472176, 0.07277538373609638, 0.09722391045656531, 0.14002119851691963, 0.055682058135603674, 0.09090564318149386, 0.04343471157532619, 0.10388862911772945]}, "mutation_prompt": null}
{"id": "b8846fa3-18d2-4b66-8e55-92e1d3e3f0a0", "solution": "class EnhancedHybridFPSO_SpeedEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n        self.initial_explore_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos):\n            inertia_weight = 0.7\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = self.initial_explore_prob * func(population[i]) / func(global_best_pos)  # Dynamic exploration weight adjustment based on individual performance\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO_SpeedEnhanced", "description": "Introduce a dynamic exploration weight adjustment mechanism based on the individual performance to enhance the convergence speed.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {}, "mutation_prompt": null}
{"id": "3013f40d-0ef3-4210-a43e-200ad5b83c39", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, iteration):\n            inertia_weight = 0.5 + 0.4 * (1 - iteration / self.max_iter)  # Dynamic inertia weight\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for iteration in range(1, self.max_iter + 1):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, iteration)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - iteration / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Introducing a dynamic inertia weight that adapts based on the iteration count to balance exploration and exploitation during optimization.", "configspace": "", "generation": 92, "fitness": 0.24107527755544492, "feedback": "The algorithm EnhancedHybridFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "d0a3059f-b3bb-4e83-beba-321c863a2a21", "metadata": {"aucs": [0.8053803946158768, 0.8171586884321558, 0.8230297015140375, 0.8125886914970653, 0.8003805300311809, 0.8250559155443403, 0.8090952292791802, 0.8288854301953419, 0.8162652315171135, 0.07135948117954372, 0.013301532921522807, 9.999999999998899e-05, 0.14885586311664278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07696186165760477, 0.13329306614735437, 0.0916529656035826, 0.08654571296552571, 0.06623297560497632, 0.07288737353937436, 0.06631546072604966, 0.08376905180564376, 0.10217487721309049, 0.06918332677981776, 0.056716661827419745, 0.02821139765911762, 0.08465259941360526, 0.0860221242947784, 0.07635857233438659, 0.12110475919837771, 0.07096242606346381, 0.009112870347961821, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.6696190670410291, 0.604506746338044, 0.6480793655838257, 0.6800417345098968, 0.6626656686712141, 0.6674849425198537, 0.6440545351931408, 0.5987022430625695, 0.0940281927506127, 0.39359542102166056, 0.23211146352824985, 0.16970973767447117, 0.16855989625682466, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.048080585434854384, 0.15001299258198741, 0.06447880471585776, 0.17822683569286057, 0.28046667712353046, 0.20522705335878277, 0.11931664187017177, 0.1545264815896642, 0.13854784110236074, 0.23071925793410475, 0.2828698058432798, 0.219467224671675, 0.2058745451452081, 0.20079572422374592, 0.21899347448116613, 0.13342573319013606, 0.1909802223756546, 0.24253651890215622, 0.11279540554823575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05951927821556002, 0.026611360406151086, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035677724996843185, 0.1299669696727086, 0.07887403273571181, 0.0673029947332976, 0.07450407219208333, 0.0751201189148274, 0.0017371492371539565, 0.02713632214350381, 0.1348693529392574, 0.10986190253382411, 0.06300101200740682, 0.19295554139156834, 0.1770437191471077, 0.13554273409844175, 0.06513208699255613, 0.16432058476580547, 0.11008911534737786, 0.1584810089767552, 0.23752185399293058, 0.050805601051659655, 0.09100165817837702, 0.2960826545659805, 0.1622910430854848, 0.00010402036510948065, 0.06032207066837003, 9.999999999998899e-05, 0.1383794141025252, 0.11408979263848851, 0.09216988053945374, 0.5342936883425791, 0.512618117813598, 0.5210580858706052, 0.5223593071805612, 0.5249471915310095, 0.5624634480092642, 0.5146307710386473, 0.5143154316517791, 0.5194916801354271, 0.05685280756209998, 0.046293538587160565, 0.008474426454176287, 0.09191070799514378, 0.04691692226626709, 0.11252645908604175, 0.12372406653118984, 0.07934239794605602, 0.07671974369958412, 0.3328880759672709, 0.29943278495245473, 0.18375851589425252, 0.29110580326750146, 0.3213143044293001, 0.5360787718897599, 0.2832310876867715, 0.14620335602509826, 0.3358120570679737, 0.1275234391206833, 0.16929424031208928, 0.12885005261839255, 0.18172684865933697, 0.16636067250718445, 0.19707642386511415, 0.16563071343889024, 0.3016809698611068, 0.11801994339468425, 0.07571533829521704, 0.12315732528817969, 0.08794318320256822, 0.08913362083946375, 0.23507469470280207, 0.10478426326984824, 0.07772359622245806, 0.32157550202123764, 0.06172448177462175, 0.2072360650506967, 0.2192103796006417, 0.24714909196690538, 0.24127779101122282, 0.1696306894290518, 0.24430336400306774, 0.16516602058701224, 0.1863356467366699, 0.23473289059324187, 0.178601752326218, 0.18301139565295188, 0.17945176511199623, 0.18488074589632297, 0.18344662946220347, 0.1934606039625567, 0.20918885469101334, 0.1598222878050326, 0.1696375307492115, 0.8631045011395128, 0.18923536125821916, 0.15370414312775793, 0.1724274642881064, 0.20179704002812815, 0.20143197343388264, 0.09947829165037037, 0.16971422487950583, 0.16366365975195407, 0.08302378807652822, 0.21210580295314763, 0.051319332718640864, 0.10414315611041203, 0.15033500466993033, 0.21032509823330314, 0.5458901129396974, 0.16754175652803094, 0.29008728325867095, 0.2111758655407988, 0.2019754911866517, 0.2381906379822123, 0.24366386210786395, 0.2489598640502394, 0.20633761729228894, 0.25102388419531596, 0.23552016565279843, 0.21258867064109443, 0.08013920985306433, 0.10659838817554734, 0.06568892403367332, 0.09984630895212909, 0.1400211986516401, 0.04706643107061115, 0.08580996444212075, 0.043434711579923846, 0.10552382725907805]}, "mutation_prompt": null}
{"id": "7cfa0dec-ba47-42e5-b00d-f6502666f515", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, iteration):\n            inertia_weight = 0.5 + 0.4 * (1 - iteration / self.max_iter)  # Dynamic inertia weight\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for iteration in range(1, self.max_iter + 1):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, iteration)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - iteration / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Introducing a dynamic inertia weight that adapts based on the iteration count to balance exploration and exploitation during optimization.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3013f40d-0ef3-4210-a43e-200ad5b83c39", "metadata": {"aucs": [0.8053803946158768, 0.8171586884321558, 0.8230297015140375, 0.8125886914970653, 0.8003805300311809, 0.8250559155443403, 0.8090952292791802, 0.8288854301953419, 0.8162652315171135, 0.07135948117954372, 0.013301532921522807, 9.999999999998899e-05, 0.14885586311664278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07696186165760477, 0.13329306614735437, 0.0916529656035826, 0.08654571296552571, 0.06623297560497632, 0.07288737353937436, 0.06631546072604966, 0.08376905180564376, 0.10217487721309049, 0.06918332677981776, 0.056716661827419745, 0.02821139765911762, 0.08465259941360526, 0.0860221242947784, 0.07635857233438659, 0.12110475919837771, 0.07096242606346381, 0.009112870347961821, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.6696190670410291, 0.604506746338044, 0.6480793655838257, 0.6800417345098968, 0.6626656686712141, 0.6674849425198537, 0.6440545351931408, 0.5987022430625695, 0.0940281927506127, 0.39359542102166056, 0.23211146352824985, 0.16970973767447117, 0.16855989625682466, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.048080585434854384, 0.15001299258198741, 0.06447880471585776, 0.17822683569286057, 0.28046667712353046, 0.20522705335878277, 0.11931664187017177, 0.1545264815896642, 0.13854784110236074, 0.23071925793410475, 0.2828698058432798, 0.219467224671675, 0.2058745451452081, 0.20079572422374592, 0.21899347448116613, 0.13342573319013606, 0.1909802223756546, 0.24253651890215622, 0.11279540554823575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05951927821556002, 0.026611360406151086, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035677724996843185, 0.1299669696727086, 0.07887403273571181, 0.0673029947332976, 0.07450407219208333, 0.0751201189148274, 0.0017371492371539565, 0.02713632214350381, 0.1348693529392574, 0.10986190253382411, 0.06300101200740682, 0.19295554139156834, 0.1770437191471077, 0.13554273409844175, 0.06513208699255613, 0.16432058476580547, 0.11008911534737786, 0.1584810089767552, 0.23752185399293058, 0.050805601051659655, 0.09100165817837702, 0.2960826545659805, 0.1622910430854848, 0.00010402036510948065, 0.06032207066837003, 9.999999999998899e-05, 0.1383794141025252, 0.11408979263848851, 0.09216988053945374, 0.5342936883425791, 0.512618117813598, 0.5210580858706052, 0.5223593071805612, 0.5249471915310095, 0.5624634480092642, 0.5146307710386473, 0.5143154316517791, 0.5194916801354271, 0.05685280756209998, 0.046293538587160565, 0.008474426454176287, 0.09191070799514378, 0.04691692226626709, 0.11252645908604175, 0.12372406653118984, 0.07934239794605602, 0.07671974369958412, 0.3328880759672709, 0.29943278495245473, 0.18375851589425252, 0.29110580326750146, 0.3213143044293001, 0.5360787718897599, 0.2832310876867715, 0.14620335602509826, 0.3358120570679737, 0.1275234391206833, 0.16929424031208928, 0.12885005261839255, 0.18172684865933697, 0.16636067250718445, 0.19707642386511415, 0.16563071343889024, 0.3016809698611068, 0.11801994339468425, 0.07571533829521704, 0.12315732528817969, 0.08794318320256822, 0.08913362083946375, 0.23507469470280207, 0.10478426326984824, 0.07772359622245806, 0.32157550202123764, 0.06172448177462175, 0.2072360650506967, 0.2192103796006417, 0.24714909196690538, 0.24127779101122282, 0.1696306894290518, 0.24430336400306774, 0.16516602058701224, 0.1863356467366699, 0.23473289059324187, 0.178601752326218, 0.18301139565295188, 0.17945176511199623, 0.18488074589632297, 0.18344662946220347, 0.1934606039625567, 0.20918885469101334, 0.1598222878050326, 0.1696375307492115, 0.8631045011395128, 0.18923536125821916, 0.15370414312775793, 0.1724274642881064, 0.20179704002812815, 0.20143197343388264, 0.09947829165037037, 0.16971422487950583, 0.16366365975195407, 0.08302378807652822, 0.21210580295314763, 0.051319332718640864, 0.10414315611041203, 0.15033500466993033, 0.21032509823330314, 0.5458901129396974, 0.16754175652803094, 0.29008728325867095, 0.2111758655407988, 0.2019754911866517, 0.2381906379822123, 0.24366386210786395, 0.2489598640502394, 0.20633761729228894, 0.25102388419531596, 0.23552016565279843, 0.21258867064109443, 0.08013920985306433, 0.10659838817554734, 0.06568892403367332, 0.09984630895212909, 0.1400211986516401, 0.04706643107061115, 0.08580996444212075, 0.043434711579923846, 0.10552382725907805]}, "mutation_prompt": null}
{"id": "5fb86953-a616-400b-bbc8-678a3279db0b", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, iteration):\n            inertia_weight = 0.5 + 0.4 * (1 - iteration / self.max_iter)  # Dynamic inertia weight\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for iteration in range(1, self.max_iter + 1):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, iteration)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - iteration / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Introducing a dynamic inertia weight that adapts based on the iteration count to balance exploration and exploitation during optimization.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3013f40d-0ef3-4210-a43e-200ad5b83c39", "metadata": {"aucs": [0.8053803946158768, 0.8171586884321558, 0.8230297015140375, 0.8125886914970653, 0.8003805300311809, 0.8250559155443403, 0.8090952292791802, 0.8288854301953419, 0.8162652315171135, 0.07135948117954372, 0.013301532921522807, 9.999999999998899e-05, 0.14885586311664278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07696186165760477, 0.13329306614735437, 0.0916529656035826, 0.08654571296552571, 0.06623297560497632, 0.07288737353937436, 0.06631546072604966, 0.08376905180564376, 0.10217487721309049, 0.06918332677981776, 0.056716661827419745, 0.02821139765911762, 0.08465259941360526, 0.0860221242947784, 0.07635857233438659, 0.12110475919837771, 0.07096242606346381, 0.009112870347961821, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.6696190670410291, 0.604506746338044, 0.6480793655838257, 0.6800417345098968, 0.6626656686712141, 0.6674849425198537, 0.6440545351931408, 0.5987022430625695, 0.0940281927506127, 0.39359542102166056, 0.23211146352824985, 0.16970973767447117, 0.16855989625682466, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.048080585434854384, 0.15001299258198741, 0.06447880471585776, 0.17822683569286057, 0.28046667712353046, 0.20522705335878277, 0.11931664187017177, 0.1545264815896642, 0.13854784110236074, 0.23071925793410475, 0.2828698058432798, 0.219467224671675, 0.2058745451452081, 0.20079572422374592, 0.21899347448116613, 0.13342573319013606, 0.1909802223756546, 0.24253651890215622, 0.11279540554823575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05951927821556002, 0.026611360406151086, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035677724996843185, 0.1299669696727086, 0.07887403273571181, 0.0673029947332976, 0.07450407219208333, 0.0751201189148274, 0.0017371492371539565, 0.02713632214350381, 0.1348693529392574, 0.10986190253382411, 0.06300101200740682, 0.19295554139156834, 0.1770437191471077, 0.13554273409844175, 0.06513208699255613, 0.16432058476580547, 0.11008911534737786, 0.1584810089767552, 0.23752185399293058, 0.050805601051659655, 0.09100165817837702, 0.2960826545659805, 0.1622910430854848, 0.00010402036510948065, 0.06032207066837003, 9.999999999998899e-05, 0.1383794141025252, 0.11408979263848851, 0.09216988053945374, 0.5342936883425791, 0.512618117813598, 0.5210580858706052, 0.5223593071805612, 0.5249471915310095, 0.5624634480092642, 0.5146307710386473, 0.5143154316517791, 0.5194916801354271, 0.05685280756209998, 0.046293538587160565, 0.008474426454176287, 0.09191070799514378, 0.04691692226626709, 0.11252645908604175, 0.12372406653118984, 0.07934239794605602, 0.07671974369958412, 0.3328880759672709, 0.29943278495245473, 0.18375851589425252, 0.29110580326750146, 0.3213143044293001, 0.5360787718897599, 0.2832310876867715, 0.14620335602509826, 0.3358120570679737, 0.1275234391206833, 0.16929424031208928, 0.12885005261839255, 0.18172684865933697, 0.16636067250718445, 0.19707642386511415, 0.16563071343889024, 0.3016809698611068, 0.11801994339468425, 0.07571533829521704, 0.12315732528817969, 0.08794318320256822, 0.08913362083946375, 0.23507469470280207, 0.10478426326984824, 0.07772359622245806, 0.32157550202123764, 0.06172448177462175, 0.2072360650506967, 0.2192103796006417, 0.24714909196690538, 0.24127779101122282, 0.1696306894290518, 0.24430336400306774, 0.16516602058701224, 0.1863356467366699, 0.23473289059324187, 0.178601752326218, 0.18301139565295188, 0.17945176511199623, 0.18488074589632297, 0.18344662946220347, 0.1934606039625567, 0.20918885469101334, 0.1598222878050326, 0.1696375307492115, 0.8631045011395128, 0.18923536125821916, 0.15370414312775793, 0.1724274642881064, 0.20179704002812815, 0.20143197343388264, 0.09947829165037037, 0.16971422487950583, 0.16366365975195407, 0.08302378807652822, 0.21210580295314763, 0.051319332718640864, 0.10414315611041203, 0.15033500466993033, 0.21032509823330314, 0.5458901129396974, 0.16754175652803094, 0.29008728325867095, 0.2111758655407988, 0.2019754911866517, 0.2381906379822123, 0.24366386210786395, 0.2489598640502394, 0.20633761729228894, 0.25102388419531596, 0.23552016565279843, 0.21258867064109443, 0.08013920985306433, 0.10659838817554734, 0.06568892403367332, 0.09984630895212909, 0.1400211986516401, 0.04706643107061115, 0.08580996444212075, 0.043434711579923846, 0.10552382725907805]}, "mutation_prompt": null}
{"id": "bb554abe-63d5-4136-a5b4-71a32565b03d", "solution": "import numpy as np\n\nclass EnhancedDynamicBoundaryHandlingFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n        self.boundary_reflection_rate = 0.1  # Boundary reflection rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n\n        def constrain_boundary(position):\n            return np.clip(position, -5.0, 5.0)\n\n        def swarm_move(curr_pos, best_pos, global_best_pos, iteration):\n            inertia_weight = 0.5 + 0.4 * (1 - iteration / self.max_iter)  # Dynamic inertia weight\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return constrain_boundary(curr_pos + velocity)\n\n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n\n        for iteration in range(1, self.max_iter + 1):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    new_pos = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                    population[i] = new_pos if func(new_pos) < func(population[i]) else population[i]\n                else:\n                    new_pos = swarm_move(population[i], population[i], global_best_pos, iteration)\n                    population[i] = new_pos if func(new_pos) < func(population[i]) else population[i]\n\n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n\n                population[i] = constrain_boundary(population[i])\n\n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - iteration / self.max_iter)  # Adapt exploration probability\n\n        return global_best_pos", "name": "EnhancedDynamicBoundaryHandlingFPSO", "description": "Implement a dynamic boundary handling mechanism to prevent solutions from converging near the search space boundaries too quickly, enhancing exploration and preventing premature convergence.", "configspace": "", "generation": 95, "fitness": 0.19194659782211265, "feedback": "The algorithm EnhancedDynamicBoundaryHandlingFPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "3013f40d-0ef3-4210-a43e-200ad5b83c39", "metadata": {"aucs": [0.5477052565862103, 0.6025487763105618, 0.5856372801320937, 0.5856255086781033, 0.5477425373434854, 0.5593609066120488, 0.5726621942084761, 0.5678929130170167, 0.5717977967122634, 0.0663777128122891, 0.04495879919645518, 9.999999999998899e-05, 0.011006707736007204, 0.0732527088142273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948996948972418, 0.11003584593137561, 0.04961932671335234, 0.0839061214040645, 0.07712937321838453, 0.13017372576710007, 0.057404405388687296, 0.042495306841748404, 0.12833283403314066, 0.01902082581100062, 0.06753445235917366, 0.041665898634960286, 0.10843917661864311, 0.08913911269859653, 0.011980808548000876, 0.0981948608791221, 0.03874612623176765, 0.017295369644296676, 0.9731924748895725, 0.9238691783327991, 0.9453818432741778, 0.8734965435727455, 0.824866506499121, 0.837898289378521, 0.9541802776975632, 0.8278647836168495, 0.953029794476545, 0.2053461049221571, 0.3376112567964149, 0.16758826801813265, 0.3001348542483133, 0.19730393081684217, 0.3031729261251207, 0.3923067176075594, 0.24545443583643511, 0.1663109831183347, 0.21431722822587917, 0.11754692714628656, 0.13338690993124513, 0.1581339590729678, 0.18315552044281602, 0.12890590023438142, 0.12267716137083828, 0.13143200508054376, 0.06285121239315972, 0.14905996711967218, 0.0218371131581796, 0.07772839150216881, 0.2135124779308668, 0.3098784611050134, 0.09451064634499184, 0.23719947804012564, 0.12189737454245353, 0.1557263120904494, 0.20054732079659177, 0.18253790000002867, 0.14554808592374557, 0.1956488679822369, 0.18102236190981413, 0.12791763211237617, 0.11874599470992686, 0.33213586357363734, 0.10011340215201325, 9.999999999998899e-05, 9.999999999998899e-05, 0.02748992876302092, 0.04935010969187714, 0.0013714210352989697, 9.999999999998899e-05, 0.003731354329381431, 9.999999999998899e-05, 0.021802783828037686, 0.06842418102891767, 0.04336297003277578, 0.09359591199204131, 0.06965051824543311, 0.003609474025181081, 0.020500083740809583, 0.15148418294913246, 0.11821685742033383, 0.09297117045368464, 0.03179350098832823, 0.0846863063443416, 0.05982972817960652, 0.03418297990655739, 0.11950279550573573, 0.05846357059579055, 0.05670963601207535, 0.04884075911148833, 0.05199299889672582, 0.07368684479438359, 0.1875669056007997, 0.11723554246477075, 0.04157470146275588, 0.04059485180499489, 0.03283630213432864, 0.13453008333270378, 0.05946896209256847, 0.09066278963347851, 0.45283203029445473, 0.4594885035713986, 0.42349222662818675, 0.47294721938429996, 0.4248337164491721, 0.4684328010028236, 0.4287084629554708, 0.45505974030488194, 0.4950086820139069, 0.0578075578447238, 0.04599053454114421, 0.010463767721865413, 0.07025421314087887, 0.061334374693863936, 0.07155719856116505, 0.11220467932445266, 0.04168714790036898, 0.09266273278192927, 0.23538229557737145, 0.22375720379379804, 0.1483186163403578, 0.27884207002326833, 0.24850273604342943, 0.17251110995320595, 0.3820820657197781, 0.19025311796995348, 0.20489216397175736, 0.15436785356603688, 0.2107756729616833, 0.14106733655176196, 0.18423187132641883, 0.21003191580964298, 0.15720041965759068, 0.14215903874910196, 0.2568783546725769, 0.13285652849545548, 0.09510071828697308, 0.06954093669759409, 0.10134631943896888, 0.19863768331080722, 0.22597331691278266, 0.08290614869222013, 0.07517387033992995, 0.19389670820226879, 0.0638122807623096, 0.19015449818404273, 0.1821862130596965, 0.16623481032317045, 0.20880515112287812, 0.2233889721483273, 0.19824418999769045, 0.20103441764930108, 0.1852391432135776, 0.17112616923622959, 0.17998634480213427, 0.20741028604892198, 0.17747056293450403, 0.165621402831155, 0.2255602013000385, 0.1830153751849659, 0.18281946203563626, 0.18564440665812632, 0.16855775753591462, 0.10430514105161726, 0.18821615538657865, 0.1526667937150361, 0.17110117404241376, 0.20087404981840118, 0.19967499531430843, 0.09978112460254795, 0.1678652700198694, 0.16051614277318493, 0.08267775031898694, 0.2108622717651576, 0.05019214683543627, 0.10274218150998038, 0.1474341618434386, 0.20664877821457772, 0.10429173802660985, 0.16616032053977647, 0.3163082584692525, 0.20498607420687043, 0.1935718146162232, 0.20026526909007714, 0.17457434957505646, 0.2133822297174901, 0.1796370879118856, 0.26128540066741324, 0.18711701963202287, 0.2166442592078619, 0.08684873336715371, 0.10168739059797138, 0.05429135531899498, 0.09868485448296238, 0.07402015246836657, 0.051461905422532817, 0.08367762255727507, 0.05009153137216271, 0.06337982901914929]}, "mutation_prompt": null}
{"id": "93c61336-1874-4f12-9046-5518dfa3f43a", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, iteration):\n            inertia_weight = 0.5 + 0.4 * (1 - iteration / self.max_iter)  # Dynamic inertia weight\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for iteration in range(1, self.max_iter + 1):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, iteration)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - iteration / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Introducing a dynamic inertia weight that adapts based on the iteration count to balance exploration and exploitation during optimization.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3013f40d-0ef3-4210-a43e-200ad5b83c39", "metadata": {"aucs": [0.8053803946158768, 0.8171586884321558, 0.8230297015140375, 0.8125886914970653, 0.8003805300311809, 0.8250559155443403, 0.8090952292791802, 0.8288854301953419, 0.8162652315171135, 0.07135948117954372, 0.013301532921522807, 9.999999999998899e-05, 0.14885586311664278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07696186165760477, 0.13329306614735437, 0.0916529656035826, 0.08654571296552571, 0.06623297560497632, 0.07288737353937436, 0.06631546072604966, 0.08376905180564376, 0.10217487721309049, 0.06918332677981776, 0.056716661827419745, 0.02821139765911762, 0.08465259941360526, 0.0860221242947784, 0.07635857233438659, 0.12110475919837771, 0.07096242606346381, 0.009112870347961821, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.6696190670410291, 0.604506746338044, 0.6480793655838257, 0.6800417345098968, 0.6626656686712141, 0.6674849425198537, 0.6440545351931408, 0.5987022430625695, 0.0940281927506127, 0.39359542102166056, 0.23211146352824985, 0.16970973767447117, 0.16855989625682466, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.048080585434854384, 0.15001299258198741, 0.06447880471585776, 0.17822683569286057, 0.28046667712353046, 0.20522705335878277, 0.11931664187017177, 0.1545264815896642, 0.13854784110236074, 0.23071925793410475, 0.2828698058432798, 0.219467224671675, 0.2058745451452081, 0.20079572422374592, 0.21899347448116613, 0.13342573319013606, 0.1909802223756546, 0.24253651890215622, 0.11279540554823575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05951927821556002, 0.026611360406151086, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035677724996843185, 0.1299669696727086, 0.07887403273571181, 0.0673029947332976, 0.07450407219208333, 0.0751201189148274, 0.0017371492371539565, 0.02713632214350381, 0.1348693529392574, 0.10986190253382411, 0.06300101200740682, 0.19295554139156834, 0.1770437191471077, 0.13554273409844175, 0.06513208699255613, 0.16432058476580547, 0.11008911534737786, 0.1584810089767552, 0.23752185399293058, 0.050805601051659655, 0.09100165817837702, 0.2960826545659805, 0.1622910430854848, 0.00010402036510948065, 0.06032207066837003, 9.999999999998899e-05, 0.1383794141025252, 0.11408979263848851, 0.09216988053945374, 0.5342936883425791, 0.512618117813598, 0.5210580858706052, 0.5223593071805612, 0.5249471915310095, 0.5624634480092642, 0.5146307710386473, 0.5143154316517791, 0.5194916801354271, 0.05685280756209998, 0.046293538587160565, 0.008474426454176287, 0.09191070799514378, 0.04691692226626709, 0.11252645908604175, 0.12372406653118984, 0.07934239794605602, 0.07671974369958412, 0.3328880759672709, 0.29943278495245473, 0.18375851589425252, 0.29110580326750146, 0.3213143044293001, 0.5360787718897599, 0.2832310876867715, 0.14620335602509826, 0.3358120570679737, 0.1275234391206833, 0.16929424031208928, 0.12885005261839255, 0.18172684865933697, 0.16636067250718445, 0.19707642386511415, 0.16563071343889024, 0.3016809698611068, 0.11801994339468425, 0.07571533829521704, 0.12315732528817969, 0.08794318320256822, 0.08913362083946375, 0.23507469470280207, 0.10478426326984824, 0.07772359622245806, 0.32157550202123764, 0.06172448177462175, 0.2072360650506967, 0.2192103796006417, 0.24714909196690538, 0.24127779101122282, 0.1696306894290518, 0.24430336400306774, 0.16516602058701224, 0.1863356467366699, 0.23473289059324187, 0.178601752326218, 0.18301139565295188, 0.17945176511199623, 0.18488074589632297, 0.18344662946220347, 0.1934606039625567, 0.20918885469101334, 0.1598222878050326, 0.1696375307492115, 0.8631045011395128, 0.18923536125821916, 0.15370414312775793, 0.1724274642881064, 0.20179704002812815, 0.20143197343388264, 0.09947829165037037, 0.16971422487950583, 0.16366365975195407, 0.08302378807652822, 0.21210580295314763, 0.051319332718640864, 0.10414315611041203, 0.15033500466993033, 0.21032509823330314, 0.5458901129396974, 0.16754175652803094, 0.29008728325867095, 0.2111758655407988, 0.2019754911866517, 0.2381906379822123, 0.24366386210786395, 0.2489598640502394, 0.20633761729228894, 0.25102388419531596, 0.23552016565279843, 0.21258867064109443, 0.08013920985306433, 0.10659838817554734, 0.06568892403367332, 0.09984630895212909, 0.1400211986516401, 0.04706643107061115, 0.08580996444212075, 0.043434711579923846, 0.10552382725907805]}, "mutation_prompt": null}
{"id": "47a3a49e-d9b8-40e8-bce9-1d421006acb5", "solution": "import numpy as np\n\nclass DynamicAdaptiveSpaceResizing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n        self.resize_factor = 0.1  # Factor for dynamic search space resizing\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, iteration):\n            inertia_weight = 0.5 + 0.4 * (1 - iteration / self.max_iter)  # Dynamic inertia weight\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for iteration in range(1, self.max_iter + 1):\n            diversity = np.mean(np.std(population, axis=0))  # Calculate population diversity\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, iteration)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - iteration / self.max_iter)  # Adapt exploration probability\n            \n            if iteration % 5 == 0:\n                if diversity < 0.1:\n                    population = np.clip(population, -5.0, 5.0)  # Resize search space dynamically\n                else:\n                    population = np.clip(population, global_best_pos - self.resize_factor * diversity, global_best_pos + self.resize_factor * diversity)\n            \n        return global_best_pos", "name": "DynamicAdaptiveSpaceResizing", "description": "Introducing a novel dynamic adaptive search space resizing strategy based on population diversity to improve convergence speed.", "configspace": "", "generation": 97, "fitness": 0.2384642044307214, "feedback": "The algorithm DynamicAdaptiveSpaceResizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "3013f40d-0ef3-4210-a43e-200ad5b83c39", "metadata": {"aucs": [0.8162871544948858, 0.8215796968178771, 0.850996448946203, 0.8110865314521595, 0.8107427519505455, 0.8244318111501203, 0.814454017930388, 0.8273351419073298, 0.828180191803662, 0.06741324579020891, 0.006501698782333198, 0.023900116684029804, 0.1533017864599142, 0.06012004283323402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008138858114904779, 0.07627635864623605, 0.11138408209101469, 0.07703431055250187, 0.0964899714747608, 0.06319749833321364, 0.08580252833236135, 0.0723057610419845, 0.09493706675555769, 0.1622712781845883, 0.05047547230346172, 0.05703936176394708, 0.04424782494691426, 0.09007414565944927, 0.057118742867295236, 0.06326783777426881, 0.10012438168316729, 0.06803826946378688, 0.030619110405164962, 0.9856397828540918, 0.957753734768362, 0.9328152178937175, 0.9276092476351854, 0.9446165135539683, 0.9680198452953732, 0.9853408389024085, 0.8619327277096647, 0.9754442855122978, 0.6337317278382788, 0.5708035428516108, 0.6386275966082748, 0.6709573899089201, 0.6465951353931068, 0.6598103759665461, 0.6514899466963664, 0.590747531744241, 0.11033271828697522, 0.22651681526279832, 0.2308605457227021, 0.16765953319463245, 0.1599549655315302, 0.11638471187772681, 0.07569667934013702, 0.09331605624535677, 0.12872813329563337, 0.06486117386586143, 0.1616063264840586, 0.010461602532001568, 0.10435529021354595, 0.3292604172413136, 0.24784144802445685, 0.1413390484332051, 0.20209247524412444, 0.2368868661161826, 0.1835562472714377, 0.21795626298303228, 0.2206534976242409, 0.1261855487027813, 0.16077866299362908, 0.15235068974944965, 0.266744550182321, 0.19576149641135032, 0.2424511712477354, 0.11921996876050767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034519239672127555, 9.999999999998899e-05, 9.999999999998899e-05, 0.0289562432528635, 9.999999999998899e-05, 0.1716282825577704, 0.093384264598118, 0.04672175974487147, 0.05570942140798174, 0.0712736197340198, 0.01931633730958693, 0.037022134018601216, 0.1677315319801772, 0.032459056901021355, 0.0686826864141038, 0.18746656974089904, 0.1328441852212513, 0.1730209818431656, 0.05911433070880068, 0.1834982178459883, 0.10644115381362373, 0.1045469076158011, 0.09696956388743183, 0.04333789550205691, 0.06502203726931854, 0.16699875766153094, 0.07884315055838653, 0.01852978144360551, 0.007157829772919677, 0.034531558130630025, 0.17671056586113176, 0.0956695449553856, 0.07130115861813446, 0.5457881444730254, 0.5254518468593263, 0.5311864314693153, 0.5289717948759616, 0.5140758328012307, 0.5461772916610041, 0.5388424158291857, 0.6007462183639188, 0.6032044943651467, 0.044502248530498, 0.049868804955960355, 0.002581982707322239, 0.08186343311770072, 0.05575955784930975, 0.08051613346654307, 0.07889351398670008, 0.06363825084459718, 0.11100756267897882, 0.2402020724901499, 0.23605635108937906, 0.24608065594723116, 0.3498043825623637, 0.3844013876947815, 0.3823769648020592, 0.31600403472066896, 0.15352166540482193, 0.3248467125617881, 0.11790730098177482, 0.17577100549420666, 0.16193311995306725, 0.15709035825605455, 0.18163950761420566, 0.3535794816511524, 0.15039791253438983, 0.3137852354414704, 0.11942471537179611, 0.07107511828771362, 0.1268243034453821, 0.09590396038228322, 0.09153523325253388, 0.2573375631265703, 0.09539383540764179, 0.10782012559478049, 0.24801050716374906, 0.059742641199627355, 0.1951548923917017, 0.22431741452138265, 0.2394970144580616, 0.19774578612742066, 0.21873687974942568, 0.179689253663455, 0.1857527235505202, 0.17062602530079185, 0.17247324665193386, 0.16588050514296515, 0.1905885879475787, 0.17102106033066244, 0.22593886415569653, 0.25561313776198546, 0.18668762684844065, 0.18071791826505612, 0.16837547915866835, 0.161069153989438, 0.8847917807838362, 0.18909848844609844, 0.1540533817196469, 0.17259660085911477, 0.20196399600939396, 0.20146748398728287, 0.09945947627905405, 0.16978939731087483, 0.16612869650363826, 0.08306429836331808, 0.212995846925901, 0.051605836203733046, 0.10393202713331307, 0.15169833402112942, 0.20933712251325087, 0.6369270842394472, 0.1677243199052918, 0.28501708843116, 0.19633234974725955, 0.2412909639835551, 0.24470979031754136, 0.24159519664040308, 0.24613601023998455, 0.22885933453195784, 0.21575588424615266, 0.2220418218790512, 0.24804874692014367, 0.08777449355667977, 0.10758659474546017, 0.06016352778753431, 0.05660376148637969, 0.11426546803403748, 0.048200713272620654, 0.10756424271954979, 0.05507072382143763, 0.0819589827781152]}, "mutation_prompt": null}
{"id": "8f5619ea-2394-42ae-886c-cd5d4633718f", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, iteration):\n            inertia_weight = 0.5 + 0.4 * (1 - iteration / self.max_iter)  # Dynamic inertia weight\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for iteration in range(1, self.max_iter + 1):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, iteration)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - iteration / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Introducing a dynamic inertia weight that adapts based on the iteration count to balance exploration and exploitation during optimization.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3013f40d-0ef3-4210-a43e-200ad5b83c39", "metadata": {"aucs": [0.8053803946158768, 0.8171586884321558, 0.8230297015140375, 0.8125886914970653, 0.8003805300311809, 0.8250559155443403, 0.8090952292791802, 0.8288854301953419, 0.8162652315171135, 0.07135948117954372, 0.013301532921522807, 9.999999999998899e-05, 0.14885586311664278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07696186165760477, 0.13329306614735437, 0.0916529656035826, 0.08654571296552571, 0.06623297560497632, 0.07288737353937436, 0.06631546072604966, 0.08376905180564376, 0.10217487721309049, 0.06918332677981776, 0.056716661827419745, 0.02821139765911762, 0.08465259941360526, 0.0860221242947784, 0.07635857233438659, 0.12110475919837771, 0.07096242606346381, 0.009112870347961821, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.6696190670410291, 0.604506746338044, 0.6480793655838257, 0.6800417345098968, 0.6626656686712141, 0.6674849425198537, 0.6440545351931408, 0.5987022430625695, 0.0940281927506127, 0.39359542102166056, 0.23211146352824985, 0.16970973767447117, 0.16855989625682466, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.048080585434854384, 0.15001299258198741, 0.06447880471585776, 0.17822683569286057, 0.28046667712353046, 0.20522705335878277, 0.11931664187017177, 0.1545264815896642, 0.13854784110236074, 0.23071925793410475, 0.2828698058432798, 0.219467224671675, 0.2058745451452081, 0.20079572422374592, 0.21899347448116613, 0.13342573319013606, 0.1909802223756546, 0.24253651890215622, 0.11279540554823575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05951927821556002, 0.026611360406151086, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035677724996843185, 0.1299669696727086, 0.07887403273571181, 0.0673029947332976, 0.07450407219208333, 0.0751201189148274, 0.0017371492371539565, 0.02713632214350381, 0.1348693529392574, 0.10986190253382411, 0.06300101200740682, 0.19295554139156834, 0.1770437191471077, 0.13554273409844175, 0.06513208699255613, 0.16432058476580547, 0.11008911534737786, 0.1584810089767552, 0.23752185399293058, 0.050805601051659655, 0.09100165817837702, 0.2960826545659805, 0.1622910430854848, 0.00010402036510948065, 0.06032207066837003, 9.999999999998899e-05, 0.1383794141025252, 0.11408979263848851, 0.09216988053945374, 0.5342936883425791, 0.512618117813598, 0.5210580858706052, 0.5223593071805612, 0.5249471915310095, 0.5624634480092642, 0.5146307710386473, 0.5143154316517791, 0.5194916801354271, 0.05685280756209998, 0.046293538587160565, 0.008474426454176287, 0.09191070799514378, 0.04691692226626709, 0.11252645908604175, 0.12372406653118984, 0.07934239794605602, 0.07671974369958412, 0.3328880759672709, 0.29943278495245473, 0.18375851589425252, 0.29110580326750146, 0.3213143044293001, 0.5360787718897599, 0.2832310876867715, 0.14620335602509826, 0.3358120570679737, 0.1275234391206833, 0.16929424031208928, 0.12885005261839255, 0.18172684865933697, 0.16636067250718445, 0.19707642386511415, 0.16563071343889024, 0.3016809698611068, 0.11801994339468425, 0.07571533829521704, 0.12315732528817969, 0.08794318320256822, 0.08913362083946375, 0.23507469470280207, 0.10478426326984824, 0.07772359622245806, 0.32157550202123764, 0.06172448177462175, 0.2072360650506967, 0.2192103796006417, 0.24714909196690538, 0.24127779101122282, 0.1696306894290518, 0.24430336400306774, 0.16516602058701224, 0.1863356467366699, 0.23473289059324187, 0.178601752326218, 0.18301139565295188, 0.17945176511199623, 0.18488074589632297, 0.18344662946220347, 0.1934606039625567, 0.20918885469101334, 0.1598222878050326, 0.1696375307492115, 0.8631045011395128, 0.18923536125821916, 0.15370414312775793, 0.1724274642881064, 0.20179704002812815, 0.20143197343388264, 0.09947829165037037, 0.16971422487950583, 0.16366365975195407, 0.08302378807652822, 0.21210580295314763, 0.051319332718640864, 0.10414315611041203, 0.15033500466993033, 0.21032509823330314, 0.5458901129396974, 0.16754175652803094, 0.29008728325867095, 0.2111758655407988, 0.2019754911866517, 0.2381906379822123, 0.24366386210786395, 0.2489598640502394, 0.20633761729228894, 0.25102388419531596, 0.23552016565279843, 0.21258867064109443, 0.08013920985306433, 0.10659838817554734, 0.06568892403367332, 0.09984630895212909, 0.1400211986516401, 0.04706643107061115, 0.08580996444212075, 0.043434711579923846, 0.10552382725907805]}, "mutation_prompt": null}
{"id": "3680c09b-0410-40ef-ba68-827422cc04de", "solution": "import numpy as np\n\nclass EnhancedHybridFPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.explore_prob = 0.5  # Initial exploration probability\n        self.mutation_rate = 0.5  # Initial mutation rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        \n        def dynamic_mutation(individual, best_pos, global_best_pos):\n            mutation_strength = self.mutation_rate / (1 + np.linalg.norm(individual - global_best_pos))\n            return individual + mutation_strength * np.random.normal(0, 1, size=self.dim)\n        \n        def swarm_move(curr_pos, best_pos, global_best_pos, iteration):\n            inertia_weight = 0.5 + 0.4 * (1 - iteration / self.max_iter)  # Dynamic inertia weight\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            velocity = np.zeros(self.dim)\n            velocity = inertia_weight * velocity + cognitive_weight * np.random.rand() * (best_pos - curr_pos) + social_weight * np.random.rand() * (global_best_pos - curr_pos)\n            return curr_pos + velocity\n        \n        population = initialize_population()\n        global_best_pos = population[np.argmin([func(ind) for ind in population])]\n        \n        for iteration in range(1, self.max_iter + 1):\n            for i in range(self.population_size):\n                if np.random.rand() < self.explore_prob:\n                    population[i] = dynamic_mutation(population[i], global_best_pos, global_best_pos)\n                else:\n                    population[i] = swarm_move(population[i], population[i], global_best_pos, iteration)\n                \n                if func(population[i]) < func(global_best_pos):\n                    global_best_pos = population[i]\n            \n            self.mutation_rate *= 0.95  # Update mutation rate\n            self.explore_prob = 0.5 * (1 - iteration / self.max_iter)  # Adapt exploration probability\n            \n        return global_best_pos", "name": "EnhancedHybridFPSO", "description": "Introducing a dynamic inertia weight that adapts based on the iteration count to balance exploration and exploitation during optimization.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3013f40d-0ef3-4210-a43e-200ad5b83c39", "metadata": {"aucs": [0.8053803946158768, 0.8171586884321558, 0.8230297015140375, 0.8125886914970653, 0.8003805300311809, 0.8250559155443403, 0.8090952292791802, 0.8288854301953419, 0.8162652315171135, 0.07135948117954372, 0.013301532921522807, 9.999999999998899e-05, 0.14885586311664278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07696186165760477, 0.13329306614735437, 0.0916529656035826, 0.08654571296552571, 0.06623297560497632, 0.07288737353937436, 0.06631546072604966, 0.08376905180564376, 0.10217487721309049, 0.06918332677981776, 0.056716661827419745, 0.02821139765911762, 0.08465259941360526, 0.0860221242947784, 0.07635857233438659, 0.12110475919837771, 0.07096242606346381, 0.009112870347961821, 0.9856397828540918, 0.9729891901872555, 0.9745364791288965, 0.9209952314277899, 0.9235418513105025, 0.9678138126201152, 0.9853408389024085, 0.8827472451195736, 0.9760625926297652, 0.6696190670410291, 0.604506746338044, 0.6480793655838257, 0.6800417345098968, 0.6626656686712141, 0.6674849425198537, 0.6440545351931408, 0.5987022430625695, 0.0940281927506127, 0.39359542102166056, 0.23211146352824985, 0.16970973767447117, 0.16855989625682466, 0.20818300188122807, 0.1456176435528067, 0.0954557249618645, 0.12852044567336085, 0.048080585434854384, 0.15001299258198741, 0.06447880471585776, 0.17822683569286057, 0.28046667712353046, 0.20522705335878277, 0.11931664187017177, 0.1545264815896642, 0.13854784110236074, 0.23071925793410475, 0.2828698058432798, 0.219467224671675, 0.2058745451452081, 0.20079572422374592, 0.21899347448116613, 0.13342573319013606, 0.1909802223756546, 0.24253651890215622, 0.11279540554823575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05951927821556002, 0.026611360406151086, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035677724996843185, 0.1299669696727086, 0.07887403273571181, 0.0673029947332976, 0.07450407219208333, 0.0751201189148274, 0.0017371492371539565, 0.02713632214350381, 0.1348693529392574, 0.10986190253382411, 0.06300101200740682, 0.19295554139156834, 0.1770437191471077, 0.13554273409844175, 0.06513208699255613, 0.16432058476580547, 0.11008911534737786, 0.1584810089767552, 0.23752185399293058, 0.050805601051659655, 0.09100165817837702, 0.2960826545659805, 0.1622910430854848, 0.00010402036510948065, 0.06032207066837003, 9.999999999998899e-05, 0.1383794141025252, 0.11408979263848851, 0.09216988053945374, 0.5342936883425791, 0.512618117813598, 0.5210580858706052, 0.5223593071805612, 0.5249471915310095, 0.5624634480092642, 0.5146307710386473, 0.5143154316517791, 0.5194916801354271, 0.05685280756209998, 0.046293538587160565, 0.008474426454176287, 0.09191070799514378, 0.04691692226626709, 0.11252645908604175, 0.12372406653118984, 0.07934239794605602, 0.07671974369958412, 0.3328880759672709, 0.29943278495245473, 0.18375851589425252, 0.29110580326750146, 0.3213143044293001, 0.5360787718897599, 0.2832310876867715, 0.14620335602509826, 0.3358120570679737, 0.1275234391206833, 0.16929424031208928, 0.12885005261839255, 0.18172684865933697, 0.16636067250718445, 0.19707642386511415, 0.16563071343889024, 0.3016809698611068, 0.11801994339468425, 0.07571533829521704, 0.12315732528817969, 0.08794318320256822, 0.08913362083946375, 0.23507469470280207, 0.10478426326984824, 0.07772359622245806, 0.32157550202123764, 0.06172448177462175, 0.2072360650506967, 0.2192103796006417, 0.24714909196690538, 0.24127779101122282, 0.1696306894290518, 0.24430336400306774, 0.16516602058701224, 0.1863356467366699, 0.23473289059324187, 0.178601752326218, 0.18301139565295188, 0.17945176511199623, 0.18488074589632297, 0.18344662946220347, 0.1934606039625567, 0.20918885469101334, 0.1598222878050326, 0.1696375307492115, 0.8631045011395128, 0.18923536125821916, 0.15370414312775793, 0.1724274642881064, 0.20179704002812815, 0.20143197343388264, 0.09947829165037037, 0.16971422487950583, 0.16366365975195407, 0.08302378807652822, 0.21210580295314763, 0.051319332718640864, 0.10414315611041203, 0.15033500466993033, 0.21032509823330314, 0.5458901129396974, 0.16754175652803094, 0.29008728325867095, 0.2111758655407988, 0.2019754911866517, 0.2381906379822123, 0.24366386210786395, 0.2489598640502394, 0.20633761729228894, 0.25102388419531596, 0.23552016565279843, 0.21258867064109443, 0.08013920985306433, 0.10659838817554734, 0.06568892403367332, 0.09984630895212909, 0.1400211986516401, 0.04706643107061115, 0.08580996444212075, 0.043434711579923846, 0.10552382725907805]}, "mutation_prompt": null}
