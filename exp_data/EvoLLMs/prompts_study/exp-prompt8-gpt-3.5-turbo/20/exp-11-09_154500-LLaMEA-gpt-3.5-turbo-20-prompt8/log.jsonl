{"id": "d6138d5d-3495-4e47-a0b0-e68abd304c71", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 1, "fitness": 0.2547830199022972, "feedback": "The algorithm DynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "d6138d5d-3495-4e47-a0b0-e68abd304c71", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "b9d9134b-a475-435c-8cc2-2f985447a722", "solution": "import numpy as np\n\nclass AcceleratedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        c_velocity = np.zeros((self.pop_size, self.dim))  # Initialize the coefficient velocity\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            # Acceleration based on fitness changes\n            c_velocity = np.where(fitness < pbest_fitness.reshape(-1, 1), c_velocity + 0.1, c_velocity - 0.05)\n            velocity *= np.exp(c_velocity)\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "AcceleratedDynamicInertiaPSO", "description": "Implementing a dynamic acceleration coefficient to adjust particle velocity based on fitness changes for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (20,20) (20,5) (20,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (20,20) (20,5) (20,5) ')", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {}, "mutation_prompt": null}
{"id": "c58384b3-5d38-4124-90d3-c16c183e1bf6", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "01f8c173-ba9d-4650-955b-f933955c27f8", "solution": "class DynamicAccelerationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget + 1):\n            w = self.w_max - (t / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            acceleration_c1 = self.c1 / (1 + np.exp(-t / self.budget))\n            acceleration_c2 = self.c2 / (1 + np.exp(-t / self.budget))\n            \n            velocity = w * velocity + acceleration_c1 * r1 * (pbest - population) + acceleration_c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicAccelerationPSO", "description": "Implementing a dynamic acceleration coefficient scheme based on individual particle fitness to adjust cognitive and social components for faster convergence.", "configspace": "", "generation": 4, "fitness": 0.2524212682893122, "feedback": "The algorithm DynamicAccelerationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.825485776816403, 0.8652145116758372, 0.8273407046468341, 0.8362156374554736, 0.8495331107577488, 0.8250166886091167, 0.7866006230547908, 0.8396461965703346, 0.8259377236953901, 0.11671827752709418, 0.058103502645047045, 9.999999999998899e-05, 0.06002640243706414, 0.07499066576305502, 9.999999999998899e-05, 9.999999999998899e-05, 0.03696804654240371, 9.999999999998899e-05, 0.06595282310054285, 0.11806210022784858, 0.05127909160023392, 0.11078420188636706, 0.0861245942183545, 0.09396148902281654, 0.10064401981397875, 0.1181323939651816, 0.13483142439294882, 0.0714007036035057, 0.06402772025201864, 0.08848897012815504, 0.09779605929246282, 0.14732019930520424, 0.09633554962362068, 0.07799945128823127, 0.08840842292221074, 0.05000612749302813, 0.97278654526221, 0.9699221964674872, 0.9798140247835562, 0.9715930199590666, 0.9782858045557917, 0.9711761048581833, 0.9805207490301249, 0.9748399623591506, 0.9765922966466447, 0.19352693891507355, 0.26018990493562344, 0.2907803333529798, 0.2698608764933792, 0.3039511019634318, 0.2268456452464639, 0.23431629930162812, 0.23959194019341878, 0.17824364006794036, 0.9245293569616202, 0.3365390825038287, 0.14204353956792237, 0.1947057845990322, 0.19749639198541513, 0.19930550285612236, 0.2301842017650545, 0.15183100898668467, 0.23535252634217663, 0.21167510865721895, 0.1255021050612175, 0.2853226851323081, 0.1929216568539699, 0.16019379191068384, 0.2025718760332731, 0.16421058201513183, 0.15675436048213176, 0.12868309361466113, 0.5541314247848848, 0.17088183925291522, 0.1585017488857382, 0.13389546115987938, 0.20696922219478553, 0.18863834286014836, 0.13023470139175863, 0.13328110207519328, 0.18575530690310849, 9.999999999998899e-05, 9.999999999998899e-05, 0.07106595762333401, 0.04014817154014416, 0.044017783931324606, 0.03758870880968623, 9.999999999998899e-05, 9.999999999998899e-05, 0.009179966966709308, 0.2112083877202715, 0.12766328421495743, 0.08727925517589685, 0.0981386224746571, 0.05496984626338486, 0.01997291606916496, 0.11751164795746316, 0.11672833780249714, 0.05941095574312749, 0.22723241491328738, 0.08097569151590012, 0.11883492351955138, 0.08272630207731324, 0.08087565059787083, 0.2106275433709307, 0.08443946699670601, 0.12815054401517523, 0.020554764768777933, 0.07040790108858985, 0.08891114561180369, 0.16720520774345227, 0.09313979025239527, 0.07761624744668938, 0.3021396292826295, 0.0529314930422472, 0.13388053928451593, 0.07922343356066008, 0.5615387718551553, 0.5305217326600211, 0.5523588218632638, 0.6471378872030706, 0.4700582033110411, 0.5647700907881962, 0.42357607045337087, 0.5390366155100876, 0.45937979828963016, 0.07734979719308122, 0.1245820208171492, 0.05491631292215571, 0.16134000014134997, 0.09662050296216151, 0.051578809350259824, 0.18614681661021426, 0.09703881072573517, 0.14156518145793018, 0.1724968324822892, 0.20546306401307934, 0.21416289701382485, 0.24789647532840486, 0.2715776876615206, 0.2332661245450891, 0.16933292962147095, 0.16679838250628742, 0.1778136647352747, 0.25824884868094555, 0.3129091406826403, 0.17025520413892825, 0.22526030648242557, 0.21557745230127234, 0.33382420086966624, 0.21037609186561668, 0.2590886361346948, 0.2418813074023013, 0.22810829760200813, 0.26501413850837985, 0.3156372809518281, 0.13771075109030828, 0.19045846248797238, 0.19349814379079722, 0.20105019461136153, 0.31749057863601915, 0.08924022810560761, 0.2200179136033108, 0.2249892568203411, 0.20781111139859665, 0.2657307684043906, 0.27688155434012973, 0.21546425061543917, 0.27406847758045016, 0.2683078765810055, 0.2380858500333024, 0.1910571118227785, 0.17463566500517458, 0.17101144220649944, 0.20434064838594834, 0.18037399768838236, 0.1801093041886892, 0.20209534613516278, 0.218104128999976, 0.16890627811514713, 0.12558430637526485, 0.12696220651501788, 0.1540191265012949, 0.731850365074477, 0.20083377425154336, 0.9265272426282699, 0.1230375567310883, 0.9085408448996051, 0.1777077224292638, 0.7718137012131235, 0.2110650465879388, 0.051858518992688785, 0.21230500309762834, 0.1693997581933001, 0.47066119835958564, 0.10516702416330959, 0.4143356819109171, 0.5018118327919306, 0.21234711418850816, 0.2235143302738576, 0.21620630615212477, 0.19404088685076304, 0.20130698607813446, 0.2175063724556472, 0.21979493339682077, 0.2097331659402656, 0.2144000321087377, 0.08168704057339715, 0.09010820679470255, 0.07478986397181286, 0.08487667430838286, 0.098568707469461, 0.1282585526844252, 0.09515491507776097, 0.08560019192559443, 0.08581528029274632]}, "mutation_prompt": null}
{"id": "cd82b16d-a451-4441-8fa2-5fe15d12e707", "solution": "import numpy as np\n\nclass ModifiedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            accel_coeff = self.c1 + self.c2 - _ / self.budget * (self.c1 + self.c2)\n            velocity = w * velocity + accel_coeff * r1 * (pbest - population) + accel_coeff * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "ModifiedDynamicInertiaPSO", "description": "Implementing a dynamic acceleration coefficient update mechanism based on individual performance to adjust particle movements efficiently.", "configspace": "", "generation": 5, "fitness": 0.2167169224653499, "feedback": "The algorithm ModifiedDynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.4314096721125811, 0.4688404126563678, 0.45219111160423886, 0.42271483342525085, 0.4066122395306384, 0.43615551469540303, 0.46906372380738826, 0.41259808023529176, 0.4821843008261869, 0.06302072000576087, 0.031589440468043684, 0.02710072517044304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09045655256406826, 0.13122452419300645, 0.09291660938607671, 0.11794151588016377, 0.12172077310148921, 0.09025069902744087, 0.09216346282731869, 0.11126202381733075, 0.10455980753309779, 0.09467673236426111, 0.07922273343102715, 0.11120909491035325, 0.10925590261696083, 0.09000422794624863, 0.10157202179844449, 0.0908297727249665, 0.09704732913574132, 0.082975626710872, 0.9799359265880873, 0.9720581373728568, 0.9816106538749109, 0.9793918515622656, 0.9821744008671678, 0.9748810439279221, 0.9724434490972852, 0.9767875444280042, 0.983444103442565, 0.25776145714534326, 0.2589527383707748, 0.2807890844167956, 0.29413765846236206, 0.26432294686464486, 0.2749579073092302, 0.27910067894475254, 0.25908194832686815, 0.2627573990073969, 0.5815934758603247, 0.231455594596073, 0.319543137754947, 0.30306600328473243, 0.2495876791799131, 0.278438960938874, 0.2851387282785466, 0.2972868130913988, 0.26913122462029737, 0.15331513677698383, 0.20888900770509466, 0.16199347878997328, 0.1854362148877855, 0.20679787877832523, 0.1750621874881907, 0.17678745502345228, 0.12838388380601884, 0.2046745522960166, 0.14590220758629113, 0.15444606771613856, 0.19402689894801695, 0.13874495197069459, 0.14911565642969438, 0.1574936687535825, 0.1761718221055789, 0.14493573272985216, 0.17300039802041978, 0.0015452972439748969, 9.999999999998899e-05, 0.034085684224222534, 0.03770520131803912, 0.0303202761068182, 0.014472330873052885, 0.008143600648274352, 9.999999999998899e-05, 0.03207844137845528, 0.1170351857180465, 0.14316500169222524, 0.090835421712393, 0.09266172000385808, 0.037560886856259246, 0.03148141822659567, 0.10158867831458596, 0.12321664934547094, 0.03717490404200363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08544716518041473, 0.0529087643094206, 0.09606979156285345, 0.10673151151194948, 0.06771418006760033, 0.09625955940363506, 0.1248806734930038, 0.1306668463967735, 0.12621685059706922, 0.4011680951417522, 0.40770272027512555, 0.38960640641375044, 0.4088322614011428, 0.37815735114989224, 0.42987846559107123, 0.39066779850970657, 0.4004276449173624, 0.4231319265592317, 0.075508919117241, 0.11107015265481968, 0.09455341516000049, 0.11885689902646168, 0.09252749838977214, 0.11420805559328673, 0.07870431586463367, 0.136203853124795, 0.1206597462154787, 0.2487879663290622, 0.1700107943560184, 0.19103571127137653, 0.16284999903113695, 0.2621504208543125, 0.20090716462059754, 0.24511764231456523, 0.2305854285129454, 0.23200742360029258, 0.20679378204779408, 0.29134375466273355, 0.2818477314054031, 0.2836586050272133, 0.2749446455937803, 0.2787840281214954, 0.2255961680130848, 0.28058986562590693, 0.24600011261294963, 0.21267660875635963, 0.18790196858548203, 0.15149734607970966, 0.1959452710966414, 0.18673726352850228, 0.21046610412701716, 0.1955019614425637, 0.19455282172704658, 0.16289981138726795, 0.21380786588365486, 0.2389167658454998, 0.22474353974825045, 0.2209691358600988, 0.22362075671655135, 0.2190453493036041, 0.22388530617220925, 0.21827147622855447, 0.21066474003620672, 0.17509321943011769, 0.21387729527106725, 0.17874107277106432, 0.1806418711254293, 0.18440424455171778, 0.1845677706657044, 0.1963482950568426, 0.17352306074397728, 0.23962740706579866, 0.12631523015647494, 0.12572560462648508, 0.15438374336768634, 0.17330511000324733, 0.20033918517529792, 0.6393443731172823, 0.12269921607097345, 0.6389539242493836, 0.16777373280387475, 0.42252290691811856, 0.2127561752615743, 0.4917575471116362, 0.6099068316152729, 0.16971149880746417, 0.2128247483658613, 0.10518452328272665, 0.38060427759585636, 0.2919959898286836, 0.18398902601118539, 0.17572038670565893, 0.18742481705951586, 0.1921706819675354, 0.17049862379363234, 0.18454205302000093, 0.1748752062272364, 0.16999101881883616, 0.2165941539164068, 0.08946031820534261, 0.08007750035813466, 0.09475445497020596, 0.08341020977333502, 0.09123235952282671, 0.09550522792821647, 0.0895721994932619, 0.07264498002257136, 0.08903834589073811]}, "mutation_prompt": null}
{"id": "b7aff433-2ace-4532-9ffc-67b1ea7dd398", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "006bf10a-335f-4ef7-b3c1-dd89e4d4d154", "solution": "import numpy as np\n\nclass DynamicPopulationSizePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (20, self.dim))\n        velocity = np.zeros((20, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (20, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            # Dynamic Population Size Adjustment\n            if _ % 100 == 0 and _ != 0:\n                new_population = np.random.uniform(-5.0, 5.0, (20, self.dim))\n                new_fitness = np.array([func(ind) for ind in new_population])\n                replace_indices = new_fitness < pbest_fitness\n                pbest[replace_indices] = new_population[replace_indices]\n                pbest_fitness[replace_indices] = new_fitness[replace_indices]\n                population = new_population\n\n        return gbest", "name": "DynamicPopulationSizePSO", "description": "Introducing a dynamic approach to adjust the population size during the optimization process to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 7, "fitness": 0.23768912311901114, "feedback": "The algorithm DynamicPopulationSizePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.5270112781520666, 0.556441084083263, 0.548833465876989, 0.4568413464808748, 0.5568754888359275, 0.5688163328293112, 0.4755517417900461, 0.5732993590254738, 0.5754833705431182, 0.0494982599192616, 0.08334139104449656, 0.03437155429237593, 9.999999999998899e-05, 0.027566622701659438, 0.0010277425241098648, 9.999999999998899e-05, 0.06498866922415636, 9.999999999998899e-05, 0.08195435523853556, 0.13378979011009628, 0.061823796965316036, 0.08384149804246532, 0.12867525316342776, 0.13199422161463803, 0.07522683944155728, 0.08948561953293355, 0.13369409680831845, 0.10681151903481734, 0.07065974474094616, 0.07821582789952375, 0.12368556075438064, 0.10086534372468359, 0.12018744323664143, 0.1012091910340217, 0.0956774290484742, 0.06470647224624992, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.30276954133629197, 0.32511288884972145, 0.3721817274221535, 0.30508795301145397, 0.32643467186072006, 0.3433012666928327, 0.32314169805902615, 0.3600970108900903, 0.35614656104262443, 0.398965594981058, 0.19310803583888692, 0.6176319420385683, 0.2791426466351269, 0.3897668065547899, 0.8717976989261857, 0.1665127104395311, 0.7429437901364375, 0.23582377573111213, 0.043406671525086815, 0.13088295621127888, 0.1847337586611114, 0.16705780660879233, 0.1351149587310354, 0.17911685418218948, 0.1311560896577465, 0.17224589352399378, 0.1376262384907725, 0.1412924559537514, 0.1745511263491638, 0.1305054474710542, 0.1916814171734228, 0.130054328469839, 0.13160039798234613, 0.15483684463258307, 0.14283229388151175, 0.13036991086859961, 9.999999999998899e-05, 0.036102589375316296, 0.13343688659166741, 0.04725391579834726, 0.0677693800762923, 0.0104538022863222, 0.0030786342369958364, 0.011079013655855507, 0.1331610697463268, 0.19302852558838635, 0.0847486579490776, 0.08962052068648463, 0.09753721702435891, 0.027379529360009647, 0.05209126623756655, 0.09867810731574977, 0.10267869542079477, 0.0404441687862489, 0.0007938009859208561, 0.04984382339454774, 0.03364502624388643, 9.999999999998899e-05, 0.04041565657933466, 0.03140886993145209, 0.00385336727083907, 0.0492213339670996, 0.01592407132284246, 0.07530323568607933, 0.08535794614133341, 0.09630852535892354, 0.09895530244075235, 0.16431039033080375, 0.10762547108549547, 0.057639588099595684, 0.15541946003537754, 0.08528991278999531, 0.41889696564501777, 0.4547081472750819, 0.44822730673104116, 0.4100768912631082, 0.4393494775975265, 0.45115660350203857, 0.39116027174926893, 0.4596088396814483, 0.4679846778634653, 0.08056980772003441, 0.0962547358040019, 0.14971669983692626, 0.10973480441832284, 0.07787738957107537, 0.10116163998447847, 0.10599120112438709, 0.12269658431957575, 0.09360475523265299, 0.3257057621406946, 0.24615680774028326, 0.16200866578527917, 0.18685857314787946, 0.2627231393134891, 0.19916080502196543, 0.25449733310954537, 0.18624726662525692, 0.2585762431227847, 0.22345871011774454, 0.31180051860588676, 0.2024923518592524, 0.29140581313928493, 0.22603801212683172, 0.27568786532644274, 0.22794664844708545, 0.3498432308905344, 0.1541125818602257, 0.21711771339234687, 0.24002576483066396, 0.16261774589877165, 0.22599735109478314, 0.2557883106444966, 0.2749363643196824, 0.2027573676701513, 0.21170294115423627, 0.22524238982661227, 0.24141443480828306, 0.2523091268209736, 0.18501072924140605, 0.2101102535612095, 0.2091596165926901, 0.21642938488942987, 0.2199910120740559, 0.2036973123957494, 0.20231682839056098, 0.20679627023617064, 0.16916558875923327, 0.22129502272858448, 0.19109234604106917, 0.19348357863799615, 0.19254143877586272, 0.21920232632593817, 0.22214337751185498, 0.20306759469832136, 0.125153729053879, 0.1268686532695842, 0.15415938085247094, 0.31351494195674523, 0.20144272214896486, 0.8967271021300993, 0.12317809949295355, 0.8076652799330478, 0.1779766187070394, 0.5218578207540119, 0.21326969837463294, 0.5442438509275105, 0.4170954638067186, 0.16960051175103652, 0.21158544333325358, 0.4188974771248507, 0.3698340145067608, 0.42314161293768826, 0.18492916345422028, 0.20392350236909673, 0.18870591265025327, 0.17790024678595195, 0.18065989227218504, 0.19918140368718273, 0.21048873554900693, 0.18669785530460314, 0.1801124710203752, 0.1042045044006511, 0.08407932926283901, 0.08084730701947884, 0.07328509872788969, 0.09015199523455264, 0.13007629344825078, 0.09272586674665251, 0.08088971371223075, 0.10272623647472046]}, "mutation_prompt": null}
{"id": "c951fd18-0dd5-42d1-8912-28e4e62ab21f", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            mutation_rate = 1.0 - (_ / self.budget)\n            mutated_population = population + np.random.normal(0, mutation_rate, size=population.shape)\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - mutated_population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - mutated_population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicMutationPSO", "description": "Implementing a dynamic mutation strategy based on individual fitness values to adaptively adjust search behavior for faster convergence.", "configspace": "", "generation": 8, "fitness": 0.18174996399896776, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.32224195828414626, 0.2787374170032565, 0.274521277893908, 0.294456627754101, 0.30754885896287565, 0.3009278154648236, 0.3044571476619664, 0.3001181847294181, 0.2706248688069388, 9.999999999998899e-05, 0.006070112962383578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08327763497108553, 0.09546826152121535, 0.0900694376878981, 0.07919842570169822, 0.09786514213996322, 0.08450219519957713, 0.11036894837304356, 0.08296087909019101, 0.09216075732816786, 0.0938993279412822, 0.08115086293624119, 0.08183836811167366, 0.08288133311857215, 0.07563558560183714, 0.10423319954490307, 0.07804318417829614, 0.06955341349719835, 0.07791236333221874, 0.9770987511282079, 0.9678029776397136, 0.9667799365823898, 0.9600802386074818, 0.9739168961544749, 0.9630307824367852, 0.9689551533531544, 0.9702152387754627, 0.974416075426808, 0.17849459680596869, 0.17905213431699973, 0.20103252520795356, 0.18075600103159595, 0.18928879096142648, 0.18049892492123798, 0.16559371253156951, 0.1712696322353522, 0.19828485802432239, 0.24575594413992286, 0.28631805464461035, 0.22126653077538472, 0.22364147531372536, 0.24701334915572593, 0.22378733217219737, 0.21080161611145443, 0.2078478849313068, 0.22144624764364262, 0.10181360513418858, 0.1288461094169292, 0.09361031911764461, 0.10325850043148399, 0.10743839559028223, 0.08894489214267853, 0.10397536573112243, 0.1067791930152141, 0.09172234320250572, 0.1328013198164304, 0.1048597175771192, 0.10287331345263939, 0.10212343850245398, 0.11042647746507028, 0.13405682750981085, 0.11105795840146071, 0.10819475896317521, 0.09078322996001531, 9.999999999998899e-05, 0.00741998611779493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10954589992997077, 0.08787245934155796, 0.13946347825536687, 0.06340642532833096, 0.02813782653393615, 0.03691610087416253, 0.12318696063772572, 0.09834345153776469, 0.09986205740187304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034529060209158136, 0.05512441316864136, 0.053952852322940226, 0.06443252280323719, 0.0364906265214473, 0.02760052004953195, 0.030519233591375095, 0.03387911369798835, 0.03449136679247089, 0.29837115906646816, 0.28475896355392305, 0.29272786863471445, 0.30940082996541074, 0.3677126270961407, 0.293397135618524, 0.307130304728396, 0.29800732926010254, 0.3090092481326383, 0.10134571239822543, 0.07935840786642168, 0.10121199044197804, 0.10033506457081676, 0.08783892476200439, 0.10249952858513056, 0.09475725002902324, 0.09853712334146225, 0.09537921115067272, 0.14041875683324978, 0.16242503298852384, 0.15254570695414837, 0.15326964845423097, 0.16026495566271537, 0.15623865891757327, 0.1461048864180382, 0.16763400450302357, 0.13872256140192674, 0.22918884817127494, 0.22614212147044477, 0.23944757133131533, 0.22109050983016076, 0.2281223973023867, 0.25399805610579695, 0.22350765474918477, 0.22384120400584429, 0.22100408812335026, 0.175473949969428, 0.2070291597459356, 0.14952455066330217, 0.16841426911033308, 0.1736099996403162, 0.17652334523628632, 0.1813146748972576, 0.17489217816743152, 0.1492159916463901, 0.22699836401510243, 0.21444337528980673, 0.18898374394464335, 0.1975362988350885, 0.21425115824594998, 0.20545599899211597, 0.23987928566831596, 0.19052344672313726, 0.21523849313301802, 0.171203028891047, 0.17300418608654633, 0.17649585409513913, 0.17477198094708912, 0.17668273511687715, 0.18612708002102185, 0.17588131528298778, 0.18678746794037537, 0.1838574354761715, 0.36762419096251997, 0.17004011447991085, 0.1487176876591053, 0.4051681003017922, 0.18559175432189912, 0.34218286083513594, 0.15769869774561052, 0.4013904171685142, 0.1655912175283918, 0.4063546079039212, 0.19590346853814466, 0.41561690026592213, 0.325044398415154, 0.1682666597193615, 0.19976325879350332, 0.29190398627332814, 0.3578404670625236, 0.16348384516119152, 0.2009612481258657, 0.17747968705387973, 0.1766193230659181, 0.17561673884397533, 0.17386924474262544, 0.210871948045667, 0.19928867533710648, 0.17732148786388058, 0.19004068417842734, 0.08296806606214724, 0.08543944620499389, 0.08853407816510883, 0.08623766140677802, 0.0773445836568184, 0.11529568002363899, 0.09909760830217251, 0.09384381577277168, 0.09270553220972855]}, "mutation_prompt": null}
{"id": "3535e16d-2c68-4af2-bf11-241f23690c86", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(self.budget):\n            w = self.w_min + 0.5 * (self.w_max - self.w_min) * (1 + np.cos((t/self.budget) * np.pi))\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "AdaptiveInertiaPSO", "description": "Implementing an adaptive inertia weight mechanism based on individual performance to enhance local exploration and speed up convergence.", "configspace": "", "generation": 9, "fitness": 0.25092574012755564, "feedback": "The algorithm AdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.5785487844879494, 0.5536647371056409, 0.7122564575028905, 0.502934112486667, 0.5128852693283978, 0.7062260173915532, 0.5876276851790341, 0.5917022555398843, 0.7222264086734018, 0.11221100020018016, 0.0973349898462531, 0.05340729753489526, 9.999999999998899e-05, 0.0161501696579478, 0.1710173446815767, 0.00203819097461988, 0.00735737434288708, 0.11923289925269143, 0.08839811317664203, 0.1534613836326827, 0.06908015821828195, 0.0888905727456265, 0.12746270632925283, 0.14309168400108196, 0.0864869756126021, 0.08390127951172, 0.11736326737939418, 0.11089252630646751, 0.06957897519031309, 0.07675315891958745, 0.132145617762511, 0.08656748436389394, 0.1274205071873099, 0.10659324871802933, 0.09999269307736891, 0.07190800652276852, 0.9776727004950816, 0.968523588323344, 0.9797023810311377, 0.9783681943956751, 0.9786850398749684, 0.9748857226864586, 0.9821255400056164, 0.9741012097572567, 0.9782087224573542, 0.341242636269098, 0.2793156762948731, 0.44036171380427946, 0.39294317795829947, 0.2838862318876829, 0.4280245045757205, 0.3323058302707731, 0.34310225820655005, 0.45403051469451705, 0.5796733257395674, 0.3040215509269065, 0.7200381354249947, 0.28268187407281853, 0.5101452878075716, 0.7516591059464987, 0.20288334764490945, 0.17770839861378773, 0.726506262487193, 0.04332887079656689, 0.1271579299404213, 0.22388631014828597, 0.1934357431680923, 0.13637396819816128, 0.33466172454141785, 0.13136450893773688, 0.20285929364626343, 0.19479470039956337, 0.1482156018213232, 0.16210773055941263, 0.13015374918003075, 0.19322735170378735, 0.13033109420364142, 0.13218986338753747, 0.15328629301364927, 0.12301318058688882, 0.13077299165527223, 0.01668675582701329, 0.09386494935451539, 0.11156888586553837, 0.06765613450389263, 0.007780813771801176, 0.01716680214608224, 9.999999999998899e-05, 0.002040411387937313, 0.16796698487520156, 0.1945584050499486, 0.09367896836850609, 0.11622469480921405, 0.08979209466054272, 0.05004025232282783, 0.02009454414093892, 0.14590283636957646, 0.08302751475305781, 0.07032736301349485, 0.04966782348053478, 0.03287423949102308, 0.1575562210794993, 0.012535096935945123, 0.009526185556389066, 0.06252969391680419, 0.04353588720222501, 0.024751961684725043, 0.025108662134847637, 0.08841792051803787, 0.08378067757082375, 0.10331488871249728, 0.12195145833815058, 0.15927555505551594, 0.1133582475691508, 0.0975564832846969, 0.15097176542733892, 0.08938097080669305, 0.47621161330659656, 0.4736928231865041, 0.522873936434194, 0.45334345434548373, 0.41945923130359497, 0.4874022988284462, 0.4334813255939083, 0.4547768953393593, 0.48945717320306226, 0.08089156113136686, 0.12191459182485909, 0.1500043181393499, 0.11089170756976141, 0.08031682043966504, 0.08960769515239975, 0.1037089841898392, 0.12988394320322916, 0.09377158798162022, 0.31684605394552245, 0.17036202280914325, 0.17805085261498865, 0.15800092682271372, 0.32817325345131476, 0.19356741932485155, 0.28302163409128234, 0.19954801690459922, 0.20793239916717088, 0.22635494436990589, 0.33262857066463836, 0.21506397873978778, 0.3596410421393793, 0.22725340261624793, 0.3408704283684463, 0.23924879904559426, 0.34856755936879835, 0.2441055239237132, 0.19745221421616466, 0.23682066495189202, 0.16629892723020312, 0.21663958352089963, 0.26447446629650107, 0.26856367044784424, 0.21597577850263827, 0.23328542298425659, 0.24731186596036703, 0.2135985259621187, 0.21930120277590381, 0.21613302192012163, 0.2227757533338387, 0.2541315696601584, 0.2209604476659649, 0.22202998103471017, 0.23541467406901728, 0.20678123832959405, 0.21066350060542638, 0.17055484527897302, 0.19790362952021112, 0.1919155642925231, 0.19355877243428898, 0.18418759178766153, 0.21285972450198065, 0.22430252118128013, 0.1823164493534053, 0.1260760639161237, 0.12683081007623953, 0.1541495348928238, 0.17343382421951514, 0.20155856570037656, 0.8747046921414979, 0.12320017303932529, 0.6558218537158991, 0.1779265921894959, 0.674819639075539, 0.21324702789292038, 0.0518245521106141, 0.4865360672314165, 0.16959873910343537, 0.21161040760073313, 0.4718172926497731, 0.38079295961230153, 0.7397670026469808, 0.19589746716253842, 0.20967020622816435, 0.21143418557665972, 0.20718486399198577, 0.18118579288933345, 0.25282997393637896, 0.19582591517471337, 0.19548100997377238, 0.21859221343754598, 0.10424362960571831, 0.08950799015402011, 0.08473974922070815, 0.09110684557685966, 0.09629587828660768, 0.12128020624169933, 0.08615986610046655, 0.07594599459219586, 0.10627854386038138]}, "mutation_prompt": null}
{"id": "ad85c8c3-cf85-4ee9-9efc-30eb69e65404", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # Implement Opposition-Based Learning\n            opposition_population = 2.0 * gbest - population\n            opposition_fitness = np.array([func(ind) for ind in opposition_population])\n            update_indices_opposition = opposition_fitness < pbest_fitness\n            pbest[update_indices_opposition] = opposition_population[update_indices_opposition]\n            pbest_fitness[update_indices_opposition] = opposition_fitness[update_indices_opposition]\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "EnhancedDynamicInertiaPSO", "description": "Implementing opposition-based learning to enhance exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 10, "fitness": 0.24200137285097192, "feedback": "The algorithm EnhancedDynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.5400254889215869, 0.5754904780928969, 0.5260233759067754, 0.5661047870284921, 0.6016976849342813, 0.5392422439281687, 0.5733218587041443, 0.5009243123730993, 0.5101618644876724, 0.07463237681255663, 0.0550641418155019, 0.03164251806261231, 0.05940721136528171, 0.05099661597300653, 0.05328596359836224, 0.047811350529683994, 0.012052744206576094, 0.04437218337892679, 0.08688980370652877, 0.11448229164487844, 0.09152460243627525, 0.10899689298117043, 0.08503994763435818, 0.13652768517360891, 0.10895781017627393, 0.08833410852469858, 0.12066533731735984, 0.09000853973175438, 0.09661722251603078, 0.08424448321756461, 0.13518642930557312, 0.08180056513815348, 0.09481060961828769, 0.09580960083935552, 0.21534053032057687, 0.06862006496094275, 0.994588875175724, 0.9841272151733605, 0.9946162194620892, 0.973054641479328, 0.9929890636529398, 0.9808348452230108, 0.9912252760170538, 0.9941249526201879, 0.9941585435754813, 0.3520168295067925, 0.3061346938185767, 0.33862193612886726, 0.3854341321394007, 0.3021948568788767, 0.31856930808380846, 0.35264197554863563, 0.32496255263229146, 0.31564779601908766, 0.24059306546518422, 0.7066486209221527, 0.7421915381005967, 0.27768734474062984, 0.2158973778611506, 0.27879989824301366, 0.5578179364336656, 0.36135487524758725, 0.2321776357202915, 0.22350719975393718, 0.1655323999660936, 0.24717924234476618, 0.18831561635807703, 0.1383082430272642, 0.20406841306141765, 0.18956886997064726, 0.16450379117247171, 0.2154515815916549, 0.13073112432913236, 0.1690856454940407, 0.2806758510013875, 0.1736261221063189, 0.13084499990609133, 0.18492171717626849, 0.20488546961440346, 0.16063700523616675, 0.1974069925867764, 0.028949751610499508, 9.999999999998899e-05, 0.020834949714840345, 0.07063715750948563, 0.03795087963062738, 0.0200731180954421, 9.999999999998899e-05, 0.016601861367125825, 0.10125578136449198, 0.07704519657236675, 0.045813047762824355, 0.11845984933940978, 0.07527166003751173, 0.0726713051819714, 0.08764402151160888, 0.08287889299907525, 0.14482361725862392, 0.10893803870924113, 0.038750284052690764, 0.004150898065007791, 0.04957725726687312, 0.011957182177220416, 0.028029221957310613, 0.02565872934266611, 0.01718502617581219, 0.07991546851920206, 0.009285202369356593, 0.1018474186690097, 0.07605077331308074, 0.13167095295635367, 0.0984892432245259, 0.15278681436228891, 0.11528809708491794, 0.16663477480029865, 0.0994144853198683, 0.15077369722018996, 0.46193897688184204, 0.46453331167714784, 0.44663219294112344, 0.4119156832743234, 0.45401658391879307, 0.4446813404560136, 0.466549208222619, 0.4303151279327234, 0.4326944148581612, 0.10344597653009568, 0.12473698371221775, 0.09538752002781925, 0.10844584220078146, 0.0991803906854899, 0.08023214802461753, 0.10784022132257742, 0.1520171785312252, 0.09551653110891878, 0.16935781679749562, 0.2379114036314357, 0.1705600487446156, 0.23040507657705422, 0.2886290348130459, 0.23138947354979833, 0.29420983938618916, 0.22990737178538723, 0.28469828612258086, 0.32882112831377186, 0.3235096211435249, 0.17047729316089988, 0.30965870455596556, 0.2391588533821548, 0.3260394734936771, 0.31538635021496797, 0.33806585978655945, 0.20429898909554378, 0.1842066205057008, 0.23104628653968207, 0.16035943010954912, 0.20204222521038184, 0.17134928338045918, 0.24982715441545522, 0.18900581930631144, 0.1846861954852943, 0.07755008286275045, 0.24227641719867166, 0.20427282156929705, 0.1865320625781003, 0.2075742381843304, 0.21442478994016223, 0.21428768064282044, 0.2018255104899057, 0.21167053088304788, 0.19660753552652188, 0.2185245357432818, 0.17432392672840902, 0.19174646532067796, 0.19567008813370546, 0.18104608133143152, 0.22111098036385013, 0.18155064733758264, 0.1794281426007286, 0.19540760085615205, 0.12611124057096568, 0.12591274232835548, 0.15305564094018154, 0.17287060883703975, 0.19962469604058974, 0.8093843855255514, 0.12254094675102623, 0.7574481540663076, 0.1764461808007487, 0.6611287958019589, 0.2112674263571498, 0.1255000466492464, 0.7135703003321712, 0.16907657750618343, 0.20826326145854934, 0.10508929970198955, 0.6008701817865312, 0.7415524011960428, 0.18893201268946436, 0.18097144965763423, 0.1874480407000434, 0.22999357402107468, 0.20554975087516336, 0.18513991202923963, 0.18769984609926904, 0.18299346554412077, 0.18277625934244168, 0.10364102169963241, 0.06833839034938283, 0.08828716165680084, 0.08962825272239228, 0.10026593335570977, 0.09874203024727213, 0.08169390338187366, 0.08842939940507222, 0.08914516380580029]}, "mutation_prompt": null}
{"id": "42bf7439-d897-45f1-bd24-e7dc5781b3d1", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "87595452-e39e-41f4-80b3-ff7c81420ae8", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def local_search(self, population, func):\n        for i in range(self.pop_size):\n            for _ in range(5):  # Perform 5 local search iterations\n                candidate = population[i] + np.random.uniform(-0.2, 0.2, self.dim)\n                if func(candidate) < func(population[i]):\n                    population[i] = candidate\n        \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            self.local_search(population, func)  # Integrate local search\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "HybridPSO", "description": "Implementing a novel hybrid algorithm combining Particle Swarm Optimization (PSO) with a local search strategy to enhance exploitation of promising regions for faster convergence.", "configspace": "", "generation": 12, "fitness": 0.16413730477376276, "feedback": "The algorithm HybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.15.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.29840938382636617, 0.3452320475102332, 0.35375275380412374, 0.29493515498666134, 0.316122014407339, 0.34620587619451604, 0.3284152393747619, 0.3123796148403226, 0.2763359713544077, 0.026653287150807725, 0.0015578854408057063, 9.999999999998899e-05, 0.03994614280706188, 0.017485882195005797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06943508824418076, 0.08271713869941688, 0.0522288412742431, 0.08626688527096826, 0.09710445640717702, 0.08731632136133449, 0.07788216273428428, 0.0965118192287513, 0.08438391604018547, 0.06926777371170534, 0.06697030128145254, 0.06141745980132962, 0.09241249297937482, 0.08115783702078028, 0.06381806827707226, 0.062246723693059725, 0.07008875869138687, 0.05509663405395038, 0.7758796657507144, 0.5799796260079562, 0.7714215037851788, 0.5408627597102633, 0.7756151634324031, 0.5659701248182276, 0.7840832923283834, 0.5362385413100446, 0.6948440653271939, 0.19356745508556783, 0.12375830070422655, 0.18703706332696934, 0.20937895766069625, 0.17786985799649369, 0.1972761827770665, 0.1798424014084834, 0.1943962016237828, 0.23644980715342345, 0.28129960989595615, 0.18489427684747028, 0.14715522899296907, 0.22136938379315174, 0.22328813763042188, 0.21584460948213402, 0.1903180555972318, 0.16596185608373182, 0.19031491726300187, 0.07786426601316876, 0.1140521975310328, 0.14013789823283695, 0.12409323787540794, 0.11022068428990606, 0.010499340025206916, 0.1235660811396232, 0.12571297431425188, 0.10357483270570722, 0.11870600339767823, 0.10005185085847712, 0.10105236963093545, 0.11835559113217697, 0.06902609224765766, 0.11570304913954621, 0.1110528046072381, 0.07061730851510806, 0.10215246336227934, 9.999999999998899e-05, 0.0009850335786997233, 0.0022516441475353144, 0.01880606150338704, 0.024718873949124087, 0.003398884897007126, 0.0027957491414670743, 9.999999999998899e-05, 0.0010976107943068136, 0.10333169139736598, 0.030267152349919724, 0.10070675382403371, 0.05579543884163707, 0.022551692372750787, 0.021808622174257053, 0.08748786239788187, 0.062433579757192104, 0.038923140272027035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04433514631870872, 0.03208050520434369, 0.061312548797897715, 0.03198240547789699, 0.04035805583164942, 0.07167635579514497, 0.0464465208282514, 0.06542447645743343, 0.02919035871750819, 0.31778289489316836, 0.3300572423298831, 0.33574236639552224, 0.3160635583442658, 0.26373972073276386, 0.2988538187521178, 0.3093717001572085, 0.30835000005500157, 0.321520451727471, 0.06024593004168599, 0.07360565000904606, 0.08094244673653861, 0.10915662702596163, 0.05071993690484511, 0.0780794230103744, 0.08471225268720572, 0.09561792981574002, 0.08970847531706272, 0.15545590445596003, 0.22617239338055428, 0.16226663570965771, 0.1945292763362234, 0.20493429864693202, 0.16668311228696964, 0.17357826250314523, 0.1666091709640628, 0.14935492968957875, 0.19965557794580724, 0.23464949621030562, 0.22995112678440655, 0.20457280513960396, 0.21587732059762343, 0.22714551988188536, 0.19094574601796943, 0.27131187562746484, 0.15523009914927766, 0.09870120659958848, 0.18273078731838355, 0.11903196619914524, 0.1609016260764864, 0.16124171656112607, 0.15645582267131541, 0.1546977652837882, 0.1937240689135893, 0.08046660824537744, 0.2212577098138393, 0.19204942787402857, 0.19220504448546183, 0.23074315204371554, 0.1879732593702833, 0.1981698816104399, 0.19599268086677168, 0.1933561842194802, 0.19361964669902376, 0.1699671955534604, 0.16855963499477233, 0.1692213199711372, 0.16862931144826165, 0.17914583228390435, 0.18008383609824286, 0.18124684846846573, 0.18756418596074664, 0.1536657837443598, 0.45911637340766875, 0.12092773227800502, 0.14029479180805415, 0.16472951556747484, 0.19316817917591111, 0.5343908913055169, 0.11336729737495865, 0.40581714542056624, 0.14726405182793045, 0.48904596471603823, 0.19193667846526696, 0.049434545626214965, 0.4117120141290713, 0.15904452147239112, 0.36427845667662906, 0.22171264152045034, 0.3203584510219206, 0.23720354270879151, 0.17397060812500387, 0.19548227703164944, 0.18544493819738717, 0.19718714043729835, 0.18429080642729534, 0.1717906713678099, 0.17102860635008632, 0.1878814612628985, 0.1827524510417189, 0.08401338659754842, 0.08089945984423741, 0.06327862752941604, 0.07021336110145238, 0.0825550420711787, 0.06428246633888479, 0.0555869422015699, 0.06920388511623865, 0.08852023764786787]}, "mutation_prompt": null}
{"id": "f59e6e50-6def-45bc-89c4-b892f91563a2", "solution": "class DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            mutation_rates = np.random.uniform(0, 2, (self.pop_size, self.dim))\n            mutated_population = np.clip(population + mutation_rates * velocity, -5.0, 5.0)\n            \n            fitness = np.array([func(ind) for ind in mutated_population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutated_population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            \n            population = mutated_population\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicMutationPSO", "description": "Implementing a dynamic mutation operator that adjusts individual mutation rates based on the fitness landscape to promote faster convergence.", "configspace": "", "generation": 13, "fitness": 0.15907233906952975, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.2364505345693606, 0.25608838308989745, 0.24585614590434368, 0.25534107117559957, 0.24349862965270008, 0.24970419980631864, 0.26970877299315066, 0.25554626451325346, 0.25084425051992687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0680130764809308, 0.10122149426765592, 0.07163758088961913, 0.07152054110835948, 0.0685105674184664, 0.08632263217138902, 0.06696646726503275, 0.0733733973274815, 0.07921539121653254, 0.057488159815251905, 0.05988177828120056, 0.06743019979338749, 0.06629982289945713, 0.06285568378438877, 0.061923242579201565, 0.06727600236301245, 0.055083948865718546, 0.056949387991536815, 0.9678808746923182, 0.9801812431230418, 0.9793628979950897, 0.9782608116460457, 0.980068344413852, 0.9707376919368059, 0.9827378039118553, 0.981436930772854, 0.97354774932618, 0.137543782929075, 0.1708349246535159, 0.15196945686675134, 0.15723200839856677, 0.1381171244172139, 0.13006324945501224, 0.14138918249128352, 0.08787087864435339, 0.13869842800298882, 0.17882722693268427, 0.17827345773134107, 0.20587699481378674, 0.19943326476478662, 0.17160307446220213, 0.19460445682194638, 0.17394241674531918, 0.1654976966867755, 0.1776664231172601, 0.04327148335224207, 0.06171610451989218, 0.06345038131351499, 0.0873369597795447, 0.06428952943478439, 0.03874584273427095, 0.10634825209223431, 0.06905458236214324, 0.0724292323320409, 0.05896480907904189, 0.0673782402887727, 0.04939785695161769, 0.07883041241809663, 0.038174310202178874, 0.05783577088269065, 0.07635641265205972, 0.04015497140183766, 0.0874059538554044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08904657937714078, 0.1009794078131605, 0.0943027179171726, 0.07951263686100751, 0.004542699069355893, 0.002077440967409361, 0.1664189485324008, 0.08181690415634535, 0.057352329821341086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02144200033900867, 0.01546386859365989, 0.009732721429198676, 0.01839789548959725, 0.016299406704207264, 0.023730550559889485, 0.026589411336468416, 0.02362792704610872, 0.01338264096261299, 0.3051285321028787, 0.24550271952187375, 0.29685698275345895, 0.26736073112398084, 0.25660758733330236, 0.29955196115592964, 0.26485946270832716, 0.25447125609024945, 0.2657464566254438, 0.07895450412735494, 0.07278484534584373, 0.08434206956338952, 0.06928236987396141, 0.09983035779330152, 0.08023604209234125, 0.07631858321193052, 0.11030469443224067, 0.07446612016813092, 0.14894358432587373, 0.14523791984921752, 0.1474915036939205, 0.15814861665684965, 0.17070938721693707, 0.13360921446947793, 0.13610926230256026, 0.12917330760669132, 0.149343635305082, 0.1982094420734145, 0.20360141505700935, 0.19326799035227227, 0.21106311902105224, 0.19274663040258178, 0.19386613251127938, 0.20780375142170748, 0.1975398388724221, 0.19438741056562048, 0.15182075667939066, 0.16204278102626435, 0.14905280745829497, 0.14189891986661574, 0.15583179523556467, 0.13958572592096974, 0.14716073067479396, 0.14069424890789395, 0.15165547727042505, 0.17656930176017305, 0.18232828204481843, 0.19295951310533221, 0.19726054104939106, 0.1771495015369885, 0.20084997540000882, 0.20562833687795457, 0.20466426042968455, 0.20249941443684405, 0.17440205773188533, 0.17273063545524436, 0.17975889882877383, 0.17160776490477525, 0.17377521072377677, 0.17113434646940173, 0.16654168132237335, 0.1769395609110639, 0.1940834650302684, 0.26486109205632036, 0.16372338770624373, 0.14657753625168402, 0.2775316365146351, 0.16752480064781772, 0.314635190389726, 0.11387153971569552, 0.16811571393107771, 0.24783793220882666, 0.23817867075057897, 0.18747301659298254, 0.267365881899285, 0.30411452626591007, 0.18778787487590576, 0.17393979597198395, 0.17923311972565026, 0.22444149003801306, 0.27131315151755353, 0.18994772746095612, 0.18184562280721617, 0.17828451613245067, 0.19293002006030546, 0.18517588946202423, 0.18082725538456834, 0.17603162143916185, 0.17097191303581216, 0.18185661859475655, 0.07162649013631395, 0.06633018317253225, 0.07315657215897842, 0.07384327346593034, 0.07105080050318935, 0.07516926281087233, 0.062481267299892895, 0.07330994514509981, 0.07455325897706333]}, "mutation_prompt": null}
{"id": "c705a36e-c3b9-43eb-9470-97a97ba72587", "solution": "import numpy as np\n\nclass DynamicAccelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            accel_coeff = 1.0 - _ / self.budget  # Dynamic acceleration coefficient\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population) * accel_coeff\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicAccelPSO", "description": "Implementing a dynamic acceleration coefficient to adaptively adjust particle movements to accelerate convergence.", "configspace": "", "generation": 14, "fitness": 0.25136424282002195, "feedback": "The algorithm DynamicAccelPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6197379734864918, 0.5822239650284081, 0.733470207679178, 0.548468382830337, 0.49472776585668443, 0.7006455931573055, 0.564487486947399, 0.56110263033064, 0.7367317088164946, 0.07194380433820913, 0.11419039596851055, 0.009685922923510004, 0.07195079545103822, 0.02341676262696124, 0.13136266510349326, 9.999999999998899e-05, 0.0033700059415823214, 0.06543059599126477, 0.09174215054899482, 0.1387550375101968, 0.05844492885795627, 0.08101798302274688, 0.13027645143475952, 0.12337162588222239, 0.0708743322374259, 0.08518350672045949, 0.11109622490497217, 0.10659810029069994, 0.06910626067872128, 0.07813333767303032, 0.1326376059393981, 0.08190905319984465, 0.11996562289038704, 0.10563938946368345, 0.09557823162235979, 0.07793898102399288, 0.9776726884436895, 0.9685223011152143, 0.9797010034927213, 0.9783678607554628, 0.9786790480350328, 0.9748842282331907, 0.9821252413593685, 0.9740619513275397, 0.9782080944730743, 0.32735202091649407, 0.27724062676650874, 0.4918237803982075, 0.3473277889948224, 0.3297636182169932, 0.3753512108635746, 0.396530607293369, 0.38284586920377184, 0.41991255338444533, 0.36567943544073667, 0.20780766050190136, 0.2146022245444521, 0.28282948797801166, 0.37286438214223594, 0.82953384481756, 0.5682670064695146, 0.8177401227388487, 0.3576725889825516, 0.08607051906101826, 0.1304373919468691, 0.22406107723202673, 0.19395471231378092, 0.13610951628880918, 0.1796004065517618, 0.13142168780520402, 0.21789703952562178, 0.1707708118181921, 0.17116690607797258, 0.16444434378942518, 0.13035347946582954, 0.2080710544254244, 0.12938075469621857, 0.13284214480477785, 0.17870032855047635, 0.12364945613119094, 0.13114786893326313, 9.999999999998899e-05, 0.007867836929397298, 0.06070394982050509, 0.009528365066312605, 0.016045092346446244, 0.053316547544225656, 0.0011909424166631766, 0.01928733375827596, 0.12265858207615599, 0.17211522814982894, 0.08445024081776153, 0.11436105030010912, 0.10454683037417623, 0.04330573630369128, 0.12445079897656164, 0.13162875458081835, 0.08874182009321963, 0.044081638600767636, 0.10597056318258946, 0.03927272045084451, 0.1963351955432634, 0.011838447666756124, 0.034895479483387115, 0.06453571308760342, 0.04212375339985408, 0.039078529824779995, 0.026260768719474803, 0.08470630029941606, 0.08316501829529988, 0.09977147192568137, 0.12008180761157816, 0.16038502681260924, 0.09695488771010208, 0.1032540750631793, 0.1713429287188566, 0.1498914433171591, 0.4667957560618533, 0.473733778041851, 0.5090016577098475, 0.4475317167700501, 0.40987791068625756, 0.5179550758810751, 0.43632283333066224, 0.4486071436321314, 0.48379071749514624, 0.08087396975909356, 0.12167901827345284, 0.12085321206438349, 0.1109665358809312, 0.0779674866499368, 0.09792263060249551, 0.10920025470482342, 0.12578980641176551, 0.09355475731194929, 0.31161444589916754, 0.21660745755364053, 0.14875733549245673, 0.1563502685302155, 0.3938058296667635, 0.2579354301492083, 0.24735589252122214, 0.18403448773872455, 0.18753223771008376, 0.22893800290515087, 0.3067845477122033, 0.21431456568236795, 0.3261307179436551, 0.2175527330592938, 0.31362491625477507, 0.24543211354408756, 0.32122763980745017, 0.1313328416565107, 0.23830123745220844, 0.2458817880486467, 0.1563933725596135, 0.2400207333267348, 0.2759425466329841, 0.2797255267788046, 0.22860120015920904, 0.24014274336276542, 0.241803208033615, 0.2281125860614256, 0.2119918804780092, 0.20004548417380164, 0.22680569038433585, 0.2235149164018444, 0.23647725212738024, 0.21985757875436107, 0.2103834239013186, 0.22180447509411527, 0.20844682191086017, 0.17633143360592585, 0.20661670406876542, 0.19221953486230514, 0.19367297649043214, 0.2192162969825281, 0.22070626205601807, 0.22389507968473754, 0.1906718926175902, 0.12613311356954704, 0.12680381577719713, 0.1541329668361825, 0.17354512230573815, 0.20153612214162275, 0.8636883308640502, 0.12321467385714258, 0.6450587045324603, 0.17796595271818516, 0.845788905599566, 0.21299658068510974, 0.05175635548372359, 0.7506032979690316, 0.1695985102494718, 0.21159597235945204, 0.5728943693613612, 0.3567057700973024, 0.7951851952324622, 0.22106307174490503, 0.1832187411369236, 0.1764571163528642, 0.18971004627114552, 0.21461744956980866, 0.20887902434501937, 0.1822947935405913, 0.20864944478767733, 0.19173050112759493, 0.09966292631131113, 0.10143807132844518, 0.07540988710317664, 0.07481583381454004, 0.09886007520529516, 0.12058332228194069, 0.08787288908974222, 0.07970865463902754, 0.10415535777623541]}, "mutation_prompt": null}
{"id": "581bb984-9bcc-4c9c-b943-739b139e72b6", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "270c4716-f63a-4906-bee3-7fbc6fbe2efa", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "e1763e61-b339-4cbf-a163-f39c9b30877d", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "aa4b664b-4398-4c4e-9ac2-7f6d7c71253e", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)  # Change: Adaptive inertia weight based on iteration\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "AdaptiveInertiaPSO", "description": "Implementing a novel adaptive inertia weight mechanism based on individual particle performance to improve convergence speed.", "configspace": "", "generation": 18, "fitness": 0.13843660128007565, "feedback": "The algorithm AdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.35444046558312114, 0.5392148674821309, 0.3688239545210473, 0.25814026632130294, 0.21086278573604356, 0.3008050369167701, 0.3098616910804234, 0.2716597270385357, 0.1865345462286797, 0.01973511324261923, 0.05354225901162135, 9.999999999998899e-05, 9.999999999998899e-05, 0.028910625081966068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0686001430347083, 0.16307140670182385, 0.0662649744862227, 0.09602758375738318, 0.14031988395787776, 0.10653348826093623, 0.07027798176354405, 0.08678481544029204, 0.08881603642625091, 0.04829770751275031, 0.06673453713223443, 0.04307062730161082, 0.0866143638698279, 0.04503306031590959, 0.05990947539506708, 0.04456877430496009, 0.07202399728574382, 0.019453569865877762, 0.08156061295842376, 0.06157934960882416, 0.08093245790980474, 0.09539358068677917, 0.09368165355056501, 0.10189282424164725, 0.10230184830772504, 0.08316343506136836, 0.08627568055192991, 0.23441775224990613, 0.050134068238634755, 0.08134718853494582, 0.13893655778749103, 0.16652057249983687, 0.12084864822749075, 0.1840804335449242, 0.0666730006797972, 0.06515577564237995, 0.17875350824659386, 0.1412435881238453, 0.11175397056893377, 0.1575445185262877, 0.24629821706089383, 0.11151977524443613, 0.15314481272902614, 0.15272769990930357, 0.19421362549657695, 0.12700677593300225, 9.999999999998899e-05, 0.0005004850135830186, 0.17654521700261905, 0.23744701555216574, 9.999999999998899e-05, 0.1625712027217503, 0.13790137682527492, 0.005534405729461844, 0.1695181037042881, 0.08528221934965607, 0.22507221947441014, 0.13335781027523586, 0.13596551331928697, 0.1300577351203891, 0.16086960127531025, 0.11635793695253016, 0.13992073324440846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09889087099808835, 0.045948858688535266, 0.07236174787713479, 0.06936766007371264, 0.04933256995438373, 0.018072047769216115, 0.08954522252626707, 0.09125462640738913, 0.04004361077094987, 9.999999999998899e-05, 0.19568757181357255, 9.999999999998899e-05, 0.09623146608175526, 0.1286583014770567, 0.14148136624919194, 0.14637511355584354, 9.999999999998899e-05, 9.999999999998899e-05, 0.02604343822381594, 0.1038158527802896, 0.08972510813648837, 9.999999999998899e-05, 0.012467742670999704, 9.999999999998899e-05, 0.053908978264082696, 0.020222082981750877, 0.10076684051234841, 0.4253354313085892, 0.4329292481909469, 0.4262317902427687, 0.2714162752867775, 0.172245363944165, 0.2086128854575291, 0.35959682412194616, 0.3919561691331829, 0.4573267181419949, 0.010174204412106147, 0.040929045959462895, 0.021348689486961114, 0.06317267833098072, 0.06241850548101757, 0.06970373042779143, 0.0944287363050329, 0.07694812931377149, 0.07634941919945215, 0.25969010399002856, 0.1402421196573952, 0.2652790808064909, 0.13325958111068525, 0.1638027223482319, 0.15802829248377714, 0.17928103290089292, 0.1752909676025296, 0.1806374392518434, 0.1610842585411616, 0.278966236026716, 0.15898949420302255, 0.17198038746701028, 0.22139496888766286, 0.1600773821414545, 0.14062995210309515, 0.2835894890290286, 0.12934927376948213, 0.12256600250866834, 0.18013129159755303, 0.08323660743843853, 0.16442099777310726, 0.1360480013870774, 0.10862217222254944, 0.147670943585963, 0.2041713082993558, 0.05919676588110856, 0.2602043904040936, 0.20491904710398057, 0.1627756717197919, 0.1974518354696182, 0.23978521304242473, 0.2416217495049503, 0.23375402460672035, 0.23074239681537778, 0.18772907281397389, 0.18055577813803225, 0.2296971471131135, 0.17690770171981063, 0.18469510421166835, 0.1957475822973428, 0.17575631333737052, 0.197125787404969, 0.18250630241383736, 0.16851151648467222, 0.12076768711409436, 0.12561164598797636, 0.15397127871706184, 0.17361842989347664, 0.20069987517802246, 0.44215552344706666, 0.100043925365505, 0.6269967290660239, 0.16869558944967777, 0.35712671209217006, 0.21109466922103026, 0.051166681184540486, 0.16887132712448638, 0.16899979195643244, 0.19677834101281977, 0.18304728266941606, 0.30948462927266795, 0.1722941257538565, 0.22128732804734164, 0.23418159668113214, 0.20163700550682717, 0.18839181252403836, 0.2032354835981668, 0.2636071981330711, 0.20544162156166845, 0.24869726894833177, 0.2195484736381521, 0.07254260590023365, 0.07709030949840712, 0.062104534478349516, 0.05338152720401834, 0.08904316744352347, 0.05470801891574173, 0.06831903604911171, 0.07398325394084526, 0.1009956870086004]}, "mutation_prompt": null}
{"id": "c791efd2-516d-4ba5-9e99-705e08eb0e4d", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "46a62e62-6272-4a9c-96e3-f5181109c6f2", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "59d71632-69b3-4c83-9679-d8e2e32bd225", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "2ef797f5-5aae-474b-a8bb-04fb29e667be", "solution": "import numpy as np\n\nclass AdaptiveParameterPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            adaptive_param = np.exp(-np.abs(fitness - np.mean(fitness)) / np.std(fitness))\n            w = self.w_min + adaptive_param * (self.w_max - self.w_min)\n            velocity = w * velocity\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "AdaptiveParameterPSO", "description": "Implementing a novel adaptive parameter control mechanism based on individual fitness values to dynamically adjust the algorithm behavior for faster convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (20,) (20,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (20,) (20,5) ')", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {}, "mutation_prompt": null}
{"id": "82a58225-02aa-4c75-a72b-df2e8d81c12c", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            \n            # Novel mutation operator\n            mutation = np.random.uniform(-0.2, 0.2, (self.pop_size, self.dim))\n            population += velocity + mutation\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "EnhancedDynamicInertiaPSO", "description": "Introducing a novel mutation operator to explore the search space more efficiently and enhance global exploration capabilities for faster convergence.", "configspace": "", "generation": 23, "fitness": 0.20605848901560955, "feedback": "The algorithm EnhancedDynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.37935180517202094, 0.37339955368568967, 0.3986174001720759, 0.3681350817636677, 0.40881589784816874, 0.3687418816821101, 0.40364346918165706, 0.4152137447472696, 0.40281580181121435, 0.002215249203316616, 0.0002753525323451189, 0.001608617552788072, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455757831190513, 0.09508535445722233, 0.07627745769857319, 0.1049105456364583, 0.09969934869244257, 0.09761016773993247, 0.08321043466149292, 0.11526789313240549, 0.11488683572591707, 0.08969435077868115, 0.0794347052243336, 0.06571973552662225, 0.09496546689717178, 0.09537527546273794, 0.08202979677766076, 0.09163571225297928, 0.08825345559665787, 0.08576315171682669, 0.9690417277043769, 0.9684430091170754, 0.9800579411139154, 0.9749348516658761, 0.978348971423167, 0.9710406639396537, 0.9820854738421373, 0.970530071999041, 0.9670054726922067, 0.25818941253647254, 0.30497878933512335, 0.25952027575089764, 0.2675160538978508, 0.26286965062072176, 0.24233649383489764, 0.2552205562655042, 0.25037832246906333, 0.2526064455955872, 0.3416662871622327, 0.28199854175078354, 0.33337812029377867, 0.24721930944745574, 0.2894913699837792, 0.3128212175767918, 0.2915433047606648, 0.2252676023286455, 0.23364641580345846, 0.1615943570221532, 0.14218803208163333, 0.12492228211636269, 0.12547634178645417, 0.1798182835487867, 0.12320704171378383, 0.1690441400180296, 0.13209297349308813, 0.13754114774182102, 0.14621319231922658, 0.14305622511667548, 0.1624714306235111, 0.13443177203734236, 0.13275155419040852, 0.13305430189259626, 0.15416854669003077, 0.1399999449916166, 0.11014197181207597, 9.999999999998899e-05, 9.999999999998899e-05, 0.04794926975078029, 9.999999999998899e-05, 0.007357836575856758, 0.008204236621653038, 9.999999999998899e-05, 0.0029928860035625116, 0.01664146054795257, 0.11816774971865929, 0.09002278045183232, 0.16912400320233556, 0.053125743823093985, 0.02763521594721663, 0.04106900628098409, 0.126676578992314, 0.10161629310819098, 0.08056129454627192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06250693641879823, 0.06013661188443187, 0.0784604204693573, 0.08759700317783625, 0.07765115917661713, 0.07570707303943613, 0.1104092717329691, 0.09255366787107855, 0.08398563165143313, 0.40713710036015194, 0.3869371613361722, 0.37781708703467176, 0.373266053183796, 0.3808357364037934, 0.38293301585460027, 0.3705576380543799, 0.37212948796968626, 0.3681081146198043, 0.09831303612548759, 0.10339707153583222, 0.0740046901384096, 0.11166536952281336, 0.09477526039586792, 0.11208996461933529, 0.09543003764815516, 0.10182322852656467, 0.08972319419246721, 0.2506922066785333, 0.2063972389190244, 0.21817204105631316, 0.23973561060575743, 0.20563829441046566, 0.19643928627343854, 0.21612928520304442, 0.17522810033075853, 0.23563511401816728, 0.25299058798176655, 0.2712440452595095, 0.22433332403179296, 0.257412727134384, 0.20381397742933016, 0.2872391044974034, 0.25822210873423246, 0.22900154615072477, 0.26984965571925446, 0.20442021848334213, 0.21699130473860428, 0.1527463240844107, 0.22078299127907486, 0.17653392688810532, 0.17032755742083938, 0.17534180111243658, 0.21730351971330175, 0.11375867099591974, 0.24758261685733673, 0.2140449735009493, 0.1949334346681223, 0.19245399361159665, 0.22886248963901168, 0.23561450537366313, 0.21701548088696965, 0.2261267959538935, 0.23137753762096702, 0.19327697581828085, 0.1930469819681142, 0.18235204519142645, 0.17438808427494745, 0.19656210075670466, 0.18386204562661068, 0.19538797924163975, 0.18520660160335223, 0.1864258291654981, 0.12547606285094792, 0.12603343316845617, 0.15307394432862953, 0.6049638902997234, 0.19922414043640757, 0.5462591962953214, 0.09958044752727113, 0.5385146378297068, 0.16836109505751828, 0.4014619028225448, 0.21236201050155412, 0.05169649470916626, 0.465996845710301, 0.1693882016677577, 0.40244366242022944, 0.10530135092237525, 0.3919086348732096, 0.42577568163719814, 0.18331878650191946, 0.18490175185664726, 0.18685605325635335, 0.1886029950437187, 0.1871246252332256, 0.20630213669741992, 0.18453872965131402, 0.18056734229238258, 0.18411315824390273, 0.08946191057359665, 0.09751712401446033, 0.08202176368088199, 0.07180418222289664, 0.09282111532934345, 0.08871663851341871, 0.08973246997387685, 0.09758641368210608, 0.09540736437310826]}, "mutation_prompt": null}
{"id": "dd190d34-68a1-41e9-9e75-e23371ed8138", "solution": "class DynamicAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.49445\n        self.c1_max = 2.0\n        self.c2_min = 1.49445\n        self.c2_max = 2.0\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            c1 = self.c1_max - (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_max - (_ / self.budget) * (self.c2_max - self.c2_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + c1 * r1 * (pbest - population) + c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicAdaptivePSO", "description": "Introducing a dynamic adaptation of the cognitive and social parameters to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 24, "fitness": 0.24708844191108928, "feedback": "The algorithm DynamicAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6136742869402135, 0.6303613174050137, 0.5101079709612479, 0.5694801994981051, 0.5420270711055812, 0.5292474754476328, 0.5429549998168562, 0.5960547319194196, 0.5288024814958772, 0.1352125985466519, 0.1799613179031434, 0.036897967011792376, 0.1568597551727009, 0.03424750812948496, 9.999999999998899e-05, 0.019509434610353482, 0.026941541571959937, 9.999999999998899e-05, 0.06970607087182235, 0.12838717761486873, 0.0895186789884791, 0.10883802878431892, 0.10638138126947927, 0.1338510168669942, 0.10176625879950829, 0.1440513600412171, 0.1224202865270847, 0.07876771457186826, 0.07535183030907489, 0.06938529559675732, 0.11575732477926015, 0.08809771444330672, 0.11111620153652291, 0.1255795237941213, 0.09062496441822021, 0.06716459966220134, 0.9790175795653485, 0.9720995587980632, 0.980411037826117, 0.9784808698147943, 0.9820224069258071, 0.9642266078311984, 0.9801751866046446, 0.9764745798763296, 0.9817371991189119, 0.36851914133148767, 0.37655854915428466, 0.3392417073228464, 0.38349097612179583, 0.33242795058262675, 0.338964558437411, 0.3302831182172876, 0.34875750078905243, 0.3288618174012047, 0.8383762310329341, 0.6587963802564977, 0.42062820735074424, 0.27914035455081143, 0.3679465672909129, 0.21159526558911468, 0.6607318265510318, 0.27854071164318095, 0.23718021046737636, 0.20992471014808844, 0.28960781135360325, 0.15433965639882086, 0.15887688795394972, 0.13219838370891124, 0.1896485977456812, 0.24194835220838484, 0.13446482686058991, 0.1932810138900195, 0.19753923545150742, 0.20542347237927072, 0.23023578761501295, 0.24492415129355471, 0.15346738385253034, 0.1677588278190728, 0.15414454107215603, 0.17389735534440387, 0.16370432133783253, 9.999999999998899e-05, 0.008889351223775321, 0.03923181750770366, 0.023095581520316433, 0.16810885849535917, 0.019520727200485255, 9.999999999998899e-05, 0.008658808756540903, 0.022126806212380834, 0.178671257900321, 0.07347494300811108, 0.08235633567852507, 0.07241092817095518, 0.048877688561657306, 0.021334087172641736, 0.08984625832994897, 0.1777182053325993, 0.06422223752869827, 0.016545292637038855, 0.08544484499728644, 0.014988712765553691, 0.018433251880065504, 0.07239366027963823, 0.02397082498335057, 0.023867207169970817, 0.12998953359474708, 0.00907343464168775, 0.09322736494108508, 0.07982596490937688, 0.09943099781022813, 0.07913722074989915, 0.15891365747403086, 0.12805411838132108, 0.12261333020286691, 0.17409705614239646, 0.15079882045349968, 0.4786531678709143, 0.48114027029815, 0.4689784162542725, 0.4392161268479884, 0.4868393901115533, 0.42507226523078157, 0.44764136862196946, 0.5317386330381124, 0.4472099582186092, 0.05426445538811819, 0.10902153896884759, 0.08161311132097382, 0.12104698910406753, 0.11586216238723412, 0.0999532750768134, 0.08964848388230184, 0.10948122044278519, 0.06758736377298324, 0.3111355621891173, 0.25981791004932586, 0.20859745658272966, 0.27644243611245245, 0.2731558620515152, 0.16537325499719502, 0.2356949674700689, 0.19624776415955836, 0.31957324245559815, 0.24825403456802142, 0.3213121025340172, 0.2014361413227187, 0.30661075578928265, 0.2274077712329302, 0.2149093903522915, 0.22574876487871787, 0.302573801127058, 0.3045413606892776, 0.2553528139543505, 0.2527076325713903, 0.16080244545957045, 0.21055102008863946, 0.21336378958685864, 0.16732900948342633, 0.1786205787654086, 0.2623756614050735, 0.09579673496531815, 0.24246465945653561, 0.27521078637470986, 0.23621456345888314, 0.22566919158182275, 0.2186855247579076, 0.22144472567151996, 0.22278921446478428, 0.2398632641199383, 0.2544310968478425, 0.2100825446657365, 0.4358725716853643, 0.2035095716953238, 0.19424151385815158, 0.2143687354399202, 0.18111555373596744, 0.2239787068962502, 0.20910932308725205, 0.17750161896633054, 0.1260678947444971, 0.12662445761892172, 0.15393625072818762, 0.1735555739280189, 0.20103574012086978, 0.6916256213611763, 0.12295940904876246, 0.8202839124108084, 0.1767843577269338, 0.6051415770582667, 0.21328776662993965, 0.1245267426765031, 0.6053843166339463, 0.16972387410076029, 0.21046007731817673, 0.10536040317848472, 0.7603136792928977, 0.4171948289500337, 0.20003435241484602, 0.18886370045598389, 0.19909269842662736, 0.1795847454458087, 0.18554994104238454, 0.2247365377802446, 0.17756722864146446, 0.19148404088374704, 0.1849016103795963, 0.08301337205951365, 0.1276795183824646, 0.08697292155310876, 0.07900804719795473, 0.08590448903632808, 0.0988340848313104, 0.09218420236768166, 0.10685003924726111, 0.08839512076873557]}, "mutation_prompt": null}
{"id": "7f03ca8a-2b87-46d3-b2ba-45058623b8e4", "solution": "import numpy as np\n\nclass DynamicPopulationSizePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n            \n            # Dynamic population size adaptation\n            if np.std(population) > 0.5:\n                self.pop_size = int(1.2 * self.pop_size) if np.random.rand() < 0.5 else int(0.8 * self.pop_size)\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, (self.pop_size - len(population), self.dim))))\n                velocity = np.vstack((velocity, np.zeros((self.pop_size - len(velocity), self.dim))))\n                pbest = np.vstack((pbest, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pbest), self.dim))))\n                pbest_fitness = np.hstack((pbest_fitness, np.array([func(ind) for ind in population[len(pbest):]]))\n        \n        return gbest", "name": "DynamicPopulationSizePSO", "description": "Implementing a dynamic population size adaptation strategy based on diversity to enhance exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 46, 9, '        return gbest\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 46, 9, '        return gbest\\n'))", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {}, "mutation_prompt": null}
{"id": "fd836fd4-50d1-4b18-b38b-0e2b36db934c", "solution": "import numpy as np\n\nclass DynamicPopulationSizePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        w_min, w_max = 0.4, 0.9\n        pop_size = self.pop_size_min\n        population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        velocity = np.zeros((pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget + 1):\n            w = w_max - (t / self.budget) * (w_max - w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n            \n            pop_size = self.pop_size_min + ((self.pop_size_max - self.pop_size_min) * t) // self.budget\n            population = np.vstack((population, np.random.uniform(-5.0, 5.0, (pop_size - population.shape[0], self.dim))))\n            velocity = np.vstack((velocity, np.zeros((pop_size - velocity.shape[0], self.dim))))\n        \n        return gbest", "name": "DynamicPopulationSizePSO", "description": "Introducing a dynamically adjusting population size to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,5) (11,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,5) (11,5) ')", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {}, "mutation_prompt": null}
{"id": "9c232b7f-ea6d-4dbf-a9c6-e3254a03ad88", "solution": "class EnhancedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        prev_fitness = pbest_fitness.copy()\n        \n        for t in range(1, self.budget + 1):\n            w = self.w_min + 0.5 * (self.w_max - self.w_min) * (1 + np.cos(t * np.pi / self.budget))\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n            \n            if np.all(np.isclose(prev_fitness, pbest_fitness)):\n                break\n            prev_fitness = pbest_fitness.copy()\n        \n        return gbest", "name": "EnhancedDynamicInertiaPSO", "description": "Implementing a dynamic update mechanism for the inertia weight to balance exploration and exploitation efficiently.", "configspace": "", "generation": 27, "fitness": 0.1573378811781289, "feedback": "The algorithm EnhancedDynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.39079863328679765, 0.3340981455147235, 0.371292255899511, 0.36030019352888176, 0.26611175290785594, 0.2981152432588132, 0.35873753740643266, 0.40329338004264426, 0.2873705602512354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07454728518475984, 0.05246876224057728, 0.03217579181206598, 0.052990768723738646, 0.06982136896688373, 0.05888312127222617, 0.05824084322769141, 0.04061383598638402, 0.08092351666222819, 0.038551875303875605, 0.04909864135189568, 0.03617368270287913, 0.11434426630745798, 0.034451212232715966, 0.06898358391307247, 0.09824431991662441, 0.06224806896266544, 0.04117032165767287, 0.9776727002716551, 0.9685235877932449, 0.9797023802931172, 0.9783681942123826, 0.9786850369356112, 0.9748857221929386, 0.982125539869459, 0.9741011763988492, 0.9782087221577693, 0.16357417077056924, 0.12698868715665013, 0.15447087019397732, 0.18406746402121488, 0.13956136039076827, 0.22138355935885634, 0.1412051766388226, 0.1378557678058241, 0.16243690197903493, 0.24522709117221841, 0.1322817547566537, 0.12471972468094705, 0.20750626452290089, 0.18477815461239733, 0.21809907704975173, 0.1292873319522332, 0.145571118314346, 0.16270930639056735, 0.0, 0.049116250407927664, 0.00312264445450805, 0.129939884780654, 0.11781788276496119, 0.09768496230769286, 0.13083591290977803, 0.08085652949532163, 0.10933261041173792, 0.12849511350594534, 0.042993202535602904, 0.031391464963234084, 0.1359176895259543, 0.07629122076358186, 0.009678815057837742, 0.12553627759860042, 0.0, 0.020690805244439114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06850970628957298, 0.03607804498399636, 0.008730733475776131, 0.06253850055769616, 0.01629516969801048, 0.0, 0.0858803719050869, 0.05006618658126516, 0.028951997444733535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03297858599593151, 0.03985089124041019, 0.03948241752917059, 0.025140205398335502, 0.07866676480696899, 0.0, 0.04426724638879331, 0.0, 0.026734126989752083, 0.31661278729836884, 0.33979072370391883, 0.2725630116734563, 0.2954727524679778, 0.2558191994766299, 0.29574881994315905, 0.25560576163804494, 0.26951108548950753, 0.29064524977235395, 0.07608653597470127, 0.05522136439854619, 0.06883265862038368, 0.08344600139091451, 0.043350412743857536, 0.03748379374926558, 0.09687342383894992, 0.061359254196977187, 0.07168561589757849, 0.23417946125290068, 0.08949714747524995, 0.09204670735104103, 0.12851142867696685, 0.10844057434014065, 0.1360038535595175, 0.1419763168892001, 0.08889903410242894, 0.10792710119611149, 0.16792548893436232, 0.18242445225980142, 0.1757454392176574, 0.25175591243290263, 0.18301989685249997, 0.18902626383811982, 0.2103953317804973, 0.2520167391190533, 0.1068472075165593, 0.10317685869710091, 0.2205600198791532, 0.1275439712316735, 0.16766897883673737, 0.1842404422006204, 0.16202770042175196, 0.16090055960524263, 0.17485333701412586, 0.1722106015950774, 0.15717926381045488, 0.15205034749210045, 0.13336421106438578, 0.14187591584802062, 0.1702937842839567, 0.18483160559630973, 0.20006269949395938, 0.17073887220371908, 0.18612527037398452, 0.16441760492807111, 0.16354262040328216, 0.1600404836346796, 0.17875650635451257, 0.16978045022378008, 0.16821882565406754, 0.17745204480094567, 0.16346742106201217, 0.17117677607758286, 0.12315457983704214, 0.12487472350424778, 0.1519827198136472, 0.17205745277889928, 0.18648386898137548, 0.5226405110221162, 0.12247982987282391, 0.38336609078195516, 0.16586919138173162, 0.29898607182488646, 0.18771633139447008, 0.05023801101196912, 0.3353069336717207, 0.1690683268161729, 0.16771221866914343, 0.10508502357828675, 0.1986604727054192, 0.16633017228707736, 0.16268471451647526, 0.17069180575651677, 0.14862173816030977, 0.1693778558606286, 0.15370023752188755, 0.14951780869094977, 0.16921201932431995, 0.17726749608240555, 0.1551553295829855, 0.08253860957127634, 0.06325922185248456, 0.04416698455295942, 0.062126795478057995, 0.08521068590629, 0.08011135384391022, 0.046486544600271906, 0.021454693588528917, 0.0501639013673465]}, "mutation_prompt": null}
{"id": "c3189cdc-650d-45dd-9c75-7b2cbd3def3b", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "20cbe947-404c-477e-bea1-4a5f95e9bf19", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "d3799d1e-2384-4587-a4c5-d64143861483", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "3ae3a07c-c9ad-446e-bd1a-605600e90fea", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # Opposite-based learning\n            opposite_population = 2 * gbest - population\n            opposite_fitness = np.array([func(ind) for ind in opposite_population])\n            update_indices = opposite_fitness < pbest_fitness\n            pbest[update_indices] = opposite_population[update_indices]\n            pbest_fitness[update_indices] = opposite_fitness[update_indices]\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "EnhancedDynamicInertiaPSO", "description": "Utilizing opposition-based learning to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 31, "fitness": 0.24200137285097192, "feedback": "The algorithm EnhancedDynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.5400254889215869, 0.5754904780928969, 0.5260233759067754, 0.5661047870284921, 0.6016976849342813, 0.5392422439281687, 0.5733218587041443, 0.5009243123730993, 0.5101618644876724, 0.07463237681255663, 0.0550641418155019, 0.03164251806261231, 0.05940721136528171, 0.05099661597300653, 0.05328596359836224, 0.047811350529683994, 0.012052744206576094, 0.04437218337892679, 0.08688980370652877, 0.11448229164487844, 0.09152460243627525, 0.10899689298117043, 0.08503994763435818, 0.13652768517360891, 0.10895781017627393, 0.08833410852469858, 0.12066533731735984, 0.09000853973175438, 0.09661722251603078, 0.08424448321756461, 0.13518642930557312, 0.08180056513815348, 0.09481060961828769, 0.09580960083935552, 0.21534053032057687, 0.06862006496094275, 0.994588875175724, 0.9841272151733605, 0.9946162194620892, 0.973054641479328, 0.9929890636529398, 0.9808348452230108, 0.9912252760170538, 0.9941249526201879, 0.9941585435754813, 0.3520168295067925, 0.3061346938185767, 0.33862193612886726, 0.3854341321394007, 0.3021948568788767, 0.31856930808380846, 0.35264197554863563, 0.32496255263229146, 0.31564779601908766, 0.24059306546518422, 0.7066486209221527, 0.7421915381005967, 0.27768734474062984, 0.2158973778611506, 0.27879989824301366, 0.5578179364336656, 0.36135487524758725, 0.2321776357202915, 0.22350719975393718, 0.1655323999660936, 0.24717924234476618, 0.18831561635807703, 0.1383082430272642, 0.20406841306141765, 0.18956886997064726, 0.16450379117247171, 0.2154515815916549, 0.13073112432913236, 0.1690856454940407, 0.2806758510013875, 0.1736261221063189, 0.13084499990609133, 0.18492171717626849, 0.20488546961440346, 0.16063700523616675, 0.1974069925867764, 0.028949751610499508, 9.999999999998899e-05, 0.020834949714840345, 0.07063715750948563, 0.03795087963062738, 0.0200731180954421, 9.999999999998899e-05, 0.016601861367125825, 0.10125578136449198, 0.07704519657236675, 0.045813047762824355, 0.11845984933940978, 0.07527166003751173, 0.0726713051819714, 0.08764402151160888, 0.08287889299907525, 0.14482361725862392, 0.10893803870924113, 0.038750284052690764, 0.004150898065007791, 0.04957725726687312, 0.011957182177220416, 0.028029221957310613, 0.02565872934266611, 0.01718502617581219, 0.07991546851920206, 0.009285202369356593, 0.1018474186690097, 0.07605077331308074, 0.13167095295635367, 0.0984892432245259, 0.15278681436228891, 0.11528809708491794, 0.16663477480029865, 0.0994144853198683, 0.15077369722018996, 0.46193897688184204, 0.46453331167714784, 0.44663219294112344, 0.4119156832743234, 0.45401658391879307, 0.4446813404560136, 0.466549208222619, 0.4303151279327234, 0.4326944148581612, 0.10344597653009568, 0.12473698371221775, 0.09538752002781925, 0.10844584220078146, 0.0991803906854899, 0.08023214802461753, 0.10784022132257742, 0.1520171785312252, 0.09551653110891878, 0.16935781679749562, 0.2379114036314357, 0.1705600487446156, 0.23040507657705422, 0.2886290348130459, 0.23138947354979833, 0.29420983938618916, 0.22990737178538723, 0.28469828612258086, 0.32882112831377186, 0.3235096211435249, 0.17047729316089988, 0.30965870455596556, 0.2391588533821548, 0.3260394734936771, 0.31538635021496797, 0.33806585978655945, 0.20429898909554378, 0.1842066205057008, 0.23104628653968207, 0.16035943010954912, 0.20204222521038184, 0.17134928338045918, 0.24982715441545522, 0.18900581930631144, 0.1846861954852943, 0.07755008286275045, 0.24227641719867166, 0.20427282156929705, 0.1865320625781003, 0.2075742381843304, 0.21442478994016223, 0.21428768064282044, 0.2018255104899057, 0.21167053088304788, 0.19660753552652188, 0.2185245357432818, 0.17432392672840902, 0.19174646532067796, 0.19567008813370546, 0.18104608133143152, 0.22111098036385013, 0.18155064733758264, 0.1794281426007286, 0.19540760085615205, 0.12611124057096568, 0.12591274232835548, 0.15305564094018154, 0.17287060883703975, 0.19962469604058974, 0.8093843855255514, 0.12254094675102623, 0.7574481540663076, 0.1764461808007487, 0.6611287958019589, 0.2112674263571498, 0.1255000466492464, 0.7135703003321712, 0.16907657750618343, 0.20826326145854934, 0.10508929970198955, 0.6008701817865312, 0.7415524011960428, 0.18893201268946436, 0.18097144965763423, 0.1874480407000434, 0.22999357402107468, 0.20554975087516336, 0.18513991202923963, 0.18769984609926904, 0.18299346554412077, 0.18277625934244168, 0.10364102169963241, 0.06833839034938283, 0.08828716165680084, 0.08962825272239228, 0.10026593335570977, 0.09874203024727213, 0.08169390338187366, 0.08842939940507222, 0.08914516380580029]}, "mutation_prompt": null}
{"id": "3b56ed81-b209-418f-b8a8-d751a8839de4", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.f = 0.5\n        self.cr = 0.9\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            for i in range(self.pop_size):\n                trial_vector = population[i]\n                idx1, idx2, idx3 = np.random.choice(self.pop_size, 3, replace=False)\n                if np.random.rand() < self.cr:\n                    rand_dim = np.random.randint(self.dim)\n                    trial_vector[rand_dim] = population[idx1, rand_dim] + self.f * (population[idx2, rand_dim] - population[idx3, rand_dim])\n                \n                if func(trial_vector) < pbest_fitness[i]:\n                    pbest[i] = trial_vector\n                    pbest_fitness[i] = func(trial_vector)\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "HybridDEPSO", "description": "Employing a hybrid strategy by integrating Differential Evolution (DE) operators for global exploration to enhance the exploration and exploitation balance.", "configspace": "", "generation": 32, "fitness": 0.19998556154318706, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.41439843867350024, 0.3559999920476282, 0.3811856535408873, 0.3712256465516004, 0.3632452057059804, 0.40809167753148623, 0.3684188914632701, 0.4110250994161567, 0.3745921761446571, 0.016258370253584342, 0.01735817521242422, 0.0034799005317086573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006345311204447146, 9.999999999998899e-05, 0.0841365782235578, 0.10779290650186901, 0.08229579384216523, 0.11339716104617559, 0.0984424714276243, 0.08889340696585057, 0.09784328228522532, 0.10866954569443155, 0.11224365381125967, 0.08382866409510281, 0.09152535844939302, 0.06919691014612384, 0.10161971868743258, 0.08588760575647358, 0.0710734766707567, 0.10004991084590797, 0.08770319330370913, 0.08699610954763626, 0.9440450594755965, 0.9486797139558448, 0.9630997773529926, 0.9383397372182303, 0.9533151936659845, 0.9440633849343839, 0.9613276140373439, 0.9383535248306594, 0.9506594464429288, 0.2508384999412647, 0.22069355345187147, 0.2331769340069484, 0.2313887969991505, 0.2529384188390702, 0.2515995711511668, 0.25043441166788716, 0.2749660899308525, 0.235940764154003, 0.2804969598149253, 0.28548288878192296, 0.22772137036667262, 0.2519181350903543, 0.2551953222421449, 0.24267073880063283, 0.24785946222861177, 0.2817370827390159, 0.31477076271995863, 0.09452563839223949, 0.11929980494055215, 0.11360006635943787, 0.15315154789628016, 0.13921276986901154, 0.15622765352649126, 0.14339679467461464, 0.13269012397503976, 0.1609497101811056, 0.13091002864831625, 0.1423467056684633, 0.15480409555926566, 0.20579996297373915, 0.13100783687241746, 0.13666171788652592, 0.1332684834104504, 0.14388519448978565, 0.1519996054882582, 9.999999999998899e-05, 9.999999999998899e-05, 0.025467401755068786, 9.999999999998899e-05, 9.999999999998899e-05, 0.04928240805615136, 0.0061907630038804395, 9.999999999998899e-05, 0.0004217552722546314, 0.07115065040193136, 0.054998565936399846, 0.13688169017027363, 0.07696145909226926, 0.04451635901082884, 0.04188612166824346, 0.16352011938741817, 0.07160316798237143, 0.09670057773444574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04665926550414501, 0.08093937900712989, 0.06816935938091317, 0.08105021078566499, 0.06945426263709942, 0.07986498019734767, 0.06677474779073345, 0.06538792100228963, 0.08155959679864078, 0.3494557798126787, 0.3505739034562224, 0.35516577206415534, 0.3834733030930626, 0.34693516543562786, 0.3525017296456524, 0.3648183967914419, 0.34520526728945766, 0.38052993176750094, 0.0917673641884954, 0.09952758843849208, 0.060914020062727836, 0.08674789781948733, 0.11699572649233392, 0.10479624338215277, 0.09430943338555009, 0.10611339859812707, 0.09895779528264625, 0.21382963834410051, 0.1723864944448793, 0.17748294615177873, 0.18977551809589466, 0.15724046867002706, 0.11849906479307881, 0.20728667580599958, 0.17785735551635784, 0.19150907907419423, 0.25299469153525556, 0.2605474566433964, 0.2410335971194809, 0.2525702641097133, 0.23958568836863448, 0.25847967743160594, 0.2320556589239806, 0.2803853560463697, 0.21629165734380884, 0.20061717475252827, 0.2030265363186523, 0.14596855519909058, 0.21742489762904227, 0.20569588754243073, 0.17376334454494913, 0.16760759639566836, 0.19976161365847545, 0.22237425365673202, 0.22390592158760647, 0.2117302288091284, 0.20969305120094295, 0.21936087335690135, 0.22249889786223065, 0.2273230019557959, 0.23948681496688506, 0.23103000691091724, 0.20599553751079325, 0.17766410827060808, 0.19322911734333814, 0.17736546458197844, 0.21312908174821577, 0.17952247470135885, 0.2176071851340332, 0.1968539541701484, 0.1881068656959468, 0.19350086737742378, 0.17481217164129137, 0.12358730061680145, 0.17521557766994922, 0.1970040229332296, 0.19864258262232215, 0.5885020537758661, 0.12178330744490373, 0.5677297955768625, 0.1511669486435474, 0.40833062486496696, 0.20786641080197132, 0.461294728195742, 0.20723976735121163, 0.16842354637979529, 0.5314567558393054, 0.10462968351549062, 0.16775680124323444, 0.38156867125232197, 0.1763780337889248, 0.17588395740785, 0.19888774882302518, 0.19046092287022154, 0.1745334059688104, 0.18684669285899558, 0.21787244089499525, 0.22842568563402132, 0.1914884994956717, 0.09744531525859379, 0.07731912307517996, 0.0891654508010522, 0.07853374766915366, 0.08757390129334397, 0.103565266130204, 0.08595510989785382, 0.08917958223496913, 0.09750033674459824]}, "mutation_prompt": null}
{"id": "ae057363-d04c-4f23-a515-26fd12f8cb95", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "1be92dcc-9141-4b14-9e4b-0e73c7e1c8e7", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "022c6b48-44d4-4bd2-8b3c-55553c5e25aa", "solution": "import numpy as np\n\nclass DynamicPopulationSizePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            if np.random.rand() < 0.1:  # 20% difference\n                self.pop_size = min(self.pop_size + np.random.randint(-1, 2), 50)\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, (self.pop_size - population.shape[0], self.dim))))\n                velocity = np.vstack((velocity, np.zeros((self.pop_size - velocity.shape[0], self.dim)))\n                pbest = np.vstack((pbest, population[-(self.pop_size - pbest.shape[0]):]))\n                pbest_fitness = np.append(pbest_fitness, np.array([func(ind) for ind in population[-(self.pop_size - pbest_fitness.shape[0]):]))\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicPopulationSizePSO", "description": "Incorporating a dynamic population size adaptation strategy to adjust the search diversity during optimization for improved convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 39, 17, '                pbest = np.vstack((pbest, population[-(self.pop_size - pbest.shape[0]):]))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 39, 17, '                pbest = np.vstack((pbest, population[-(self.pop_size - pbest.shape[0]):]))\\n'))", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {}, "mutation_prompt": null}
{"id": "2c105b9e-c7b7-4f4e-a386-056083224312", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "c39c7ff2-12c8-4f8a-b430-1ae344362a5f", "solution": "class EnhancedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.49445\n        self.c1_max = 2.0  # Updated cognitive component range\n        self.c2_min = 1.49445\n        self.c2_max = 2.0  # Updated social component range\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            c1 = self.c1_max - (_ / self.budget) * (self.c1_max - self.c1_min)  # Dynamic cognitive component\n            c2 = self.c2_max - (_ / self.budget) * (self.c2_max - self.c2_min)  # Dynamic social component\n            \n            velocity = w * velocity + c1 * r1 * (pbest - population) + c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "EnhancedDynamicInertiaPSO", "description": "Introducing a dynamic adaptation of cognitive and social components to balance exploration and exploitation, enhancing convergence speed.", "configspace": "", "generation": 37, "fitness": 0.24708844191108928, "feedback": "The algorithm EnhancedDynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6136742869402135, 0.6303613174050137, 0.5101079709612479, 0.5694801994981051, 0.5420270711055812, 0.5292474754476328, 0.5429549998168562, 0.5960547319194196, 0.5288024814958772, 0.1352125985466519, 0.1799613179031434, 0.036897967011792376, 0.1568597551727009, 0.03424750812948496, 9.999999999998899e-05, 0.019509434610353482, 0.026941541571959937, 9.999999999998899e-05, 0.06970607087182235, 0.12838717761486873, 0.0895186789884791, 0.10883802878431892, 0.10638138126947927, 0.1338510168669942, 0.10176625879950829, 0.1440513600412171, 0.1224202865270847, 0.07876771457186826, 0.07535183030907489, 0.06938529559675732, 0.11575732477926015, 0.08809771444330672, 0.11111620153652291, 0.1255795237941213, 0.09062496441822021, 0.06716459966220134, 0.9790175795653485, 0.9720995587980632, 0.980411037826117, 0.9784808698147943, 0.9820224069258071, 0.9642266078311984, 0.9801751866046446, 0.9764745798763296, 0.9817371991189119, 0.36851914133148767, 0.37655854915428466, 0.3392417073228464, 0.38349097612179583, 0.33242795058262675, 0.338964558437411, 0.3302831182172876, 0.34875750078905243, 0.3288618174012047, 0.8383762310329341, 0.6587963802564977, 0.42062820735074424, 0.27914035455081143, 0.3679465672909129, 0.21159526558911468, 0.6607318265510318, 0.27854071164318095, 0.23718021046737636, 0.20992471014808844, 0.28960781135360325, 0.15433965639882086, 0.15887688795394972, 0.13219838370891124, 0.1896485977456812, 0.24194835220838484, 0.13446482686058991, 0.1932810138900195, 0.19753923545150742, 0.20542347237927072, 0.23023578761501295, 0.24492415129355471, 0.15346738385253034, 0.1677588278190728, 0.15414454107215603, 0.17389735534440387, 0.16370432133783253, 9.999999999998899e-05, 0.008889351223775321, 0.03923181750770366, 0.023095581520316433, 0.16810885849535917, 0.019520727200485255, 9.999999999998899e-05, 0.008658808756540903, 0.022126806212380834, 0.178671257900321, 0.07347494300811108, 0.08235633567852507, 0.07241092817095518, 0.048877688561657306, 0.021334087172641736, 0.08984625832994897, 0.1777182053325993, 0.06422223752869827, 0.016545292637038855, 0.08544484499728644, 0.014988712765553691, 0.018433251880065504, 0.07239366027963823, 0.02397082498335057, 0.023867207169970817, 0.12998953359474708, 0.00907343464168775, 0.09322736494108508, 0.07982596490937688, 0.09943099781022813, 0.07913722074989915, 0.15891365747403086, 0.12805411838132108, 0.12261333020286691, 0.17409705614239646, 0.15079882045349968, 0.4786531678709143, 0.48114027029815, 0.4689784162542725, 0.4392161268479884, 0.4868393901115533, 0.42507226523078157, 0.44764136862196946, 0.5317386330381124, 0.4472099582186092, 0.05426445538811819, 0.10902153896884759, 0.08161311132097382, 0.12104698910406753, 0.11586216238723412, 0.0999532750768134, 0.08964848388230184, 0.10948122044278519, 0.06758736377298324, 0.3111355621891173, 0.25981791004932586, 0.20859745658272966, 0.27644243611245245, 0.2731558620515152, 0.16537325499719502, 0.2356949674700689, 0.19624776415955836, 0.31957324245559815, 0.24825403456802142, 0.3213121025340172, 0.2014361413227187, 0.30661075578928265, 0.2274077712329302, 0.2149093903522915, 0.22574876487871787, 0.302573801127058, 0.3045413606892776, 0.2553528139543505, 0.2527076325713903, 0.16080244545957045, 0.21055102008863946, 0.21336378958685864, 0.16732900948342633, 0.1786205787654086, 0.2623756614050735, 0.09579673496531815, 0.24246465945653561, 0.27521078637470986, 0.23621456345888314, 0.22566919158182275, 0.2186855247579076, 0.22144472567151996, 0.22278921446478428, 0.2398632641199383, 0.2544310968478425, 0.2100825446657365, 0.4358725716853643, 0.2035095716953238, 0.19424151385815158, 0.2143687354399202, 0.18111555373596744, 0.2239787068962502, 0.20910932308725205, 0.17750161896633054, 0.1260678947444971, 0.12662445761892172, 0.15393625072818762, 0.1735555739280189, 0.20103574012086978, 0.6916256213611763, 0.12295940904876246, 0.8202839124108084, 0.1767843577269338, 0.6051415770582667, 0.21328776662993965, 0.1245267426765031, 0.6053843166339463, 0.16972387410076029, 0.21046007731817673, 0.10536040317848472, 0.7603136792928977, 0.4171948289500337, 0.20003435241484602, 0.18886370045598389, 0.19909269842662736, 0.1795847454458087, 0.18554994104238454, 0.2247365377802446, 0.17756722864146446, 0.19148404088374704, 0.1849016103795963, 0.08301337205951365, 0.1276795183824646, 0.08697292155310876, 0.07900804719795473, 0.08590448903632808, 0.0988340848313104, 0.09218420236768166, 0.10685003924726111, 0.08839512076873557]}, "mutation_prompt": null}
{"id": "592f5d41-be77-4355-9cbe-a78660afb71f", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "d2842cb0-f972-4ecb-8dde-979215695ae5", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __local_search(self, population, func):\n        for i in range(self.pop_size):\n            for _ in range(5):  # Perform local search for a fixed number of iterations\n                new_point = population[i] + np.random.uniform(-0.1, 0.1, self.dim)\n                if func(new_point) < func(population[i]):\n                    population[i] = new_point\n        \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            self.__local_search(population, func)  # Integrate local search\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "HybridPSO", "description": "Implementing a hybrid algorithm by integrating Particle Swarm Optimization with Local Search to exploit local optima for faster convergence.", "configspace": "", "generation": 39, "fitness": 0.18883050018787947, "feedback": "The algorithm HybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.4063143800878998, 0.38169136939411175, 0.41130975244222157, 0.3882532971194107, 0.3749728651529233, 0.4156546505858896, 0.3869932932107828, 0.36750101126206314, 0.40068818335610057, 0.07847270659309524, 0.03981280983847879, 0.06196369719427186, 0.008073126532346597, 9.999999999998899e-05, 0.01563615159057896, 0.0126251568568434, 9.999999999998899e-05, 9.999999999998899e-05, 0.06004890836978771, 0.08534005597332706, 0.058164291723092565, 0.09955749378901146, 0.09799536998516456, 0.11152883018360882, 0.09394590186054941, 0.08530838877154234, 0.09977290514800585, 0.08245057692927038, 0.07337476518538222, 0.06068058280107502, 0.0976721624298661, 0.07990038828687351, 0.0946409109200107, 0.061126958746074544, 0.07599926469427754, 0.03912795453766116, 0.7200584473578631, 0.5364857312292384, 0.8170056375502738, 0.7822955752326396, 0.8049920043885836, 0.6658240236252263, 0.8176979876501138, 0.7601394656564782, 0.7987473088122179, 0.24502005937806015, 0.22585969765489966, 0.19940583939760204, 0.2317861044266183, 0.232725627187367, 0.2711516011392626, 0.21031998732978208, 0.19957274765882205, 0.228088100929825, 0.2994521404584035, 0.16794715066583754, 0.1859237252322028, 0.2464397746299083, 0.2099700803467044, 0.2382725679507819, 0.25208155164055834, 0.2660289794443975, 0.23377271745537476, 0.09445051170079566, 0.13985601054540353, 0.09103892926603274, 0.16191359451257537, 0.11473089092807909, 0.12995904662537028, 0.16152193233773648, 0.11334793131299137, 0.12527780071915673, 0.1297423596431332, 0.16135413191519943, 0.11539584522544755, 0.1312239854693491, 0.1227147020951539, 0.13224831645895208, 0.18015520213426006, 0.12575612959510507, 0.10874073262966344, 9.999999999998899e-05, 9.999999999998899e-05, 0.04248313122905145, 0.00819173022777464, 0.005862756319101159, 0.006246436904355335, 0.0032866782981584297, 9.999999999998899e-05, 0.0018434592690453888, 0.10601633588676773, 0.10285423751412182, 0.10387252083110832, 0.15531713037647188, 0.02256742298532355, 0.05363754966251577, 0.17082887767960364, 0.10042597578195289, 0.08144164777329876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006214160893768028, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016190938219126094, 9.999999999998899e-05, 9.999999999998899e-05, 0.0927872330509697, 0.03728644192260777, 0.0970777331878504, 0.0707004990560296, 0.07932168545251062, 0.1129663752852672, 0.10192348325696876, 0.06472348887904333, 0.13181569085515132, 0.3900904191888236, 0.33711644017114406, 0.3699458336387187, 0.3620110569790065, 0.34014746548879005, 0.3495678117575325, 0.373178348796424, 0.3412722197775221, 0.39421611248979294, 0.0706454385630273, 0.05394666592804731, 0.08044317960491065, 0.08193710295201906, 0.07972141725957904, 0.10700633731175058, 0.11511628617605651, 0.08881503216034348, 0.07628803047102595, 0.18089818706489824, 0.1818152309538279, 0.22426822422905868, 0.22563283850411986, 0.2042040522820454, 0.1624890329687927, 0.19136479854599397, 0.1716354198967458, 0.15973108849170492, 0.2361447172830352, 0.2372045774033692, 0.16902208092541582, 0.2648719737216908, 0.24039846260568087, 0.26223821830366323, 0.18870833292969091, 0.2703287159604595, 0.1812289166038613, 0.1770556166701439, 0.1891270749617393, 0.1519742753005161, 0.19189931341957056, 0.15537664708441767, 0.16326013987004118, 0.20458483464656596, 0.20747864063285681, 0.12310241587400583, 0.20183233791596544, 0.20301649868059024, 0.18106542964009797, 0.22075640734140944, 0.21145937452507246, 0.206016659749229, 0.1935699901240181, 0.20841977513078325, 0.19598789886056056, 0.1657830353529014, 0.1776940321829661, 0.19009021029872586, 0.1849068284554516, 0.19338503641190297, 0.17917254145132067, 0.19893446934558778, 0.18680422950442488, 0.17749979356949586, 0.11955970082064105, 0.12341870012231138, 0.14818823121975144, 0.40392895369279835, 0.19313721471117573, 0.6364510645695085, 0.1170160898693583, 0.4927141776685424, 0.16781609999544167, 0.5172455586352183, 0.20044412425267977, 0.17268059989728313, 0.5988885688302614, 0.16011368450787855, 0.19543979636978936, 0.37861639873832265, 0.4274207603934572, 0.43116718584791724, 0.17171215426509245, 0.17983974429063343, 0.18580948417691967, 0.17244615046660816, 0.1718486915767582, 0.18693041559296364, 0.1648443295486366, 0.17691354553391847, 0.1903855424445381, 0.07809368629437163, 0.09158887727682419, 0.07240266482254554, 0.080250127009451, 0.0762041892441997, 0.11525731224701175, 0.07709968075943485, 0.08525231993821702, 0.06665601506679941]}, "mutation_prompt": null}
{"id": "7574f541-12f4-4def-adb0-a4a455ccdd4d", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "07376035-5e7b-4046-86e6-48de11607adc", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "eba25bea-64c8-4b33-bee3-dba9776aa35e", "solution": "import numpy as np\n\nclass DynamicAccelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c_min = 1.49445\n        self.c_max = 2.49445  # 20.0% change\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            c = self.c_max - (_ / self.budget) * (self.c_max - self.c_min)  # Dynamic acceleration coefficient\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + c * r1 * (pbest - population) + c * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicAccelPSO", "description": "Implementing a dynamic acceleration coefficient to adjust the particle velocity update strategy based on the fitness landscape to improve convergence speed.", "configspace": "", "generation": 42, "fitness": 0.2251088645335292, "feedback": "The algorithm DynamicAccelPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.4653022512354834, 0.44674327268074443, 0.44473284014990266, 0.4876346711995089, 0.43705223751345224, 0.4154361355219678, 0.4732429571549568, 0.4138243990513585, 0.46988212985111955, 0.03989471571863212, 0.04160882149390599, 9.999999999998899e-05, 0.011450315002054956, 0.024587598663900145, 9.999999999998899e-05, 0.004519549227303243, 9.999999999998899e-05, 9.999999999998899e-05, 0.0943747039166195, 0.14312680450549908, 0.09042201901872504, 0.10355765474645284, 0.11676787383850717, 0.10566506412678844, 0.09516722165465563, 0.08333099674680655, 0.08830147994141768, 0.0909667699284008, 0.08824487011826931, 0.08630643680386052, 0.10066735287557671, 0.0819323859724922, 0.1306128878748053, 0.10585582410400496, 0.08128168535367009, 0.08029928098100714, 0.9799277803636598, 0.9704339716095772, 0.9816068459921022, 0.9792137116482493, 0.9820357584275281, 0.975097638372908, 0.9787886725049078, 0.9763392685139529, 0.9818725933990943, 0.28922902485765345, 0.2774239549573114, 0.3199493500867565, 0.2909550082266321, 0.2860388468404206, 0.2753123033514837, 0.29865781691579085, 0.27070807334683633, 0.2790158386325884, 0.5267196351731889, 0.2912273268992164, 0.32224050896808754, 0.45968620496568124, 0.2531127247861604, 0.28396751143811827, 0.33266154851806273, 0.3206924032182361, 0.3532908941859181, 0.18889270192595864, 0.16158604937006893, 0.14682700567980556, 0.24115878523748147, 0.1908434931792481, 0.16369619186252327, 0.13806550685265395, 0.13177175223508197, 0.18336493801057163, 0.15702413385345793, 0.14867588925091257, 0.2004986526806306, 0.18971266507445794, 0.15570564341524495, 0.16471965130285882, 0.1571087385618941, 0.1595997252067045, 0.18677971064619114, 0.0744151174095119, 9.999999999998899e-05, 0.06598991304170887, 0.03746252642106429, 0.06462078081226041, 0.025640420621515614, 0.010062853057985599, 9.999999999998899e-05, 0.0009238165055667213, 0.15705873126460324, 0.09483995888088304, 0.1429956614632658, 0.077257497803914, 0.06511514803568064, 0.022773913666811474, 0.1337095432492975, 0.09605658393674132, 0.06465725451135984, 0.003218725581753068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018982025889872078, 9.999999999998899e-05, 0.0023491063600813433, 9.999999999998899e-05, 9.999999999998899e-05, 0.09754371049801447, 0.05183275904147122, 0.10999282669163968, 0.10521600491518535, 0.1286061333843327, 0.08829783204294495, 0.09748704675081443, 0.14475196044375693, 0.11003898041052074, 0.4269766926681424, 0.38757994440415855, 0.39295515313469664, 0.4290306174888435, 0.39798034581195707, 0.3904861599898012, 0.44841220881339927, 0.4159924413461642, 0.39617790983094414, 0.10553692099869239, 0.1251480076566973, 0.11113568710820176, 0.11462497627708412, 0.12032218528858196, 0.07542052738793703, 0.1484520115646839, 0.14483012632997938, 0.08972208214707766, 0.20273669250084447, 0.21622160892608466, 0.2643270066884522, 0.25740562372134834, 0.30130022701205417, 0.25491451262614573, 0.2576149251642147, 0.25065807016689146, 0.2942273142324304, 0.337599378302762, 0.24764195681406154, 0.30503035375784604, 0.2984065982617612, 0.22840925152719915, 0.2945083219554192, 0.2110944460927885, 0.3132304687878643, 0.2068416725855261, 0.24421240674886835, 0.20867718195916196, 0.15632947078307335, 0.1715705816815304, 0.19194641122575717, 0.21369346339030404, 0.1903958587450013, 0.23947522449804337, 0.1401942098614305, 0.2058372018759057, 0.19752519578905836, 0.21308367089849922, 0.2481089311206255, 0.24859595112368316, 0.2764583002260693, 0.23584662413577162, 0.21546414306870476, 0.20587944039802997, 0.2086819348391027, 0.19174975800425786, 0.18774576923589725, 0.20770062795750477, 0.18854831743663458, 0.1804274963916419, 0.20737036340518722, 0.1953121232794396, 0.21244843683464665, 0.1263552116903487, 0.12587091437969045, 0.15435084562053658, 0.173199981049186, 0.2014635225061634, 0.6623800830440281, 0.12270384369639342, 0.6268874699337441, 0.17795634085376255, 0.4354396718249436, 0.21236544502827814, 0.5220772732718995, 0.6156041715462871, 0.1698068818603291, 0.21233645985843075, 0.10527503010523687, 0.4369509333765874, 0.404891155318719, 0.1743966294609669, 0.1845301803500008, 0.18439298200267618, 0.19278025784121855, 0.1840728969650075, 0.18111868978672319, 0.18282895668545973, 0.19598585021911263, 0.1800178528600085, 0.10031449004314541, 0.0812838533006699, 0.09773246408811376, 0.08601996772147524, 0.09424222242909386, 0.09151229741749833, 0.07774398105877212, 0.09859553637407226, 0.08275620647976267]}, "mutation_prompt": null}
{"id": "ac6f4c0e-fa5f-4c55-8b22-81a13462a3d6", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n\n            if np.random.rand() < self.mutation_rate:\n                mutation_vector = np.random.uniform(-1, 1, size=(self.pop_size, self.dim))\n                population += mutation_vector\n\n            population += velocity\n\n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n        return gbest", "name": "EnhancedDynamicInertiaPSO", "description": "Introducing a mutation mechanism that dynamically adjusts the search behavior of individuals to explore new regions efficiently.", "configspace": "", "generation": 43, "fitness": 0.21037768900676448, "feedback": "The algorithm EnhancedDynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.37614597922253357, 0.39435452368012514, 0.38701091070038274, 0.402821841544139, 0.4206826985314096, 0.3835356098098551, 0.39192232549214345, 0.3819427614797598, 0.4185039872053601, 0.004611843529813253, 0.031453505385457214, 0.007208478182253786, 9.999999999998899e-05, 0.006227274507784708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08152162230407578, 0.09473684495833878, 0.0896806175234407, 0.13227004433079181, 0.11087832991862268, 0.11500924280258551, 0.11038859577744575, 0.09356810595537068, 0.10299924091246027, 0.09073803307006911, 0.11239097857459479, 0.09504295929264517, 0.10980749655038291, 0.09430664818235235, 0.09623280975021375, 0.0915387536175567, 0.10024588717315441, 0.09809127545892538, 0.9792307691741202, 0.9761107497253105, 0.9797955659554123, 0.97319489261221, 0.980171245161744, 0.9607598125980654, 0.9815889926733197, 0.9764967029075278, 0.9791370884628717, 0.28576703111913926, 0.24199229383684973, 0.28733251667932547, 0.24992395652081534, 0.26692177561311015, 0.24682747110707492, 0.2657518796958468, 0.2622595258535463, 0.2688047427763065, 0.3253765284872272, 0.4735942175864125, 0.26363375445055637, 0.2659087118248553, 0.285615089682978, 0.33003485278068934, 0.22238468092231745, 0.29994893977426274, 0.31172054752684175, 0.10351881513197092, 0.1681910262659323, 0.10839258054273138, 0.12776300586169564, 0.11719770230258875, 0.15280080308111088, 0.15080914408856116, 0.16829448682904857, 0.1421970647467773, 0.19525756904935265, 0.13620625661683028, 0.20185199259930664, 0.1221574261198306, 0.1515208123892997, 0.16279534889648295, 0.14127025240573643, 0.13563369403445247, 0.12866968760301056, 9.999999999998899e-05, 0.00013324779158796485, 9.999999999998899e-05, 0.012509746761171892, 0.02721889087033158, 0.006630889884787439, 9.999999999998899e-05, 0.01781484335366479, 0.014904084218999691, 0.17961543834524674, 0.08408873524087268, 0.11415215920464328, 0.12003762404236751, 0.02468338948662807, 0.04620585513071651, 0.11854747499834262, 0.06876214375816103, 0.10960471457924648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07079749832833282, 0.07251795897368518, 0.09727284841472206, 0.0875600158005938, 0.10585047832643413, 0.0659626196324612, 0.0802222042110825, 0.08680812575362995, 0.11350172845592787, 0.39528715026504113, 0.3968491981270267, 0.3674426548382871, 0.36210698244362793, 0.3737124419336919, 0.36739597296134185, 0.3937533926004526, 0.422684109900754, 0.3697108992324871, 0.09408067673060994, 0.09295058924594346, 0.10308275745751949, 0.11244430112964965, 0.11565182727869128, 0.09583808701754293, 0.09165201009120172, 0.11516682090461927, 0.09796745716704791, 0.19173195442725555, 0.17430306964444642, 0.20558786563831788, 0.23585506013973523, 0.22250509061964274, 0.15562049058573524, 0.2706412846615106, 0.187511896767672, 0.19083306771997532, 0.25142753941365414, 0.265873184137544, 0.26478088570961267, 0.2297335653234721, 0.26698982321446707, 0.27375974552205895, 0.28566251565333955, 0.27712665435110284, 0.18339160780331465, 0.19611725402717906, 0.20608806080401898, 0.1486059467064339, 0.21667961612213915, 0.21963791250906983, 0.22895916667026706, 0.16945811419838397, 0.18532805784358986, 0.1707600175417614, 0.23605295044916097, 0.21018950679651993, 0.19521587735139045, 0.22593535986268387, 0.2273261378450555, 0.2212170034214821, 0.2461198221435973, 0.20528216988993708, 0.20371942800021092, 0.19197641945683597, 0.2012641050438474, 0.1774697871472356, 0.19685179833360666, 0.1845350782853057, 0.19736435929471685, 0.18113321734315302, 0.17804085143551185, 0.18737932190073847, 0.12517024200599536, 0.1871711990352859, 0.15330546967275827, 0.5172257883341134, 0.20070060577816184, 0.597720081729759, 0.12085282736887804, 0.6050823763118165, 0.17766236283870207, 0.3976635306504186, 0.21124907355692457, 0.051679281971846236, 0.5430023134560332, 0.16942497408829038, 0.21041799410076634, 0.10525298219341872, 0.5285123856309818, 0.4021277234789751, 0.18236485903131794, 0.17109357888014243, 0.19168774455824178, 0.1886296987312771, 0.1754306472712991, 0.18552503291207878, 0.19856093623316273, 0.20978600445276985, 0.19432380638705005, 0.09136454436831631, 0.08890243142207888, 0.08365509975273944, 0.0846966624138693, 0.08337539055068777, 0.12014049328959187, 0.08517736220142391, 0.09090477514077433, 0.09413662951782076]}, "mutation_prompt": null}
{"id": "6df6e82d-acb0-4f54-a30e-cb36340bd30f", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.mutation_prob = 0.1\n        self.chaos_param = 0.8\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            chaos_map = lambda x: self.chaos_param * x * (1 - x)\n            chaos_func = np.vectorize(chaos_map)\n            mutation_mask = np.where(np.random.rand(self.pop_size, self.dim) < self.mutation_prob, 1, 0)\n            mutation_values = chaos_func(np.random.rand(self.pop_size, self.dim)) * mutation_mask\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population) + mutation_values\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n        return gbest", "name": "EnhancedDynamicInertiaPSO", "description": "Implementing a novel mutation mechanism based on chaotic maps to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 44, "fitness": 0.2303859448450781, "feedback": "The algorithm EnhancedDynamicInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.47023367202105515, 0.47238544874713284, 0.4439483715411239, 0.46249670676426724, 0.49609372997540324, 0.4747499478568995, 0.4892972885111787, 0.4591259214695099, 0.4526245534194635, 0.05334851103434579, 0.039823583291278886, 0.052611453019053456, 9.999999999998899e-05, 0.025072297640679975, 9.999999999998899e-05, 9.999999999998899e-05, 0.11378497584616087, 9.999999999998899e-05, 0.07816066682119327, 0.10772959942122362, 0.06268671345056942, 0.08996461602929007, 0.1713603032870722, 0.11812910829781942, 0.09992079312421542, 0.14572779245983425, 0.11495144242844813, 0.07343778025843872, 0.06988129226739859, 0.09399229097730644, 0.10484159849570929, 0.0870966957959548, 0.09615684007462855, 0.10390410809777606, 0.11639394563805805, 0.09284993299301281, 0.9656979104730764, 0.9688614168079838, 0.9800518544043186, 0.97491965349068, 0.9785185378956613, 0.965917438070198, 0.980721288947446, 0.9732042547504389, 0.976634483812242, 0.3079893026046092, 0.3046137745252496, 0.3069475517898641, 0.30417066662712977, 0.3085188777075589, 0.31199808195029877, 0.3063994017288991, 0.3009285148316305, 0.30906888476539396, 0.7627654012314813, 0.41408840032130767, 0.29743384569073483, 0.23516389736704146, 0.3760476507857099, 0.3681332015558574, 0.23062429256102968, 0.17537632797262737, 0.5392565693642842, 0.12242643506776896, 0.16394664574547646, 0.2033870218010565, 0.15895001492489513, 0.1810723374425406, 0.20174732813373475, 0.2080315254691062, 0.18393531800679186, 0.1902797280748968, 0.1815201889816488, 0.17222000202072518, 0.19258725874699634, 0.1519094919600491, 0.1850010328410503, 0.16531012202393303, 0.1307525495625359, 0.15650704678816585, 0.19982098383808533, 0.01773120351346058, 0.008825570234152647, 0.012274662015675841, 0.01320086332454029, 0.006066233489637862, 0.03825968854417383, 0.012099400668578397, 0.051206691132222315, 0.06109635459415963, 0.09440614395847424, 0.08959238101017342, 0.14310026689656064, 0.10009235208519296, 0.07069393634185694, 0.031695182661761634, 0.1187375651612621, 0.09235388489025032, 0.12121044011037208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10121658719875759, 0.05915708723793467, 0.1047146889580246, 0.10691334485784187, 0.0995043954061986, 0.08604649382814256, 0.11639429447763683, 0.09001717118379637, 0.11643798053609922, 0.43267935044392836, 0.43605364659337287, 0.44649250167365195, 0.4281561667046302, 0.433334822519546, 0.42805673377210474, 0.42276313351642125, 0.4068847617486345, 0.429130846443323, 0.0874762051358211, 0.09221138602713619, 0.1310374657371869, 0.13750040289697774, 0.0876609938981926, 0.12850150261815818, 0.10829172168794998, 0.1256376194055674, 0.08375203138759613, 0.21631341028449846, 0.25771344364676374, 0.2584947268051775, 0.2771211560393192, 0.25302823645268835, 0.22673824570110612, 0.2996566846713635, 0.18456010521819688, 0.28980143417150206, 0.16233548364955586, 0.301335729874186, 0.27475073345954293, 0.31949883785295896, 0.22775369458333572, 0.30189519230181483, 0.23933676724742814, 0.3072376300842051, 0.2750271509660108, 0.20751295389022972, 0.24332742472031454, 0.17190256256110625, 0.2282492386002356, 0.19222027029972455, 0.2629700495893299, 0.1793259206564195, 0.22041041075737278, 0.0953271982146714, 0.22132640773656975, 0.20943344448836054, 0.21651263149879119, 0.22441232713128878, 0.23604117123323098, 0.22701677637213247, 0.23522315944010208, 0.2523726253052302, 0.25889901645616586, 0.20063472648348357, 0.22694689117308864, 0.18847668008400786, 0.1871659172786544, 0.19091197937756, 0.1893212351186333, 0.18516316348326245, 0.1973260694581701, 0.19730340606843833, 0.1268248471185982, 0.12605730516756752, 0.15299254523362793, 0.6558196352927345, 0.2012666831879074, 0.6540893403213047, 0.09958491736762098, 0.7416374868634137, 0.17798966821299933, 0.6912967590801311, 0.21292769578845006, 0.051864991174313535, 0.21198375497977917, 0.16945629291930886, 0.21064594277372928, 0.10508837692646322, 0.5198977404515164, 0.5652480962747273, 0.2114062539787277, 0.20853356252860367, 0.1839055925077876, 0.17579772946556038, 0.18879621146708803, 0.18169007111407776, 0.19031951548626236, 0.17727730414916243, 0.18237508857314366, 0.0911825029240364, 0.09193129737882577, 0.09874605181457774, 0.10166140474815599, 0.08926454778730442, 0.11847487161795889, 0.08811391958843995, 0.08596621465519894, 0.08871289608668664]}, "mutation_prompt": null}
{"id": "660cbf4c-ab38-4cab-ad55-8c205021477d", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "994014e6-9452-4569-adcf-9ba11eee0efc", "solution": "import numpy as np\n\nclass DynamicPopSizePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            if np.random.rand() < 0.5 and np.sum(update_indices) > self.pop_size // 2:\n                self.pop_size = min(2 * self.pop_size, 100)\n                population = np.vstack([population, np.random.uniform(-5.0, 5.0, (self.pop_size - len(population), self.dim))])\n                velocity = np.vstack([velocity, np.zeros((self.pop_size - len(velocity), self.dim))])\n                pbest = np.vstack([pbest, population[-(self.pop_size - len(pbest)):]])\n                pbest_fitness = np.hstack([pbest_fitness, np.array([func(ind) for ind in population[-(self.pop_size - len(pbest)):])])\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicPopSizePSO", "description": "Introducing a dynamic population size adaptation mechanism based on fitness improvement to accelerate convergence speed.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 40, 132, '                pbest_fitness = np.hstack([pbest_fitness, np.array([func(ind) for ind in population[-(self.pop_size - len(pbest)):])])')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 40, 132, '                pbest_fitness = np.hstack([pbest_fitness, np.array([func(ind) for ind in population[-(self.pop_size - len(pbest)):])])'))", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {}, "mutation_prompt": null}
{"id": "6919d26d-b9e2-4201-b4e4-e179e4896f17", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "c4900f9d-c7b0-48a3-8eda-76c57d8879f3", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            fitness = np.array([func(ind) for ind in population])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = population[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaPSO", "description": "Introducing dynamic inertia weight adaptation based on population diversity to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6392011263670287, 0.6547186380197507, 0.7438207252400072, 0.6344958290283342, 0.6242943572781293, 0.7318359913155671, 0.6607287539784146, 0.6105094778451521, 0.7484485355988523, 0.08121971735306255, 0.10204014425268182, 0.024396135336180902, 9.999999999998899e-05, 0.023625768915671475, 0.16337884157946791, 9.999999999998899e-05, 0.08276760697356167, 0.08061246432743463, 0.09018989531979604, 0.14494364893259115, 0.11450371055875219, 0.07976935915511107, 0.13131615033437027, 0.1518760307529352, 0.08640312340662348, 0.0904591627825132, 0.13575773880297914, 0.11138540278719555, 0.06315906422498152, 0.07845678825462687, 0.1316963761277773, 0.09795408947367157, 0.12020508940577912, 0.10937887944206015, 0.10205063859135421, 0.0480519575295828, 0.9776722842351484, 0.9685225856056894, 0.9797010542834482, 0.9783678485035516, 0.9786799249837626, 0.9748847780703725, 0.9821252913790858, 0.974064046770092, 0.9782842690916849, 0.33440735259860144, 0.32534254252012584, 0.5570803116705253, 0.38879760889978876, 0.3478998520571117, 0.4707255377287507, 0.357796322059874, 0.3275164523464147, 0.4569006903559194, 0.5793549309129727, 0.20228867681334595, 0.16418919794851716, 0.2791928807851377, 0.3768124064281496, 0.8717976989261857, 0.30004989692206396, 0.8034007717517324, 0.23582377573111213, 0.06693472191592664, 0.13089271664667157, 0.2788922222970581, 0.19795367150973486, 0.13582896422684376, 0.2019117465774437, 0.1316068877446671, 0.1809946543463462, 0.16440885209235423, 0.1659482156721479, 0.17122550942630566, 0.13168415353079, 0.21092783493045686, 0.1311410133758396, 0.13196951556251402, 0.16421687625125592, 0.1472301781905322, 0.1304446417364321, 0.005608268429881491, 0.03637371477893847, 0.1375774617266552, 0.055902255497460085, 0.043158651930791714, 0.011755960421692135, 9.999999999998899e-05, 0.002816985311538178, 0.16242661451083729, 0.14531391331304166, 0.09954263534542585, 0.11132966581730774, 0.13844721786783287, 0.04407298924078873, 0.04048619348647842, 0.10467875286306116, 0.10992473464184926, 0.09585126761216911, 0.038233109622481054, 0.05412846154151851, 0.20814817377686423, 0.017309009753197824, 0.040335191855760955, 0.06465569086654976, 0.04741456756218654, 0.05780925325719122, 0.0282179542601656, 0.08544073571191424, 0.08921734189436936, 0.10121577966652695, 0.11141524556001992, 0.1909348913266644, 0.11149904962528889, 0.08075744653916717, 0.19985042615224702, 0.12618555472706883, 0.425734786832739, 0.46921914315102653, 0.5249701633580186, 0.44667766855070046, 0.43010404313798567, 0.5120836057007307, 0.44440813016358716, 0.5084474979476056, 0.544951251695718, 0.08091931826395815, 0.10123393178278506, 0.15113471923233068, 0.11057514467488305, 0.07797595592650508, 0.0905840599280755, 0.10917977649921906, 0.13345190573522436, 0.0936402300323862, 0.3322724719597707, 0.24329895228628662, 0.13003621955390843, 0.19939756339368664, 0.2577825906789398, 0.19518494290405786, 0.24019358121445133, 0.1823385719225229, 0.21084412838446664, 0.23463036518336056, 0.318729495568005, 0.2086520079727766, 0.3133789384072607, 0.22803978332877595, 0.2912094633838692, 0.2373805307605633, 0.3520837888606164, 0.11643909071045744, 0.25540837140629025, 0.24439613538836868, 0.1530379143510361, 0.23820049741062999, 0.29363659989207647, 0.2918810248106144, 0.22240034868111502, 0.21697025718958862, 0.23102208451878703, 0.2508941124645483, 0.25589327069490486, 0.20513036478724556, 0.21704386044613144, 0.21267634599358476, 0.24208418179723423, 0.2109865756093955, 0.20740551194839252, 0.21149148561664433, 0.20989321406248374, 0.17558239366787298, 0.22162479424016457, 0.20354126552317153, 0.19358819507119118, 0.1845416628489286, 0.22207493118106503, 0.2225978346566143, 0.20284774505355685, 0.12630392906513077, 0.12687889968728505, 0.15416770082018738, 0.17344900451904666, 0.20155109808811933, 0.8961973990325074, 0.1232106449245779, 0.8230050000885812, 0.17806196498583937, 0.7858271259253217, 0.21329380840417267, 0.051824221961630834, 0.43230160658480954, 0.1696017127553623, 0.21161544888552808, 0.5953308445802786, 0.34097584206134157, 0.7309575392500658, 0.1952329426776801, 0.1928069177424444, 0.19301428063001136, 0.18784525258930385, 0.1839579980585202, 0.2397804496004292, 0.21048873554900693, 0.19058222956109627, 0.18703517372727474, 0.10593619039673596, 0.07777966646095924, 0.08844226924727605, 0.0713136482358897, 0.09030465020299927, 0.11329785689937366, 0.09393210641179717, 0.08673800638178797, 0.10817758330550664]}, "mutation_prompt": null}
{"id": "ed1e9159-a4b9-433e-b925-83a4e8b183f7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # DE mutation\n            mutant = population + np.random.uniform(-1, 1, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n            \n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "HybridPSO_DE", "description": "Introducing a hybrid approach combining Particle Swarm Optimization with Differential Evolution to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 49, "fitness": 0.277809973319008, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "99bd080a-456d-4e0e-a705-eeba3e54d442", "metadata": {"aucs": [0.6594197147126123, 0.5369140561108768, 0.7816834263955584, 0.6407085615427266, 0.5585583318880964, 0.7895262215862138, 0.6563066840592817, 0.5454112143392056, 0.75382273002939, 0.14305757085108017, 0.08556958841034445, 0.3709335064524868, 0.15882029533312847, 0.08996287628103705, 0.4319530735420535, 0.13574412869033026, 0.07167934645653806, 0.4383071355502244, 0.12760320911614254, 0.09485971407903693, 0.12050654119290594, 0.23968395052235414, 0.12532594399654096, 0.1050584631264615, 0.08401828429827274, 0.11748315273137211, 0.16647699156794238, 0.13519334726932997, 0.09864423363100616, 0.12074728129492596, 0.1277854075516841, 0.1225939317442779, 0.13651628261089988, 0.12029978713923906, 0.10401540001217213, 0.11671663135166488, 0.9803150395578223, 0.9727909257139132, 0.9771026436814253, 0.9768312846242744, 0.9827061599887839, 0.9771451563625898, 0.9787085217881529, 0.9728879283018668, 0.9691511306461585, 0.36241806187555836, 0.3622023796542615, 0.5485716387445215, 0.3512366286695203, 0.3506032396368761, 0.5322358735030552, 0.3747974704617961, 0.32266216588662744, 0.47811614073589437, 0.7471755880514388, 0.6086561181753642, 0.6649129972880854, 0.7161508628126045, 0.27764779366828585, 0.7304807855721687, 0.23851042739120787, 0.27782065576299175, 0.2365557915921167, 0.18204968810708133, 0.1730969459877113, 0.2959064908664324, 0.17679741668916105, 0.23475237843715457, 0.2551308041411535, 0.17689126406411793, 0.16979339987998943, 0.2487022056235738, 0.18213585421498701, 0.1964503170870966, 0.2339474641897592, 0.2181986606621883, 0.25121788843971105, 0.284977527813824, 0.2116242408675444, 0.10784635523172836, 0.1809721730649504, 0.029568740175050845, 0.03857007775761867, 0.05983478942559106, 0.062281659570859516, 0.0392689013146692, 0.06417718197780431, 0.02136541976941697, 0.0737416422935816, 0.10932201286576182, 0.09008272134147732, 0.06811620874100244, 0.16467287561438293, 0.02615461780137085, 0.06371016960726461, 0.018385230762745453, 0.09570732455671094, 0.11124798805102942, 0.08540721962980202, 0.1070889872646289, 0.04156622607720051, 0.12279042498913606, 0.0142618556604861, 0.010999965124894318, 0.038185328844137834, 0.06374068090924301, 0.02994706355902077, 0.11989955310382006, 0.13294367080742797, 0.15543112616437815, 0.18877759019643325, 0.08806700136052947, 0.0650376963048549, 0.15145750740769248, 0.10046486169097901, 0.08615018323047274, 0.15983927285398802, 0.5033909289780786, 0.45786984639826955, 0.6085606921546824, 0.4884970722491131, 0.43356044989606746, 0.5817212554076505, 0.4988473141229396, 0.42745423927954096, 0.6062109130048781, 0.11603800944466092, 0.12127348526454551, 0.11560237568585685, 0.1464695297177726, 0.12577502353704717, 0.09416287248283717, 0.15273423100059003, 0.13638714041030564, 0.1507774839433016, 0.3251719239421742, 0.2504562127127533, 0.21007766106871273, 0.23001072187749227, 0.20946678358970217, 0.2968008793710699, 0.19931675028113316, 0.32034498755154905, 0.29628173617307507, 0.33461171296418857, 0.32579847908958504, 0.3719578868415202, 0.393171436402151, 0.30824729539776674, 0.445200907581746, 0.2438102015016842, 0.2948497082530872, 0.22134984500431376, 0.30448685577646617, 0.21175784568162104, 0.22058398635350684, 0.2752567948125779, 0.2174873871975792, 0.17252094562181086, 0.19260938799404725, 0.2556321181549942, 0.22293925652791236, 0.2159935834326111, 0.2133738222488295, 0.2099029764411332, 0.21858510667578201, 0.22293306475458274, 0.2032688104735978, 0.2155384328665546, 0.2167989926555406, 0.2104469132034511, 0.20196173338463053, 0.1976833751367273, 0.19226652150812729, 0.19681235730854674, 0.23436740506457643, 0.2062666956184689, 0.19277243057713633, 0.21004259980550488, 0.20083029640696437, 0.18811928484485896, 0.17372319805425418, 0.15347937241536092, 0.8413773440248339, 0.7062413174347859, 0.11501473841532295, 0.12306505667201795, 0.6398661574061608, 0.16325722983696866, 0.7190224167666373, 0.21260493084396836, 0.8408221403613365, 0.1686947160487745, 0.21142502450775513, 0.7844287631117373, 0.10497143591959068, 0.09472419961588552, 0.6322699655548789, 0.1810854418121811, 0.1807588798238472, 0.17565758318475289, 0.19478138317878324, 0.18967610074196972, 0.18465254653022234, 0.1828809797706097, 0.18835960114558925, 0.19663414656942113, 0.09579706795491127, 0.08906838319753474, 0.09653617328367181, 0.0826404633252763, 0.08306875547787551, 0.1028861167391808, 0.0946038090229715, 0.08777847163892072, 0.0925480756193543]}, "mutation_prompt": null}
{"id": "01ad450a-bfe7-4526-a728-56033e1aed52", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for _ in range(self.budget):\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # DE mutation\n            mutant = population + np.random.uniform(-1, 1, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n            \n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "HybridPSO_DE", "description": "Introducing a hybrid approach combining Particle Swarm Optimization with Differential Evolution to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ed1e9159-a4b9-433e-b925-83a4e8b183f7", "metadata": {"aucs": [0.6594197147126123, 0.5369140561108768, 0.7816834263955584, 0.6407085615427266, 0.5585583318880964, 0.7895262215862138, 0.6563066840592817, 0.5454112143392056, 0.75382273002939, 0.14305757085108017, 0.08556958841034445, 0.3709335064524868, 0.15882029533312847, 0.08996287628103705, 0.4319530735420535, 0.13574412869033026, 0.07167934645653806, 0.4383071355502244, 0.12760320911614254, 0.09485971407903693, 0.12050654119290594, 0.23968395052235414, 0.12532594399654096, 0.1050584631264615, 0.08401828429827274, 0.11748315273137211, 0.16647699156794238, 0.13519334726932997, 0.09864423363100616, 0.12074728129492596, 0.1277854075516841, 0.1225939317442779, 0.13651628261089988, 0.12029978713923906, 0.10401540001217213, 0.11671663135166488, 0.9803150395578223, 0.9727909257139132, 0.9771026436814253, 0.9768312846242744, 0.9827061599887839, 0.9771451563625898, 0.9787085217881529, 0.9728879283018668, 0.9691511306461585, 0.36241806187555836, 0.3622023796542615, 0.5485716387445215, 0.3512366286695203, 0.3506032396368761, 0.5322358735030552, 0.3747974704617961, 0.32266216588662744, 0.47811614073589437, 0.7471755880514388, 0.6086561181753642, 0.6649129972880854, 0.7161508628126045, 0.27764779366828585, 0.7304807855721687, 0.23851042739120787, 0.27782065576299175, 0.2365557915921167, 0.18204968810708133, 0.1730969459877113, 0.2959064908664324, 0.17679741668916105, 0.23475237843715457, 0.2551308041411535, 0.17689126406411793, 0.16979339987998943, 0.2487022056235738, 0.18213585421498701, 0.1964503170870966, 0.2339474641897592, 0.2181986606621883, 0.25121788843971105, 0.284977527813824, 0.2116242408675444, 0.10784635523172836, 0.1809721730649504, 0.029568740175050845, 0.03857007775761867, 0.05983478942559106, 0.062281659570859516, 0.0392689013146692, 0.06417718197780431, 0.02136541976941697, 0.0737416422935816, 0.10932201286576182, 0.09008272134147732, 0.06811620874100244, 0.16467287561438293, 0.02615461780137085, 0.06371016960726461, 0.018385230762745453, 0.09570732455671094, 0.11124798805102942, 0.08540721962980202, 0.1070889872646289, 0.04156622607720051, 0.12279042498913606, 0.0142618556604861, 0.010999965124894318, 0.038185328844137834, 0.06374068090924301, 0.02994706355902077, 0.11989955310382006, 0.13294367080742797, 0.15543112616437815, 0.18877759019643325, 0.08806700136052947, 0.0650376963048549, 0.15145750740769248, 0.10046486169097901, 0.08615018323047274, 0.15983927285398802, 0.5033909289780786, 0.45786984639826955, 0.6085606921546824, 0.4884970722491131, 0.43356044989606746, 0.5817212554076505, 0.4988473141229396, 0.42745423927954096, 0.6062109130048781, 0.11603800944466092, 0.12127348526454551, 0.11560237568585685, 0.1464695297177726, 0.12577502353704717, 0.09416287248283717, 0.15273423100059003, 0.13638714041030564, 0.1507774839433016, 0.3251719239421742, 0.2504562127127533, 0.21007766106871273, 0.23001072187749227, 0.20946678358970217, 0.2968008793710699, 0.19931675028113316, 0.32034498755154905, 0.29628173617307507, 0.33461171296418857, 0.32579847908958504, 0.3719578868415202, 0.393171436402151, 0.30824729539776674, 0.445200907581746, 0.2438102015016842, 0.2948497082530872, 0.22134984500431376, 0.30448685577646617, 0.21175784568162104, 0.22058398635350684, 0.2752567948125779, 0.2174873871975792, 0.17252094562181086, 0.19260938799404725, 0.2556321181549942, 0.22293925652791236, 0.2159935834326111, 0.2133738222488295, 0.2099029764411332, 0.21858510667578201, 0.22293306475458274, 0.2032688104735978, 0.2155384328665546, 0.2167989926555406, 0.2104469132034511, 0.20196173338463053, 0.1976833751367273, 0.19226652150812729, 0.19681235730854674, 0.23436740506457643, 0.2062666956184689, 0.19277243057713633, 0.21004259980550488, 0.20083029640696437, 0.18811928484485896, 0.17372319805425418, 0.15347937241536092, 0.8413773440248339, 0.7062413174347859, 0.11501473841532295, 0.12306505667201795, 0.6398661574061608, 0.16325722983696866, 0.7190224167666373, 0.21260493084396836, 0.8408221403613365, 0.1686947160487745, 0.21142502450775513, 0.7844287631117373, 0.10497143591959068, 0.09472419961588552, 0.6322699655548789, 0.1810854418121811, 0.1807588798238472, 0.17565758318475289, 0.19478138317878324, 0.18967610074196972, 0.18465254653022234, 0.1828809797706097, 0.18835960114558925, 0.19663414656942113, 0.09579706795491127, 0.08906838319753474, 0.09653617328367181, 0.0826404633252763, 0.08306875547787551, 0.1028861167391808, 0.0946038090229715, 0.08777847163892072, 0.0925480756193543]}, "mutation_prompt": null}
{"id": "d1de56ec-94fa-472b-9e9e-72701045ab54", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget+1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # DE mutation\n            mutant = population + np.random.uniform(-1, 1, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n            \n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaHybridPSO_DE", "description": "Employing a dynamic inertia weight adjustment strategy to enhance the exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 51, "fitness": 0.27839583874817336, "feedback": "The algorithm DynamicInertiaHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "ed1e9159-a4b9-433e-b925-83a4e8b183f7", "metadata": {"aucs": [0.6804698812818217, 0.5730367793558967, 0.7943841689032457, 0.6769794627616916, 0.62618418722635, 0.7929477409946073, 0.6347890211218448, 0.5686109436798382, 0.7862964150588724, 0.189005983683032, 0.12483673254435967, 0.4406195282363804, 0.2322975419688822, 0.1195208472245819, 0.4670243336855088, 0.20049672832388254, 0.1320629603457859, 0.44252229573807667, 0.1552011519052916, 0.12435859093036339, 0.1171839752639835, 0.22090114293669183, 0.1304985108660074, 0.1209614832285093, 0.1271151049869511, 0.1446569987866, 0.5205551736267726, 0.14723582730991203, 0.09655508053677608, 0.10614185202943194, 0.1063284898403355, 0.11249507491066468, 0.12264049982853864, 0.11806579904473058, 0.1040272262004519, 0.10646192269879406, 0.9803151236741339, 0.9727966539594974, 0.9771022350078955, 0.97683041288378, 0.9827136549535584, 0.9771408094141422, 0.9787084036196081, 0.9728863366797061, 0.969150506695669, 0.4464161853955677, 0.35207650152659, 0.5742445389323725, 0.3865690958002862, 0.3488559872965188, 0.6031046397469733, 0.41292865779261934, 0.3344220350559526, 0.571993790013692, 0.7935165288990438, 0.32886188329227206, 0.2239771338476506, 0.3600259194646731, 0.2767624511062412, 0.28006470951796125, 0.23851042739120787, 0.3523866521283724, 0.2368188054372946, 0.20898655496539398, 0.2262227674544791, 0.29644035614866693, 0.17177998205110712, 0.21425929645947872, 0.33034384728618316, 0.19218763570971886, 0.18424597177459512, 0.2689031893903453, 0.2055843857373647, 0.17038086149494813, 0.3350030073823105, 0.1984655669118386, 0.2335199933498947, 0.27846687575668994, 0.22115036328355409, 0.10849522853118287, 0.1954779551424305, 0.01533718237228554, 0.07930336083182576, 0.06436630549386524, 0.06434940584044457, 0.021453307383657916, 0.020268374425947533, 0.013912983872158446, 0.06904869378422951, 0.12382352258403684, 0.06512353608481847, 0.06570786800800965, 0.11750949975022362, 0.08923214649035305, 0.052427896083602765, 0.030154033044269668, 0.10674861896148835, 0.15405285611889263, 0.09899671376884012, 0.10903107504467424, 0.07957621765382661, 0.14162408126941972, 0.013334356575658068, 0.08107624694313287, 0.042698104521071256, 0.09109890038338542, 0.018935717026874244, 0.1271574026638589, 0.15831750816733914, 0.1643272862534757, 0.11690286767257907, 0.10329340332068404, 0.03884666734518427, 0.0666334833815938, 0.09884192493467925, 0.09183956378640601, 0.17676559469478392, 0.4951128295680377, 0.4552841589974479, 0.5466162569413531, 0.46173245439480815, 0.45000960369453424, 0.5728337157376477, 0.4755140479474741, 0.4613417827135128, 0.5865598675734858, 0.08612741832612814, 0.11589254106707636, 0.11114002908522014, 0.12827212932365306, 0.13576904583277083, 0.09627423536145474, 0.13060205350032938, 0.134888924520281, 0.13763505698579848, 0.3460248249719037, 0.35951337905997316, 0.21106904543582228, 0.19309597950813018, 0.260169328494659, 0.24417996916815665, 0.18703941218506992, 0.346779095504943, 0.3780830786776782, 0.34787937981934325, 0.3209587843527585, 0.46864740851911824, 0.3566645668564806, 0.28254742915947095, 0.4221968344517504, 0.33182630742781727, 0.32871226235036055, 0.2255174468925497, 0.24817201779501696, 0.2119383788387481, 0.27342684171886145, 0.3042213954811718, 0.19703327493214673, 0.17113206494464706, 0.20464911031668553, 0.2644935784208746, 0.22374242813922518, 0.2144418712256888, 0.21808514333036844, 0.2330508382418438, 0.18541032746374453, 0.19342598536101352, 0.21311753800137645, 0.22988354227026575, 0.1967285808323631, 0.22532403599616668, 0.1872466163766766, 0.19216463675056195, 0.20587675337436873, 0.19802789977526802, 0.194689636069452, 0.18940428485640004, 0.18921803089002143, 0.38385280294314106, 0.1964054077806242, 0.18800006260928093, 0.17338311332355427, 0.15348538188175875, 0.8547485444672688, 0.7409309436648795, 0.11502200345017677, 0.12301651831926486, 0.7279357683889142, 0.1632550111329063, 0.6709660273118974, 0.2125991426236924, 0.8478767997166056, 0.1687293221799262, 0.2116978228310592, 0.7765242729071739, 0.10497052706028465, 0.09474109895676452, 0.09473405691514636, 0.17211552392695262, 0.18504093888909634, 0.181398918373468, 0.18697777455947318, 0.19088562547455934, 0.20519666233221823, 0.1767736798220434, 0.1747471977995807, 0.18880950617598768, 0.0837590714025992, 0.08638113276034198, 0.08985608708178694, 0.08356327811260544, 0.0915050218832636, 0.11976627149586094, 0.08472493900995237, 0.09577853817939996, 0.09125079608547726]}, "mutation_prompt": null}
{"id": "30b9bc76-b22a-4fa3-8b14-ec6d90069e04", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget+1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # DE mutation\n            mutant = population + np.random.uniform(-1, 1, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n            \n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaHybridPSO_DE", "description": "Employing a dynamic inertia weight adjustment strategy to enhance the exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1de56ec-94fa-472b-9e9e-72701045ab54", "metadata": {"aucs": [0.6804698812818217, 0.5730367793558967, 0.7943841689032457, 0.6769794627616916, 0.62618418722635, 0.7929477409946073, 0.6347890211218448, 0.5686109436798382, 0.7862964150588724, 0.189005983683032, 0.12483673254435967, 0.4406195282363804, 0.2322975419688822, 0.1195208472245819, 0.4670243336855088, 0.20049672832388254, 0.1320629603457859, 0.44252229573807667, 0.1552011519052916, 0.12435859093036339, 0.1171839752639835, 0.22090114293669183, 0.1304985108660074, 0.1209614832285093, 0.1271151049869511, 0.1446569987866, 0.5205551736267726, 0.14723582730991203, 0.09655508053677608, 0.10614185202943194, 0.1063284898403355, 0.11249507491066468, 0.12264049982853864, 0.11806579904473058, 0.1040272262004519, 0.10646192269879406, 0.9803151236741339, 0.9727966539594974, 0.9771022350078955, 0.97683041288378, 0.9827136549535584, 0.9771408094141422, 0.9787084036196081, 0.9728863366797061, 0.969150506695669, 0.4464161853955677, 0.35207650152659, 0.5742445389323725, 0.3865690958002862, 0.3488559872965188, 0.6031046397469733, 0.41292865779261934, 0.3344220350559526, 0.571993790013692, 0.7935165288990438, 0.32886188329227206, 0.2239771338476506, 0.3600259194646731, 0.2767624511062412, 0.28006470951796125, 0.23851042739120787, 0.3523866521283724, 0.2368188054372946, 0.20898655496539398, 0.2262227674544791, 0.29644035614866693, 0.17177998205110712, 0.21425929645947872, 0.33034384728618316, 0.19218763570971886, 0.18424597177459512, 0.2689031893903453, 0.2055843857373647, 0.17038086149494813, 0.3350030073823105, 0.1984655669118386, 0.2335199933498947, 0.27846687575668994, 0.22115036328355409, 0.10849522853118287, 0.1954779551424305, 0.01533718237228554, 0.07930336083182576, 0.06436630549386524, 0.06434940584044457, 0.021453307383657916, 0.020268374425947533, 0.013912983872158446, 0.06904869378422951, 0.12382352258403684, 0.06512353608481847, 0.06570786800800965, 0.11750949975022362, 0.08923214649035305, 0.052427896083602765, 0.030154033044269668, 0.10674861896148835, 0.15405285611889263, 0.09899671376884012, 0.10903107504467424, 0.07957621765382661, 0.14162408126941972, 0.013334356575658068, 0.08107624694313287, 0.042698104521071256, 0.09109890038338542, 0.018935717026874244, 0.1271574026638589, 0.15831750816733914, 0.1643272862534757, 0.11690286767257907, 0.10329340332068404, 0.03884666734518427, 0.0666334833815938, 0.09884192493467925, 0.09183956378640601, 0.17676559469478392, 0.4951128295680377, 0.4552841589974479, 0.5466162569413531, 0.46173245439480815, 0.45000960369453424, 0.5728337157376477, 0.4755140479474741, 0.4613417827135128, 0.5865598675734858, 0.08612741832612814, 0.11589254106707636, 0.11114002908522014, 0.12827212932365306, 0.13576904583277083, 0.09627423536145474, 0.13060205350032938, 0.134888924520281, 0.13763505698579848, 0.3460248249719037, 0.35951337905997316, 0.21106904543582228, 0.19309597950813018, 0.260169328494659, 0.24417996916815665, 0.18703941218506992, 0.346779095504943, 0.3780830786776782, 0.34787937981934325, 0.3209587843527585, 0.46864740851911824, 0.3566645668564806, 0.28254742915947095, 0.4221968344517504, 0.33182630742781727, 0.32871226235036055, 0.2255174468925497, 0.24817201779501696, 0.2119383788387481, 0.27342684171886145, 0.3042213954811718, 0.19703327493214673, 0.17113206494464706, 0.20464911031668553, 0.2644935784208746, 0.22374242813922518, 0.2144418712256888, 0.21808514333036844, 0.2330508382418438, 0.18541032746374453, 0.19342598536101352, 0.21311753800137645, 0.22988354227026575, 0.1967285808323631, 0.22532403599616668, 0.1872466163766766, 0.19216463675056195, 0.20587675337436873, 0.19802789977526802, 0.194689636069452, 0.18940428485640004, 0.18921803089002143, 0.38385280294314106, 0.1964054077806242, 0.18800006260928093, 0.17338311332355427, 0.15348538188175875, 0.8547485444672688, 0.7409309436648795, 0.11502200345017677, 0.12301651831926486, 0.7279357683889142, 0.1632550111329063, 0.6709660273118974, 0.2125991426236924, 0.8478767997166056, 0.1687293221799262, 0.2116978228310592, 0.7765242729071739, 0.10497052706028465, 0.09474109895676452, 0.09473405691514636, 0.17211552392695262, 0.18504093888909634, 0.181398918373468, 0.18697777455947318, 0.19088562547455934, 0.20519666233221823, 0.1767736798220434, 0.1747471977995807, 0.18880950617598768, 0.0837590714025992, 0.08638113276034198, 0.08985608708178694, 0.08356327811260544, 0.0915050218832636, 0.11976627149586094, 0.08472493900995237, 0.09577853817939996, 0.09125079608547726]}, "mutation_prompt": null}
{"id": "dc6c0c40-7489-45a2-b25d-50e828b525c9", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSO_DE_AdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.mutation_scale = 0.5\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget+1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # Adaptive DE mutation\n            diversity = np.std(population, axis=0)\n            mutation_scale = self.mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * diversity\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n            \n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaHybridPSO_DE_AdaptiveMutation", "description": "Incorporating a dynamic adaptive mutation scheme using a self-adaptive parameter to adjust the mutation scale based on the population diversity, aiming to enhance exploration during optimization.", "configspace": "", "generation": 53, "fitness": 0.28395301008988594, "feedback": "The algorithm DynamicInertiaHybridPSO_DE_AdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "d1de56ec-94fa-472b-9e9e-72701045ab54", "metadata": {"aucs": [0.6417120143205278, 0.694587379891894, 0.7750817852548224, 0.6188870715744788, 0.683197311574377, 0.8049164525312535, 0.6127903624857227, 0.7174841149945637, 0.7866316289187772, 0.03003072032115983, 0.17915089477227597, 0.304556368660275, 0.05314116562323756, 0.21287718521463572, 0.3843181869768737, 0.02137038568819971, 0.1930813370829919, 0.25924814452621436, 0.11790961683182122, 0.13313874080072907, 0.109793321129385, 0.1438632119676373, 0.1230890352960361, 0.08831609252960859, 0.12853254936613667, 0.13430276512782824, 0.13205945919896045, 0.10195100543355295, 0.07951763026192171, 0.08696251459857063, 0.10994203374934208, 0.12589396746810033, 0.10505571245442247, 0.09091396894448867, 0.12457159636860726, 0.09092499987878833, 0.9803197429374326, 0.9764899851773404, 0.9815901447870662, 0.9706252925303147, 0.9784770035345473, 0.9780539781050716, 0.9806868269964326, 0.9748750809143669, 0.9668141135381338, 0.4195984248185646, 0.4725412146217476, 0.5527452875761807, 0.38139437175842705, 0.4293339356944337, 0.512568164315323, 0.3915033024351676, 0.43011131378428913, 0.46603469658850916, 0.6824637733387113, 0.21945788069725647, 0.2250147886159649, 0.2735472873806609, 0.28142243753194196, 0.8153594395748228, 0.23509240479199411, 0.3440604558950018, 0.8000090313107996, 0.12997937341176602, 0.2873538825551879, 0.24278463298207764, 0.22666474491588595, 0.29322120991859424, 0.23675403205895906, 0.17344993591237123, 0.2503324635790811, 0.24698466584329815, 0.18533919805076737, 0.2041485493184847, 0.295103197805456, 0.1334826425342155, 0.22876952280060114, 0.25182559730856524, 0.18201137128731026, 0.2240549598422239, 0.24629703992585172, 0.0657811631948183, 0.02392907033222147, 0.030460306974643525, 0.046296963269616964, 0.025720786216977154, 0.005079650011021508, 0.01924890883603292, 0.13198026437247723, 0.19429516964943538, 0.09382163900939433, 0.0948666526541907, 0.08844268884691009, 0.11424352023042916, 0.13218343914289277, 0.03847068936192222, 0.12659997704598847, 0.1052716901274372, 0.20133060381541623, 0.04434870202081187, 0.1237089372354565, 0.18528219860833017, 0.013946438467363986, 0.13169093820802868, 0.11280306162989251, 0.049719914533020715, 0.06626426257547191, 0.04904611957044469, 0.15991701969428485, 0.11790962152943607, 0.17617387691537256, 0.1511125783066869, 0.10651707552027057, 0.24402908436167103, 0.1135199406541848, 0.13253419483700035, 0.15244387337428034, 0.4851285422018694, 0.49541245682855584, 0.5575785321341742, 0.46306699233286697, 0.5065293114291822, 0.6078814700008386, 0.5051460565186794, 0.5411314958877897, 0.5848345777808563, 0.08313763936606278, 0.1238413153020812, 0.10820697691370751, 0.11636899246842802, 0.1023989073474546, 0.16009505040167293, 0.1328745480039264, 0.10010892287392892, 0.09689972575396444, 0.39144694101086475, 0.24559638737065947, 0.3257420539325492, 0.36761223193007386, 0.3433701180529768, 0.5090127142676739, 0.36954686037895945, 0.18725445683756947, 0.4509300672437151, 0.28316944454666393, 0.25619623481822296, 0.42769794760149016, 0.1945041945627607, 0.36777450913412, 0.2817104836186066, 0.3486051020340909, 0.3379252675423189, 0.2185357884861493, 0.3120246999373031, 0.26308596529454875, 0.22554405910019393, 0.24733920602553117, 0.22220836489129692, 0.25568756966638573, 0.22401612869369925, 0.2910592415060018, 0.20549115294125408, 0.24437330880209074, 0.19586869300156118, 0.23898701053759985, 0.20713842121923187, 0.2253517119045455, 0.22309028607891823, 0.24645985421645333, 0.2334902460436471, 0.21216457652779874, 0.18472255567074003, 0.21031329907077123, 0.22404355362622985, 0.199742421569432, 0.20979528756870092, 0.20184219995749986, 0.18291595553366435, 0.18007532992269193, 0.19887123165587595, 0.8454917533039914, 0.12268935322278796, 0.1890100210128286, 0.17370320726755129, 0.2014402601822214, 0.9143875007613993, 0.12288883315190957, 0.9022823983743181, 0.16312139187061148, 0.6450444992805533, 0.2133574935730458, 0.12726575616500335, 0.7548438977129704, 0.1696530682859284, 0.15706178376040025, 0.10505194518786998, 0.09466481483277822, 0.7476323858344116, 0.18447362250021493, 0.18141495168380817, 0.1986734285445786, 0.18416669558372856, 0.18327172002496095, 0.21849302815763016, 0.18325295687628418, 0.18043197603490857, 0.18804009076118267, 0.07455273109730265, 0.12544176535740115, 0.0836988926696054, 0.09075459322980473, 0.09229877327971225, 0.11217959886405482, 0.07110643422819596, 0.07092047058541462, 0.09057428602357198]}, "mutation_prompt": null}
{"id": "9a214881-2fff-49c0-91fa-a9a750d7ba8d", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSO_DE_AdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.mutation_scale = 0.5\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget+1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # Dynamic Mutation based on population's best\n            if t % (self.budget // 10) == 0:\n                best_indices = np.argsort(pbest_fitness)[:self.pop_size // 2]\n                best_population = pbest[best_indices]\n                mutation_scale = np.mean(np.std(best_population, axis=0))\n                mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n                \n                fitness = np.array([func(ind) for ind in mutant])\n                update_indices = fitness < pbest_fitness\n                pbest[update_indices] = mutant[update_indices]\n                pbest_fitness[update_indices] = fitness[update_indices]\n                \n                gbest_idx = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicMutationHybridPSO_DE_AdaptiveMutation", "description": "Implement a dynamic mutation strategy based on the population's best individuals to dynamically adjust the mutation scale during optimization.", "configspace": "", "generation": 54, "fitness": 0.08001144709731689, "feedback": "The algorithm DynamicMutationHybridPSO_DE_AdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "dc6c0c40-7489-45a2-b25d-50e828b525c9", "metadata": {"aucs": [0.22226410985207257, 0.14173992727060591, 0.3255976367414848, 0.11207506392215905, 0.1180238283242514, 0.2602170399003271, 0.16115449466131027, 0.11191090407996584, 0.10087978348067772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0607527148480127, 0.06187106439397083, 0.04775414379046583, 0.05657666307893161, 0.03696949904197988, 0.06163416964634272, 0.0689491772877815, 0.017953755444314434, 0.06597388689842831, 0.02352411892709183, 0.016521707367451177, 0.04122348793614128, 0.04433023048341744, 0.03643868513355175, 0.020549685882523594, 0.022104831497320676, 0.06627764200567321, 0.034387249507905615, 0.1159503030081993, 0.10013116685458445, 0.07231502521489341, 0.09948025795257287, 0.062186300401425476, 0.08244569707848581, 0.10520614970404962, 0.10144893346914363, 0.06615969976677205, 0.06262112667857567, 0.0, 0.0315852582871603, 0.05745065383284542, 0.025293661872383355, 0.053591211376344816, 0.08321404300443702, 0.020085629593999177, 0.0, 0.13036575904436198, 0.11141843388118378, 0.06837137599303367, 0.10605493573355163, 0.031827763743090154, 0.118276328686029, 0.09455975093795366, 0.11033585167381788, 0.09637849912385898, 0.05581038795042659, 0.0, 0.027968001833635237, 0.06447902538785966, 0.0, 0.0, 0.0, 0.0, 0.04546474329397765, 0.04366397143058398, 0.0, 0.010832273773455525, 0.026424074249528196, 0.0, 0.006297574194438993, 0.013073019325758106, 0.0, 0.05743973791056434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028211629340576305, 0.060048419239412176, 0.0590280231065019, 0.007918810608402937, 0.003492737841033322, 0.0825087944333116, 0.04747990522354162, 0.030451792312202075, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01646094128967146, 0.0, 0.015003817482462045, 0.0, 0.0, 0.0, 0.03125014626963163, 0.0, 0.0011693907677363669, 0.20923816385146887, 0.14947403819700789, 0.20057788470392335, 0.14791170473579585, 0.12003342982571741, 0.1708772707465298, 0.18393409531659644, 0.16783325130873472, 0.22679772680974297, 0.06432052803323951, 0.011147811629007243, 0.0, 0.0694318817937214, 0.03293903153875144, 0.06503610460367659, 0.09803617408477672, 0.01237709391271713, 0.0682029081601031, 0.07500157196347879, 0.14812036155987207, 0.1068969407150584, 0.09846289938816166, 0.17367383492153166, 0.10405536568140838, 0.15064351259877218, 0.15058756772216275, 0.09300716496970285, 0.1635420159628329, 0.1377473533420318, 0.1294962561604256, 0.1618203995003974, 0.16882257985081994, 0.16750519936797792, 0.14756063153702526, 0.18890575885141292, 0.14549318896375152, 0.12826957810210637, 0.0974992954018975, 0.11058496470632384, 0.11862216259301495, 0.11837492179527054, 0.12795785802362825, 0.11096321217188465, 0.10728446918271961, 0.08233431249992684, 0.16743106803850938, 0.2534467113894595, 0.1573499419492913, 0.14602157953565587, 0.12085629990260827, 0.13057966016636546, 0.18232713645457221, 0.14335282785032633, 0.16579718022893286, 0.1487648916642902, 0.0, 0.17903777947216148, 0.16517342232384125, 0.0, 0.16680234986531017, 0.1726154333461153, 0.15233714009806576, 0.0, 0.18073253368702136, 0.1609097395014143, 0.10030607873607789, 0.170624723277645, 0.1361603437378115, 0.18130739229671577, 0.10389576269816958, 0.1019623092869173, 0.10825277465058647, 0.12586047237470555, 0.07227254497984525, 0.09802351087141048, 0.16985241934686035, 0.06307467168937331, 0.10016274084030652, 0.08352517398774306, 0.23030321530948472, 0.12781884718430958, 0.14611120991288007, 0.14606191096969778, 0.1475449842687161, 0.13874408830589058, 0.13904666539366772, 0.16105850184934867, 0.16216818573725555, 0.16305245491673137, 0.17266644877341275, 0.05294953815925507, 0.056053724482048484, 0.06513534697171508, 0.08790467963031423, 0.0710010105663279, 0.06637194562435322, 0.05740920348659162, 0.03355970878875181, 0.05840527607485624]}, "mutation_prompt": null}
{"id": "fc2c216b-2a28-4cee-ae85-7b2172cdb42b", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaHybridPSO_DE_AdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.mutation_scale = 0.5\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget+1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # Enhanced initialization\n            if np.random.rand() < 0.2:  # 20% chance for chaotic initialization\n                population = np.array([chaotic_init(-5.0, 5.0, self.dim) for _ in range(self.pop_size)])\n                pbest = population.copy()\n                pbest_fitness = np.array([func(ind) for ind in population])\n                gbest_idx = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_idx]\n            \n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # Adaptive DE mutation\n            diversity = np.std(population, axis=0)\n            mutation_scale = self.mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * diversity\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n            \n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest\n\ndef chaotic_init(lower, upper, dim):\n    chaotic_population = []\n    for _ in range(dim):\n        x = np.random.uniform(lower, upper)\n        for _ in range(100):  # Chaotic iterations\n            x = 3.9 * x * (1 - x)\n        chaotic_population.append(x)\n    return chaotic_population", "name": "EnhancedDynamicInertiaHybridPSO_DE_AdaptiveMutation", "description": "Introducing a chaotic initialization scheme to enhance population diversity and exploration capabilities, leading to faster convergence.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "dc6c0c40-7489-45a2-b25d-50e828b525c9", "metadata": {}, "mutation_prompt": null}
{"id": "2fcd9a1b-8395-4feb-a2b3-6bfbc048c0c7", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSO_DE_AdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.mutation_scale = 0.5\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget+1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # Adaptive DE mutation\n            diversity = np.std(population, axis=0)\n            mutation_scale = self.mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * diversity\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n            \n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaHybridPSO_DE_AdaptiveMutation", "description": "Incorporating a dynamic adaptive mutation scheme using a self-adaptive parameter to adjust the mutation scale based on the population diversity, aiming to enhance exploration during optimization.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc6c0c40-7489-45a2-b25d-50e828b525c9", "metadata": {"aucs": [0.6417120143205278, 0.694587379891894, 0.7750817852548224, 0.6188870715744788, 0.683197311574377, 0.8049164525312535, 0.6127903624857227, 0.7174841149945637, 0.7866316289187772, 0.03003072032115983, 0.17915089477227597, 0.304556368660275, 0.05314116562323756, 0.21287718521463572, 0.3843181869768737, 0.02137038568819971, 0.1930813370829919, 0.25924814452621436, 0.11790961683182122, 0.13313874080072907, 0.109793321129385, 0.1438632119676373, 0.1230890352960361, 0.08831609252960859, 0.12853254936613667, 0.13430276512782824, 0.13205945919896045, 0.10195100543355295, 0.07951763026192171, 0.08696251459857063, 0.10994203374934208, 0.12589396746810033, 0.10505571245442247, 0.09091396894448867, 0.12457159636860726, 0.09092499987878833, 0.9803197429374326, 0.9764899851773404, 0.9815901447870662, 0.9706252925303147, 0.9784770035345473, 0.9780539781050716, 0.9806868269964326, 0.9748750809143669, 0.9668141135381338, 0.4195984248185646, 0.4725412146217476, 0.5527452875761807, 0.38139437175842705, 0.4293339356944337, 0.512568164315323, 0.3915033024351676, 0.43011131378428913, 0.46603469658850916, 0.6824637733387113, 0.21945788069725647, 0.2250147886159649, 0.2735472873806609, 0.28142243753194196, 0.8153594395748228, 0.23509240479199411, 0.3440604558950018, 0.8000090313107996, 0.12997937341176602, 0.2873538825551879, 0.24278463298207764, 0.22666474491588595, 0.29322120991859424, 0.23675403205895906, 0.17344993591237123, 0.2503324635790811, 0.24698466584329815, 0.18533919805076737, 0.2041485493184847, 0.295103197805456, 0.1334826425342155, 0.22876952280060114, 0.25182559730856524, 0.18201137128731026, 0.2240549598422239, 0.24629703992585172, 0.0657811631948183, 0.02392907033222147, 0.030460306974643525, 0.046296963269616964, 0.025720786216977154, 0.005079650011021508, 0.01924890883603292, 0.13198026437247723, 0.19429516964943538, 0.09382163900939433, 0.0948666526541907, 0.08844268884691009, 0.11424352023042916, 0.13218343914289277, 0.03847068936192222, 0.12659997704598847, 0.1052716901274372, 0.20133060381541623, 0.04434870202081187, 0.1237089372354565, 0.18528219860833017, 0.013946438467363986, 0.13169093820802868, 0.11280306162989251, 0.049719914533020715, 0.06626426257547191, 0.04904611957044469, 0.15991701969428485, 0.11790962152943607, 0.17617387691537256, 0.1511125783066869, 0.10651707552027057, 0.24402908436167103, 0.1135199406541848, 0.13253419483700035, 0.15244387337428034, 0.4851285422018694, 0.49541245682855584, 0.5575785321341742, 0.46306699233286697, 0.5065293114291822, 0.6078814700008386, 0.5051460565186794, 0.5411314958877897, 0.5848345777808563, 0.08313763936606278, 0.1238413153020812, 0.10820697691370751, 0.11636899246842802, 0.1023989073474546, 0.16009505040167293, 0.1328745480039264, 0.10010892287392892, 0.09689972575396444, 0.39144694101086475, 0.24559638737065947, 0.3257420539325492, 0.36761223193007386, 0.3433701180529768, 0.5090127142676739, 0.36954686037895945, 0.18725445683756947, 0.4509300672437151, 0.28316944454666393, 0.25619623481822296, 0.42769794760149016, 0.1945041945627607, 0.36777450913412, 0.2817104836186066, 0.3486051020340909, 0.3379252675423189, 0.2185357884861493, 0.3120246999373031, 0.26308596529454875, 0.22554405910019393, 0.24733920602553117, 0.22220836489129692, 0.25568756966638573, 0.22401612869369925, 0.2910592415060018, 0.20549115294125408, 0.24437330880209074, 0.19586869300156118, 0.23898701053759985, 0.20713842121923187, 0.2253517119045455, 0.22309028607891823, 0.24645985421645333, 0.2334902460436471, 0.21216457652779874, 0.18472255567074003, 0.21031329907077123, 0.22404355362622985, 0.199742421569432, 0.20979528756870092, 0.20184219995749986, 0.18291595553366435, 0.18007532992269193, 0.19887123165587595, 0.8454917533039914, 0.12268935322278796, 0.1890100210128286, 0.17370320726755129, 0.2014402601822214, 0.9143875007613993, 0.12288883315190957, 0.9022823983743181, 0.16312139187061148, 0.6450444992805533, 0.2133574935730458, 0.12726575616500335, 0.7548438977129704, 0.1696530682859284, 0.15706178376040025, 0.10505194518786998, 0.09466481483277822, 0.7476323858344116, 0.18447362250021493, 0.18141495168380817, 0.1986734285445786, 0.18416669558372856, 0.18327172002496095, 0.21849302815763016, 0.18325295687628418, 0.18043197603490857, 0.18804009076118267, 0.07455273109730265, 0.12544176535740115, 0.0836988926696054, 0.09075459322980473, 0.09229877327971225, 0.11217959886405482, 0.07110643422819596, 0.07092047058541462, 0.09057428602357198]}, "mutation_prompt": null}
{"id": "aeff23d3-ad3e-4487-9d69-6e2c65c6ee8c", "solution": "import numpy as np\n\nclass HybridPSO_DE_MutationSpeedup:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.mutation_scale = 0.5\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget+1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # Hybrid PSO-DE update with dynamic mutation\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # Dynamic mutation based on best individual's performance\n            best_ind = pbest[np.argmin(pbest_fitness)]\n            diversity = np.std(population, axis=0)\n            mutation_scale = self.mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * diversity * np.abs(best_ind - population)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim))\n            \n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "HybridPSO_DE_MutationSpeedup", "description": "Introducing a novel hybridization of Particle Swarm Optimization (PSO) with Differential Evolution (DE) by utilizing a dynamic mutation strategy based on the best individual's performance to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 57, "fitness": 0.20394454505168533, "feedback": "The algorithm HybridPSO_DE_MutationSpeedup got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "dc6c0c40-7489-45a2-b25d-50e828b525c9", "metadata": {"aucs": [0.35018817031521865, 0.3587485659661668, 0.36434367151603453, 0.3734357896491769, 0.35564454713691407, 0.36246950479950335, 0.35918650728888957, 0.35334552231186167, 0.36402360638401965, 9.999999999998899e-05, 0.002624424301621686, 9.999999999998899e-05, 9.999999999998899e-05, 0.013160078579850909, 9.999999999998899e-05, 9.999999999998899e-05, 0.013066171921256475, 9.999999999998899e-05, 0.08511933802304461, 0.11333702493797249, 0.09114328921629167, 0.09147401568704083, 0.10076939756442715, 0.10510471191503479, 0.10071018573416934, 0.11097837941319544, 0.08727222622667286, 0.08542111782383766, 0.09162444714991358, 0.09623591572793722, 0.08688396134578691, 0.08897368223093582, 0.07424811909093154, 0.09260579715071349, 0.0874147744996231, 0.0648145957724573, 0.9814096484291924, 0.9712621166171007, 0.9795830539240103, 0.9744860720788864, 0.9820560410443835, 0.9717038561713581, 0.9800809304867004, 0.9678769182684311, 0.9772942938711152, 0.25693276373333396, 0.2805067089438067, 0.24412087261785187, 0.25176615537709945, 0.24072327602208643, 0.2387728867749066, 0.24397191570778454, 0.23695061721261212, 0.23065229679472032, 0.31508427406574335, 0.28704816060131566, 0.27749728911241134, 0.30513547340782055, 0.2888958741378457, 0.32064272787535153, 0.2671554828489979, 0.3320575405067774, 0.27770398696996645, 0.12716398754740055, 0.14996615760820864, 0.12498878900621146, 0.10828266387915386, 0.14609102616848157, 0.14222305036819594, 0.14367750307511507, 0.12940335277417547, 0.14018238887996648, 0.14292231203307093, 0.12437861761653224, 0.10375137125638179, 0.13986120745450148, 0.14542504108369614, 0.14534719672362084, 0.1253802894633793, 0.15335514386675042, 0.1473069988369683, 0.03522400969515205, 0.005701202909371039, 9.999999999998899e-05, 0.004205044586969797, 0.0005199655676717541, 9.999999999998899e-05, 0.0023757447256627096, 9.999999999998899e-05, 0.01598265298491186, 0.10278687151134924, 0.05517745855689171, 0.14985620121895682, 0.16962211935625005, 0.022798850348022426, 0.03567471841291803, 0.13097818387150406, 0.10848290176246733, 0.08930943218303544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004885400905533799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0626762244540563, 0.07809870256307472, 0.06423344772166506, 0.08804684857682754, 0.0810307690897113, 0.1154117820466849, 0.08960135414978154, 0.07843388097162385, 0.07390948090792482, 0.3298582636923023, 0.36797923818480727, 0.34207151736691854, 0.3558272346855901, 0.37905994491377837, 0.3626749036893182, 0.36295167761035163, 0.3541569723212282, 0.33797753677502396, 0.1102041731028367, 0.0971521438494305, 0.09431702501494077, 0.10112556059744371, 0.12177743307811073, 0.0870905900219563, 0.11748049201965971, 0.11259481229337509, 0.10332210402593867, 0.2329527994847116, 0.20708329045313545, 0.18163211542387314, 0.19683562862810666, 0.21957728668215293, 0.1938594134047794, 0.18947353463853278, 0.2029460793161042, 0.19256994392131432, 0.2661761180914616, 0.25791152420683516, 0.23365736641942936, 0.24530359185535966, 0.22451851785730226, 0.27167893188988423, 0.25492131125421413, 0.2575227026725444, 0.1950318240545983, 0.206752089041916, 0.2059449236070101, 0.14734643944922154, 0.1985835476740262, 0.18700147267846956, 0.18801611575608546, 0.17292700031532893, 0.2161776383820102, 0.1884971298120549, 0.24755802482334188, 0.209814980776172, 0.21216168086820963, 0.22008097550909267, 0.21645893329255705, 0.23310695775250045, 0.22495901086147674, 0.2103598700343441, 0.2036121392037612, 0.17973804839190177, 0.18627773073957687, 0.20662608536744653, 0.1814899273936076, 0.20414515237615694, 0.17964579003030012, 0.18767581968980251, 0.1803375087866751, 0.18378576379788492, 0.5229707849863363, 0.1260786374450683, 0.15273046566965498, 0.17269282105600536, 0.19859207842486726, 0.5092439250527733, 0.12242603361876936, 0.4628777097727108, 0.16823343015516035, 0.48965130156059167, 0.20748853941940637, 0.05150783575949791, 0.4665553855854727, 0.16916142013432856, 0.5010324788806071, 0.10497961548666668, 0.4525609839642025, 0.4447483050126493, 0.2008790632173345, 0.17326488266227824, 0.17860496217507682, 0.19149047789243567, 0.19311522730418618, 0.17625435550713542, 0.1814640460817264, 0.17533857071693582, 0.17926167344878163, 0.09117798569051105, 0.09744980335542841, 0.07944412199822293, 0.09403573231531592, 0.09250638354316776, 0.08860014166772745, 0.07815666516578734, 0.11944135725004668, 0.08548104927694589]}, "mutation_prompt": null}
{"id": "6b456deb-af03-4492-9e2e-59fc16930775", "solution": "class DynamicInertiaHybridPSO_DE_AdaptiveMutation_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.mutation_scale = 0.5\n        self.crossover_prob_min = 0.5\n        self.crossover_prob_max = 0.9\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        for t in range(1, self.budget+1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n            \n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n            \n            # Adaptive DE mutation\n            diversity = np.std(population, axis=0)\n            mutation_scale = self.mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * diversity\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n            \n            # Dynamic crossover probability\n            crossover_prob = self.crossover_prob_min + (self.crossover_prob_max - self.crossover_prob_min) * (1 - t / self.budget)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                selected = np.random.choice(idxs, 2, replace=False)\n                crossover_mask = np.random.rand(self.dim) < crossover_prob\n                mutant[i] = np.where(crossover_mask, mutant[selected[0]], mutant[selected[1]])\n            \n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n            \n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "DynamicInertiaHybridPSO_DE_AdaptiveMutation_Enhanced", "description": "Introducing a dynamic crossover probability in Differential Evolution to promote exploration and exploitation by adjusting the probability based on the population diversity.", "configspace": "", "generation": 58, "fitness": 0.2562190112549719, "feedback": "The algorithm DynamicInertiaHybridPSO_DE_AdaptiveMutation_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "dc6c0c40-7489-45a2-b25d-50e828b525c9", "metadata": {"aucs": [0.5547156007483014, 0.5699515208241441, 0.70943437049105, 0.5957927868640047, 0.5628931167591733, 0.734926265719289, 0.6081864120366561, 0.5793010963755283, 0.7483851214672499, 0.07179011407287528, 0.16027292883274236, 0.2867270163028961, 0.11280883209568981, 0.1785636190439327, 0.1779282552467475, 0.0656401346735036, 0.1453725962367678, 0.22386025220228778, 0.13298334601869444, 0.11632285389171737, 0.06957756318278463, 0.11006927590580329, 0.09844291129578375, 0.08757337991750536, 0.08273980741100351, 0.122828057751865, 0.14969346130969008, 0.10660790754593186, 0.0921335268696919, 0.09384309535454427, 0.14669361372442002, 0.0860343226984931, 0.06729032751952213, 0.08387305637287867, 0.06240496711888466, 0.1303104902972153, 0.9629517762519628, 0.9698552354257455, 0.9687917548007915, 0.9447229953999512, 0.970548448036994, 0.9658060829066655, 0.9510942888496519, 0.9743081187438037, 0.9641275028687716, 0.3345717159516508, 0.36988009125592824, 0.4554683471514852, 0.3719283713738111, 0.4064871702280848, 0.43620731519768974, 0.3144781448940873, 0.39295040245776125, 0.438883019467716, 0.5675661832518578, 0.21582756164010353, 0.2225681332232864, 0.2150806385090165, 0.37458861940322763, 0.37824470318933257, 0.33578064468102287, 0.37665341777140793, 0.731076378640387, 0.1515398544328942, 0.18852461276741317, 0.22334507874798626, 0.18445827761745803, 0.2170706625028791, 0.24389904207038093, 0.24730103108628287, 0.19643577603204043, 0.22731013404451528, 0.16846729678156735, 0.1299837522511521, 0.23002799462273082, 0.16195992011885696, 0.24487287778491118, 0.22507424176325874, 0.2477605600370545, 0.21177586097827727, 0.25083265601674776, 0.07731061148755203, 0.03063386714860228, 0.04796461809022601, 0.03255767083760153, 0.03057795907837013, 0.02998718739784889, 0.005258644720872119, 0.0034227903374232094, 0.0928928277550145, 0.1574190823840549, 0.05849977354249769, 0.1184472950839296, 0.08007512641789183, 0.054167616032581134, 0.059121601425183634, 0.10482340966674597, 0.08714997890484988, 0.054480313378695744, 0.021614355211839964, 0.025002065262698325, 0.04679452832874198, 0.07345284733529078, 0.04211794545116032, 0.07751766596464571, 0.047984689446907924, 0.08441523631533199, 0.060284323192396516, 0.079222695626043, 0.15824814901060658, 0.17486856169316745, 0.07655875131102408, 0.1637479614530104, 0.08640395533973189, 0.12549864453790027, 0.19507713567279716, 0.15105711608661, 0.4573515358107547, 0.5088766144333173, 0.5248788848382553, 0.4756885358306877, 0.4729113071341414, 0.5676867490954036, 0.4667069241115882, 0.47554907849597783, 0.5436306726801807, 0.08870379708113707, 0.11992349703378424, 0.09349659096800911, 0.17259277804590223, 0.08635911081939662, 0.11102104248655598, 0.08392055329096548, 0.16750332951431157, 0.07860254260516852, 0.19842070375150522, 0.2722508707632938, 0.3151832539347331, 0.1915563501635008, 0.2279442390357832, 0.46846653161243745, 0.35726960074167413, 0.3413100003912938, 0.2678381356622662, 0.32087950917230745, 0.3592223514334638, 0.18607147414865854, 0.3301000666529885, 0.2370493778383127, 0.42593046518708577, 0.2369463578248432, 0.27372322781271097, 0.2610148260540732, 0.27263242563855505, 0.261026112647996, 0.22446944544439806, 0.21971329988531207, 0.22298116641581467, 0.2941312911235008, 0.21552571339215676, 0.27932977374845414, 0.18177678853050883, 0.21560817445871472, 0.22054364792514192, 0.1890441074161766, 0.22709674465620433, 0.20839401418424364, 0.20385449868638328, 0.25140754420657496, 0.2135700208194996, 0.21654549160772318, 0.18409028095423985, 0.21603824557403406, 0.20451995754590213, 0.2440972712314443, 0.2120224053911648, 0.20885087085032505, 0.20038296072316208, 0.196577061386499, 0.18313881251257547, 0.18638048005160568, 0.12704357701669255, 0.15365012203574768, 0.7555300051717364, 0.20084744874261773, 0.2008505192808835, 0.12257820492409788, 0.7716660948651858, 0.1684750554272767, 0.5419458660377272, 0.21238880214983447, 0.15609853881137625, 0.10463047530845015, 0.16905618891094132, 0.21206151244101945, 0.10498343694883938, 0.1675458465843429, 0.7275062970542276, 0.16903086442433524, 0.19108536291651357, 0.18500906429165942, 0.1834976679702276, 0.18847629560696633, 0.18351835758123203, 0.16852843946288754, 0.20305226547033706, 0.16777668522044276, 0.08322812264291657, 0.10004889842400677, 0.09219484642113696, 0.08205870274606353, 0.07493680175636508, 0.08507694644148034, 0.07893220283235569, 0.0806618191735371, 0.10728990617796919]}, "mutation_prompt": null}
{"id": "52da09b4-2027-4977-9d8a-1bacd1e4d226", "solution": "import numpy as np\n\nclass EnhancedDynamicInertiaHybridPSO_DE_AdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.mutation_scale = 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Enhanced adaptive DE mutation\n            fitness = np.array([func(ind) for ind in population])\n            fitness_norm = (fitness - np.min(fitness)) / (np.max(fitness) - np.min(fitness))\n            mutation_scale = self.mutation_scale * (1 - t / self.budget) + 0.1 * (1 - fitness_norm) * np.std(population, axis=0)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n        return gbest", "name": "EnhancedDynamicInertiaHybridPSO_DE_AdaptiveMutation", "description": "Introducing a novel adaptive mutation strategy based on individual fitness values to dynamically adjust the mutation scale, aiming to improve exploration and exploitation balance.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (20,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (20,) (5,) ')", "parent_id": "dc6c0c40-7489-45a2-b25d-50e828b525c9", "metadata": {}, "mutation_prompt": null}
{"id": "65af9d89-0ce1-4476-9e05-d42cdef79623", "solution": "class AdaptiveMutativeHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n        return gbest", "name": "AdaptiveMutativeHybridPSO_DE", "description": "Implementing a novel adaptive mutation strategy based on the population fitness history to dynamically adjust the mutation scale for enhancing exploration and exploitation during optimization.", "configspace": "", "generation": 60, "fitness": 0.291352671999031, "feedback": "The algorithm AdaptiveMutativeHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "dc6c0c40-7489-45a2-b25d-50e828b525c9", "metadata": {"aucs": [0.7890552702446499, 0.6957331796695545, 0.5895971879098425, 0.8006546278408581, 0.6827940320574822, 0.5749374692959994, 0.8445942010173021, 0.6995900433794382, 0.5637017333048395, 0.391842103337805, 0.19110769856308274, 0.06545212882561369, 0.425906778597664, 0.2022753919051279, 0.047570923959711964, 0.33371159834750197, 0.17084723500590848, 0.050821818886134684, 0.09157292355976465, 0.1623177446052657, 0.10359441977025907, 0.11266001185623586, 0.10606133099431458, 0.1155870571312444, 0.13097130482499675, 0.1296479174039359, 0.10409256894670849, 0.15067326627136302, 0.09440096217325977, 0.07899840192507768, 0.09718205472400243, 0.10263088841906065, 0.09620642416971825, 0.09154006276038651, 0.1071521041167689, 0.08805913266837628, 0.9810732810478271, 0.9814795564143688, 0.9781634035702568, 0.9729303968354466, 0.9775871818544315, 0.9562141837838977, 0.978505243566575, 0.9528504949712048, 0.9779043476784892, 0.6524923106756719, 0.45614872734787126, 0.37407970132214863, 0.583511087885964, 0.45378669985902387, 0.3550687840531994, 0.5873778043468039, 0.44634924729736436, 0.36764676817575914, 0.6739414143817366, 0.22862055480556498, 0.7377889133868164, 0.8172675227138736, 0.36987406351560315, 0.7448734334958762, 0.2165414571505101, 0.23707355919398554, 0.6939106728988368, 0.40072799486783217, 0.2549238286154698, 0.17347033383549082, 0.3005046284657782, 0.26258561086614884, 0.2119256254659201, 0.28227635275956287, 0.2923868523776183, 0.1785038295690159, 0.26455138550246715, 0.20171089311424384, 0.1356608342231237, 0.1353569054254221, 0.21413170295413952, 0.16602906462991218, 0.3228344083678497, 0.23706285264538896, 0.19717241879963243, 0.05717947212343222, 0.054975250075675275, 0.032091456645314764, 0.12449651719422605, 0.0736332731722188, 0.05511646197419118, 0.07925839965438863, 0.01074408934426152, 0.06320481216361418, 0.09485295155317452, 0.1065869978130557, 0.1211149640708592, 0.12652566156657397, 0.060250768838657875, 0.06411662753025194, 0.13594355191866447, 0.10091779751810559, 0.13434577785818125, 0.04642590361086518, 0.1111771070372437, 0.06359256440237038, 0.04532016917556447, 0.09172220559718369, 0.04320856750284652, 0.1750496795833425, 0.06000529048990044, 0.019364239160722163, 0.0794104561536646, 0.13741842543915117, 0.14419759082054062, 0.18826387399962363, 0.20905690326784487, 0.13991313939169026, 0.15907706388830978, 0.17032771515853495, 0.18881796295398645, 0.5970266197243312, 0.49615309756104187, 0.4569180602122248, 0.5406377792239816, 0.5459480996351054, 0.45823777296450874, 0.618153131663904, 0.5347755297187723, 0.5142126554768504, 0.09195693000840988, 0.1554435258400857, 0.10323549484759043, 0.14344190271264212, 0.1520531701935126, 0.13953467876924863, 0.12436083441690993, 0.11969825911070453, 0.1274692978682891, 0.35293673887946153, 0.34861288249991806, 0.3309298024602213, 0.3512017017639125, 0.3700067363950583, 0.33332133897534255, 0.38750021695848424, 0.43277303698546177, 0.39102933694996644, 0.258772913044503, 0.322219633036965, 0.3316306599734484, 0.27342642459918476, 0.36472769009242134, 0.3124017871017388, 0.1698990834059556, 0.39218648158473146, 0.3208847812754554, 0.33618837409184166, 0.2638266077632351, 0.17724857271768202, 0.2247962350950662, 0.21438085388447448, 0.2787497251097564, 0.23055604269941776, 0.29956158637576114, 0.09634114725736487, 0.2230927119073658, 0.2201259817997817, 0.19125646565018484, 0.2579137776175566, 0.2277822526084169, 0.2202261516272065, 0.19053405213540797, 0.23660799334594496, 0.22008683820616926, 0.17691162270857874, 0.1950914916703651, 0.1796150138754169, 0.2134606636433648, 0.20936711885503623, 0.21385732892555065, 0.19950622578305088, 0.22020005330517745, 0.19642013766923916, 0.9242152763279203, 0.16850450034275732, 0.15394138205958185, 0.9153862857954606, 0.20123152890266072, 0.11502456616850754, 0.1231110822615692, 0.17015083086907312, 0.16859784436196246, 0.8880596100281343, 0.2126860638313698, 0.817092054676236, 0.2126214098695297, 0.15578505243523455, 0.6923063320321978, 0.1053240816889327, 0.16917086922360647, 0.6797841950058945, 0.19153659982671634, 0.1948971921017787, 0.18361899255044256, 0.18938292075149898, 0.1759167668230801, 0.1816250557587109, 0.19287078397645907, 0.17893156826798184, 0.19968849911254172, 0.10412372227206002, 0.07491855279600912, 0.11240296316917553, 0.0920599573920674, 0.08480530578463097, 0.11319989265482655, 0.10721741375751115, 0.08676570454546984, 0.08167716027873717]}, "mutation_prompt": null}
{"id": "2fe8742d-6160-478b-82e9-797c2922d9cc", "solution": "class DynamicInertiaHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(t / self.budget * 5)\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update with dynamic inertia weight\n            velocity = inertia_weight * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            avg_fitness = np.mean(self.history_fitness) if len(self.history_fitness) > 0 else 0\n            mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n        return gbest", "name": "DynamicInertiaHybridPSO_DE", "description": "Introducing a dynamic inertia weight strategy based on the population diversity to adaptively adjust the exploration and exploitation balance for accelerating convergence during optimization.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "65af9d89-0ce1-4476-9e05-d42cdef79623", "metadata": {}, "mutation_prompt": null}
{"id": "734abb5b-b17e-477e-9219-74831d235e28", "solution": "class AdaptiveMutativeHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n        return gbest", "name": "AdaptiveMutativeHybridPSO_DE", "description": "Implementing a novel adaptive mutation strategy based on the population fitness history to dynamically adjust the mutation scale for enhancing exploration and exploitation during optimization.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "65af9d89-0ce1-4476-9e05-d42cdef79623", "metadata": {"aucs": [0.7890552702446499, 0.6957331796695545, 0.5895971879098425, 0.8006546278408581, 0.6827940320574822, 0.5749374692959994, 0.8445942010173021, 0.6995900433794382, 0.5637017333048395, 0.391842103337805, 0.19110769856308274, 0.06545212882561369, 0.425906778597664, 0.2022753919051279, 0.047570923959711964, 0.33371159834750197, 0.17084723500590848, 0.050821818886134684, 0.09157292355976465, 0.1623177446052657, 0.10359441977025907, 0.11266001185623586, 0.10606133099431458, 0.1155870571312444, 0.13097130482499675, 0.1296479174039359, 0.10409256894670849, 0.15067326627136302, 0.09440096217325977, 0.07899840192507768, 0.09718205472400243, 0.10263088841906065, 0.09620642416971825, 0.09154006276038651, 0.1071521041167689, 0.08805913266837628, 0.9810732810478271, 0.9814795564143688, 0.9781634035702568, 0.9729303968354466, 0.9775871818544315, 0.9562141837838977, 0.978505243566575, 0.9528504949712048, 0.9779043476784892, 0.6524923106756719, 0.45614872734787126, 0.37407970132214863, 0.583511087885964, 0.45378669985902387, 0.3550687840531994, 0.5873778043468039, 0.44634924729736436, 0.36764676817575914, 0.6739414143817366, 0.22862055480556498, 0.7377889133868164, 0.8172675227138736, 0.36987406351560315, 0.7448734334958762, 0.2165414571505101, 0.23707355919398554, 0.6939106728988368, 0.40072799486783217, 0.2549238286154698, 0.17347033383549082, 0.3005046284657782, 0.26258561086614884, 0.2119256254659201, 0.28227635275956287, 0.2923868523776183, 0.1785038295690159, 0.26455138550246715, 0.20171089311424384, 0.1356608342231237, 0.1353569054254221, 0.21413170295413952, 0.16602906462991218, 0.3228344083678497, 0.23706285264538896, 0.19717241879963243, 0.05717947212343222, 0.054975250075675275, 0.032091456645314764, 0.12449651719422605, 0.0736332731722188, 0.05511646197419118, 0.07925839965438863, 0.01074408934426152, 0.06320481216361418, 0.09485295155317452, 0.1065869978130557, 0.1211149640708592, 0.12652566156657397, 0.060250768838657875, 0.06411662753025194, 0.13594355191866447, 0.10091779751810559, 0.13434577785818125, 0.04642590361086518, 0.1111771070372437, 0.06359256440237038, 0.04532016917556447, 0.09172220559718369, 0.04320856750284652, 0.1750496795833425, 0.06000529048990044, 0.019364239160722163, 0.0794104561536646, 0.13741842543915117, 0.14419759082054062, 0.18826387399962363, 0.20905690326784487, 0.13991313939169026, 0.15907706388830978, 0.17032771515853495, 0.18881796295398645, 0.5970266197243312, 0.49615309756104187, 0.4569180602122248, 0.5406377792239816, 0.5459480996351054, 0.45823777296450874, 0.618153131663904, 0.5347755297187723, 0.5142126554768504, 0.09195693000840988, 0.1554435258400857, 0.10323549484759043, 0.14344190271264212, 0.1520531701935126, 0.13953467876924863, 0.12436083441690993, 0.11969825911070453, 0.1274692978682891, 0.35293673887946153, 0.34861288249991806, 0.3309298024602213, 0.3512017017639125, 0.3700067363950583, 0.33332133897534255, 0.38750021695848424, 0.43277303698546177, 0.39102933694996644, 0.258772913044503, 0.322219633036965, 0.3316306599734484, 0.27342642459918476, 0.36472769009242134, 0.3124017871017388, 0.1698990834059556, 0.39218648158473146, 0.3208847812754554, 0.33618837409184166, 0.2638266077632351, 0.17724857271768202, 0.2247962350950662, 0.21438085388447448, 0.2787497251097564, 0.23055604269941776, 0.29956158637576114, 0.09634114725736487, 0.2230927119073658, 0.2201259817997817, 0.19125646565018484, 0.2579137776175566, 0.2277822526084169, 0.2202261516272065, 0.19053405213540797, 0.23660799334594496, 0.22008683820616926, 0.17691162270857874, 0.1950914916703651, 0.1796150138754169, 0.2134606636433648, 0.20936711885503623, 0.21385732892555065, 0.19950622578305088, 0.22020005330517745, 0.19642013766923916, 0.9242152763279203, 0.16850450034275732, 0.15394138205958185, 0.9153862857954606, 0.20123152890266072, 0.11502456616850754, 0.1231110822615692, 0.17015083086907312, 0.16859784436196246, 0.8880596100281343, 0.2126860638313698, 0.817092054676236, 0.2126214098695297, 0.15578505243523455, 0.6923063320321978, 0.1053240816889327, 0.16917086922360647, 0.6797841950058945, 0.19153659982671634, 0.1948971921017787, 0.18361899255044256, 0.18938292075149898, 0.1759167668230801, 0.1816250557587109, 0.19287078397645907, 0.17893156826798184, 0.19968849911254172, 0.10412372227206002, 0.07491855279600912, 0.11240296316917553, 0.0920599573920674, 0.08480530578463097, 0.11319989265482655, 0.10721741375751115, 0.08676570454546984, 0.08167716027873717]}, "mutation_prompt": null}
{"id": "fcb2fd6e-9733-446e-aa5e-155721716562", "solution": "class AdaptiveMutativeHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n        return gbest", "name": "AdaptiveMutativeHybridPSO_DE", "description": "Implementing a novel adaptive mutation strategy based on the population fitness history to dynamically adjust the mutation scale for enhancing exploration and exploitation during optimization.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "65af9d89-0ce1-4476-9e05-d42cdef79623", "metadata": {"aucs": [0.7890552702446499, 0.6957331796695545, 0.5895971879098425, 0.8006546278408581, 0.6827940320574822, 0.5749374692959994, 0.8445942010173021, 0.6995900433794382, 0.5637017333048395, 0.391842103337805, 0.19110769856308274, 0.06545212882561369, 0.425906778597664, 0.2022753919051279, 0.047570923959711964, 0.33371159834750197, 0.17084723500590848, 0.050821818886134684, 0.09157292355976465, 0.1623177446052657, 0.10359441977025907, 0.11266001185623586, 0.10606133099431458, 0.1155870571312444, 0.13097130482499675, 0.1296479174039359, 0.10409256894670849, 0.15067326627136302, 0.09440096217325977, 0.07899840192507768, 0.09718205472400243, 0.10263088841906065, 0.09620642416971825, 0.09154006276038651, 0.1071521041167689, 0.08805913266837628, 0.9810732810478271, 0.9814795564143688, 0.9781634035702568, 0.9729303968354466, 0.9775871818544315, 0.9562141837838977, 0.978505243566575, 0.9528504949712048, 0.9779043476784892, 0.6524923106756719, 0.45614872734787126, 0.37407970132214863, 0.583511087885964, 0.45378669985902387, 0.3550687840531994, 0.5873778043468039, 0.44634924729736436, 0.36764676817575914, 0.6739414143817366, 0.22862055480556498, 0.7377889133868164, 0.8172675227138736, 0.36987406351560315, 0.7448734334958762, 0.2165414571505101, 0.23707355919398554, 0.6939106728988368, 0.40072799486783217, 0.2549238286154698, 0.17347033383549082, 0.3005046284657782, 0.26258561086614884, 0.2119256254659201, 0.28227635275956287, 0.2923868523776183, 0.1785038295690159, 0.26455138550246715, 0.20171089311424384, 0.1356608342231237, 0.1353569054254221, 0.21413170295413952, 0.16602906462991218, 0.3228344083678497, 0.23706285264538896, 0.19717241879963243, 0.05717947212343222, 0.054975250075675275, 0.032091456645314764, 0.12449651719422605, 0.0736332731722188, 0.05511646197419118, 0.07925839965438863, 0.01074408934426152, 0.06320481216361418, 0.09485295155317452, 0.1065869978130557, 0.1211149640708592, 0.12652566156657397, 0.060250768838657875, 0.06411662753025194, 0.13594355191866447, 0.10091779751810559, 0.13434577785818125, 0.04642590361086518, 0.1111771070372437, 0.06359256440237038, 0.04532016917556447, 0.09172220559718369, 0.04320856750284652, 0.1750496795833425, 0.06000529048990044, 0.019364239160722163, 0.0794104561536646, 0.13741842543915117, 0.14419759082054062, 0.18826387399962363, 0.20905690326784487, 0.13991313939169026, 0.15907706388830978, 0.17032771515853495, 0.18881796295398645, 0.5970266197243312, 0.49615309756104187, 0.4569180602122248, 0.5406377792239816, 0.5459480996351054, 0.45823777296450874, 0.618153131663904, 0.5347755297187723, 0.5142126554768504, 0.09195693000840988, 0.1554435258400857, 0.10323549484759043, 0.14344190271264212, 0.1520531701935126, 0.13953467876924863, 0.12436083441690993, 0.11969825911070453, 0.1274692978682891, 0.35293673887946153, 0.34861288249991806, 0.3309298024602213, 0.3512017017639125, 0.3700067363950583, 0.33332133897534255, 0.38750021695848424, 0.43277303698546177, 0.39102933694996644, 0.258772913044503, 0.322219633036965, 0.3316306599734484, 0.27342642459918476, 0.36472769009242134, 0.3124017871017388, 0.1698990834059556, 0.39218648158473146, 0.3208847812754554, 0.33618837409184166, 0.2638266077632351, 0.17724857271768202, 0.2247962350950662, 0.21438085388447448, 0.2787497251097564, 0.23055604269941776, 0.29956158637576114, 0.09634114725736487, 0.2230927119073658, 0.2201259817997817, 0.19125646565018484, 0.2579137776175566, 0.2277822526084169, 0.2202261516272065, 0.19053405213540797, 0.23660799334594496, 0.22008683820616926, 0.17691162270857874, 0.1950914916703651, 0.1796150138754169, 0.2134606636433648, 0.20936711885503623, 0.21385732892555065, 0.19950622578305088, 0.22020005330517745, 0.19642013766923916, 0.9242152763279203, 0.16850450034275732, 0.15394138205958185, 0.9153862857954606, 0.20123152890266072, 0.11502456616850754, 0.1231110822615692, 0.17015083086907312, 0.16859784436196246, 0.8880596100281343, 0.2126860638313698, 0.817092054676236, 0.2126214098695297, 0.15578505243523455, 0.6923063320321978, 0.1053240816889327, 0.16917086922360647, 0.6797841950058945, 0.19153659982671634, 0.1948971921017787, 0.18361899255044256, 0.18938292075149898, 0.1759167668230801, 0.1816250557587109, 0.19287078397645907, 0.17893156826798184, 0.19968849911254172, 0.10412372227206002, 0.07491855279600912, 0.11240296316917553, 0.0920599573920674, 0.08480530578463097, 0.11319989265482655, 0.10721741375751115, 0.08676570454546984, 0.08167716027873717]}, "mutation_prompt": null}
{"id": "35a00592-0ce4-45b8-89fd-bb73521d0254", "solution": "class EnhancedAdaptiveMutativeHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n        self.previous_best_fitness = np.inf\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            improved = np.mean(self.previous_best_fitness) < np.mean(pbest_fitness)\n            self.previous_best_fitness = pbest_fitness.copy()\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2 if not improved else self.w_max\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n        return gbest", "name": "EnhancedAdaptiveMutativeHybridPSO_DE", "description": "Introducing dynamic inertia weight adaptation based on the population's fitness improvement to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": 0.291352671999031, "feedback": "The algorithm EnhancedAdaptiveMutativeHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "65af9d89-0ce1-4476-9e05-d42cdef79623", "metadata": {"aucs": [0.7890552702446499, 0.6957331796695545, 0.5895971879098425, 0.8006546278408581, 0.6827940320574822, 0.5749374692959994, 0.8445942010173021, 0.6995900433794382, 0.5637017333048395, 0.391842103337805, 0.19110769856308274, 0.06545212882561369, 0.425906778597664, 0.2022753919051279, 0.047570923959711964, 0.33371159834750197, 0.17084723500590848, 0.050821818886134684, 0.09157292355976465, 0.1623177446052657, 0.10359441977025907, 0.11266001185623586, 0.10606133099431458, 0.1155870571312444, 0.13097130482499675, 0.1296479174039359, 0.10409256894670849, 0.15067326627136302, 0.09440096217325977, 0.07899840192507768, 0.09718205472400243, 0.10263088841906065, 0.09620642416971825, 0.09154006276038651, 0.1071521041167689, 0.08805913266837628, 0.9810732810478271, 0.9814795564143688, 0.9781634035702568, 0.9729303968354466, 0.9775871818544315, 0.9562141837838977, 0.978505243566575, 0.9528504949712048, 0.9779043476784892, 0.6524923106756719, 0.45614872734787126, 0.37407970132214863, 0.583511087885964, 0.45378669985902387, 0.3550687840531994, 0.5873778043468039, 0.44634924729736436, 0.36764676817575914, 0.6739414143817366, 0.22862055480556498, 0.7377889133868164, 0.8172675227138736, 0.36987406351560315, 0.7448734334958762, 0.2165414571505101, 0.23707355919398554, 0.6939106728988368, 0.40072799486783217, 0.2549238286154698, 0.17347033383549082, 0.3005046284657782, 0.26258561086614884, 0.2119256254659201, 0.28227635275956287, 0.2923868523776183, 0.1785038295690159, 0.26455138550246715, 0.20171089311424384, 0.1356608342231237, 0.1353569054254221, 0.21413170295413952, 0.16602906462991218, 0.3228344083678497, 0.23706285264538896, 0.19717241879963243, 0.05717947212343222, 0.054975250075675275, 0.032091456645314764, 0.12449651719422605, 0.0736332731722188, 0.05511646197419118, 0.07925839965438863, 0.01074408934426152, 0.06320481216361418, 0.09485295155317452, 0.1065869978130557, 0.1211149640708592, 0.12652566156657397, 0.060250768838657875, 0.06411662753025194, 0.13594355191866447, 0.10091779751810559, 0.13434577785818125, 0.04642590361086518, 0.1111771070372437, 0.06359256440237038, 0.04532016917556447, 0.09172220559718369, 0.04320856750284652, 0.1750496795833425, 0.06000529048990044, 0.019364239160722163, 0.0794104561536646, 0.13741842543915117, 0.14419759082054062, 0.18826387399962363, 0.20905690326784487, 0.13991313939169026, 0.15907706388830978, 0.17032771515853495, 0.18881796295398645, 0.5970266197243312, 0.49615309756104187, 0.4569180602122248, 0.5406377792239816, 0.5459480996351054, 0.45823777296450874, 0.618153131663904, 0.5347755297187723, 0.5142126554768504, 0.09195693000840988, 0.1554435258400857, 0.10323549484759043, 0.14344190271264212, 0.1520531701935126, 0.13953467876924863, 0.12436083441690993, 0.11969825911070453, 0.1274692978682891, 0.35293673887946153, 0.34861288249991806, 0.3309298024602213, 0.3512017017639125, 0.3700067363950583, 0.33332133897534255, 0.38750021695848424, 0.43277303698546177, 0.39102933694996644, 0.258772913044503, 0.322219633036965, 0.3316306599734484, 0.27342642459918476, 0.36472769009242134, 0.3124017871017388, 0.1698990834059556, 0.39218648158473146, 0.3208847812754554, 0.33618837409184166, 0.2638266077632351, 0.17724857271768202, 0.2247962350950662, 0.21438085388447448, 0.2787497251097564, 0.23055604269941776, 0.29956158637576114, 0.09634114725736487, 0.2230927119073658, 0.2201259817997817, 0.19125646565018484, 0.2579137776175566, 0.2277822526084169, 0.2202261516272065, 0.19053405213540797, 0.23660799334594496, 0.22008683820616926, 0.17691162270857874, 0.1950914916703651, 0.1796150138754169, 0.2134606636433648, 0.20936711885503623, 0.21385732892555065, 0.19950622578305088, 0.22020005330517745, 0.19642013766923916, 0.9242152763279203, 0.16850450034275732, 0.15394138205958185, 0.9153862857954606, 0.20123152890266072, 0.11502456616850754, 0.1231110822615692, 0.17015083086907312, 0.16859784436196246, 0.8880596100281343, 0.2126860638313698, 0.817092054676236, 0.2126214098695297, 0.15578505243523455, 0.6923063320321978, 0.1053240816889327, 0.16917086922360647, 0.6797841950058945, 0.19153659982671634, 0.1948971921017787, 0.18361899255044256, 0.18938292075149898, 0.1759167668230801, 0.1816250557587109, 0.19287078397645907, 0.17893156826798184, 0.19968849911254172, 0.10412372227206002, 0.07491855279600912, 0.11240296316917553, 0.0920599573920674, 0.08480530578463097, 0.11319989265482655, 0.10721741375751115, 0.08676570454546984, 0.08167716027873717]}, "mutation_prompt": null}
{"id": "971d10b2-d21d-444d-bd8d-2143e1eb5fb9", "solution": "import numpy as np\n\nclass DynamicMutativeHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size = 20\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (self.pop_size, 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Dynamic mutation based on diversity and fitness\n            diversity = np.std(population, axis=0)\n            avg_fitness = np.mean(pbest_fitness)\n            mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (self.pop_size, self.dim)) * (population - population[np.random.randint(self.pop_size, size=self.pop_size)])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n        return gbest", "name": "DynamicMutativeHybridPSO_DE", "description": "Implementing a dynamic mutation strategy based on the population diversity and fitness to adaptively adjust the mutation scale for faster convergence during optimization.", "configspace": "", "generation": 65, "fitness": 0.28476618550294847, "feedback": "The algorithm DynamicMutativeHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "65af9d89-0ce1-4476-9e05-d42cdef79623", "metadata": {"aucs": [0.6262458964953151, 0.7050637633184985, 0.7943818578709743, 0.6032961104021967, 0.7063527568276191, 0.8023867655389193, 0.6062142845572946, 0.6850516734442534, 0.7703915807678127, 0.0677288212065007, 0.27841107536636023, 0.2662960070707241, 0.06650188143210112, 0.2601464847368764, 0.28351453352301437, 0.03581277834655516, 0.24992510590997685, 0.29213211040406173, 0.07786129587548818, 0.10942009192398838, 0.11447466160875064, 0.10292697131548034, 0.1247424541057851, 0.15682393146923201, 0.09255645070422269, 0.11115496309593598, 0.11718044399929206, 0.08686232304510699, 0.08697833125675603, 0.13702527171729018, 0.12808122729652638, 0.11657847624490658, 0.09398121443456253, 0.1103966369161069, 0.09633599059991249, 0.13196408213860866, 0.9694597733718571, 0.9785138071980026, 0.981514461897552, 0.9696954846400525, 0.9786196245987919, 0.9780144357162669, 0.9799503275621414, 0.9633600686760837, 0.9729141244284758, 0.38418273953619875, 0.43715676562921035, 0.45546614383146533, 0.4054464767074485, 0.44793383424141076, 0.5379127058997443, 0.38370936182171367, 0.48804413059792473, 0.5457268233070872, 0.6468081387179316, 0.6158092422996022, 0.3455538983266646, 0.2754894314374011, 0.3864421762984279, 0.21037669292611927, 0.5076672697221394, 0.23493756661173426, 0.27240853275297594, 0.13322602867939737, 0.26332315680929075, 0.2561126761935739, 0.13475129832073596, 0.1961416111964731, 0.22270380471478635, 0.2752802347687855, 0.17989198572899745, 0.2595531247306839, 0.1317054071077457, 0.13542737880307942, 0.22072650051506593, 0.14915747696212311, 0.24951401717848087, 0.22707450331148482, 0.21414016447582707, 0.11900097229571671, 0.29106057206768987, 0.0001449994933291343, 0.02610411740427876, 0.14309237587684565, 0.024685453565536086, 0.06101718863380079, 0.06716189201896416, 0.14668722611596308, 0.05572370178322361, 0.1376923241097826, 0.11969994852040455, 0.0958904726902049, 0.0839003020575696, 0.061134339097029256, 0.1668212091956517, 0.05648896434238182, 0.15311044025739717, 0.13687853368286618, 0.18621140690085192, 0.040747850881139525, 0.17444988036060072, 0.17095125457976101, 0.03194793637153348, 0.07396872786477493, 0.18104689670906748, 0.07231062032265623, 0.05987702574343334, 0.057914245728643454, 0.16202150303066243, 0.09769918140234235, 0.1619033357233962, 0.10973928525343546, 0.19213693434430035, 0.16547499612139094, 0.1289627693238774, 0.14348864563151742, 0.09504953223891677, 0.46567506349772547, 0.5864838906440395, 0.5415438124644297, 0.4889736162345847, 0.5212101906933018, 0.5895926000254352, 0.4746514781960892, 0.5415679322747129, 0.5961941907614843, 0.09776119372041647, 0.15642069104269718, 0.10970915428388639, 0.15700815569394289, 0.12925727117783792, 0.17985296069684642, 0.14521399412976554, 0.10712437359355786, 0.08514626627990418, 0.3668181554695661, 0.2986607529334343, 0.5207681820173654, 0.2943200372181616, 0.4165366906718134, 0.26905137009951463, 0.3541630552401017, 0.2514684256547596, 0.501584682011251, 0.3620513000361085, 0.31066886547857364, 0.29658008152158655, 0.34721008826913624, 0.28386727454268157, 0.40063553518440687, 0.21104525782232308, 0.42745643397067457, 0.22837693843274853, 0.23616395343825125, 0.2062771223614075, 0.29707025104055196, 0.2178965085107717, 0.21624638111141092, 0.3140810402521026, 0.2700171944352545, 0.32667982877200286, 0.22451657963400717, 0.25365906970286256, 0.19987310465302044, 0.19167287323394877, 0.2196687758011685, 0.23515475450964363, 0.20981141987337393, 0.24500471888568065, 0.2283878567511226, 0.1841284254124682, 0.18379353444806046, 0.21712344028121233, 0.20614497299956847, 0.2042627373142094, 0.2044885256440816, 0.19763973007318625, 0.18945792142694462, 0.208588840185168, 0.18860042850059167, 0.12560764151919068, 0.1572109849902632, 0.1891520969930358, 0.8367019153153081, 0.20133979776923439, 0.9115351523515441, 0.1225079581420534, 0.8501755516406739, 0.16775810934402202, 0.6156789518866137, 0.21244774747295725, 0.8468167523815013, 0.21166241648519513, 0.16948480351873807, 0.15615322466730563, 0.10484389489573298, 0.1683186917435463, 0.7748180728459451, 0.18322269959905335, 0.18808094083246174, 0.1817045562382965, 0.18711384912441353, 0.2004134063977544, 0.189491322948954, 0.1907688520745674, 0.18135614036931635, 0.19648154902467818, 0.08593730395554833, 0.14460567642867206, 0.07852873302297791, 0.07867400185952989, 0.09518313993765115, 0.08735433373751733, 0.09394270700138352, 0.09705900756729535, 0.08706535835809337]}, "mutation_prompt": null}
{"id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 66, "fitness": 0.3350506338708517, "feedback": "The algorithm DynamicPopulationResizingHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "65af9d89-0ce1-4476-9e05-d42cdef79623", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "ec6043b4-26c3-47a8-a097-7ae958c2b52e", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def chaotic_map(self, x):\n        return 4.0 * x * (1.0 - x)\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Enhanced mutation strategy using chaotic map\n            mutation_scale = self.base_mutation_scale + 0.1 * self.chaotic_map(t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "EnhancedDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel mutation strategy that incorporates a chaotic map to enhance exploration and exploitation capabilities, leading to faster convergence.", "configspace": "", "generation": 67, "fitness": 0.33154764951898985, "feedback": "The algorithm EnhancedDynamicPopulationResizingHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.8614056341191993, 0.8369135819572103, 0.8059159075818194, 0.8616782959136291, 0.817259570909499, 0.8000901745843073, 0.8616640616854465, 0.8386535892537896, 0.8293711098466935, 0.5564841920034924, 0.5791680908116508, 0.5508763572679973, 0.5374960133578817, 0.5015496551701626, 0.5297002833855777, 0.5488526485236273, 0.5882037254395185, 0.49517477905680685, 0.14328580553547676, 0.17404013339268654, 0.09462875240215707, 0.1443418193488134, 0.11346260681154274, 0.11378345019014979, 0.08376777176122507, 0.1337595375186733, 0.09308742437955186, 0.1375259039474307, 0.11874363859029147, 0.077266164581544, 0.09361414364353637, 0.1295635515040463, 0.11825127135520308, 0.1338069060417083, 0.10108007428316546, 0.09476604168690805, 0.9825862062814297, 0.9869384933604392, 0.9913894418920498, 0.9863707611933497, 0.9844487309139105, 0.9856891093538758, 0.9775033524055804, 0.978711214902324, 0.9799920565812726, 0.6974552034009853, 0.706810730996519, 0.6526193995484431, 0.6828917922833374, 0.7048937453841949, 0.6617640699784015, 0.7049320089152284, 0.6678161745501421, 0.6658831823762064, 0.2671413606291876, 0.2159411572281963, 0.1665926400993356, 0.2831189578953678, 0.27131553278504283, 0.5759642157134259, 0.238096059568232, 0.23882596602610695, 0.32137720609755815, 0.5371037777473169, 0.6011406320433047, 0.27069585388861983, 0.4134349435507966, 0.46875337453907806, 0.27510866570529735, 0.3902652149195954, 0.4364676537629214, 0.37257295315890493, 0.5048428260759286, 0.3727219410238406, 0.2953154163714725, 0.40112457606654484, 0.42041044661657756, 0.4870012843537239, 0.37065060054635124, 0.47018851567476017, 0.3688391621534264, 0.0642360672338198, 0.07433245124131316, 0.0659674390706898, 0.06008060310138941, 0.0359404646463527, 0.061389950334043486, 0.08724427795777923, 0.09804205131100063, 0.033132268546127275, 0.1260958684599358, 0.14809828591859153, 0.18410135179079112, 0.15658134474339147, 0.09277949251853512, 0.057059623565143935, 0.13201179613411174, 0.12444633808417915, 0.12691253139969194, 0.12019088978654513, 0.27599029182456847, 0.2417401870945156, 0.11930646900157338, 0.14753612449648756, 0.07757599400185955, 0.07714416570936733, 0.09576816947237221, 0.06791668427981878, 0.1345986987463279, 0.11570179320807306, 0.1946875532682505, 0.31480053222785076, 0.15981078772093182, 0.17643499935339113, 0.13123257355570805, 0.17890322758137667, 0.12287869854687106, 0.5736096687835768, 0.5841375219634877, 0.578972118192846, 0.5789410308301779, 0.5788834632320489, 0.5982571147492117, 0.6151342772322207, 0.6782743093665651, 0.6329245511819851, 0.06681950271967307, 0.0922426948737286, 0.11390883719138734, 0.16286066372749497, 0.06429267950409157, 0.1260788092297075, 0.08042930944923521, 0.14451406863647587, 0.12584513348576198, 0.38837739303371666, 0.1993575640682249, 0.5755875373972397, 0.3945770503989745, 0.46657873674183126, 0.6486608353403169, 0.4921246660051496, 0.5597337002750216, 0.22274431305207731, 0.23955974257728818, 0.3734854341312748, 0.2179975858077532, 0.3046376218830623, 0.21590845480749332, 0.47519897426889857, 0.2765133226362906, 0.22274343604064362, 0.26716442583545985, 0.2792054343389818, 0.28928229641613457, 0.22008817491717136, 0.2923803017221799, 0.22191880171227818, 0.19867640976927492, 0.24598781518154988, 0.14842407632561117, 0.19838608414775805, 0.2551882918399939, 0.23628046593007945, 0.2668267661845879, 0.2182936215494542, 0.25279741259080324, 0.21070617042860063, 0.25140839249635594, 0.29980847505545094, 0.2550559548594278, 0.207420402866331, 0.198126552758913, 0.22686806387087977, 0.1919273426536089, 0.17452597981340334, 0.22071178522155566, 0.22648095729126716, 0.20112279480821516, 0.17108027704422535, 0.17879493597274654, 0.179390061214444, 0.20120462623240198, 0.9089862610510656, 0.20210958028293635, 0.11520246916477372, 0.16949144791377402, 0.21395710092771547, 0.17852691624300154, 0.8234667509548047, 0.11325754819196132, 0.8584441377208718, 0.12721915017868524, 0.16994239799983557, 0.21233151734789557, 0.1693042757776262, 0.0948912037897609, 0.8134639783027072, 0.21047589462752292, 0.2254338199286574, 0.1735943910031187, 0.23253131911822045, 0.18937057179718664, 0.18740376803576075, 0.18955714069519003, 0.19191846322188144, 0.21154345287020693, 0.09494950630519838, 0.09769549655598364, 0.09264460289932142, 0.14988232371185406, 0.11437930168776689, 0.11655759408435296, 0.1266642991320106, 0.09406985540198476, 0.07597116298029993]}, "mutation_prompt": null}
{"id": "84fa4fe9-0185-48d1-82b0-206be1ee995e", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "8d6b3a29-b8d1-4cd7-b9b6-db5a9c173145", "solution": "import numpy as np\n\nclass DynamicPopulationResizingHybridPSO_DE_TournamentSelection:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # Tournament selection for parent selection\n            tournament_size = 3\n            selected_indices = np.random.choice(range(len(population)), tournament_size, replace=False)\n            tournament_pbest_fitness = pbest_fitness[selected_indices]\n            tournament_pbest = pbest[selected_indices]\n            tournament_gbest_idx = np.argmin(tournament_pbest_fitness)\n            tournament_gbest = tournament_pbest[tournament_gbest_idx]\n\n            # PSO update with tournament-selected parents\n            velocity = w * velocity + self.c1 * r1 * (tournament_pbest - population) + self.c2 * r2 * (np.tile(tournament_gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE_TournamentSelection", "description": "Implementing a novel parent selection strategy based on tournament selection to enhance exploration and exploitation.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (3,5) (10,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (3,5) (10,5) ')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {}, "mutation_prompt": null}
{"id": "25be51dc-6e16-4750-9d54-cacaf81fb6fc", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "91459ed7-bebc-4153-9c8e-d89fa0a14768", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "b1439987-4115-4fca-9ffe-c0363189ed4b", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "0a0a4a07-bd9d-45d2-b9e3-42fe491c4506", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "6bca78dc-8a25-492a-a823-363b2420f78c", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "3673559c-a209-4cd3-924c-d02eaee9f905", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "8347ee03-e69d-418c-ad09-584e96892fdc", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "bb9f77a6-2891-4e8f-b544-f707305e5c3e", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "c6994c47-3136-4d68-ad03-fa3a99f60c37", "solution": "class DynamicInertiaWeightHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            if t >= self.budget // 5:\n                w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 4  # Dynamic inertia weight adaptation\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  \n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicInertiaWeightHybridPSO_DE", "description": "Implement a dynamic inertia weight mechanism to adaptively adjust the inertia weight during optimization to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 78, "fitness": 0.3350506338708517, "feedback": "The algorithm DynamicInertiaWeightHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "e690b769-d2d9-445c-97a8-9c19cc2c4ef4", "solution": "class DynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + (self.w_max - self.w_min) * (1 - t / self.budget) ** 2\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = w * velocity + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            diversity = np.std(population, axis=0)\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "DynamicPopulationResizingHybridPSO_DE", "description": "Introducing a dynamic population resizing mechanism to adaptively adjust the population size during optimization for faster convergence.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.871124348654057, 0.7439457666073674, 0.8252216715233249, 0.8594011092447615, 0.7357342251030722, 0.819470150257127, 0.8766844054458965, 0.7563317928532776, 0.8337660896987953, 0.6576574242510658, 0.33443683443620054, 0.5733948005795027, 0.6217116803250655, 0.36394242497254736, 0.5735105068170745, 0.5476948001935797, 0.3965064871784909, 0.476253836451793, 0.11890091000525715, 0.1854188337758872, 0.12287046811688529, 0.1230970413413206, 0.119598742131514, 0.14216926387239637, 0.057550947101971506, 0.0869051608338185, 0.079162994811394, 0.0938454585769819, 0.08119771759020078, 0.08416435862884997, 0.10116900028783293, 0.09460531016210827, 0.14211619795985808, 0.07362662245393681, 0.12744181011614197, 0.0901794349191587, 0.9863530280082504, 0.9869876380842741, 0.9872872428752724, 0.9861082705868337, 0.9853874989600292, 0.9871207864492783, 0.9851987292889717, 0.9865977714285404, 0.9817817536242633, 0.7571868065748247, 0.597237076478395, 0.6489783248511078, 0.7500427774275793, 0.5948376306606571, 0.6501814466920323, 0.7576006657389615, 0.5887639038144534, 0.6437757234575404, 0.22967824513391444, 0.2270483819675433, 0.16695743825527698, 0.2820229274258541, 0.19835500166960496, 0.866569345355244, 0.17856782808050697, 0.22805198760519174, 0.8108077437708389, 0.44750254687893065, 0.36363451034702254, 0.38520018513751675, 0.5453749836659124, 0.46703125036593995, 0.3888638119951666, 0.5673893592110935, 0.3384899873023416, 0.12400500517243596, 0.1352180036656031, 0.3251013622341059, 0.40552944571707406, 0.5230872544634824, 0.271424089593572, 0.5202560533799503, 0.5514895330138407, 0.28663561903315515, 0.30355414205137343, 0.1951463530300923, 0.03582979275896614, 0.04594413059384983, 0.08064907085608009, 0.09117463871067089, 0.03051047808154239, 0.05099164278610879, 0.0587174546585858, 0.013070074861362246, 0.11952622704934968, 0.16141766366845445, 0.09521038312806618, 0.07633518292676722, 0.13671385807703595, 0.06978711779347069, 0.11539818546216207, 0.07787569929208915, 0.12063522118605252, 0.08559572207848365, 0.21430703889570601, 0.1474294259978256, 0.06635682305020696, 0.062086221435630806, 0.08420337579926196, 0.11510698979810186, 0.12374667550992557, 0.23186322793561598, 0.12457682605081188, 0.1866901319801978, 0.19373510576112418, 0.3048317761355086, 0.19242664271392107, 0.1817110478348305, 0.1614006094807986, 0.1225800601558843, 0.20892754577040618, 0.7098682746134884, 0.5495137318480108, 0.5870447276212962, 0.5868104665923081, 0.5341221878171878, 0.5698572763734048, 0.6782974193450438, 0.5773457832686735, 0.590441807426216, 0.0999498993294019, 0.13123668036581915, 0.09485185520618666, 0.09007850558561281, 0.09531997358545541, 0.1430571960290581, 0.11124030068789015, 0.14495086237969912, 0.14463612971799977, 0.34209604609463606, 0.33194221521916467, 0.47399498035364096, 0.21763800717120785, 0.5549628084738447, 0.22186470115137868, 0.5605925395160742, 0.24621014769118532, 0.27911912518288606, 0.3628623775954829, 0.36894329152644256, 0.4558431849970571, 0.25988765947537185, 0.3731701440249552, 0.4218273103350759, 0.16875240253642754, 0.27456419627113815, 0.20932663761602022, 0.24914563202009188, 0.24977386982755023, 0.39455568563808696, 0.20129743811518597, 0.26032092597090006, 0.15547250120809963, 0.19903968609422118, 0.19815366662802758, 0.11916462096932068, 0.2452080210372677, 0.2057787748033829, 0.25785642439918943, 0.20866481822320204, 0.20411599399644986, 0.21432861433924277, 0.24453179815521175, 0.22063771271683774, 0.22460429236434387, 0.18847541995789951, 0.22074730974299195, 0.19377002109982666, 0.24760817812834401, 0.2071893592781554, 0.18748937069421323, 0.17267891391363888, 0.19042588944131322, 0.190064128827243, 0.18929813354354053, 0.18919096628029408, 0.16911191775487644, 0.9391923227557994, 0.20179573890940639, 0.17085598592108986, 0.1687626238410851, 0.16749986181563414, 0.1787801964001856, 0.8257018297420091, 0.11290016061704022, 0.8494839725619668, 0.9286514128783279, 0.2131028613857857, 0.21398328887689932, 0.867882416170896, 0.7211141594998585, 0.8416826759077203, 0.2023071004150031, 0.20570262158382036, 0.21977671371970386, 0.18900969611508722, 0.19749256216662048, 0.2136438256737515, 0.20625817858425388, 0.2025535892489273, 0.19839500174139268, 0.09873409154170099, 0.08937192281999529, 0.08003819194358586, 0.13880645722001372, 0.1641778792884364, 0.11017470376113192, 0.14268027228195568, 0.08413800697558604, 0.09277548946839598]}, "mutation_prompt": null}
{"id": "814783ba-9858-4434-976e-d486fc4dbcc5", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 80, "fitness": 0.34026779312498084, "feedback": "The algorithm FasterConvergenceDynamicPopulationResizingHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "2c6f4965-ce33-452f-82b2-07d57ee52874", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "548a111a-33bc-490d-8581-03f6329dc879", "solution": "import chaoticmaps\n\nclass FasterConvergenceChaoticInitializationHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n\n    def __call__(self, func):\n        chaotic_map = chaoticmaps.LogisticMap(r=4.0, x0=0.1)  # Initialize chaotic map\n        population = np.array([chaotic_map.generate() * 10 - 5 for _ in range(self.pop_size_min)])  # Initialize population using chaotic map\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceChaoticInitializationHybridPSO_DE", "description": "Utilizing a chaotic map for population initialization to promote diverse exploration leading to faster convergence.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'chaoticmaps'\").", "error": "ModuleNotFoundError(\"No module named 'chaoticmaps'\")", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {}, "mutation_prompt": null}
{"id": "cc0342c3-23da-4c70-b135-22a23bebecd6", "solution": "class EnhancedMutationFasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Enhanced mutation based on fitness landscape\n            mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + 0.3 * np.random.normal(0, 0.1) * (diversity / (pbest_fitness + 1e-10))\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "EnhancedMutationFasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing an enhanced mutation strategy by incorporating a dynamic adjustment to the mutation scale based on the fitness landscape to accelerate convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,) (10,) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,) (10,) ')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {}, "mutation_prompt": null}
{"id": "10217f61-5170-4183-8106-7a84636bf0b9", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "5836e8e3-a769-4b38-a2ef-ed073397c57d", "solution": "class EnhancedConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            fitness_norm = (pbest_fitness - np.min(pbest_fitness)) / (np.max(pbest_fitness) - np.min(pbest_fitness))\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.mean(fitness_norm))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (fitness_norm / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "EnhancedConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing dynamic inertia weight based on population fitness to adaptively balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (10, 5) and arg 1 with shape (10,).').", "error": "ValueError('shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (10, 5) and arg 1 with shape (10,).')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {}, "mutation_prompt": null}
{"id": "b5beea21-6d26-43d1-adb4-529aa1f08659", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "f52f1017-0a4e-4a12-85b4-ee9cdbda1743", "solution": "class FasterConvergenceAcceleratedMutationHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Accelerated mutation based on best fitness\n            if len(self.history_fitness) > 0:\n                best_fitness = pbest_fitness[np.argmin(pbest_fitness)]\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (best_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceAcceleratedMutationHybridPSO_DE", "description": "Implementing a novel mutation strategy that adaptively adjusts based on the fitness of the best individual in the population to accelerate convergence.", "configspace": "", "generation": 86, "fitness": 0.33888975272125044, "feedback": "The algorithm FasterConvergenceAcceleratedMutationHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9264553277161416, 0.9331392180189348, 0.9403688691974939, 0.9287573526778874, 0.9133396599667775, 0.927648186734643, 0.9322120421272194, 0.9031671078531018, 0.9241228919092334, 0.8684972263760731, 0.7902477762446338, 0.7153957585411286, 0.8762272387441046, 0.7924716572232885, 0.7475387116252243, 0.8566183795462493, 0.6614720715740025, 0.8404858207616678, 0.07386595707990096, 0.08517319026422698, 0.05072337777456415, 0.08204846260383625, 0.09511553455254274, 0.05810354215038205, 0.05201635754544098, 0.07912331674575457, 0.04083362590387862, 0.05086799188054103, 0.0565528050952151, 0.0785499325175042, 0.08830828036707039, 0.006241720771865911, 0.0201585983233592, 0.017557029790350676, 0.05490131411444121, 0.04178606580762878, 0.9155559918212588, 0.9659689630709919, 0.9421259403321965, 0.6939566608141381, 0.9544633826982787, 0.9305545865485245, 0.8491946534163557, 0.9665107148296221, 0.8976788402120048, 0.8465123918151577, 0.7522696276272307, 0.8306541928069406, 0.8477560351470129, 0.7453868167054903, 0.6673779235127231, 0.8416899712023158, 0.6654299339912596, 0.7333132961100954, 0.2188356432650843, 0.1013944370856873, 0.1325542275800422, 0.16290938595560422, 0.36910774031149574, 0.10900021787958225, 0.06766937263627115, 0.13379997401391241, 0.1994693519379751, 0.1367835641389924, 0.6048269918018574, 0.527682202952068, 0.6636536395730757, 0.47980019577612654, 0.65404934925067, 0.7821373853067122, 0.738125005796504, 0.2905879536909898, 0.5496665466852957, 0.5175079435430562, 0.3779819807287196, 0.7607146637712613, 0.6230700968186714, 0.6023406840278631, 0.48728004076201126, 0.5762758843097009, 0.5131312625708133, 0.23556630523481303, 0.03187427510988039, 0.049719792707044186, 0.09835694353801316, 0.05602761930528033, 0.10688886373334971, 0.12670080996366218, 0.07157943583684534, 0.07287947377728266, 0.1372324986111435, 0.1276128363444775, 0.14884755297639785, 0.20993247704604423, 0.09414888959520507, 0.061278620494197855, 0.20805719176225723, 0.180909073350926, 0.1878650804454267, 0.19243616613753167, 0.2221462303343148, 0.1852018401849138, 0.07352148954876325, 0.32532263625035773, 0.06929728090085496, 0.12736625196583895, 0.2757197542999956, 0.04175440604238634, 0.06969085097759775, 0.17259818028591745, 0.18982735253533867, 0.179947304174069, 0.11871538066345033, 0.2418681489384359, 0.043364001271091746, 0.11281632715622325, 0.0901947235150643, 0.6880554701893242, 0.7579516514490727, 0.6073019383787094, 0.6881094199722761, 0.6142327452781022, 0.6519915213494021, 0.7328849453323967, 0.6550307374206893, 0.7008043110731459, 0.03625016514396806, 0.07163668744305418, 9.999999999998899e-05, 0.07164009957581452, 0.10338166840955654, 0.07919480982240712, 0.060098544935548115, 0.1494945321496567, 0.06756391115974858, 0.130917320010128, 0.21089147774220307, 0.19520837006252312, 0.18368532521771253, 0.2007989156913531, 0.1963643410173399, 0.1949988509682561, 0.16971979184169506, 0.2077489931071601, 0.1704237298000879, 0.1796874950650168, 0.18326752355932918, 0.20505640182766627, 0.31522475968169295, 0.1751994542453127, 0.16932469771857572, 0.1938300416712344, 0.12939051425008108, 0.1211091743868008, 0.1840127024859891, 0.0791399127089899, 0.10584104402123484, 0.23498437290468221, 0.16044546194247045, 0.11969768684914706, 0.22488104563200217, 0.09348189912797733, 0.2756706139115769, 0.2712311611589089, 0.2326515815343828, 0.23461862761917496, 0.2228019066409046, 0.21302899523900054, 0.22752742556923877, 0.24939517955025425, 0.1879041973861486, 0.1629017226722249, 0.1769433546257262, 0.1835680121095874, 0.16717966267228235, 0.17811805014905002, 0.17404777292653284, 0.1676916006397674, 0.1926574475865026, 0.174120662159846, 0.1896554085369062, 0.18947554153776514, 0.10343489271675133, 0.9777320387383137, 0.20198973754634242, 0.17090461017262915, 0.16819097752846446, 0.14895692928673232, 0.17881803268467067, 0.9297811998129567, 0.11262577436829868, 0.7764235790774374, 0.08336081060847189, 0.11220848857427357, 0.21184978595241466, 0.8631634829803092, 0.8796328560149115, 0.8941398833340047, 0.1920677294931652, 0.20951195529657773, 0.20244031500586823, 0.23217635742533005, 0.2073635189449229, 0.2668022041794247, 0.215702375255591, 0.2479748441493541, 0.21295563461060996, 0.10596977329324075, 0.08789411737259745, 0.06639098194491622, 0.14425397380347493, 0.16629820994269318, 0.12383116437340724, 0.10687028901519402, 0.094202586174426, 0.08790996129466144]}, "mutation_prompt": null}
{"id": "a86767cf-7ee4-4337-81d3-220f930b4c71", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "ac9c8a18-20f8-4c6f-b741-db2aff150015", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "06b827f4-16cf-4ca2-9963-a7c75ccc4ec8", "solution": "class EnhancedFasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n        self.explore_prob = 0.2\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            if np.random.rand() < self.explore_prob:  # Introduce exploration\n                explore_rate = 0.1 + 0.4 * t / self.budget\n                population += explore_rate * np.random.normal(0, 1, (population.shape[0], self.dim)) * diversity\n\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "EnhancedFasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing an adaptive mutation mechanism based on population diversity and function landscape to improve exploration-exploitation balance and accelerate convergence speed.", "configspace": "", "generation": 89, "fitness": 0.3369630689255828, "feedback": "The algorithm EnhancedFasterConvergenceDynamicPopulationResizingHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9432623247721286, 0.9448044063466969, 0.9417685300549639, 0.9405871392999213, 0.9268058200960726, 0.8664922423973718, 0.9261853466673147, 0.9356822846057748, 0.937291272921463, 0.861482177800872, 0.7840391635603201, 0.7678951906700312, 0.8466149888927662, 0.8034876868299072, 0.8339147699240026, 0.7522711674798672, 0.6485916080331862, 0.7709385982594754, 0.06930578800736453, 0.09142878620487205, 0.0653437934291693, 0.08444080288819056, 0.0814840980465722, 0.16652014911278934, 0.08181746502893106, 0.05190379652448196, 0.06542563179760474, 0.06547880353994207, 0.0406809254079058, 0.05322921282507409, 0.10854044783752492, 0.1377626788074987, 0.03655426546944618, 0.09454541259738702, 0.038796710120580946, 0.07524734936826749, 0.8524776266388739, 0.9165165544716953, 0.9697655792965186, 0.6783571155294092, 0.950061243038445, 0.9511418323046968, 0.6922673300049895, 0.9534206764100183, 0.8874226408518497, 0.8331037967405033, 0.6678655732495636, 0.7889727327273213, 0.7826738191369164, 0.7957211026327042, 0.7052116736845682, 0.7501485836916281, 0.7245875399310837, 0.5043632815462336, 0.1501155011399249, 0.13256601307362648, 0.13260380870158484, 0.21686895816085539, 0.20424229723285603, 0.39321692026338173, 0.09939335365131663, 0.11690640416718301, 0.17699714532351085, 0.6890570463768412, 0.13776784564111366, 0.4892561897123332, 0.5993667803568633, 0.34287150849962345, 0.604371481093164, 0.7235218708958469, 0.6427676516132539, 0.13603578360417268, 0.4694396147147438, 0.3999836209549822, 0.43116473090885055, 0.6067320153137159, 0.48222645349934035, 0.4847506629011159, 0.40627929281995234, 0.13592696428471773, 0.44409182963096683, 0.05585149555561142, 0.23746251813142905, 0.04733736649710485, 0.0740248720452853, 0.10015208085017024, 0.10669041777753574, 0.03243711085430501, 0.1409758449314672, 0.09143530868852268, 0.24827540912002477, 0.03491778105250831, 0.07909475825264178, 0.060396795781519574, 0.03193980264421914, 0.0722213265212629, 0.11113064056402833, 0.08397480644117983, 0.1025937497533761, 0.2564405026740654, 0.3230045510638193, 0.1992784017620669, 0.16700606721039712, 0.12963805089345604, 0.10010559873014313, 0.053860903681400285, 0.2984849918719781, 0.401094857925236, 0.2296308679259772, 0.243500768120802, 0.047855046745336915, 0.0957729871879548, 0.12633088500262946, 0.13251014688128326, 0.03054398132205427, 0.10806063518770792, 0.07762888173373794, 0.62240192534324, 0.610951376856217, 0.6238738129872647, 0.642325311132578, 0.607382537450307, 0.616572157236376, 0.6222429549721301, 0.6500029112049567, 0.6552083046642865, 0.022946538758445212, 0.04527162531164719, 0.014180221106624646, 0.07164456857940293, 0.07623498842611187, 0.07194976379658347, 0.05217912950585324, 0.053603606212528354, 0.08784056167663401, 0.2340802848598078, 0.43853045705553806, 0.267209546210457, 0.19943593306830976, 0.18690928593361777, 0.19754436847712686, 0.22230819020081505, 0.26486693209305734, 0.2874063665922356, 0.15611730986036831, 0.22042004480560817, 0.20653411152317092, 0.17800314704649134, 0.49499402276692106, 0.14345876579665306, 0.16230734543279302, 0.16000889111830607, 0.12794057104384504, 0.13475612070724585, 0.40410659935559445, 0.14825519289218136, 0.1950651035214619, 0.1672734802273319, 0.10631791798412682, 0.09111934420474577, 0.21859116575026627, 0.17714496715799355, 0.27125643336282235, 0.3003955445884072, 0.23779489684495259, 0.25131717965042977, 0.20072793930281208, 0.2457477497467342, 0.20085471327572424, 0.21977039250246277, 0.23937431552334132, 0.16989974048388778, 0.1731144109865823, 0.20925110468351293, 0.1746605631589364, 0.19152551544909358, 0.18395188552476205, 0.1804609105963073, 0.16240503925257344, 0.1681801016470874, 0.189714265233085, 0.18970342661401873, 0.18972599873506923, 0.17397237787514763, 0.20239901467730892, 0.1708619759103529, 0.16875890075740352, 0.9588140034315124, 0.17620500294602737, 0.9164734469417916, 0.21276607061098252, 0.8494923006790338, 0.8958674356810572, 0.873503611036264, 0.21415709382360448, 0.8868368730516968, 0.10524291916311945, 0.8819013068746255, 0.2236532774679627, 0.24827719988929786, 0.23421623299573224, 0.25145850423309657, 0.2478539577353438, 0.21122891976322844, 0.2586615904182583, 0.25953198418349177, 0.23666141704260568, 0.08651576237298542, 0.0822434023245402, 0.0748697556174458, 0.07324402423814302, 0.1269724456468253, 0.06822964021668831, 0.08993117634526948, 0.09319856599824905, 0.11779131647610175]}, "mutation_prompt": null}
{"id": "85a62b58-db11-4114-8353-12b99053beb3", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "afdb9805-8ca6-4520-98ac-ce31449eb053", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "9908e355-817e-4caf-b968-0b90d45e37d5", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "6f2cdde0-e239-4c5c-891e-dde902e02f5a", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "62dfdb9a-5d7b-43e7-a902-0e27d57f8fb3", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "130dd428-7a33-4043-b92c-0126c0475fda", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "11fb4c1e-c2ed-4ac8-aad1-565edff21b02", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "34843ba4-9deb-469e-a985-75a33e766cf6", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "495de6ff-8fc0-40a5-b5a6-279357287396", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
{"id": "a6e04753-957a-4571-9dcb-9ccabc24b130", "solution": "class FasterConvergenceDynamicPopulationResizingHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size_min = 10\n        self.pop_size_max = 30\n        self.max_velocity = 0.1 * (5.0 - (-5.0))\n        self.base_mutation_scale = 0.5\n        self.mutation_scale = self.base_mutation_scale\n        self.history_fitness = []\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size_min, self.dim))  # Start with minimum population size\n        velocity = np.zeros((self.pop_size_min, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for t in range(1, self.budget + 1):\n            diversity = np.std(population, axis=0)\n            inertia_weight = 0.9 - 0.5 * np.tanh(np.sqrt(np.sum(diversity)))\n\n            r1, r2 = np.random.rand(), np.random.rand()\n\n            # PSO update\n            velocity = inertia_weight * velocity + 1.49445 * r1 * (pbest - population) + 1.49445 * r2 * (np.tile(gbest, (population.shape[0], 1)) - population)\n            velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n            population += velocity\n\n            # Adaptive mutation based on historical fitness\n            if len(self.history_fitness) > 0:\n                avg_fitness = np.mean(self.history_fitness)\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget) + np.random.normal(0, 0.1) * (diversity / (avg_fitness + 1e-10))\n            else:\n                mutation_scale = self.base_mutation_scale * (1 - t / self.budget)\n            mutant = population + np.random.uniform(-mutation_scale, mutation_scale, (population.shape[0], self.dim)) * (population - population[np.random.randint(population.shape[0], size=population.shape[0])])\n\n            fitness = np.array([func(ind) for ind in mutant])\n            update_indices = fitness < pbest_fitness\n            pbest[update_indices] = mutant[update_indices]\n            pbest_fitness[update_indices] = fitness[update_indices]\n\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            self.history_fitness.append(fitness.mean())\n\n            if t % (self.budget // 10) == 0:  # Resize population every 10% of the budget\n                new_pop_size = max(self.pop_size_min, min(self.pop_size_max, int(self.pop_size_min + (self.pop_size_max - self.pop_size_min) * t / self.budget)))\n                if new_pop_size != population.shape[0]:\n                    population = population[:new_pop_size]\n                    velocity = velocity[:new_pop_size]\n                    pbest = pbest[:new_pop_size]\n                    pbest_fitness = pbest_fitness[:new_pop_size]\n\n        return gbest", "name": "FasterConvergenceDynamicPopulationResizingHybridPSO_DE", "description": "Introducing a novel adaptive inertia weight update mechanism based on population diversity to enhance the convergence speed of the optimization algorithm.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "814783ba-9858-4434-976e-d486fc4dbcc5", "metadata": {"aucs": [0.9396336982196147, 0.9395984611633951, 0.9532961613705985, 0.9319529737403195, 0.9136071332100131, 0.9285835632596148, 0.9353153454700971, 0.9093882870830841, 0.9285389020377036, 0.830766521350604, 0.7896645463951983, 0.7594170943372022, 0.8683314489254664, 0.8117395006400603, 0.7300632854610264, 0.8440875623251829, 0.6987118890685559, 0.8185198254581146, 0.07386654965513373, 0.08517265550371389, 0.050722843126605355, 0.08205752900157481, 0.09511710847921573, 0.058124834344792875, 0.05201724332909308, 0.07913239342281908, 0.04189818348431418, 0.05086846552027868, 0.05655308815843341, 0.07840061398947051, 0.08830986673378172, 0.06077987736977286, 0.020157717884458526, 0.01755700592800058, 0.05490786826050387, 0.04178342388777123, 0.9299687199964484, 0.9681982999780829, 0.9496402711414464, 0.6939525084403986, 0.95446463130926, 0.9305540775573904, 0.8729807585523869, 0.9665131235511583, 0.8865868662123599, 0.8250846201309583, 0.7661413963993986, 0.7974923752804025, 0.7236323146262316, 0.6203844252442916, 0.7117873896888558, 0.7847577240127381, 0.4282653466046703, 0.7302174122205058, 0.21883693084612799, 0.10698162313592563, 0.1325542275800422, 0.16291050049125677, 0.3692842399872269, 0.12716656809510019, 0.06313474707244571, 0.11932257468550722, 0.19947567386739173, 0.13690154541918387, 0.5041708032960456, 0.5808933156875449, 0.7425760555867853, 0.2879921422954622, 0.6194198059558732, 0.6870666659416338, 0.6346168274925936, 0.4939462784217129, 0.3765865124646395, 0.5231362116238443, 0.5388222594812726, 0.6717344136722185, 0.6301039425207442, 0.6495447937968473, 0.7231133347557166, 0.6590633444329259, 0.571527063636279, 0.23008083181546013, 0.06773241876833436, 0.02965672820068943, 0.19926976499755644, 0.06404920212090404, 0.0957889509435258, 0.11970374887439361, 0.07652062224478451, 0.0889401855369657, 0.17087092937754023, 0.15911912817845264, 0.14501256981504007, 0.15961777607597083, 0.07302288511358801, 0.06669511181706456, 0.1660706697715204, 0.16744035526997636, 0.20413390692166777, 0.19420099305015315, 0.22213194014909776, 0.1861422875569133, 0.07241820956265677, 0.3270641378173431, 0.06966515457586575, 0.12629793118920074, 0.2756731646725781, 0.04181106049927752, 0.09502520380949031, 0.1718328205910561, 0.19054980432207647, 0.16241231325962802, 0.1358590304202738, 0.2545198023842784, 0.03823717225962375, 0.12471092544651441, 0.02173622390445129, 0.7594773462084234, 0.6410188315901768, 0.681755150136059, 0.700347868147202, 0.668615174971886, 0.5807641909838108, 0.7218428829375294, 0.6693253406019106, 0.7055925935540338, 0.03625014015518335, 0.07163688636390164, 9.999999999998899e-05, 0.07163945565442298, 0.1034154399817695, 0.07664653344206085, 0.06012477132506189, 0.12133444301135965, 0.07434710691576762, 0.13412339297671516, 0.2947748050150787, 0.23985788078018278, 0.16852687669418942, 0.16674929888425427, 0.2335392918295215, 0.27775326560243585, 0.20372527934924634, 0.23125408536923897, 0.1770480785953943, 0.2278242396083341, 0.1908368362670354, 0.19718412390430318, 0.33165718863998905, 0.16879399073080548, 0.16935277287588124, 0.19371171543569377, 0.1293908098556471, 0.12136678625307418, 0.16572169195013486, 0.07807483774497792, 0.1308100644583985, 0.27188300407266563, 0.16844884239825875, 0.11958306381833916, 0.2227210559356959, 0.09347966370672944, 0.24909831738231436, 0.2895158770619539, 0.21619652114699472, 0.21218562958866682, 0.2771208094653379, 0.21474931941089215, 0.33804359094997694, 0.2519222196484626, 0.2211033320168826, 0.1671962781393882, 0.17694253110140779, 0.1835686520712475, 0.16798012835344256, 0.17811789117256338, 0.17404770380296397, 0.16768951828721856, 0.19263482555729916, 0.17412132573467243, 0.18965234117838037, 0.18943213433901185, 0.10355481023022639, 0.9788969453816283, 0.20213580400354125, 0.17090073460702349, 0.168191026465502, 0.1489568666941523, 0.17884723233399158, 0.9395127650769897, 0.11262417995945984, 0.7764239080802999, 0.08336080930407175, 0.11220894783837643, 0.2118498214087423, 0.8261501543251207, 0.8950016105417666, 0.896062869064777, 0.22686819227503985, 0.20800305904427752, 0.20021008417496278, 0.18598659620968927, 0.2068704827788833, 0.2581692181502896, 0.20975035724447366, 0.22014404657344722, 0.33842140900419493, 0.10623460307957178, 0.06590388164411454, 0.08600758756090776, 0.10181398533669128, 0.13657602766659693, 0.10293927139396186, 0.09735399261531752, 0.08463500180248806, 0.08936889588459473]}, "mutation_prompt": null}
