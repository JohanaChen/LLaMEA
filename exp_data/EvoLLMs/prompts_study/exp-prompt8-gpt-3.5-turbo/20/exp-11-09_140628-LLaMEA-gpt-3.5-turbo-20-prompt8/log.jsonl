{"id": "cc4c71bf-0fca-4efb-93fd-e53cc8ed8f7c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "01d60562-df24-45b5-91c3-bf3e1745e631", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 1, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cc4c71bf-0fca-4efb-93fd-e53cc8ed8f7c", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "5a34fa2e-90f8-4fc8-8159-c6317216ce53", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n        self.population_size = budget\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.population_size)\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            # Dynamic population size adjustment based on individual performance\n            good_individuals = np.sum(fitness < np.mean(fitness))\n            bad_individuals = self.population_size - good_individuals\n            self.population_size = int(self.population_size + 0.1 * (good_individuals - bad_individuals))\n            population = np.vstack((population[sorted_indices[:good_individuals]], np.random.uniform(-5.0, 5.0, (bad_individuals, self.dim))))\n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Implementing a dynamic population size adjustment mechanism based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8911e856-fdc4-42c0-9f58-04b616aff16c", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "72e8637e-e011-4113-8156-6b7c9de8cbec", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "137d022d-33fd-436c-ae5a-59aaa035b42f", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "31f36a4e-c480-4d7e-9c9e-4c78c59a33e6", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "cfcc1018-7d4a-47bf-9b39-9304cde29978", "solution": "import numpy as np\n\nclass DynamicLearningOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                ensemble_mutation_rate = np.mean(self.mutation_rates) + mutation_rate\n                population[:, i] = best_individual[i] + ensemble_mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "DynamicLearningOptimizationAlgorithm", "description": "Employ a dynamic learning rate ensemble strategy in the mutation process to enhance exploration and exploitation, leading to faster convergence.", "configspace": "", "generation": 7, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicLearningOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1fc06ecd-e1d2-44f9-8f84-1744f30fd77b", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            mutation_probs = np.clip(np.exp(np.random.normal(0.5, 0.1, self.dim)), 0.1, 0.9)\n            mutation_strategies = np.random.choice([np.random.standard_normal(self.budget), np.random.uniform(-1, 1, self.budget)], self.dim, p=[0.5, 0.5])\n            \n            for i in range(self.dim):\n                population[:, i] = best_individual[i] + mutation_probs[i] * mutation_strategies[i]\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithmImproved", "description": "Utilizing a dynamic selection of mutation strategies based on individual performance for faster convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {}, "mutation_prompt": null}
{"id": "002d0bf6-1992-4d1c-805c-4e34b08c1a67", "solution": "class EnhancedConvergenceOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.crowding_factor = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget) + self.crowding_factor * np.mean(population[:, i]) * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedConvergenceOptimizationAlgorithm", "description": "Implementing a dynamic crowding factor to encourage diversity in the population and prevent premature convergence, enhancing exploration capabilities.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedConvergenceOptimizationAlgorithm' object has no attribute 'mutation_rates'\").", "error": "AttributeError(\"'EnhancedConvergenceOptimizationAlgorithm' object has no attribute 'mutation_rates'\")", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {}, "mutation_prompt": null}
{"id": "c466838a-c954-4707-9ed5-cdd7dc1366c1", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "fdd31248-c26c-4c5c-8430-31f5b1540ea6", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "88fb0a86-d5ad-483e-b246-ae12b001aecd", "solution": "import numpy as np\n\nclass FastConvergingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                rank_based_mutation_rate = np.clip(self.mutation_rates[i] + (1.0 / (1.0 + np.where(sorted_indices == i)[0][0])), 0.1, 0.9)\n                population[:, i] = best_individual[i] + rank_based_mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "FastConvergingOptimizationAlgorithm", "description": "Implementing a dynamic adaptation of mutation rates based on individual fitness ranks to promote faster convergence in the optimization process.", "configspace": "", "generation": 12, "fitness": 0.09144843562834938, "feedback": "The algorithm FastConvergingOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "86cccc8f-359f-4c03-9f07-8918de430274", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithmFastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1) + 0.2, 0.1, 0.9)  # Increase mutation rate shift\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithmFastConvergence", "description": "Implement a dynamic shift in the mutation rates towards higher values to increase exploration and exploitation in the optimization process.", "configspace": "", "generation": 13, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedOptimizationAlgorithmFastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "52d425c7-a011-4c9a-a14c-2b5d39c7e9cb", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "44ff91d7-84b4-439a-8d9f-9fc550320d06", "solution": "import numpy as np\n\nclass EnhancedFasterOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n    \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                if np.random.random() < 0.5:\n                    mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                else:\n                    mutation_rate = np.clip(self.mutation_rates[i] - np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedFasterOptimizationAlgorithm", "description": "Implement a dynamic learning rate adaptation mechanism based on individual performance to accelerate convergence by adjusting mutation rates towards better solutions.", "configspace": "", "generation": 15, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedFasterOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "be19f301-00af-4cb9-838d-642b908b2149", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "53826a51-b803-42bb-b23f-a390358f73bc", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "57a8b83b-9464-4e7b-9e8b-cf8e15e35d8d", "solution": "import numpy as np\n\nclass AcceleratedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.learning_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            for i in range(self.dim):\n                learning_rate = np.clip(self.learning_rates[i] + 0.1 * (1 / (1 + fitness[i])), 0.1, 0.9)\n                population[:, i] = best_individual[i] + learning_rate * np.random.standard_normal(self.budget)\n\n            fitness = np.array([func(individual) for individual in population])\n\n        return best_individual", "name": "AcceleratedOptimizationAlgorithm", "description": "Implementing a dynamic learning rate adaptation mechanism based on individual fitness to accelerate convergence speed.", "configspace": "", "generation": 18, "fitness": 0.09144843562834938, "feedback": "The algorithm AcceleratedOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "dd7d5b0b-576e-44a5-82c5-bcff01b6f6d8", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            if _ % 10 == 0 and self.budget < 1000:\n                self.budget += 100  # Adjust population size dynamically\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n\n            fitness = np.array([func(individual) for individual in population])\n\n        return best_individual", "name": "EnhancedOptimizationAlgorithmSpeed", "description": "Introducing a dynamic population size adjustment mechanism during the optimization process to adaptively control the exploration and exploitation trade-off, leading to faster convergence.", "configspace": "", "generation": 19, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7a00cb72-64e0-40cb-9558-d767c0885127", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0c922f41-0380-4eb3-aac7-9733e90e0c80", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing dynamic adaptive mutation rates for individuals based on their performance in previous iterations to enhance exploration and exploitation in the optimization algorithm.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d3d9dd26-eccd-4303-8402-ee3a79295ce7", "solution": "class EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.vstack([np.random.uniform(-5.0, 5.0, self.dim) for _ in range(self.budget)])\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.budget)\n            \n            fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Incorporating a diverse population initialization strategy to increase exploration and improve convergence speed.", "configspace": "", "generation": 22, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "bb0971da-2c5f-40ea-84ba-f7b6a73c1bd1", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        pop_sizes = np.random.randint(5, 15, self.budget)\n        \n        for pop_size in pop_sizes:\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            fitness = np.array([func(individual) for individual in population])\n            \n            for _ in range(self.budget):\n                sorted_indices = np.argsort(fitness)\n                best_individual = population[sorted_indices[0]]\n                \n                for i in range(self.dim):\n                    mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                    population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(pop_size)\n                \n                fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithm", "description": "Introducing a dynamic population topology update mechanism by dynamically adjusting the number of individuals in the population to enhance diversity and convergence speed.", "configspace": "", "generation": 23, "fitness": 0.18374386436905946, "feedback": "The algorithm EnhancedOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "01d60562-df24-45b5-91c3-bf3e1745e631", "metadata": {"aucs": [0.33237868714249097, 0.340466537638098, 0.32516864755821784, 0.34500693407100813, 0.32356808043019314, 0.3777874076673534, 0.3492490584296185, 0.36855115514112224, 0.3346539307838685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03566135828000383, 0.08584747481000887, 0.0909909674879047, 0.09144521896495239, 0.11056732587663987, 0.10928369561196183, 0.11026551336903612, 0.10237711166533792, 0.09756845837843953, 0.10180783643219471, 0.07472513092759947, 0.08774870089016473, 0.07459601202028121, 0.09606623084423771, 0.0808543587913726, 0.08069542937380791, 0.08632254164975384, 0.11872499616549337, 0.08042387406193652, 0.9808808884179981, 0.9819695281062965, 0.9783552488544386, 0.980055175287447, 0.9805695571889425, 0.9870300581119047, 0.986945482274868, 0.9883466906729014, 0.9886197564282796, 0.19251131598417337, 0.20677923415172572, 0.20414307636670892, 0.22036763748809995, 0.1919953300500421, 0.2066178658032638, 0.21489180734357438, 0.18982176120745098, 0.19817627217978107, 0.2253502299656942, 0.23768543121553698, 0.2690798663661901, 0.2476190707520607, 0.25565205344414665, 0.2549149623456486, 0.2285191773320625, 0.25046568981251105, 0.2595163571633602, 0.12015135187554693, 0.1285930108464397, 0.1276540559682633, 0.14396026065868706, 0.11143589484896388, 0.11715945554185003, 0.13033622169720416, 0.13610230975142057, 0.13400505921892147, 0.11965799824835721, 0.11395419418682196, 0.12705228406159674, 0.12804110323906825, 0.12631767645547665, 0.12049229594479638, 0.12752973727031314, 0.12219178029745903, 0.1391552950743673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004184705171335734, 0.09758265473651262, 0.03367881127855177, 0.03395659450411148, 9.999999999998899e-05, 0.012747952689730613, 0.045914777503684445, 0.09168324037984643, 0.05115433134430836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0744875435524307, 0.06469444523888146, 0.06519503384031466, 0.06090328655860555, 0.059223915311858, 0.06509455108225193, 0.04014670850455859, 0.0679252126995552, 0.03871885531028041, 0.335281297026624, 0.3465154489271143, 0.33976321107816476, 0.3514464382293705, 0.3294929130519447, 0.33681093264449335, 0.3495829103066862, 0.3343309952677449, 0.3441968861521506, 0.09835150103837131, 0.09078241074171778, 0.10275503501606276, 0.08514019835728981, 0.09192933085235055, 0.093616546042249, 0.11191840593288782, 0.08809079076968251, 0.08686186320270861, 0.1480723573809033, 0.16221473474456594, 0.20881746064026052, 0.14322212178795035, 0.15140853894404394, 0.1826625250984556, 0.15054236539412702, 0.14991121040400235, 0.18392750273075464, 0.2461965023828182, 0.23961541764944683, 0.23920757017002015, 0.24713338272819052, 0.25204985456875095, 0.24325389386994933, 0.2438531348191576, 0.2424690644971369, 0.2464667812697553, 0.19841933034393544, 0.21316754459807385, 0.18056528701781538, 0.18256710949769372, 0.1941570198119248, 0.17484285553523315, 0.18057078251986936, 0.1707370643256494, 0.18982034520284063, 0.21616991614166925, 0.20910831089327753, 0.20467575207127653, 0.20945416403273065, 0.18690933306516755, 0.19757166163199114, 0.1866310382556562, 0.21281570923274662, 0.1877313495416052, 0.20312007468539517, 0.17854867563466437, 0.192145918868166, 0.1866763248354325, 0.21041470564144626, 0.1871311851077826, 0.18209818686633072, 0.18366941997740305, 0.18356804639884416, 0.14073663410826498, 0.20838413231090058, 0.17431789364434913, 0.16773350979047807, 0.14520799976897014, 0.15259489052859243, 0.17232477223577147, 0.15054461773829209, 0.17700688230971973, 0.426347336602261, 0.20577166257043433, 0.4599980881598499, 0.20515353242347212, 0.20950772576024712, 0.1532769679307916, 0.10495888980035506, 0.168194517135685, 0.1151227732805431, 0.18720580083430993, 0.18403512361383267, 0.1729229017390571, 0.18132822365939305, 0.1982792131075325, 0.18484297032015917, 0.1922000218032366, 0.19084348794055184, 0.16536875789150451, 0.08245647871657125, 0.09788847371084064, 0.10376079503600288, 0.08023344150559186, 0.09132269829902784, 0.09011382476726504, 0.09883773071032265, 0.07483370129459344, 0.07037478354496562]}, "mutation_prompt": null}
{"id": "76d16f2b-2392-4620-a18d-c20b85627a71", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithmFasterConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        pop_sizes = np.random.randint(5, 15, self.budget)\n        \n        for pop_size in pop_sizes:\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            fitness = np.array([func(individual) for individual in population])\n            \n            for _ in range(self.budget):\n                sorted_indices = np.argsort(fitness)\n                best_individual = population[sorted_indices[0]]\n                \n                global_best = population[sorted_indices[0]]\n                local_best = population[sorted_indices[1]]\n                \n                for i in range(self.dim):\n                    mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                    population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(pop_size)\n                \n                fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithmFasterConvergence", "description": "Introducing an adaptive mutation strategy based on a dynamic blend of global and local best individuals to enhance exploration and exploitation balance.", "configspace": "", "generation": 24, "fitness": 0.18523041261160636, "feedback": "The algorithm EnhancedOptimizationAlgorithmFasterConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "bb0971da-2c5f-40ea-84ba-f7b6a73c1bd1", "metadata": {"aucs": [0.35883892734321376, 0.3180994559649333, 0.34752771582501596, 0.34255023838764764, 0.35331306579426136, 0.35733835873757014, 0.31975459154505004, 0.3224872405603564, 0.35306114458699556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11200680864677559, 0.09414841552296549, 0.1008612773129951, 0.09858487124207116, 0.09818289432464355, 0.10471640403967286, 0.08814306558488716, 0.106569325910292, 0.10553483153291598, 0.08260234787633525, 0.08609234729388193, 0.10537805896113694, 0.08408094770520569, 0.09285681410310243, 0.0905014645559008, 0.07946815498030046, 0.1037134397988233, 0.08140455776543731, 0.9813807230838506, 0.983978554780799, 0.9773619330366168, 0.9777244346404163, 0.9770350909397502, 0.9828519348809511, 0.9849576695787489, 0.9875992333704243, 0.987177238400688, 0.19736680999896428, 0.19874820305922614, 0.20593770249503462, 0.19254726808386446, 0.20734713824929474, 0.21121186564329109, 0.19925512901381737, 0.21448807499358147, 0.19625581203303055, 0.23041464899545594, 0.2316099543510689, 0.24659515531632248, 0.2475146449020964, 0.27832335749638026, 0.26904990883485536, 0.2313606797225659, 0.2429728816168436, 0.25162930131045813, 0.14348400707985853, 0.12932017653933003, 0.12429174242260466, 0.1522650612088382, 0.12604397272157675, 0.13003914983315046, 0.13097480632851766, 0.12363786733976756, 0.1340382130386666, 0.1252627164675323, 0.13037130291029042, 0.14047929672975223, 0.1314312302682843, 0.11534104086628283, 0.1411143211164132, 0.14597126999170884, 0.12593342238434957, 0.13254579954758594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021361152810994044, 0.07216186539477765, 0.062180421737981106, 0.066522762214266, 0.013195544944543003, 0.03705381150504705, 0.012326850882439011, 0.05388773195393293, 0.06920927008053712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05524360738947076, 0.05623474368026071, 0.06121230238788489, 0.056184169919686555, 0.057818218437777014, 0.07842034335941006, 0.0696378010343024, 0.0902767002426752, 0.05547101218129524, 0.3490383852138328, 0.3260053645873323, 0.3542618560988553, 0.33701948443892726, 0.35451310449124507, 0.3217723195259454, 0.37136070506301566, 0.3351981130547531, 0.3341736699969974, 0.09127025928439558, 0.09780067504444012, 0.10340853171433395, 0.1123118177836121, 0.08699590751672293, 0.10794437462256612, 0.10511600142269739, 0.09335515506264858, 0.0886397308680984, 0.16475219553408438, 0.1742590997427762, 0.16201845545829952, 0.1456858301498849, 0.17372886399111032, 0.1916368184978956, 0.15552095482626505, 0.16241566882161607, 0.1723278669660997, 0.24679432626425402, 0.2556940561258578, 0.2413315654769893, 0.24780807152306317, 0.2568819223281251, 0.2413712312708607, 0.25669927902870426, 0.2589651376547265, 0.2608419391108757, 0.18716451730001082, 0.1913416053219612, 0.17788090178467375, 0.1893371990567675, 0.2076489776866205, 0.20191010021769995, 0.1762149855527938, 0.19051070673008863, 0.18783462227775216, 0.2420795426289214, 0.19939819898426203, 0.20484154448557834, 0.1993658822635277, 0.19185812240753586, 0.20081857865928088, 0.20936043528917914, 0.19179868441321501, 0.1991995290900921, 0.1814398872062749, 0.17742734096218027, 0.1837053898814225, 0.19579901120997156, 0.1884670855898951, 0.17807151757070883, 0.18523165856007906, 0.1935923159001266, 0.18071930706847528, 0.12070752222892223, 0.18767383881973676, 0.17403084958678683, 0.14790519188123252, 0.37352450108703383, 0.14893147873549573, 0.17246628373177408, 0.12194757509874032, 0.1752119517717723, 0.37169579204657366, 0.2107140626570102, 0.38529602673185515, 0.20906872691104705, 0.21234643431885203, 0.11150627888298825, 0.10492127516221539, 0.16845110540206387, 0.08283189748248065, 0.19502722580029153, 0.181236714359428, 0.18202409100516703, 0.18502722675602656, 0.19003930831489824, 0.20360501427116184, 0.17487238993892884, 0.19301131331501886, 0.18655932539134024, 0.09154869980241531, 0.11183805286521642, 0.09021252109035927, 0.08784760965089244, 0.08143574964672684, 0.0848750653330348, 0.1021276476378018, 0.09803751066533639, 0.08512065738277574]}, "mutation_prompt": null}
{"id": "051cc177-4594-46f4-b38d-708b5e8213a4", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithmFasterConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.recombination_factors = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        pop_sizes = np.random.randint(5, 15, self.budget)\n        \n        for pop_size in pop_sizes:\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            fitness = np.array([func(individual) for individual in population])\n            \n            for _ in range(self.budget):\n                sorted_indices = np.argsort(fitness)\n                best_individual = population[sorted_indices[0]]\n                \n                global_best = population[sorted_indices[0]]\n                local_best = population[sorted_indices[1]]\n\n                distances = np.linalg.norm(population.reshape((pop_size, 1, self.dim)) - population, axis=2)\n                recombination_matrix = np.exp(-distances)\n                \n                for i in range(self.dim):\n                    recombination_factor = np.clip(self.recombination_factors[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                    population[:, i] = recombination_factor * global_best[i] + (1 - recombination_factor) * local_best[i] + np.sum(recombination_matrix * (population[:, i] - np.mean(population, axis=0)), axis=1)\n                \n                fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithmFasterConvergence", "description": "Implementing a novel adaptive recombination strategy based on the distance between individuals to enhance exploration and convergence speed.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (5,) ')", "parent_id": "76d16f2b-2392-4620-a18d-c20b85627a71", "metadata": {}, "mutation_prompt": null}
{"id": "2f8a54bc-981e-4055-9821-076b8d76a056", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithmFasterConvergenceImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        pop_sizes = np.random.randint(5, 15, self.budget)\n        \n        for pop_size in pop_sizes:\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            fitness = np.array([func(individual) for individual in population])\n            \n            for _ in range(self.budget):\n                sorted_indices = np.argsort(fitness)\n                best_individual = population[sorted_indices[0]]\n                \n                global_best = population[sorted_indices[0]]\n                local_best = population[sorted_indices[1]]\n                \n                for i in range(self.dim):\n                    mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                    fitness_diff = (best_individual - population) @ (best_individual - population).T\n                    mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                    population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(pop_size)\n                \n                fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithmFasterConvergenceImproved", "description": "Introducing a novel adaptive mutation strategy that dynamically adjusts mutation rates based on individual fitness to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 26, "fitness": 0.1858708227654099, "feedback": "The algorithm EnhancedOptimizationAlgorithmFasterConvergenceImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "76d16f2b-2392-4620-a18d-c20b85627a71", "metadata": {"aucs": [0.34897266180039466, 0.34020516306767246, 0.36109988620983346, 0.3401698474726279, 0.35030147447175697, 0.35064716370526716, 0.36238993367560945, 0.3751489898993342, 0.3368176075784999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11666551100593947, 0.08791172337940656, 0.09177099637384656, 0.09621170706215931, 0.1054713206146295, 0.09273475290080113, 0.0815319615160306, 0.12424207580490854, 0.08649695173427807, 0.07688359513908927, 0.08659866815616202, 0.08755830527714858, 0.08505397378425172, 0.08827962099752917, 0.0826463190517075, 0.08209776473823949, 0.07926610629737352, 0.10908691479555022, 0.9809223441342245, 0.9845986816671273, 0.9798177850275845, 0.9777496074105738, 0.9782893093964272, 0.9849834778842527, 0.9850888286355538, 0.9881966062935228, 0.9863263340550453, 0.19589370898692549, 0.1913427512374577, 0.20718462445596408, 0.19273608205415582, 0.20192618512815153, 0.2461763952788899, 0.19993473069045808, 0.19002495145592035, 0.20555360639233966, 0.24071827310041494, 0.22112197187362048, 0.2554926263872245, 0.245270704357883, 0.2628859770085915, 0.2648902797460937, 0.26865100310525747, 0.23856572839444778, 0.24952556563153228, 0.1277443915662161, 0.1435578038139571, 0.12725710731872786, 0.13051601323461548, 0.14621847623324502, 0.13659193032321781, 0.12622197693225257, 0.12321065878867377, 0.13216654123973004, 0.1519780120697264, 0.12837443659164505, 0.1330107235059429, 0.12659706059322395, 0.13242718859936597, 0.16065070525825542, 0.14011294764387783, 0.12158802893768117, 0.14009559475994882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02775471586727163, 0.0739433636859943, 0.054144575360181024, 0.018619441680642224, 0.0071009194103413, 0.047480616203895654, 9.999999999998899e-05, 0.04145402722156721, 0.06573403745949269, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05939893795248574, 0.06529293399180769, 0.05129129421283707, 0.07959420495719549, 0.05231432727800167, 0.07206975837771279, 0.06933284481557567, 0.0618168336871695, 0.060201286172586466, 0.31790410756655385, 0.339596822602226, 0.3330931758110163, 0.33283292685929844, 0.3347109004630916, 0.36610500926430156, 0.3463880077612851, 0.35100288329455775, 0.3672219140653027, 0.09253234163436264, 0.1043111147461524, 0.12258170251689093, 0.09277744123517695, 0.09943236661630639, 0.11236163937266441, 0.09266421264653524, 0.09049464131826157, 0.10206826336214159, 0.1751079083160061, 0.1878650208580751, 0.1650146600104706, 0.1904341571225634, 0.15690672384924442, 0.1686963436791209, 0.1688277577554098, 0.17435071117165102, 0.19751380021395426, 0.23803238291031648, 0.24395957783272926, 0.24091296157595432, 0.24336408326818948, 0.24407893141140646, 0.2849554590705716, 0.25539856336613065, 0.25661831911684907, 0.24727447558631022, 0.1894209214963375, 0.17405776528584105, 0.18749575277012032, 0.18173504533293006, 0.19407046455034183, 0.2004525664338659, 0.18767203755160267, 0.18566461385915645, 0.17779027769575295, 0.2146441261557246, 0.22045946709597442, 0.19554765995478296, 0.2253287948632594, 0.2161175416928185, 0.20972422361333998, 0.20499251848946065, 0.21950250091492007, 0.22181183339731247, 0.17844086817467664, 0.18350360162250856, 0.18624318542376306, 0.18085859782086933, 0.18012005934871544, 0.18334625987257314, 0.17740129311620167, 0.1855837258991998, 0.179582538892614, 0.15663829533765206, 0.18474486882798047, 0.17608539999066797, 0.16767494812728545, 0.2790862995712823, 0.15256902172896447, 0.1740446135857031, 0.12204184951319097, 0.1758051027304336, 0.41342353421231604, 0.2101093594589757, 0.39657441092722456, 0.20938303491731136, 0.20980139024473565, 0.11189677737209947, 0.1048206156902094, 0.16746991671571054, 0.08252087996564317, 0.1707347430341739, 0.18817290946920562, 0.18032714739675904, 0.18629262703638338, 0.1786300489309942, 0.17916139207213533, 0.18218493276193248, 0.20242304629558028, 0.1762855916358338, 0.08586224175734791, 0.12374890340226463, 0.10383039097745717, 0.07490727657685547, 0.07284793137302714, 0.08023232781877454, 0.11394414779773654, 0.09247883948650237, 0.09359049896769889]}, "mutation_prompt": null}
{"id": "e723e2f4-227f-4c40-8ea7-b7b7616f1710", "solution": "import numpy as np\n\nclass DynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (10, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n            \n            for i in range(self.dim):\n                mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(10)\n            \n            fitness = np.array([func(individual) for individual in population])\n            \n            if np.random.uniform() < 0.5:\n                pop_size = np.random.randint(5, 15)\n                new_individuals = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_individuals])\n                population = np.vstack([population, new_individuals])\n                fitness = np.concatenate([fitness, new_fitness])\n\n                if len(fitness) > 100:\n                    worst_indices = np.argsort(fitness)[::-1][:10]\n                    population = np.delete(population, worst_indices, axis=0)\n                    fitness = np.delete(fitness, worst_indices)\n        \n        return best_individual", "name": "DynamicPopulationSizeOptimizationAlgorithm", "description": "Implementing a dynamic population size strategy to adjust the number of individuals based on fitness for more effective exploration and exploitation balance leading to faster convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (20,) (10,) ').", "error": "ValueError('operands could not be broadcast together with shapes (20,) (10,) ')", "parent_id": "2f8a54bc-981e-4055-9821-076b8d76a056", "metadata": {}, "mutation_prompt": null}
{"id": "3fa0351f-e812-47b8-9a35-7002437d21df", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithmFasterConvergenceImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        pop_sizes = np.random.randint(5, 15, self.budget)\n        \n        for pop_size in pop_sizes:\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            fitness = np.array([func(individual) for individual in population])\n            \n            for _ in range(self.budget):\n                sorted_indices = np.argsort(fitness)\n                best_individual = population[sorted_indices[0]]\n                \n                global_best = population[sorted_indices[0]]\n                local_best = population[sorted_indices[1]]\n                \n                for i in range(self.dim):\n                    mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                    fitness_diff = (best_individual - population) @ (best_individual - population).T\n                    mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                    population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(pop_size)\n                \n                fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithmFasterConvergenceImproved", "description": "Introducing a novel adaptive mutation strategy that dynamically adjusts mutation rates based on individual fitness to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f8a54bc-981e-4055-9821-076b8d76a056", "metadata": {"aucs": [0.34897266180039466, 0.34020516306767246, 0.36109988620983346, 0.3401698474726279, 0.35030147447175697, 0.35064716370526716, 0.36238993367560945, 0.3751489898993342, 0.3368176075784999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11666551100593947, 0.08791172337940656, 0.09177099637384656, 0.09621170706215931, 0.1054713206146295, 0.09273475290080113, 0.0815319615160306, 0.12424207580490854, 0.08649695173427807, 0.07688359513908927, 0.08659866815616202, 0.08755830527714858, 0.08505397378425172, 0.08827962099752917, 0.0826463190517075, 0.08209776473823949, 0.07926610629737352, 0.10908691479555022, 0.9809223441342245, 0.9845986816671273, 0.9798177850275845, 0.9777496074105738, 0.9782893093964272, 0.9849834778842527, 0.9850888286355538, 0.9881966062935228, 0.9863263340550453, 0.19589370898692549, 0.1913427512374577, 0.20718462445596408, 0.19273608205415582, 0.20192618512815153, 0.2461763952788899, 0.19993473069045808, 0.19002495145592035, 0.20555360639233966, 0.24071827310041494, 0.22112197187362048, 0.2554926263872245, 0.245270704357883, 0.2628859770085915, 0.2648902797460937, 0.26865100310525747, 0.23856572839444778, 0.24952556563153228, 0.1277443915662161, 0.1435578038139571, 0.12725710731872786, 0.13051601323461548, 0.14621847623324502, 0.13659193032321781, 0.12622197693225257, 0.12321065878867377, 0.13216654123973004, 0.1519780120697264, 0.12837443659164505, 0.1330107235059429, 0.12659706059322395, 0.13242718859936597, 0.16065070525825542, 0.14011294764387783, 0.12158802893768117, 0.14009559475994882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02775471586727163, 0.0739433636859943, 0.054144575360181024, 0.018619441680642224, 0.0071009194103413, 0.047480616203895654, 9.999999999998899e-05, 0.04145402722156721, 0.06573403745949269, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05939893795248574, 0.06529293399180769, 0.05129129421283707, 0.07959420495719549, 0.05231432727800167, 0.07206975837771279, 0.06933284481557567, 0.0618168336871695, 0.060201286172586466, 0.31790410756655385, 0.339596822602226, 0.3330931758110163, 0.33283292685929844, 0.3347109004630916, 0.36610500926430156, 0.3463880077612851, 0.35100288329455775, 0.3672219140653027, 0.09253234163436264, 0.1043111147461524, 0.12258170251689093, 0.09277744123517695, 0.09943236661630639, 0.11236163937266441, 0.09266421264653524, 0.09049464131826157, 0.10206826336214159, 0.1751079083160061, 0.1878650208580751, 0.1650146600104706, 0.1904341571225634, 0.15690672384924442, 0.1686963436791209, 0.1688277577554098, 0.17435071117165102, 0.19751380021395426, 0.23803238291031648, 0.24395957783272926, 0.24091296157595432, 0.24336408326818948, 0.24407893141140646, 0.2849554590705716, 0.25539856336613065, 0.25661831911684907, 0.24727447558631022, 0.1894209214963375, 0.17405776528584105, 0.18749575277012032, 0.18173504533293006, 0.19407046455034183, 0.2004525664338659, 0.18767203755160267, 0.18566461385915645, 0.17779027769575295, 0.2146441261557246, 0.22045946709597442, 0.19554765995478296, 0.2253287948632594, 0.2161175416928185, 0.20972422361333998, 0.20499251848946065, 0.21950250091492007, 0.22181183339731247, 0.17844086817467664, 0.18350360162250856, 0.18624318542376306, 0.18085859782086933, 0.18012005934871544, 0.18334625987257314, 0.17740129311620167, 0.1855837258991998, 0.179582538892614, 0.15663829533765206, 0.18474486882798047, 0.17608539999066797, 0.16767494812728545, 0.2790862995712823, 0.15256902172896447, 0.1740446135857031, 0.12204184951319097, 0.1758051027304336, 0.41342353421231604, 0.2101093594589757, 0.39657441092722456, 0.20938303491731136, 0.20980139024473565, 0.11189677737209947, 0.1048206156902094, 0.16746991671571054, 0.08252087996564317, 0.1707347430341739, 0.18817290946920562, 0.18032714739675904, 0.18629262703638338, 0.1786300489309942, 0.17916139207213533, 0.18218493276193248, 0.20242304629558028, 0.1762855916358338, 0.08586224175734791, 0.12374890340226463, 0.10383039097745717, 0.07490727657685547, 0.07284793137302714, 0.08023232781877454, 0.11394414779773654, 0.09247883948650237, 0.09359049896769889]}, "mutation_prompt": null}
{"id": "651fd213-9ee0-4671-8a93-8c0625b42a97", "solution": "import numpy as np\n\nclass EnhancedOptimizationAlgorithmFasterConvergenceImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rates = np.full(dim, 0.5)\n\n    def __call__(self, func):\n        pop_sizes = np.random.randint(5, 15, self.budget)\n        \n        for pop_size in pop_sizes:\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            fitness = np.array([func(individual) for individual in population])\n            \n            for _ in range(self.budget):\n                sorted_indices = np.argsort(fitness)\n                best_individual = population[sorted_indices[0]]\n                \n                global_best = population[sorted_indices[0]]\n                local_best = population[sorted_indices[1]]\n                \n                for i in range(self.dim):\n                    mutation_rate = np.clip(self.mutation_rates[i] + np.random.normal(0, 0.1), 0.1, 0.9)\n                    fitness_diff = (best_individual - population) @ (best_individual - population).T\n                    mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                    population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(pop_size)\n                \n                fitness = np.array([func(individual) for individual in population])\n        \n        return best_individual", "name": "EnhancedOptimizationAlgorithmFasterConvergenceImproved", "description": "Introducing a novel adaptive mutation strategy that dynamically adjusts mutation rates based on individual fitness to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2f8a54bc-981e-4055-9821-076b8d76a056", "metadata": {"aucs": [0.34897266180039466, 0.34020516306767246, 0.36109988620983346, 0.3401698474726279, 0.35030147447175697, 0.35064716370526716, 0.36238993367560945, 0.3751489898993342, 0.3368176075784999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11666551100593947, 0.08791172337940656, 0.09177099637384656, 0.09621170706215931, 0.1054713206146295, 0.09273475290080113, 0.0815319615160306, 0.12424207580490854, 0.08649695173427807, 0.07688359513908927, 0.08659866815616202, 0.08755830527714858, 0.08505397378425172, 0.08827962099752917, 0.0826463190517075, 0.08209776473823949, 0.07926610629737352, 0.10908691479555022, 0.9809223441342245, 0.9845986816671273, 0.9798177850275845, 0.9777496074105738, 0.9782893093964272, 0.9849834778842527, 0.9850888286355538, 0.9881966062935228, 0.9863263340550453, 0.19589370898692549, 0.1913427512374577, 0.20718462445596408, 0.19273608205415582, 0.20192618512815153, 0.2461763952788899, 0.19993473069045808, 0.19002495145592035, 0.20555360639233966, 0.24071827310041494, 0.22112197187362048, 0.2554926263872245, 0.245270704357883, 0.2628859770085915, 0.2648902797460937, 0.26865100310525747, 0.23856572839444778, 0.24952556563153228, 0.1277443915662161, 0.1435578038139571, 0.12725710731872786, 0.13051601323461548, 0.14621847623324502, 0.13659193032321781, 0.12622197693225257, 0.12321065878867377, 0.13216654123973004, 0.1519780120697264, 0.12837443659164505, 0.1330107235059429, 0.12659706059322395, 0.13242718859936597, 0.16065070525825542, 0.14011294764387783, 0.12158802893768117, 0.14009559475994882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02775471586727163, 0.0739433636859943, 0.054144575360181024, 0.018619441680642224, 0.0071009194103413, 0.047480616203895654, 9.999999999998899e-05, 0.04145402722156721, 0.06573403745949269, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05939893795248574, 0.06529293399180769, 0.05129129421283707, 0.07959420495719549, 0.05231432727800167, 0.07206975837771279, 0.06933284481557567, 0.0618168336871695, 0.060201286172586466, 0.31790410756655385, 0.339596822602226, 0.3330931758110163, 0.33283292685929844, 0.3347109004630916, 0.36610500926430156, 0.3463880077612851, 0.35100288329455775, 0.3672219140653027, 0.09253234163436264, 0.1043111147461524, 0.12258170251689093, 0.09277744123517695, 0.09943236661630639, 0.11236163937266441, 0.09266421264653524, 0.09049464131826157, 0.10206826336214159, 0.1751079083160061, 0.1878650208580751, 0.1650146600104706, 0.1904341571225634, 0.15690672384924442, 0.1686963436791209, 0.1688277577554098, 0.17435071117165102, 0.19751380021395426, 0.23803238291031648, 0.24395957783272926, 0.24091296157595432, 0.24336408326818948, 0.24407893141140646, 0.2849554590705716, 0.25539856336613065, 0.25661831911684907, 0.24727447558631022, 0.1894209214963375, 0.17405776528584105, 0.18749575277012032, 0.18173504533293006, 0.19407046455034183, 0.2004525664338659, 0.18767203755160267, 0.18566461385915645, 0.17779027769575295, 0.2146441261557246, 0.22045946709597442, 0.19554765995478296, 0.2253287948632594, 0.2161175416928185, 0.20972422361333998, 0.20499251848946065, 0.21950250091492007, 0.22181183339731247, 0.17844086817467664, 0.18350360162250856, 0.18624318542376306, 0.18085859782086933, 0.18012005934871544, 0.18334625987257314, 0.17740129311620167, 0.1855837258991998, 0.179582538892614, 0.15663829533765206, 0.18474486882798047, 0.17608539999066797, 0.16767494812728545, 0.2790862995712823, 0.15256902172896447, 0.1740446135857031, 0.12204184951319097, 0.1758051027304336, 0.41342353421231604, 0.2101093594589757, 0.39657441092722456, 0.20938303491731136, 0.20980139024473565, 0.11189677737209947, 0.1048206156902094, 0.16746991671571054, 0.08252087996564317, 0.1707347430341739, 0.18817290946920562, 0.18032714739675904, 0.18629262703638338, 0.1786300489309942, 0.17916139207213533, 0.18218493276193248, 0.20242304629558028, 0.1762855916358338, 0.08586224175734791, 0.12374890340226463, 0.10383039097745717, 0.07490727657685547, 0.07284793137302714, 0.08023232781877454, 0.11394414779773654, 0.09247883948650237, 0.09359049896769889]}, "mutation_prompt": null}
{"id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "solution": "import numpy as np\n\nclass DynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicPopulationResizingOptimizationAlgorithm", "description": "Implementing a dynamic population resizing strategy to adaptively adjust the population size based on individual fitness to accelerate convergence.", "configspace": "", "generation": 30, "fitness": 0.19431083306376268, "feedback": "The algorithm DynamicPopulationResizingOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "2f8a54bc-981e-4055-9821-076b8d76a056", "metadata": {"aucs": [0.3232095492248862, 0.34125959575464615, 0.4225862998216351, 0.3530564453609488, 0.34077670602035537, 0.3148119473770389, 0.34515241624884163, 0.33219866104388396, 0.34358581650693265, 9.999999999998899e-05, 0.006518230681970993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09689913989254617, 0.10072847864891177, 0.09211556438690172, 0.0948214425564694, 0.09686732909881668, 0.09009487530526983, 0.11549367053068382, 0.09583247529584804, 0.10364752937230837, 0.10176995596723204, 0.07767812586495215, 0.11644217336432106, 0.09097449952883274, 0.09127020133266728, 0.09221007721148511, 0.08261546274887044, 0.08112978901379464, 0.07847740362065492, 0.9812476457186357, 0.9800480586417907, 0.9820440482315653, 0.985615541019499, 0.9784207802802315, 0.9776411937779453, 0.980137599244539, 0.9770778156394823, 0.977723834311227, 0.19165816132214364, 0.1969144343895306, 0.18599681337081642, 0.22004679380800374, 0.1933766001343158, 0.19679433301853144, 0.1955236286585459, 0.19281900114624362, 0.18575842070841686, 0.2470185757828378, 0.207143834338386, 0.25505986658548674, 0.2686181749161851, 0.2721775559943389, 0.31157774550642237, 0.2770362564511406, 0.2508316488490312, 0.24901451693625876, 0.1160650536821255, 0.14940297878383957, 0.12537256208622716, 0.12607222553246833, 0.12186801252933288, 0.12383317431118213, 0.1367839851908379, 0.12809990950655614, 0.13013018420405764, 0.1410534739928937, 0.12281942121419431, 0.11289213412397525, 0.12166421553569962, 0.14753793752220512, 0.12367123184890683, 0.12269845118288358, 0.1462791024674469, 0.11496910619053813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10541691093688077, 0.11362071144294261, 0.08244491716028801, 0.0861592175276783, 0.09773600479584454, 0.09500908825091936, 0.11469852352528265, 0.08786972924626313, 0.11478746462612022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05069860947129379, 0.052771892557983646, 0.05419752026141955, 0.07058888202859526, 0.049344038230666576, 0.05745216361407912, 0.04863957195838575, 0.0535884889853927, 0.04563052110239718, 0.33443345881662934, 0.33803801215107565, 0.3427883960949434, 0.3400301150305226, 0.3610087604581993, 0.32649687940865313, 0.3212553923906738, 0.3412050355191665, 0.34048209186724065, 0.09532521253287718, 0.09435794121466934, 0.09288043370537047, 0.10369179082107205, 0.10283608894188767, 0.1041369985415469, 0.10910397965474805, 0.08909163230475714, 0.09366231478959142, 0.16232921375916232, 0.15533866360089066, 0.15859466159136792, 0.16536823680086943, 0.1566094603724152, 0.1617643557394033, 0.16661919924684165, 0.20677400706778537, 0.16933629687108154, 0.24852370869922558, 0.24773495794452205, 0.2599146411397084, 0.26246964175106546, 0.2408144110463436, 0.23099027172074937, 0.2562650615338018, 0.241897882032166, 0.23785641361997667, 0.18995040360158144, 0.19825191973086798, 0.18539032344515705, 0.18890987488766042, 0.18591619299539064, 0.20593823238652031, 0.17484615054919905, 0.17608087951640505, 0.1857348351072735, 0.22545096849252955, 0.21169588632332936, 0.2315099738265256, 0.2085489192646366, 0.20279757002148013, 0.20259667086875666, 0.1925014937246159, 0.21317830988265474, 0.20028787978467566, 0.17473769908846848, 0.20485531889670638, 0.18825279277714946, 0.1809728256137545, 0.1799093848991441, 0.1806458053492963, 0.18241042251931083, 0.20650880581320652, 0.17950031501934915, 0.18216464711096192, 0.16794691784441895, 0.4786006080385512, 0.4634240961459859, 0.19497775060265576, 0.3969437006109747, 0.18885984654183652, 0.24089072310619308, 0.1697513124435891, 0.290352280431752, 0.3065493436854263, 0.4145931406972183, 0.4517029731353305, 0.15411672161296197, 0.20586233480688354, 0.13134288119889448, 0.41498597620203614, 0.33591939583400243, 0.18574663542353465, 0.18009998422771045, 0.18441825152685165, 0.18367063711872655, 0.18000647962525507, 0.18102487961127545, 0.1833256954697875, 0.1792631181065022, 0.18990542221058926, 0.08273338856806534, 0.08882940943570428, 0.09513830270052459, 0.09631647948676747, 0.10144512285482377, 0.07565136712507137, 0.0838430009656258, 0.08119102455236038, 0.078126463356183]}, "mutation_prompt": null}
{"id": "ce65b5d1-4b9c-4e2b-8fc0-1726131a1e83", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                # Enhanced mutation strategy\n                mutation_rate = 0.8 + 0.2 * np.exp(-5 * fitness_diff[i] / self.dim)\n                population[:, i] = 0.7*global_best[i] + 0.3*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithm", "description": "Implementing a novel mutation strategy with dynamic adaptation of mutation rates based on individual fitness to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 31, "fitness": 0.09413558049236805, "feedback": "The algorithm EnhancedDynamicPopulationResizingOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.16252566480139563, 0.16050056444402294, 0.17025544426139605, 0.21409964565828699, 0.17404576645583258, 0.2599049391001307, 0.2010410242148971, 0.18712473315329792, 0.1724882051106208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051536669253757994, 0.03683834568653277, 0.053529535478340384, 0.050695375608180604, 0.04527222551459331, 0.0427685595862497, 0.0431440714987803, 0.04019444787135251, 0.05891524758331601, 0.03043186918307783, 0.023893137869717473, 0.041902436722797254, 0.034012285388454466, 0.03513462180202387, 0.03498020630924259, 0.037966206545331116, 0.043275480715938675, 0.03315084150026615, 0.08244031474410007, 0.08010500143213961, 0.10270570916924915, 0.08498691943683812, 0.08482491796695124, 0.2228817586746844, 0.07980448168280052, 0.07188623360918589, 0.08357985208082064, 0.07289586694401173, 0.09314189412677676, 0.08080423566553419, 0.05762241982562044, 0.08267885402292707, 0.07948073471616413, 0.08963782213034133, 0.0776149915473412, 0.07132038714209665, 0.15907308441511958, 0.12362765220446403, 0.13371982319338327, 0.12664461058489485, 0.1258570043572117, 0.10718866110012548, 0.13004785630155258, 0.1134232469529104, 0.13061140257004789, 0.012086703540142074, 0.0038496646750836305, 0.02531510214489152, 0.0014227856344779521, 0.047480888814532385, 0.002270161939678994, 0.00916632836832354, 0.006127401649702713, 0.04168491112242012, 0.05039032702825319, 9.999999999998899e-05, 9.999999999998899e-05, 0.019014725973082403, 0.0038475545659195642, 0.006909335790712623, 0.002458512369340915, 9.999999999998899e-05, 0.035769096997452676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05922381946635069, 0.09756287402472752, 0.0675963083241693, 0.030800159947503403, 0.025283696458330396, 0.07492059499469705, 0.06882877268847531, 0.04597714363488581, 0.06504793457600411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006641379148344395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013586441627691737, 0.003181835092503582, 9.999999999998899e-05, 9.999999999998899e-05, 0.18624747714979895, 0.19334552647138759, 0.22862334152722608, 0.29102652775431104, 0.21208947597568029, 0.2475867602674291, 0.22398540236537778, 0.19517183403413452, 0.24412328824242846, 0.05777046333237945, 0.038532531459655184, 0.04072345398647503, 0.04922028750730101, 0.05002417457986774, 0.05937233690404864, 0.043599781787084235, 0.05104667971874699, 0.035126251834606825, 0.15044601268288804, 0.1476995221266938, 0.1417731377372654, 0.12992910685795156, 0.13033094591584937, 0.1374196736710146, 0.1541966276989316, 0.1457293241660138, 0.1428316979747376, 0.15793831036753758, 0.18633591092278112, 0.1586895467804541, 0.1581209142372869, 0.20052998697662427, 0.16042210650856692, 0.15871361586021981, 0.16928774548432024, 0.15654881714477575, 0.11478181547032551, 0.14353217239203098, 0.10690548068354289, 0.11079188812294538, 0.1370189954265808, 0.10590514434581799, 0.10811744329331363, 0.12102198820146881, 0.10145617839095089, 0.15321150483909385, 0.16161540977719036, 0.16736889745412886, 0.18166579172311936, 0.14451079135106826, 0.15164826075398252, 0.16426461148997262, 0.1803243623804649, 0.158245793980193, 0.15864755375341466, 0.1781410264313219, 0.15100229198644133, 0.14807502399741712, 0.14033214495310353, 0.15327747551096327, 0.14476284676437867, 0.155089633344208, 0.15772419466911847, 0.1601129821677738, 0.1664845459872173, 0.19066820242501192, 0.18793982836274759, 0.15569177153724956, 0.16951741933863063, 0.18369092804885612, 0.161331716962672, 0.1735341381144121, 0.16281913688103145, 0.1603598404736689, 0.141947507599806, 0.13158939495483923, 0.15735957608440765, 0.21547836892527583, 0.15699937872052705, 0.1417895568461932, 0.2099439612353129, 0.19207453864062185, 0.1900889381880395, 0.17464579331322716, 0.2069529315600298, 0.17912821707139992, 0.18566621869439248, 0.18914878518490763, 0.17749679154815745, 0.17459663643316248, 0.05622674532973437, 0.05900197707430033, 0.04562674658414312, 0.06345800392116308, 0.04809424477544688, 0.047225155169497324, 0.05803671185277692, 0.047985555266086166, 0.06427531430105715]}, "mutation_prompt": null}
{"id": "7420bde0-4026-4861-afee-1d43adbea609", "solution": "import numpy as np\n\nclass DynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicPopulationResizingOptimizationAlgorithm", "description": "Implementing a dynamic population resizing strategy to adaptively adjust the population size based on individual fitness to accelerate convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.3232095492248862, 0.34125959575464615, 0.4225862998216351, 0.3530564453609488, 0.34077670602035537, 0.3148119473770389, 0.34515241624884163, 0.33219866104388396, 0.34358581650693265, 9.999999999998899e-05, 0.006518230681970993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09689913989254617, 0.10072847864891177, 0.09211556438690172, 0.0948214425564694, 0.09686732909881668, 0.09009487530526983, 0.11549367053068382, 0.09583247529584804, 0.10364752937230837, 0.10176995596723204, 0.07767812586495215, 0.11644217336432106, 0.09097449952883274, 0.09127020133266728, 0.09221007721148511, 0.08261546274887044, 0.08112978901379464, 0.07847740362065492, 0.9812476457186357, 0.9800480586417907, 0.9820440482315653, 0.985615541019499, 0.9784207802802315, 0.9776411937779453, 0.980137599244539, 0.9770778156394823, 0.977723834311227, 0.19165816132214364, 0.1969144343895306, 0.18599681337081642, 0.22004679380800374, 0.1933766001343158, 0.19679433301853144, 0.1955236286585459, 0.19281900114624362, 0.18575842070841686, 0.2470185757828378, 0.207143834338386, 0.25505986658548674, 0.2686181749161851, 0.2721775559943389, 0.31157774550642237, 0.2770362564511406, 0.2508316488490312, 0.24901451693625876, 0.1160650536821255, 0.14940297878383957, 0.12537256208622716, 0.12607222553246833, 0.12186801252933288, 0.12383317431118213, 0.1367839851908379, 0.12809990950655614, 0.13013018420405764, 0.1410534739928937, 0.12281942121419431, 0.11289213412397525, 0.12166421553569962, 0.14753793752220512, 0.12367123184890683, 0.12269845118288358, 0.1462791024674469, 0.11496910619053813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10541691093688077, 0.11362071144294261, 0.08244491716028801, 0.0861592175276783, 0.09773600479584454, 0.09500908825091936, 0.11469852352528265, 0.08786972924626313, 0.11478746462612022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05069860947129379, 0.052771892557983646, 0.05419752026141955, 0.07058888202859526, 0.049344038230666576, 0.05745216361407912, 0.04863957195838575, 0.0535884889853927, 0.04563052110239718, 0.33443345881662934, 0.33803801215107565, 0.3427883960949434, 0.3400301150305226, 0.3610087604581993, 0.32649687940865313, 0.3212553923906738, 0.3412050355191665, 0.34048209186724065, 0.09532521253287718, 0.09435794121466934, 0.09288043370537047, 0.10369179082107205, 0.10283608894188767, 0.1041369985415469, 0.10910397965474805, 0.08909163230475714, 0.09366231478959142, 0.16232921375916232, 0.15533866360089066, 0.15859466159136792, 0.16536823680086943, 0.1566094603724152, 0.1617643557394033, 0.16661919924684165, 0.20677400706778537, 0.16933629687108154, 0.24852370869922558, 0.24773495794452205, 0.2599146411397084, 0.26246964175106546, 0.2408144110463436, 0.23099027172074937, 0.2562650615338018, 0.241897882032166, 0.23785641361997667, 0.18995040360158144, 0.19825191973086798, 0.18539032344515705, 0.18890987488766042, 0.18591619299539064, 0.20593823238652031, 0.17484615054919905, 0.17608087951640505, 0.1857348351072735, 0.22545096849252955, 0.21169588632332936, 0.2315099738265256, 0.2085489192646366, 0.20279757002148013, 0.20259667086875666, 0.1925014937246159, 0.21317830988265474, 0.20028787978467566, 0.17473769908846848, 0.20485531889670638, 0.18825279277714946, 0.1809728256137545, 0.1799093848991441, 0.1806458053492963, 0.18241042251931083, 0.20650880581320652, 0.17950031501934915, 0.18216464711096192, 0.16794691784441895, 0.4786006080385512, 0.4634240961459859, 0.19497775060265576, 0.3969437006109747, 0.18885984654183652, 0.24089072310619308, 0.1697513124435891, 0.290352280431752, 0.3065493436854263, 0.4145931406972183, 0.4517029731353305, 0.15411672161296197, 0.20586233480688354, 0.13134288119889448, 0.41498597620203614, 0.33591939583400243, 0.18574663542353465, 0.18009998422771045, 0.18441825152685165, 0.18367063711872655, 0.18000647962525507, 0.18102487961127545, 0.1833256954697875, 0.1792631181065022, 0.18990542221058926, 0.08273338856806534, 0.08882940943570428, 0.09513830270052459, 0.09631647948676747, 0.10144512285482377, 0.07565136712507137, 0.0838430009656258, 0.08119102455236038, 0.078126463356183]}, "mutation_prompt": null}
{"id": "5b4fdc06-d720-4409-9c08-731be2440edc", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                selection_prob = np.random.rand()\n                selected_individual = global_best if selection_prob < 0.8 else local_best\n\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*selected_individual[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithm", "description": "Introducing a novel selection mechanism for perturbation by selecting individuals based on a weighted combination of global and local best solutions to enhance exploration-exploitation balance.", "configspace": "", "generation": 33, "fitness": 0.18928138043529089, "feedback": "The algorithm EnhancedDynamicPopulationResizingOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.3485259836680601, 0.3571128235770241, 0.32415966973979604, 0.33540360694509064, 0.3905184480933248, 0.3068757648001167, 0.3181143219782191, 0.34735377732356687, 0.33010019370865207, 9.999999999998899e-05, 0.004154838900765734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10560379668182518, 0.08364447743483305, 0.087231684658433, 0.11091733397490766, 0.08358348744802047, 0.0993603054054647, 0.09331037659984609, 0.0993806532787308, 0.09252613868313653, 0.0970865315061914, 0.08183896728856122, 0.0752498119270626, 0.08048635269309745, 0.0944067774352767, 0.07595268605353489, 0.09004395587637859, 0.07544950035923825, 0.1027812745643798, 0.9837637451438218, 0.9790027560018931, 0.9738332395794775, 0.9847377871371477, 0.9766918315879574, 0.978285975896245, 0.9841908976975466, 0.9736694022157323, 0.9826130074883317, 0.1991091666697068, 0.19028307693498558, 0.18321202763656208, 0.2091475053899493, 0.18077606763449927, 0.20078246615132356, 0.19681402290497074, 0.16850290811465418, 0.18938536397554218, 0.2606691015654612, 0.24536933257287696, 0.20584776582128161, 0.21658906060841654, 0.24899872013938806, 0.23427270286395185, 0.23316516424922817, 0.23148101629329731, 0.2463449767081396, 0.1216219177546467, 0.12087537706923834, 0.13552062475379711, 0.14225660446999533, 0.11264908624913517, 0.1148673766622087, 0.13674581704956545, 0.11645240103569521, 0.11628936440099336, 0.13599515048633348, 0.1254846504306283, 0.12957402769380244, 0.13473521464007976, 0.115365313018992, 0.13076035861251312, 0.12783544173912575, 0.12204827677060748, 0.11834169843006714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07879161351574182, 0.07783815554426021, 0.09646617590548434, 0.059170974933740794, 0.09382394688896112, 0.06714409554041045, 0.11249514431052554, 0.07670432794748017, 0.1045109618145047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04745004330934133, 0.06410672792865935, 0.05420582808227059, 0.06173312775125939, 0.051918119256196715, 0.06691125947431542, 0.058604747608532626, 0.06652602425904608, 0.06114468568814968, 0.3369734456739244, 0.3277827418640016, 0.32580620351678147, 0.32942255718663227, 0.340984982792901, 0.32545033259055167, 0.3336978813168082, 0.33824396855221217, 0.33826263153260283, 0.0937333002565428, 0.08501045969411447, 0.09079901091337272, 0.09396198383908849, 0.09725770339169104, 0.08941855224835071, 0.09026398630312105, 0.09499594745625473, 0.10696886135950223, 0.16151248107632088, 0.19764053574836948, 0.14951000826556882, 0.15742203505843155, 0.15041137583568887, 0.15098182950304928, 0.15067845106499245, 0.18498904977337038, 0.17271538833452416, 0.2559814822390323, 0.23986433023014386, 0.24644984097905043, 0.23965316847731166, 0.2282384145695845, 0.23818887812939804, 0.2553437723590861, 0.23113919847446962, 0.25563034383840144, 0.17690703189479173, 0.18549019362159092, 0.17458395037308216, 0.1833885262909839, 0.1875420921667531, 0.1790551825833756, 0.17662082585662464, 0.1753617053440918, 0.18332759613886218, 0.1951016379545788, 0.20866843104264265, 0.20119683478716321, 0.1937478141173501, 0.22103013468784016, 0.20713007285356044, 0.18827923391914247, 0.21975963484137906, 0.21221674046932937, 0.17632616084222097, 0.17541128245196758, 0.18072393282691024, 0.19328072100593818, 0.1813274911333228, 0.18283776731561552, 0.18661116727978388, 0.17754850139270162, 0.22310168069590164, 0.18323055871428806, 0.1956562168631768, 0.18465106915508267, 0.460084586386328, 0.19445061155903398, 0.23219053935708966, 0.39098823266408245, 0.4641919067526038, 0.15997982288851476, 0.2296680679597891, 0.35574148856069887, 0.25633711420487093, 0.27658312904665316, 0.3311867623633604, 0.2049752559521465, 0.2825289160668506, 0.2734859173033163, 0.1719220724650542, 0.1912213082795834, 0.23843339559508536, 0.2081858122907907, 0.18849815833004357, 0.1952088372991092, 0.18443059004379847, 0.18429696885959634, 0.17993681380432935, 0.2009990658899906, 0.07647734393370498, 0.07383405217410932, 0.0815029147843308, 0.08472911815871631, 0.07548796543736735, 0.08105323411481391, 0.07580410770370583, 0.07925026872388918, 0.077337181391951]}, "mutation_prompt": null}
{"id": "42cf7ab9-53dd-48d5-9406-f4c40746c128", "solution": "import numpy as np\n\nclass DynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicPopulationResizingOptimizationAlgorithm", "description": "Implementing a dynamic population resizing strategy to adaptively adjust the population size based on individual fitness to accelerate convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.3232095492248862, 0.34125959575464615, 0.4225862998216351, 0.3530564453609488, 0.34077670602035537, 0.3148119473770389, 0.34515241624884163, 0.33219866104388396, 0.34358581650693265, 9.999999999998899e-05, 0.006518230681970993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09689913989254617, 0.10072847864891177, 0.09211556438690172, 0.0948214425564694, 0.09686732909881668, 0.09009487530526983, 0.11549367053068382, 0.09583247529584804, 0.10364752937230837, 0.10176995596723204, 0.07767812586495215, 0.11644217336432106, 0.09097449952883274, 0.09127020133266728, 0.09221007721148511, 0.08261546274887044, 0.08112978901379464, 0.07847740362065492, 0.9812476457186357, 0.9800480586417907, 0.9820440482315653, 0.985615541019499, 0.9784207802802315, 0.9776411937779453, 0.980137599244539, 0.9770778156394823, 0.977723834311227, 0.19165816132214364, 0.1969144343895306, 0.18599681337081642, 0.22004679380800374, 0.1933766001343158, 0.19679433301853144, 0.1955236286585459, 0.19281900114624362, 0.18575842070841686, 0.2470185757828378, 0.207143834338386, 0.25505986658548674, 0.2686181749161851, 0.2721775559943389, 0.31157774550642237, 0.2770362564511406, 0.2508316488490312, 0.24901451693625876, 0.1160650536821255, 0.14940297878383957, 0.12537256208622716, 0.12607222553246833, 0.12186801252933288, 0.12383317431118213, 0.1367839851908379, 0.12809990950655614, 0.13013018420405764, 0.1410534739928937, 0.12281942121419431, 0.11289213412397525, 0.12166421553569962, 0.14753793752220512, 0.12367123184890683, 0.12269845118288358, 0.1462791024674469, 0.11496910619053813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10541691093688077, 0.11362071144294261, 0.08244491716028801, 0.0861592175276783, 0.09773600479584454, 0.09500908825091936, 0.11469852352528265, 0.08786972924626313, 0.11478746462612022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05069860947129379, 0.052771892557983646, 0.05419752026141955, 0.07058888202859526, 0.049344038230666576, 0.05745216361407912, 0.04863957195838575, 0.0535884889853927, 0.04563052110239718, 0.33443345881662934, 0.33803801215107565, 0.3427883960949434, 0.3400301150305226, 0.3610087604581993, 0.32649687940865313, 0.3212553923906738, 0.3412050355191665, 0.34048209186724065, 0.09532521253287718, 0.09435794121466934, 0.09288043370537047, 0.10369179082107205, 0.10283608894188767, 0.1041369985415469, 0.10910397965474805, 0.08909163230475714, 0.09366231478959142, 0.16232921375916232, 0.15533866360089066, 0.15859466159136792, 0.16536823680086943, 0.1566094603724152, 0.1617643557394033, 0.16661919924684165, 0.20677400706778537, 0.16933629687108154, 0.24852370869922558, 0.24773495794452205, 0.2599146411397084, 0.26246964175106546, 0.2408144110463436, 0.23099027172074937, 0.2562650615338018, 0.241897882032166, 0.23785641361997667, 0.18995040360158144, 0.19825191973086798, 0.18539032344515705, 0.18890987488766042, 0.18591619299539064, 0.20593823238652031, 0.17484615054919905, 0.17608087951640505, 0.1857348351072735, 0.22545096849252955, 0.21169588632332936, 0.2315099738265256, 0.2085489192646366, 0.20279757002148013, 0.20259667086875666, 0.1925014937246159, 0.21317830988265474, 0.20028787978467566, 0.17473769908846848, 0.20485531889670638, 0.18825279277714946, 0.1809728256137545, 0.1799093848991441, 0.1806458053492963, 0.18241042251931083, 0.20650880581320652, 0.17950031501934915, 0.18216464711096192, 0.16794691784441895, 0.4786006080385512, 0.4634240961459859, 0.19497775060265576, 0.3969437006109747, 0.18885984654183652, 0.24089072310619308, 0.1697513124435891, 0.290352280431752, 0.3065493436854263, 0.4145931406972183, 0.4517029731353305, 0.15411672161296197, 0.20586233480688354, 0.13134288119889448, 0.41498597620203614, 0.33591939583400243, 0.18574663542353465, 0.18009998422771045, 0.18441825152685165, 0.18367063711872655, 0.18000647962525507, 0.18102487961127545, 0.1833256954697875, 0.1792631181065022, 0.18990542221058926, 0.08273338856806534, 0.08882940943570428, 0.09513830270052459, 0.09631647948676747, 0.10144512285482377, 0.07565136712507137, 0.0838430009656258, 0.08119102455236038, 0.078126463356183]}, "mutation_prompt": null}
{"id": "95157f25-bf09-4308-b1ec-0feee135225c", "solution": "class CompetitiveSelectionOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                \n                if fitness_diff[i] < fitness_diff.mean():  # Competitive selection based on fitness\n                    population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "CompetitiveSelectionOptimizationAlgorithm", "description": "Introducing a competitive selection mechanism based on individual fitness to prioritize the best solutions for mutation and population update, enhancing convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {}, "mutation_prompt": null}
{"id": "c103f7e8-50b8-44af-b32b-233f73d7d30e", "solution": "import numpy as np\n\nclass DynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicPopulationResizingOptimizationAlgorithm", "description": "Implementing a dynamic population resizing strategy to adaptively adjust the population size based on individual fitness to accelerate convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.3232095492248862, 0.34125959575464615, 0.4225862998216351, 0.3530564453609488, 0.34077670602035537, 0.3148119473770389, 0.34515241624884163, 0.33219866104388396, 0.34358581650693265, 9.999999999998899e-05, 0.006518230681970993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09689913989254617, 0.10072847864891177, 0.09211556438690172, 0.0948214425564694, 0.09686732909881668, 0.09009487530526983, 0.11549367053068382, 0.09583247529584804, 0.10364752937230837, 0.10176995596723204, 0.07767812586495215, 0.11644217336432106, 0.09097449952883274, 0.09127020133266728, 0.09221007721148511, 0.08261546274887044, 0.08112978901379464, 0.07847740362065492, 0.9812476457186357, 0.9800480586417907, 0.9820440482315653, 0.985615541019499, 0.9784207802802315, 0.9776411937779453, 0.980137599244539, 0.9770778156394823, 0.977723834311227, 0.19165816132214364, 0.1969144343895306, 0.18599681337081642, 0.22004679380800374, 0.1933766001343158, 0.19679433301853144, 0.1955236286585459, 0.19281900114624362, 0.18575842070841686, 0.2470185757828378, 0.207143834338386, 0.25505986658548674, 0.2686181749161851, 0.2721775559943389, 0.31157774550642237, 0.2770362564511406, 0.2508316488490312, 0.24901451693625876, 0.1160650536821255, 0.14940297878383957, 0.12537256208622716, 0.12607222553246833, 0.12186801252933288, 0.12383317431118213, 0.1367839851908379, 0.12809990950655614, 0.13013018420405764, 0.1410534739928937, 0.12281942121419431, 0.11289213412397525, 0.12166421553569962, 0.14753793752220512, 0.12367123184890683, 0.12269845118288358, 0.1462791024674469, 0.11496910619053813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10541691093688077, 0.11362071144294261, 0.08244491716028801, 0.0861592175276783, 0.09773600479584454, 0.09500908825091936, 0.11469852352528265, 0.08786972924626313, 0.11478746462612022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05069860947129379, 0.052771892557983646, 0.05419752026141955, 0.07058888202859526, 0.049344038230666576, 0.05745216361407912, 0.04863957195838575, 0.0535884889853927, 0.04563052110239718, 0.33443345881662934, 0.33803801215107565, 0.3427883960949434, 0.3400301150305226, 0.3610087604581993, 0.32649687940865313, 0.3212553923906738, 0.3412050355191665, 0.34048209186724065, 0.09532521253287718, 0.09435794121466934, 0.09288043370537047, 0.10369179082107205, 0.10283608894188767, 0.1041369985415469, 0.10910397965474805, 0.08909163230475714, 0.09366231478959142, 0.16232921375916232, 0.15533866360089066, 0.15859466159136792, 0.16536823680086943, 0.1566094603724152, 0.1617643557394033, 0.16661919924684165, 0.20677400706778537, 0.16933629687108154, 0.24852370869922558, 0.24773495794452205, 0.2599146411397084, 0.26246964175106546, 0.2408144110463436, 0.23099027172074937, 0.2562650615338018, 0.241897882032166, 0.23785641361997667, 0.18995040360158144, 0.19825191973086798, 0.18539032344515705, 0.18890987488766042, 0.18591619299539064, 0.20593823238652031, 0.17484615054919905, 0.17608087951640505, 0.1857348351072735, 0.22545096849252955, 0.21169588632332936, 0.2315099738265256, 0.2085489192646366, 0.20279757002148013, 0.20259667086875666, 0.1925014937246159, 0.21317830988265474, 0.20028787978467566, 0.17473769908846848, 0.20485531889670638, 0.18825279277714946, 0.1809728256137545, 0.1799093848991441, 0.1806458053492963, 0.18241042251931083, 0.20650880581320652, 0.17950031501934915, 0.18216464711096192, 0.16794691784441895, 0.4786006080385512, 0.4634240961459859, 0.19497775060265576, 0.3969437006109747, 0.18885984654183652, 0.24089072310619308, 0.1697513124435891, 0.290352280431752, 0.3065493436854263, 0.4145931406972183, 0.4517029731353305, 0.15411672161296197, 0.20586233480688354, 0.13134288119889448, 0.41498597620203614, 0.33591939583400243, 0.18574663542353465, 0.18009998422771045, 0.18441825152685165, 0.18367063711872655, 0.18000647962525507, 0.18102487961127545, 0.1833256954697875, 0.1792631181065022, 0.18990542221058926, 0.08273338856806534, 0.08882940943570428, 0.09513830270052459, 0.09631647948676747, 0.10144512285482377, 0.07565136712507137, 0.0838430009656258, 0.08119102455236038, 0.078126463356183]}, "mutation_prompt": null}
{"id": "20a23f7a-42e0-4073-a78e-50cb0086e9fc", "solution": "import numpy as np\n\nclass DynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicPopulationResizingOptimizationAlgorithm", "description": "Implementing a dynamic population resizing strategy to adaptively adjust the population size based on individual fitness to accelerate convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.3232095492248862, 0.34125959575464615, 0.4225862998216351, 0.3530564453609488, 0.34077670602035537, 0.3148119473770389, 0.34515241624884163, 0.33219866104388396, 0.34358581650693265, 9.999999999998899e-05, 0.006518230681970993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09689913989254617, 0.10072847864891177, 0.09211556438690172, 0.0948214425564694, 0.09686732909881668, 0.09009487530526983, 0.11549367053068382, 0.09583247529584804, 0.10364752937230837, 0.10176995596723204, 0.07767812586495215, 0.11644217336432106, 0.09097449952883274, 0.09127020133266728, 0.09221007721148511, 0.08261546274887044, 0.08112978901379464, 0.07847740362065492, 0.9812476457186357, 0.9800480586417907, 0.9820440482315653, 0.985615541019499, 0.9784207802802315, 0.9776411937779453, 0.980137599244539, 0.9770778156394823, 0.977723834311227, 0.19165816132214364, 0.1969144343895306, 0.18599681337081642, 0.22004679380800374, 0.1933766001343158, 0.19679433301853144, 0.1955236286585459, 0.19281900114624362, 0.18575842070841686, 0.2470185757828378, 0.207143834338386, 0.25505986658548674, 0.2686181749161851, 0.2721775559943389, 0.31157774550642237, 0.2770362564511406, 0.2508316488490312, 0.24901451693625876, 0.1160650536821255, 0.14940297878383957, 0.12537256208622716, 0.12607222553246833, 0.12186801252933288, 0.12383317431118213, 0.1367839851908379, 0.12809990950655614, 0.13013018420405764, 0.1410534739928937, 0.12281942121419431, 0.11289213412397525, 0.12166421553569962, 0.14753793752220512, 0.12367123184890683, 0.12269845118288358, 0.1462791024674469, 0.11496910619053813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10541691093688077, 0.11362071144294261, 0.08244491716028801, 0.0861592175276783, 0.09773600479584454, 0.09500908825091936, 0.11469852352528265, 0.08786972924626313, 0.11478746462612022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05069860947129379, 0.052771892557983646, 0.05419752026141955, 0.07058888202859526, 0.049344038230666576, 0.05745216361407912, 0.04863957195838575, 0.0535884889853927, 0.04563052110239718, 0.33443345881662934, 0.33803801215107565, 0.3427883960949434, 0.3400301150305226, 0.3610087604581993, 0.32649687940865313, 0.3212553923906738, 0.3412050355191665, 0.34048209186724065, 0.09532521253287718, 0.09435794121466934, 0.09288043370537047, 0.10369179082107205, 0.10283608894188767, 0.1041369985415469, 0.10910397965474805, 0.08909163230475714, 0.09366231478959142, 0.16232921375916232, 0.15533866360089066, 0.15859466159136792, 0.16536823680086943, 0.1566094603724152, 0.1617643557394033, 0.16661919924684165, 0.20677400706778537, 0.16933629687108154, 0.24852370869922558, 0.24773495794452205, 0.2599146411397084, 0.26246964175106546, 0.2408144110463436, 0.23099027172074937, 0.2562650615338018, 0.241897882032166, 0.23785641361997667, 0.18995040360158144, 0.19825191973086798, 0.18539032344515705, 0.18890987488766042, 0.18591619299539064, 0.20593823238652031, 0.17484615054919905, 0.17608087951640505, 0.1857348351072735, 0.22545096849252955, 0.21169588632332936, 0.2315099738265256, 0.2085489192646366, 0.20279757002148013, 0.20259667086875666, 0.1925014937246159, 0.21317830988265474, 0.20028787978467566, 0.17473769908846848, 0.20485531889670638, 0.18825279277714946, 0.1809728256137545, 0.1799093848991441, 0.1806458053492963, 0.18241042251931083, 0.20650880581320652, 0.17950031501934915, 0.18216464711096192, 0.16794691784441895, 0.4786006080385512, 0.4634240961459859, 0.19497775060265576, 0.3969437006109747, 0.18885984654183652, 0.24089072310619308, 0.1697513124435891, 0.290352280431752, 0.3065493436854263, 0.4145931406972183, 0.4517029731353305, 0.15411672161296197, 0.20586233480688354, 0.13134288119889448, 0.41498597620203614, 0.33591939583400243, 0.18574663542353465, 0.18009998422771045, 0.18441825152685165, 0.18367063711872655, 0.18000647962525507, 0.18102487961127545, 0.1833256954697875, 0.1792631181065022, 0.18990542221058926, 0.08273338856806534, 0.08882940943570428, 0.09513830270052459, 0.09631647948676747, 0.10144512285482377, 0.07565136712507137, 0.0838430009656258, 0.08119102455236038, 0.078126463356183]}, "mutation_prompt": null}
{"id": "95364bbe-a153-4333-8653-c7e927b3af03", "solution": "import numpy as np\n\nclass DynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicPopulationResizingOptimizationAlgorithm", "description": "Implementing a dynamic population resizing strategy to adaptively adjust the population size based on individual fitness to accelerate convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.3232095492248862, 0.34125959575464615, 0.4225862998216351, 0.3530564453609488, 0.34077670602035537, 0.3148119473770389, 0.34515241624884163, 0.33219866104388396, 0.34358581650693265, 9.999999999998899e-05, 0.006518230681970993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09689913989254617, 0.10072847864891177, 0.09211556438690172, 0.0948214425564694, 0.09686732909881668, 0.09009487530526983, 0.11549367053068382, 0.09583247529584804, 0.10364752937230837, 0.10176995596723204, 0.07767812586495215, 0.11644217336432106, 0.09097449952883274, 0.09127020133266728, 0.09221007721148511, 0.08261546274887044, 0.08112978901379464, 0.07847740362065492, 0.9812476457186357, 0.9800480586417907, 0.9820440482315653, 0.985615541019499, 0.9784207802802315, 0.9776411937779453, 0.980137599244539, 0.9770778156394823, 0.977723834311227, 0.19165816132214364, 0.1969144343895306, 0.18599681337081642, 0.22004679380800374, 0.1933766001343158, 0.19679433301853144, 0.1955236286585459, 0.19281900114624362, 0.18575842070841686, 0.2470185757828378, 0.207143834338386, 0.25505986658548674, 0.2686181749161851, 0.2721775559943389, 0.31157774550642237, 0.2770362564511406, 0.2508316488490312, 0.24901451693625876, 0.1160650536821255, 0.14940297878383957, 0.12537256208622716, 0.12607222553246833, 0.12186801252933288, 0.12383317431118213, 0.1367839851908379, 0.12809990950655614, 0.13013018420405764, 0.1410534739928937, 0.12281942121419431, 0.11289213412397525, 0.12166421553569962, 0.14753793752220512, 0.12367123184890683, 0.12269845118288358, 0.1462791024674469, 0.11496910619053813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10541691093688077, 0.11362071144294261, 0.08244491716028801, 0.0861592175276783, 0.09773600479584454, 0.09500908825091936, 0.11469852352528265, 0.08786972924626313, 0.11478746462612022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05069860947129379, 0.052771892557983646, 0.05419752026141955, 0.07058888202859526, 0.049344038230666576, 0.05745216361407912, 0.04863957195838575, 0.0535884889853927, 0.04563052110239718, 0.33443345881662934, 0.33803801215107565, 0.3427883960949434, 0.3400301150305226, 0.3610087604581993, 0.32649687940865313, 0.3212553923906738, 0.3412050355191665, 0.34048209186724065, 0.09532521253287718, 0.09435794121466934, 0.09288043370537047, 0.10369179082107205, 0.10283608894188767, 0.1041369985415469, 0.10910397965474805, 0.08909163230475714, 0.09366231478959142, 0.16232921375916232, 0.15533866360089066, 0.15859466159136792, 0.16536823680086943, 0.1566094603724152, 0.1617643557394033, 0.16661919924684165, 0.20677400706778537, 0.16933629687108154, 0.24852370869922558, 0.24773495794452205, 0.2599146411397084, 0.26246964175106546, 0.2408144110463436, 0.23099027172074937, 0.2562650615338018, 0.241897882032166, 0.23785641361997667, 0.18995040360158144, 0.19825191973086798, 0.18539032344515705, 0.18890987488766042, 0.18591619299539064, 0.20593823238652031, 0.17484615054919905, 0.17608087951640505, 0.1857348351072735, 0.22545096849252955, 0.21169588632332936, 0.2315099738265256, 0.2085489192646366, 0.20279757002148013, 0.20259667086875666, 0.1925014937246159, 0.21317830988265474, 0.20028787978467566, 0.17473769908846848, 0.20485531889670638, 0.18825279277714946, 0.1809728256137545, 0.1799093848991441, 0.1806458053492963, 0.18241042251931083, 0.20650880581320652, 0.17950031501934915, 0.18216464711096192, 0.16794691784441895, 0.4786006080385512, 0.4634240961459859, 0.19497775060265576, 0.3969437006109747, 0.18885984654183652, 0.24089072310619308, 0.1697513124435891, 0.290352280431752, 0.3065493436854263, 0.4145931406972183, 0.4517029731353305, 0.15411672161296197, 0.20586233480688354, 0.13134288119889448, 0.41498597620203614, 0.33591939583400243, 0.18574663542353465, 0.18009998422771045, 0.18441825152685165, 0.18367063711872655, 0.18000647962525507, 0.18102487961127545, 0.1833256954697875, 0.1792631181065022, 0.18990542221058926, 0.08273338856806534, 0.08882940943570428, 0.09513830270052459, 0.09631647948676747, 0.10144512285482377, 0.07565136712507137, 0.0838430009656258, 0.08119102455236038, 0.078126463356183]}, "mutation_prompt": null}
{"id": "47db2192-0051-4002-90ed-47449781e9a8", "solution": "import numpy as np\n\nclass DynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicPopulationResizingOptimizationAlgorithm", "description": "Implementing a dynamic population resizing strategy to adaptively adjust the population size based on individual fitness to accelerate convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.3232095492248862, 0.34125959575464615, 0.4225862998216351, 0.3530564453609488, 0.34077670602035537, 0.3148119473770389, 0.34515241624884163, 0.33219866104388396, 0.34358581650693265, 9.999999999998899e-05, 0.006518230681970993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09689913989254617, 0.10072847864891177, 0.09211556438690172, 0.0948214425564694, 0.09686732909881668, 0.09009487530526983, 0.11549367053068382, 0.09583247529584804, 0.10364752937230837, 0.10176995596723204, 0.07767812586495215, 0.11644217336432106, 0.09097449952883274, 0.09127020133266728, 0.09221007721148511, 0.08261546274887044, 0.08112978901379464, 0.07847740362065492, 0.9812476457186357, 0.9800480586417907, 0.9820440482315653, 0.985615541019499, 0.9784207802802315, 0.9776411937779453, 0.980137599244539, 0.9770778156394823, 0.977723834311227, 0.19165816132214364, 0.1969144343895306, 0.18599681337081642, 0.22004679380800374, 0.1933766001343158, 0.19679433301853144, 0.1955236286585459, 0.19281900114624362, 0.18575842070841686, 0.2470185757828378, 0.207143834338386, 0.25505986658548674, 0.2686181749161851, 0.2721775559943389, 0.31157774550642237, 0.2770362564511406, 0.2508316488490312, 0.24901451693625876, 0.1160650536821255, 0.14940297878383957, 0.12537256208622716, 0.12607222553246833, 0.12186801252933288, 0.12383317431118213, 0.1367839851908379, 0.12809990950655614, 0.13013018420405764, 0.1410534739928937, 0.12281942121419431, 0.11289213412397525, 0.12166421553569962, 0.14753793752220512, 0.12367123184890683, 0.12269845118288358, 0.1462791024674469, 0.11496910619053813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10541691093688077, 0.11362071144294261, 0.08244491716028801, 0.0861592175276783, 0.09773600479584454, 0.09500908825091936, 0.11469852352528265, 0.08786972924626313, 0.11478746462612022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05069860947129379, 0.052771892557983646, 0.05419752026141955, 0.07058888202859526, 0.049344038230666576, 0.05745216361407912, 0.04863957195838575, 0.0535884889853927, 0.04563052110239718, 0.33443345881662934, 0.33803801215107565, 0.3427883960949434, 0.3400301150305226, 0.3610087604581993, 0.32649687940865313, 0.3212553923906738, 0.3412050355191665, 0.34048209186724065, 0.09532521253287718, 0.09435794121466934, 0.09288043370537047, 0.10369179082107205, 0.10283608894188767, 0.1041369985415469, 0.10910397965474805, 0.08909163230475714, 0.09366231478959142, 0.16232921375916232, 0.15533866360089066, 0.15859466159136792, 0.16536823680086943, 0.1566094603724152, 0.1617643557394033, 0.16661919924684165, 0.20677400706778537, 0.16933629687108154, 0.24852370869922558, 0.24773495794452205, 0.2599146411397084, 0.26246964175106546, 0.2408144110463436, 0.23099027172074937, 0.2562650615338018, 0.241897882032166, 0.23785641361997667, 0.18995040360158144, 0.19825191973086798, 0.18539032344515705, 0.18890987488766042, 0.18591619299539064, 0.20593823238652031, 0.17484615054919905, 0.17608087951640505, 0.1857348351072735, 0.22545096849252955, 0.21169588632332936, 0.2315099738265256, 0.2085489192646366, 0.20279757002148013, 0.20259667086875666, 0.1925014937246159, 0.21317830988265474, 0.20028787978467566, 0.17473769908846848, 0.20485531889670638, 0.18825279277714946, 0.1809728256137545, 0.1799093848991441, 0.1806458053492963, 0.18241042251931083, 0.20650880581320652, 0.17950031501934915, 0.18216464711096192, 0.16794691784441895, 0.4786006080385512, 0.4634240961459859, 0.19497775060265576, 0.3969437006109747, 0.18885984654183652, 0.24089072310619308, 0.1697513124435891, 0.290352280431752, 0.3065493436854263, 0.4145931406972183, 0.4517029731353305, 0.15411672161296197, 0.20586233480688354, 0.13134288119889448, 0.41498597620203614, 0.33591939583400243, 0.18574663542353465, 0.18009998422771045, 0.18441825152685165, 0.18367063711872655, 0.18000647962525507, 0.18102487961127545, 0.1833256954697875, 0.1792631181065022, 0.18990542221058926, 0.08273338856806534, 0.08882940943570428, 0.09513830270052459, 0.09631647948676747, 0.10144512285482377, 0.07565136712507137, 0.0838430009656258, 0.08119102455236038, 0.078126463356183]}, "mutation_prompt": null}
{"id": "1cda3de6-fcf7-4f05-a52e-87d594d5cae1", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                if np.random.rand() < 0.1:  # 10% probability for Levy flight\n                    beta = 1.5\n                    alpha = 0.01 * (global_best[i] - local_best[i])\n                    levy = np.random.normal(0, np.sqrt(beta / np.abs(alpha)), self.population_size)\n                    population[:, i] = np.clip(global_best[i] + levy, -5.0, 5.0)\n                else:\n                    mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                    fitness_diff = (best_individual - population) @ (best_individual - population).T\n                    mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                    population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithm", "description": "Introducing a Levy flight behavior to enhance exploration capability and speed up convergence by encouraging long jumps in the search space.", "configspace": "", "generation": 40, "fitness": 0.16797917619689645, "feedback": "The algorithm EnhancedDynamicPopulationResizingOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.3039857682266035, 0.29370140307634507, 0.2900374790207685, 0.3029010166022552, 0.3276242935202638, 0.3113039308403913, 0.32415364971724603, 0.3348456089486477, 0.28762352775199374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574759702049627, 0.07580066307960531, 0.06831916708852037, 0.07968886430414746, 0.06350887884418077, 0.09450599471353549, 0.0715506078010032, 0.08493486911182024, 0.08542983471117283, 0.07909984954266724, 0.06515579600313681, 0.051020621214743045, 0.054486161744327966, 0.06861904732845181, 0.062371677649785684, 0.054951080791732054, 0.06408363155711672, 0.056015657320660606, 0.9878813499837514, 0.9831345593873717, 0.98618246177972, 0.9784679210677993, 0.986401838648966, 0.98335376697419, 0.9777182780844118, 0.9780823303376889, 0.983193772498422, 0.14695168441367257, 0.1574270393789189, 0.12659597119951072, 0.17395066365760048, 0.1359746684438191, 0.15100828075749995, 0.14078727126412016, 0.1370360027040124, 0.12379512952754534, 0.2065798297348007, 0.20742188790393357, 0.153982291531091, 0.21089780841759043, 0.18010109090110749, 0.19531624630843003, 0.1745880769780519, 0.19725366862703464, 0.1905148369181182, 0.09784094461389936, 0.06001117770453057, 0.09095812106785028, 0.08858371689959132, 0.112133162103488, 0.11288156310558062, 0.1083469077613114, 0.1025096973465488, 0.09807576664888207, 0.057202687505833794, 0.07549817228681954, 0.0552425652549855, 0.09017531583378335, 0.09465270307979701, 0.06653254476074, 0.10674685019715258, 0.05133874978186925, 0.08005655510997989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07048354422743108, 0.06495898610550155, 0.05327363845876987, 0.06808942239450111, 0.09489975833036257, 0.05666579520036574, 0.08239435756980895, 0.09081438305323464, 0.06731077864145008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029891802346680207, 0.03778933694024966, 0.02873728780665974, 0.039634589051417035, 0.04720036239429026, 0.0405473507267603, 0.03424742319271967, 0.04967831273670198, 0.038386779126906134, 0.2946156650545618, 0.3128522378897486, 0.2842840293314345, 0.32638010639053805, 0.3125942150391853, 0.3464271904166618, 0.27543843431032633, 0.2736025908710138, 0.2673474862596129, 0.0960565798874139, 0.08569718162065088, 0.07850406879754723, 0.0673892455471472, 0.07001866959779834, 0.08916970086234088, 0.09058617738355301, 0.08247033968648099, 0.06385597634012408, 0.14927508995147143, 0.16975343877634474, 0.13943416394383934, 0.15280156348743912, 0.15769134661431017, 0.1747571847208943, 0.15063413314873686, 0.1540164464210496, 0.15502768949541335, 0.2244445243229496, 0.2226111278486601, 0.2059668800374277, 0.2023228168572596, 0.21996529340897264, 0.19237564747407865, 0.24192793413423075, 0.2097768843585468, 0.21702788826718022, 0.1608271889329963, 0.17379608566829552, 0.15236962514586538, 0.16529794415229482, 0.15887847519605525, 0.13891532507098925, 0.1521495793429687, 0.1595050023998359, 0.14640726719194264, 0.17086765089049583, 0.1864471954759268, 0.18370503368047553, 0.16613661276995118, 0.17476720170904703, 0.18900234568633845, 0.17292167957224525, 0.2042768037365309, 0.18644084378096637, 0.1706016535934326, 0.1764027662935621, 0.17130374567631446, 0.1670542033263922, 0.18768429727933722, 0.18532217347813895, 0.1837639878546039, 0.16867876257545344, 0.17520058222953083, 0.2945068695959512, 0.20767112838163526, 0.2696572199217575, 0.25362756556389665, 0.18511632993181515, 0.1764254497819875, 0.17929977977149103, 0.2719009198507695, 0.27708176081345637, 0.18207736367330007, 0.21299257021812557, 0.20651381978407068, 0.22862248904132776, 0.22826979833252603, 0.19386678757474807, 0.20524808846905718, 0.21473776244790865, 0.3147799642876956, 0.17433795557470366, 0.20511692249128288, 0.18691541130088196, 0.18063241660937512, 0.18124484077646164, 0.17796868566574486, 0.18568269677746307, 0.2310698768299574, 0.18637737152896694, 0.08375808204119095, 0.07097197476217898, 0.07664187683254275, 0.0829544894533436, 0.07921623582184589, 0.06545079615209393, 0.06763601401378871, 0.06262126404284385, 0.06412898482126461]}, "mutation_prompt": null}
{"id": "1fd2d00d-e04e-4b59-95bc-5cb7903dce3b", "solution": "import numpy as np\n\nclass DynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicPopulationResizingOptimizationAlgorithm", "description": "Implementing a dynamic population resizing strategy to adaptively adjust the population size based on individual fitness to accelerate convergence.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.3232095492248862, 0.34125959575464615, 0.4225862998216351, 0.3530564453609488, 0.34077670602035537, 0.3148119473770389, 0.34515241624884163, 0.33219866104388396, 0.34358581650693265, 9.999999999998899e-05, 0.006518230681970993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09689913989254617, 0.10072847864891177, 0.09211556438690172, 0.0948214425564694, 0.09686732909881668, 0.09009487530526983, 0.11549367053068382, 0.09583247529584804, 0.10364752937230837, 0.10176995596723204, 0.07767812586495215, 0.11644217336432106, 0.09097449952883274, 0.09127020133266728, 0.09221007721148511, 0.08261546274887044, 0.08112978901379464, 0.07847740362065492, 0.9812476457186357, 0.9800480586417907, 0.9820440482315653, 0.985615541019499, 0.9784207802802315, 0.9776411937779453, 0.980137599244539, 0.9770778156394823, 0.977723834311227, 0.19165816132214364, 0.1969144343895306, 0.18599681337081642, 0.22004679380800374, 0.1933766001343158, 0.19679433301853144, 0.1955236286585459, 0.19281900114624362, 0.18575842070841686, 0.2470185757828378, 0.207143834338386, 0.25505986658548674, 0.2686181749161851, 0.2721775559943389, 0.31157774550642237, 0.2770362564511406, 0.2508316488490312, 0.24901451693625876, 0.1160650536821255, 0.14940297878383957, 0.12537256208622716, 0.12607222553246833, 0.12186801252933288, 0.12383317431118213, 0.1367839851908379, 0.12809990950655614, 0.13013018420405764, 0.1410534739928937, 0.12281942121419431, 0.11289213412397525, 0.12166421553569962, 0.14753793752220512, 0.12367123184890683, 0.12269845118288358, 0.1462791024674469, 0.11496910619053813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10541691093688077, 0.11362071144294261, 0.08244491716028801, 0.0861592175276783, 0.09773600479584454, 0.09500908825091936, 0.11469852352528265, 0.08786972924626313, 0.11478746462612022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05069860947129379, 0.052771892557983646, 0.05419752026141955, 0.07058888202859526, 0.049344038230666576, 0.05745216361407912, 0.04863957195838575, 0.0535884889853927, 0.04563052110239718, 0.33443345881662934, 0.33803801215107565, 0.3427883960949434, 0.3400301150305226, 0.3610087604581993, 0.32649687940865313, 0.3212553923906738, 0.3412050355191665, 0.34048209186724065, 0.09532521253287718, 0.09435794121466934, 0.09288043370537047, 0.10369179082107205, 0.10283608894188767, 0.1041369985415469, 0.10910397965474805, 0.08909163230475714, 0.09366231478959142, 0.16232921375916232, 0.15533866360089066, 0.15859466159136792, 0.16536823680086943, 0.1566094603724152, 0.1617643557394033, 0.16661919924684165, 0.20677400706778537, 0.16933629687108154, 0.24852370869922558, 0.24773495794452205, 0.2599146411397084, 0.26246964175106546, 0.2408144110463436, 0.23099027172074937, 0.2562650615338018, 0.241897882032166, 0.23785641361997667, 0.18995040360158144, 0.19825191973086798, 0.18539032344515705, 0.18890987488766042, 0.18591619299539064, 0.20593823238652031, 0.17484615054919905, 0.17608087951640505, 0.1857348351072735, 0.22545096849252955, 0.21169588632332936, 0.2315099738265256, 0.2085489192646366, 0.20279757002148013, 0.20259667086875666, 0.1925014937246159, 0.21317830988265474, 0.20028787978467566, 0.17473769908846848, 0.20485531889670638, 0.18825279277714946, 0.1809728256137545, 0.1799093848991441, 0.1806458053492963, 0.18241042251931083, 0.20650880581320652, 0.17950031501934915, 0.18216464711096192, 0.16794691784441895, 0.4786006080385512, 0.4634240961459859, 0.19497775060265576, 0.3969437006109747, 0.18885984654183652, 0.24089072310619308, 0.1697513124435891, 0.290352280431752, 0.3065493436854263, 0.4145931406972183, 0.4517029731353305, 0.15411672161296197, 0.20586233480688354, 0.13134288119889448, 0.41498597620203614, 0.33591939583400243, 0.18574663542353465, 0.18009998422771045, 0.18441825152685165, 0.18367063711872655, 0.18000647962525507, 0.18102487961127545, 0.1833256954697875, 0.1792631181065022, 0.18990542221058926, 0.08273338856806534, 0.08882940943570428, 0.09513830270052459, 0.09631647948676747, 0.10144512285482377, 0.07565136712507137, 0.0838430009656258, 0.08119102455236038, 0.078126463356183]}, "mutation_prompt": null}
{"id": "85c9214b-7b97-4dda-bc6c-43b6dbe0d325", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a differential evolution strategy\n                    r1, r2, r3 = np.random.choice(self.population_size, 3, replace=False)\n                    diff_vector = population[r2] - population[r3]\n                    trial_vector = population[r1] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[r1]:\n                        population[r1] = trial_vector\n                        fitness[r1] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithm", "description": "Introducing a differential evolution strategy to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 42, "fitness": 0.19456212742684584, "feedback": "The algorithm EnhancedDynamicPopulationResizingOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "cb440219-21e0-4bf8-91f7-f3d7a6474c62", "metadata": {"aucs": [0.33265863245867044, 0.3419658419682847, 0.3514439591126042, 0.3246490928726695, 0.3463233688631564, 0.3348054630361925, 0.3581235784484583, 0.3223380869227138, 0.3174077169624334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011549282155803309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0894908156663834, 0.1084316966893597, 0.11257508104819047, 0.13179865799956536, 0.09707575016500947, 0.08546340442423173, 0.10057428361220533, 0.10512653913973913, 0.08894138996823586, 0.0796029440118533, 0.087980567279199, 0.0976008103792747, 0.08495704193226516, 0.09214797688556786, 0.09951215993065565, 0.08082176612967928, 0.0972489345876455, 0.093793317056171, 0.9871028770572131, 0.9766003701671857, 0.9776808528969463, 0.9798948703609487, 0.9783468918013324, 0.9780041249747938, 0.9708525365740054, 0.9800864020750271, 0.9781694647137867, 0.19273409032501365, 0.21824611433931662, 0.19087445388803648, 0.1854244418599057, 0.20697924398615908, 0.21092003287754701, 0.20048429247844723, 0.20398277925198505, 0.20913187904255814, 0.23214390821029351, 0.2294467374356337, 0.2350944319792856, 0.27771325580987816, 0.2470577504117295, 0.2574930220651036, 0.2325457252806723, 0.2650015725195656, 0.2247944880961915, 0.13958315872787175, 0.12465852688125523, 0.12331620308003144, 0.14824787436544884, 0.13415829869596219, 0.14075408857813476, 0.11987636730677953, 0.11758657653077864, 0.13007398805778525, 0.12687931905645977, 0.12575899107867083, 0.11818745790300778, 0.16314856615467177, 0.13387527583698178, 0.11601365292595633, 0.12290240235379424, 0.12360180707794044, 0.13904376170906785, 9.999999999998899e-05, 0.004497565218536281, 9.999999999998899e-05, 0.0012076769311697433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07445038229225942, 0.09328198175879732, 0.10212286305210216, 0.08746038366923636, 0.09443573425291596, 0.07026325455905791, 0.11993322441064502, 0.06598610388929371, 0.0539829079059444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04573447817873166, 0.051158935979227826, 0.05099388765250801, 0.06196719192978084, 0.05686923204797001, 0.049601175915543916, 0.052919249987455785, 0.050416613364597795, 0.05390784022813655, 0.33664870632503685, 0.36833887655372577, 0.3333014616187132, 0.32220474773381114, 0.31996900363169056, 0.3971052999149489, 0.3558392749525908, 0.3207575396955826, 0.334973484780125, 0.09990129110591461, 0.0988214778629839, 0.09605044163159804, 0.09978001905782674, 0.10608170572570674, 0.09768715564867292, 0.10496524791333284, 0.10315420382471907, 0.0903613841018619, 0.15960829259329112, 0.16376431374446365, 0.16621230784724417, 0.1702819699368716, 0.2336131539800208, 0.15401065631571254, 0.16017705613123867, 0.147316166899486, 0.18783242059693994, 0.2545763294373805, 0.24443482545485873, 0.25826183040621864, 0.23947513619298233, 0.2470035237113979, 0.2462294873112313, 0.2533211682331926, 0.23620285924754558, 0.2416290060594959, 0.17879922079005262, 0.1696976430417939, 0.18171214467544572, 0.17624789919424733, 0.2100003269837033, 0.1814485124552201, 0.19184042807763468, 0.17978870973558791, 0.1834076679793506, 0.19131489173925886, 0.18907272816438148, 0.19977129840210728, 0.2011603229640615, 0.2108090102104342, 0.2145534159166208, 0.21252754788124129, 0.1955497538429818, 0.20068319626212783, 0.17573687619597111, 0.18552252387757273, 0.1833429283678748, 0.1824478524862727, 0.1761926066429016, 0.1756740154075893, 0.1740706709321599, 0.17990996411475157, 0.1852682852808708, 0.1846997746629615, 0.4542424932140958, 0.19413470373042585, 0.4593993459627459, 0.36024614922306253, 0.16492692350366356, 0.3611436609994766, 0.376353542956968, 0.3322846986777933, 0.2998961812231986, 0.16571619466029575, 0.37078778918440247, 0.44229854947443215, 0.20544096399684664, 0.20931724281437591, 0.289152071168978, 0.38178854466731593, 0.32955091838430917, 0.1928353523161912, 0.18280024091175917, 0.17680876457512873, 0.1758629140367589, 0.17405325580967623, 0.17974153011990734, 0.18703502457286914, 0.1842366673878435, 0.18070589066624054, 0.09371340189274091, 0.08365214449984071, 0.08260464253971078, 0.08570536400259665, 0.0867489650676081, 0.08651323194339022, 0.08031447239063871, 0.08258681912640675, 0.09920705630412852]}, "mutation_prompt": null}
{"id": "bc49e8a2-b653-409f-a181-38da5120f2aa", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationRateOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation rate adaptation based on the fitness landscape\n                    r1, r2, r3 = np.random.choice(self.population_size, 3, replace=False)\n                    diff_vector = population[r2] - population[r3]\n                    trial_vector = population[r1] + mutation_rate*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[r1]:\n                        population[r1] = trial_vector\n                        fitness[r1] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicMutationRateOptimizationAlgorithm", "description": "Introducing a dynamic mutation rate adaptation based on the fitness landscape to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (5,) ')", "parent_id": "85c9214b-7b97-4dda-bc6c-43b6dbe0d325", "metadata": {}, "mutation_prompt": null}
{"id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Implementing a dynamic mutation strategy based on local fitness landscape to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 44, "fitness": 0.19550200458243142, "feedback": "The algorithm EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "85c9214b-7b97-4dda-bc6c-43b6dbe0d325", "metadata": {"aucs": [0.3452996787503062, 0.335947417445731, 0.36010677782635836, 0.35660136084531835, 0.3682652500887471, 0.3382926048547341, 0.37517139527446075, 0.3633991079519644, 0.3905688703839443, 9.999999999998899e-05, 0.03570922164875101, 9.999999999998899e-05, 0.007959659102083738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08948785218045174, 0.10679806356984778, 0.08755531314786313, 0.11016746483194417, 0.09562524137534834, 0.11776209503326662, 0.10204441482722215, 0.10975864597190699, 0.108716703715794, 0.08264970705151331, 0.09319687476052418, 0.08496521739526974, 0.09694023888301728, 0.08133568654548218, 0.08168225075883606, 0.1190345913777241, 0.08450659405700278, 0.08094553216510958, 0.9523473327222183, 0.967067140722907, 0.9611453411915262, 0.9552015837530619, 0.9600283905700004, 0.9616277483603005, 0.9356913245844221, 0.9642108908811879, 0.9349647911517053, 0.19606851997657637, 0.2286186546794302, 0.23203188873023817, 0.21736112918038042, 0.18859988135368955, 0.20892809048444938, 0.1988695821649179, 0.20184298963355563, 0.18816042113140508, 0.26327168108262233, 0.26018855709145705, 0.20387844350940287, 0.30169292513772106, 0.24448063149397425, 0.22530992316385268, 0.2291115759228174, 0.30813619813076143, 0.32381980112208963, 0.124745718796196, 0.12482332178482025, 0.13077604556738565, 0.1334214233253933, 0.13091634964230614, 0.1261272415388618, 0.1340750779180898, 0.13418263053437762, 0.13509190169643792, 0.13224665480709663, 0.10857075291207308, 0.13248269874062735, 0.1394835157692914, 0.14335012244295398, 0.1313347789660505, 0.14289625230237257, 0.09476152352248424, 0.1418126984283664, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045479769291301153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12055565662004342, 0.06888186936232321, 0.08025634390167902, 0.06619572178548205, 0.049046699103250324, 0.07066004351338995, 0.08917325435055101, 0.089390877092142, 0.06836916493359257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07835443238822681, 0.07169805070526414, 0.0608849410384148, 0.06539438467304881, 0.08442533842712274, 0.09826763105218816, 0.0798387781545844, 0.06771974847286144, 0.059135423429024, 0.33751491259316735, 0.3508887900465284, 0.3640743054929193, 0.33933709874905393, 0.3379640545060447, 0.3460671001934926, 0.3514498132439706, 0.3763477640656572, 0.3473923304189287, 0.09245481887140816, 0.09224129645978374, 0.08913133777540583, 0.10352744143026071, 0.10752059839839845, 0.09876180342946494, 0.09851128832859724, 0.0914509180544919, 0.08170535382277955, 0.14747973920274848, 0.1698361041412536, 0.1674434207535005, 0.1650138909127703, 0.18115367450486086, 0.1916907804488941, 0.2047250299123886, 0.176622753101631, 0.16787786330677523, 0.28594620235421064, 0.2568003443151049, 0.24413562667260025, 0.23796388543431335, 0.2417926479953576, 0.24297550658258538, 0.23967324052005168, 0.23715047862525185, 0.25398748717753583, 0.20272194156336498, 0.1827165410602496, 0.18850228042215833, 0.1891279883974617, 0.2021006655366674, 0.19990212059854984, 0.1996051241913116, 0.18788304242407672, 0.18178806193384145, 0.2030728288857957, 0.1831140654751946, 0.22294169877621728, 0.25306657027084556, 0.25815010505123226, 0.19379280923513365, 0.22150192429278537, 0.20882365081389875, 0.2015959384843069, 0.20778205584788167, 0.18297057585196164, 0.1920726307461228, 0.18457044510748966, 0.18186915314841967, 0.17263556077501996, 0.18984743796654946, 0.19037513154862395, 0.190644624643188, 0.1851046504855014, 0.48517221320080417, 0.2069920602507611, 0.39402054032608824, 0.19877765862267338, 0.1991901504189475, 0.22061091560436275, 0.46104904182456896, 0.16290501520830825, 0.11567857862450459, 0.11202050782614259, 0.4360088950099975, 0.42714823394982326, 0.2284769506219313, 0.39418791276098786, 0.16725541862563387, 0.2498877080948163, 0.346129357939982, 0.1852210114726286, 0.2095390252827759, 0.18535131653525683, 0.1915690747486637, 0.18303814072281643, 0.18723522100927625, 0.1774482090773356, 0.1741504225035565, 0.18457312521790847, 0.091325940520397, 0.09071882582723212, 0.09693018167211864, 0.10203477176284048, 0.09731151976581098, 0.08259113181837874, 0.09847182798824816, 0.0996730750054381, 0.07349854944965317]}, "mutation_prompt": null}
{"id": "dc490756-d5d1-4379-ba46-7934fb805191", "solution": "import numpy as np\n\nclass AdaptiveMutationOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                performance_ratio = np.abs(fitness - fitness.min()) / np.maximum(1e-8, np.abs(fitness.max() - fitness.min()))\n                mutation_strength = 0.5 + 0.5 * performance_ratio[i % self.population_size]\n                mutation_rate = np.clip(mutation_strength + np.random.normal(0, 0.1), 0.1, 0.9)\n\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing the adaptive mutation mechanism\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "AdaptiveMutationOptimizationAlgorithmSpeed", "description": "Introducing a novel adaptive mutation mechanism based on individual performance to guide the exploration process for faster convergence.", "configspace": "", "generation": 45, "fitness": 0.1867457056309647, "feedback": "The algorithm AdaptiveMutationOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.3244340356071256, 0.3208095583505428, 0.337046758087025, 0.31025402611097175, 0.3927724848825356, 0.3507828824315866, 0.3366442627037274, 0.31963911840627657, 0.3485041780998023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10743096727451917, 0.0936488592796153, 0.08254381763497842, 0.09330638524391399, 0.11417108202609527, 0.10325680422896932, 0.10019417768033145, 0.09074558894352935, 0.09077311832092216, 0.0807942896872208, 0.08150601328290763, 0.08738407264082326, 0.08008900694594123, 0.07668840472735305, 0.10801542993014812, 0.079614485612307, 0.11766792571573492, 0.08372445777108173, 0.9649028904102399, 0.975571000585946, 0.9729582948225954, 0.966059143334538, 0.9738091719261256, 0.9711200708817551, 0.9611555312537479, 0.9690075430742655, 0.9513513624910805, 0.1868824498431746, 0.20530060556259278, 0.2102261551069592, 0.1818220300626231, 0.1647776542102669, 0.18145388568407173, 0.18034921320711605, 0.17790149836679825, 0.20093360550229578, 0.22446320610521575, 0.27815352712211094, 0.20543501872660597, 0.23538284838784007, 0.2385559369268464, 0.2976274769699342, 0.2293251029990483, 0.2510190619803625, 0.23408674135909902, 0.11538887613457827, 0.11120488695498776, 0.1327985029332307, 0.11073829883195485, 0.12205941954104671, 0.07704373039839907, 0.1272952159894004, 0.1780021587289501, 0.12517982458395727, 0.11311570073916954, 0.12170813229595046, 0.1303187581735008, 0.14116409615098313, 0.13092012937922137, 0.1176932700619262, 0.11875681946331695, 0.08525199630381453, 0.1310753113760187, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006095469498464956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0566109914580708, 0.05004989030643914, 0.09248179156804948, 0.10616092927691112, 0.04504438814760703, 0.053716492863006504, 0.09376901544317684, 0.048849483016754625, 0.06893704645681609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04622925899557617, 0.052049800161587, 0.04837762046977134, 0.05022039694676317, 0.04492663130551844, 0.06806925573663614, 0.04529033843332675, 0.05992815775881444, 0.05080926594077173, 0.32803078081115356, 0.33036155507113885, 0.3252981258637304, 0.3215967215220794, 0.35130832080905494, 0.35397445347309686, 0.3259286823316404, 0.32526381791252557, 0.36346357146189456, 0.09378030917327373, 0.08856407444268566, 0.08196417945371359, 0.08178139963048892, 0.09015922417397981, 0.09174991969607216, 0.08507711600223011, 0.10112640977571741, 0.09282289090153151, 0.15420736334290974, 0.17491185304741574, 0.21265085738331424, 0.15074407666955725, 0.17857905155221943, 0.16466288455822176, 0.16986320839188607, 0.14833766868912535, 0.14889994731476341, 0.23774400701049891, 0.24809018561475393, 0.24378034704465013, 0.2434155925762176, 0.22997582374646242, 0.25945290283115885, 0.22692205586441383, 0.23278794864233698, 0.2585185834800551, 0.18320476209202807, 0.18233882906330046, 0.17548779808924753, 0.18040583592227855, 0.17827013056446017, 0.17584759858366783, 0.1814087412992571, 0.18018670775695012, 0.17661970252090464, 0.2393512986107761, 0.19290628112533215, 0.19340005152785855, 0.20464283274934747, 0.18655474175460418, 0.20058099613784763, 0.20751658789212313, 0.19724634551952958, 0.19863899032426302, 0.18775578999490927, 0.18112637322470804, 0.18240525947850417, 0.18664227399876032, 0.19063735113157398, 0.1790237570441221, 0.18710122538120044, 0.18591956671593646, 0.17794154443899768, 0.1848491757584999, 0.4798455689778691, 0.2048757009492751, 0.37419619241945523, 0.19789363505872248, 0.31630611673232356, 0.5173060085847991, 0.39164482772871156, 0.16259704505272476, 0.15132778418990178, 0.1629385252881108, 0.3245136131924907, 0.3278519378494007, 0.1525732022786287, 0.33843276701818603, 0.16594390378416735, 0.13372969767160214, 0.1678600510320668, 0.180652427831255, 0.18605964918446716, 0.1793986526221255, 0.17628044399359644, 0.20756224308176285, 0.1746302826397279, 0.17014530686973706, 0.18203867417118824, 0.19154713118015154, 0.08448374165149375, 0.08012825058107409, 0.08691115965008323, 0.11304831757122424, 0.08135730883929759, 0.07314468996175583, 0.07506359305115617, 0.07730263991910147, 0.07715621890869129]}, "mutation_prompt": null}
{"id": "c9b98da2-99da-4e82-92f6-90d49bd8a29d", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Implementing a dynamic mutation strategy based on local fitness landscape to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.3452996787503062, 0.335947417445731, 0.36010677782635836, 0.35660136084531835, 0.3682652500887471, 0.3382926048547341, 0.37517139527446075, 0.3633991079519644, 0.3905688703839443, 9.999999999998899e-05, 0.03570922164875101, 9.999999999998899e-05, 0.007959659102083738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08948785218045174, 0.10679806356984778, 0.08755531314786313, 0.11016746483194417, 0.09562524137534834, 0.11776209503326662, 0.10204441482722215, 0.10975864597190699, 0.108716703715794, 0.08264970705151331, 0.09319687476052418, 0.08496521739526974, 0.09694023888301728, 0.08133568654548218, 0.08168225075883606, 0.1190345913777241, 0.08450659405700278, 0.08094553216510958, 0.9523473327222183, 0.967067140722907, 0.9611453411915262, 0.9552015837530619, 0.9600283905700004, 0.9616277483603005, 0.9356913245844221, 0.9642108908811879, 0.9349647911517053, 0.19606851997657637, 0.2286186546794302, 0.23203188873023817, 0.21736112918038042, 0.18859988135368955, 0.20892809048444938, 0.1988695821649179, 0.20184298963355563, 0.18816042113140508, 0.26327168108262233, 0.26018855709145705, 0.20387844350940287, 0.30169292513772106, 0.24448063149397425, 0.22530992316385268, 0.2291115759228174, 0.30813619813076143, 0.32381980112208963, 0.124745718796196, 0.12482332178482025, 0.13077604556738565, 0.1334214233253933, 0.13091634964230614, 0.1261272415388618, 0.1340750779180898, 0.13418263053437762, 0.13509190169643792, 0.13224665480709663, 0.10857075291207308, 0.13248269874062735, 0.1394835157692914, 0.14335012244295398, 0.1313347789660505, 0.14289625230237257, 0.09476152352248424, 0.1418126984283664, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045479769291301153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12055565662004342, 0.06888186936232321, 0.08025634390167902, 0.06619572178548205, 0.049046699103250324, 0.07066004351338995, 0.08917325435055101, 0.089390877092142, 0.06836916493359257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07835443238822681, 0.07169805070526414, 0.0608849410384148, 0.06539438467304881, 0.08442533842712274, 0.09826763105218816, 0.0798387781545844, 0.06771974847286144, 0.059135423429024, 0.33751491259316735, 0.3508887900465284, 0.3640743054929193, 0.33933709874905393, 0.3379640545060447, 0.3460671001934926, 0.3514498132439706, 0.3763477640656572, 0.3473923304189287, 0.09245481887140816, 0.09224129645978374, 0.08913133777540583, 0.10352744143026071, 0.10752059839839845, 0.09876180342946494, 0.09851128832859724, 0.0914509180544919, 0.08170535382277955, 0.14747973920274848, 0.1698361041412536, 0.1674434207535005, 0.1650138909127703, 0.18115367450486086, 0.1916907804488941, 0.2047250299123886, 0.176622753101631, 0.16787786330677523, 0.28594620235421064, 0.2568003443151049, 0.24413562667260025, 0.23796388543431335, 0.2417926479953576, 0.24297550658258538, 0.23967324052005168, 0.23715047862525185, 0.25398748717753583, 0.20272194156336498, 0.1827165410602496, 0.18850228042215833, 0.1891279883974617, 0.2021006655366674, 0.19990212059854984, 0.1996051241913116, 0.18788304242407672, 0.18178806193384145, 0.2030728288857957, 0.1831140654751946, 0.22294169877621728, 0.25306657027084556, 0.25815010505123226, 0.19379280923513365, 0.22150192429278537, 0.20882365081389875, 0.2015959384843069, 0.20778205584788167, 0.18297057585196164, 0.1920726307461228, 0.18457044510748966, 0.18186915314841967, 0.17263556077501996, 0.18984743796654946, 0.19037513154862395, 0.190644624643188, 0.1851046504855014, 0.48517221320080417, 0.2069920602507611, 0.39402054032608824, 0.19877765862267338, 0.1991901504189475, 0.22061091560436275, 0.46104904182456896, 0.16290501520830825, 0.11567857862450459, 0.11202050782614259, 0.4360088950099975, 0.42714823394982326, 0.2284769506219313, 0.39418791276098786, 0.16725541862563387, 0.2498877080948163, 0.346129357939982, 0.1852210114726286, 0.2095390252827759, 0.18535131653525683, 0.1915690747486637, 0.18303814072281643, 0.18723522100927625, 0.1774482090773356, 0.1741504225035565, 0.18457312521790847, 0.091325940520397, 0.09071882582723212, 0.09693018167211864, 0.10203477176284048, 0.09731151976581098, 0.08259113181837874, 0.09847182798824816, 0.0996730750054381, 0.07349854944965317]}, "mutation_prompt": null}
{"id": "f201be7c-053e-4b5f-8f7c-2ea05c75b6dc", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Implementing a dynamic mutation strategy based on local fitness landscape to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.3452996787503062, 0.335947417445731, 0.36010677782635836, 0.35660136084531835, 0.3682652500887471, 0.3382926048547341, 0.37517139527446075, 0.3633991079519644, 0.3905688703839443, 9.999999999998899e-05, 0.03570922164875101, 9.999999999998899e-05, 0.007959659102083738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08948785218045174, 0.10679806356984778, 0.08755531314786313, 0.11016746483194417, 0.09562524137534834, 0.11776209503326662, 0.10204441482722215, 0.10975864597190699, 0.108716703715794, 0.08264970705151331, 0.09319687476052418, 0.08496521739526974, 0.09694023888301728, 0.08133568654548218, 0.08168225075883606, 0.1190345913777241, 0.08450659405700278, 0.08094553216510958, 0.9523473327222183, 0.967067140722907, 0.9611453411915262, 0.9552015837530619, 0.9600283905700004, 0.9616277483603005, 0.9356913245844221, 0.9642108908811879, 0.9349647911517053, 0.19606851997657637, 0.2286186546794302, 0.23203188873023817, 0.21736112918038042, 0.18859988135368955, 0.20892809048444938, 0.1988695821649179, 0.20184298963355563, 0.18816042113140508, 0.26327168108262233, 0.26018855709145705, 0.20387844350940287, 0.30169292513772106, 0.24448063149397425, 0.22530992316385268, 0.2291115759228174, 0.30813619813076143, 0.32381980112208963, 0.124745718796196, 0.12482332178482025, 0.13077604556738565, 0.1334214233253933, 0.13091634964230614, 0.1261272415388618, 0.1340750779180898, 0.13418263053437762, 0.13509190169643792, 0.13224665480709663, 0.10857075291207308, 0.13248269874062735, 0.1394835157692914, 0.14335012244295398, 0.1313347789660505, 0.14289625230237257, 0.09476152352248424, 0.1418126984283664, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045479769291301153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12055565662004342, 0.06888186936232321, 0.08025634390167902, 0.06619572178548205, 0.049046699103250324, 0.07066004351338995, 0.08917325435055101, 0.089390877092142, 0.06836916493359257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07835443238822681, 0.07169805070526414, 0.0608849410384148, 0.06539438467304881, 0.08442533842712274, 0.09826763105218816, 0.0798387781545844, 0.06771974847286144, 0.059135423429024, 0.33751491259316735, 0.3508887900465284, 0.3640743054929193, 0.33933709874905393, 0.3379640545060447, 0.3460671001934926, 0.3514498132439706, 0.3763477640656572, 0.3473923304189287, 0.09245481887140816, 0.09224129645978374, 0.08913133777540583, 0.10352744143026071, 0.10752059839839845, 0.09876180342946494, 0.09851128832859724, 0.0914509180544919, 0.08170535382277955, 0.14747973920274848, 0.1698361041412536, 0.1674434207535005, 0.1650138909127703, 0.18115367450486086, 0.1916907804488941, 0.2047250299123886, 0.176622753101631, 0.16787786330677523, 0.28594620235421064, 0.2568003443151049, 0.24413562667260025, 0.23796388543431335, 0.2417926479953576, 0.24297550658258538, 0.23967324052005168, 0.23715047862525185, 0.25398748717753583, 0.20272194156336498, 0.1827165410602496, 0.18850228042215833, 0.1891279883974617, 0.2021006655366674, 0.19990212059854984, 0.1996051241913116, 0.18788304242407672, 0.18178806193384145, 0.2030728288857957, 0.1831140654751946, 0.22294169877621728, 0.25306657027084556, 0.25815010505123226, 0.19379280923513365, 0.22150192429278537, 0.20882365081389875, 0.2015959384843069, 0.20778205584788167, 0.18297057585196164, 0.1920726307461228, 0.18457044510748966, 0.18186915314841967, 0.17263556077501996, 0.18984743796654946, 0.19037513154862395, 0.190644624643188, 0.1851046504855014, 0.48517221320080417, 0.2069920602507611, 0.39402054032608824, 0.19877765862267338, 0.1991901504189475, 0.22061091560436275, 0.46104904182456896, 0.16290501520830825, 0.11567857862450459, 0.11202050782614259, 0.4360088950099975, 0.42714823394982326, 0.2284769506219313, 0.39418791276098786, 0.16725541862563387, 0.2498877080948163, 0.346129357939982, 0.1852210114726286, 0.2095390252827759, 0.18535131653525683, 0.1915690747486637, 0.18303814072281643, 0.18723522100927625, 0.1774482090773356, 0.1741504225035565, 0.18457312521790847, 0.091325940520397, 0.09071882582723212, 0.09693018167211864, 0.10203477176284048, 0.09731151976581098, 0.08259113181837874, 0.09847182798824816, 0.0996730750054381, 0.07349854944965317]}, "mutation_prompt": null}
{"id": "721fed80-707d-40e6-9a87-5655ec09e380", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationRateAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  \n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  \n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.2:  # 20% probability for adaptive mutation rate\n                for i in range(self.dim):\n                    mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                    diversity_factor = np.std(population[:, i])  # Measure population diversity\n                    mutation_rate *= 1 + 0.1 * diversity_factor  # Adjust mutation rate based on diversity\n                    population[:, i] += mutation_rate * np.random.standard_normal(self.population_size)\n            \n        return best_individual", "name": "EnhancedAdaptiveMutationRateAlgorithm", "description": "Enhancing exploration through adaptive mutation rates based on population diversity and fitness landscape diversity.", "configspace": "", "generation": 48, "fitness": 0.190513213211519, "feedback": "The algorithm EnhancedAdaptiveMutationRateAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.33955868141406476, 0.3415664582127157, 0.37185161447325343, 0.3625186713155365, 0.3458082933021086, 0.37516594310520845, 0.3825765373617497, 0.339120142291647, 0.3653145253275677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04859024240006149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09435062748566447, 0.09022082794205777, 0.09287044679552381, 0.08640870463956452, 0.10440691994967133, 0.10415627533261163, 0.09076200268377976, 0.08676651618483533, 0.09158444948943911, 0.08927569050158324, 0.07891850888770291, 0.09097340058537517, 0.08704844474916495, 0.07482810193950629, 0.10207241996796601, 0.09306078893403391, 0.0957332144373857, 0.09579374247688699, 0.9685922281448788, 0.9662640470253746, 0.9480767403826433, 0.9686965043089217, 0.9533165248185059, 0.939375609152946, 0.9495447481429709, 0.9568387367408996, 0.927720282972596, 0.19171543578308337, 0.20142988312429122, 0.18285764409173655, 0.17751306564890434, 0.18575897813653808, 0.2047506758073443, 0.2046196434365144, 0.18477283470649264, 0.20383978956264837, 0.2320624094802053, 0.240497170647747, 0.2728245435607646, 0.23410747545651922, 0.3033862969507932, 0.2552770270081508, 0.21163834515902458, 0.23332873109062213, 0.24225848528728477, 0.06705527858212956, 0.11989134049484151, 0.15404171779945408, 0.1496852493737606, 0.12449558973306252, 0.12949931964750738, 0.1332735439064252, 0.12899099346744858, 0.1318699724274266, 0.12537362604264257, 0.16169455706477143, 0.1448169472836376, 0.13738067111721408, 0.1331357492216414, 0.13806977310319124, 0.12814346899530205, 0.12798965095770598, 0.15108413812670463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12294910901825629, 0.08771105800097723, 0.12288278811117581, 0.07637183946991699, 0.08658328579090013, 0.054705724117785626, 0.10763457795235898, 0.08530349269054927, 0.09009864583350047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08655500614965494, 0.055929281979597345, 0.05572565184357847, 0.06053402762190019, 0.053539831885012434, 0.06205365505999949, 0.05527608498268688, 0.06470798847022885, 0.06578789882525049, 0.3741873920048364, 0.3323785298793398, 0.3394614841280602, 0.3676430548108548, 0.33751243133201503, 0.33330558654476694, 0.3374510331870927, 0.33635806918242017, 0.33316015923658526, 0.08721444656475619, 0.08486981242376934, 0.09796505487783447, 0.08330966067272272, 0.09798719038614034, 0.12643471572263265, 0.07901545792027354, 0.090590889587285, 0.08303504881962376, 0.1661602308984479, 0.16321600741799558, 0.1816044030856897, 0.1692357251593537, 0.20457844226209976, 0.1706217785117493, 0.1490991559566599, 0.19846710882485374, 0.17810992267660108, 0.24787670313776822, 0.2533235889972115, 0.23430232279148155, 0.2397019214036875, 0.23584192781533653, 0.251332247294793, 0.2546787557644805, 0.26269323691415336, 0.2629541520200148, 0.19145665121211963, 0.18049120434711274, 0.1873893227786917, 0.19039208093675208, 0.18719167141053406, 0.19321845456079922, 0.1875666165587998, 0.18240434873006806, 0.17621212877284964, 0.20775342610930458, 0.22126176988378998, 0.2103419357569425, 0.1987896729506491, 0.20709691504178573, 0.2060932552650181, 0.22268400441669112, 0.20569589719225512, 0.19869222685192833, 0.18781840500295943, 0.18704116284733174, 0.1810190390303844, 0.17258823198717743, 0.18427751451971153, 0.18178073006757367, 0.17584614700280599, 0.18475040992550262, 0.18593659721760503, 0.18540984274266725, 0.48589201141234284, 0.18385317333061413, 0.43600250287876385, 0.19654810729842076, 0.19696640881903305, 0.15710028104467078, 0.1926179917928187, 0.4458543519313324, 0.102688240058601, 0.11260931323492374, 0.3560732648646584, 0.3568682820221011, 0.2157270304675054, 0.20561236687473572, 0.20628759694847765, 0.11373921053279623, 0.35448432813017805, 0.18302487790990052, 0.1805479944188222, 0.17661103723712224, 0.17556017617331598, 0.1929059004872693, 0.19097133531387744, 0.18303516313223367, 0.17629108689963036, 0.18166933131877316, 0.11731709736751617, 0.08485434371765166, 0.07199574661304176, 0.10542930294292874, 0.08962592412550707, 0.07953593538856663, 0.10700297886815202, 0.0846879956400759, 0.0781784691952887]}, "mutation_prompt": null}
{"id": "d03fe6f5-f16c-4c4a-8ef5-ae976d81cc8d", "solution": "import numpy as np\n\nclass AdaptiveMutationEnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                var_fitness = np.var(fitness)\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min()) + 0.1 * var_fitness\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing an adaptive mutation strategy based on fitness variance\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "AdaptiveMutationEnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Introducing an adaptive mutation strategy based on the variance of fitness values to dynamically adjust exploration and exploitation rates for faster convergence.", "configspace": "", "generation": 49, "fitness": 0.1280952835429876, "feedback": "The algorithm AdaptiveMutationEnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.19312500694989265, 0.18836873709546909, 0.19120670619911118, 0.16835853628122954, 0.17312426725094698, 0.15659870282104915, 0.1517367438312882, 0.17383561939129777, 0.17275234265797368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03966111197361022, 0.042002833341214685, 0.0482666147191656, 0.047585024888441185, 0.05107738984649368, 0.04421274603781167, 0.04428298285386301, 0.07218399485045446, 0.04236601799034201, 0.02948675546450341, 0.03178101170192693, 0.02099180687361335, 0.038713130570427357, 0.02118923689576424, 0.03530676984236636, 0.03908191928064986, 0.03145193592524498, 0.04046198199958906, 0.9946503333275283, 0.9975023007441687, 0.9950697350830883, 0.984199826318805, 0.9876987360099164, 0.9974832890635899, 0.9948229480515576, 0.9931452771647005, 0.9977777099894095, 0.06479720439754111, 0.0831361911614873, 0.08088459246161217, 0.07412351799630035, 0.07077769859609984, 0.09163160254113922, 0.0741681655510098, 0.07174616638505982, 0.08805051824299703, 0.12493237794446288, 0.1211668840183987, 0.0978710159097882, 0.13999626120751896, 0.13474924148829637, 0.11511955629117798, 0.15195329482104858, 0.11764658029907005, 0.16163482829176268, 9.999999999998899e-05, 0.00893645247495456, 0.00039787773936983406, 0.009181322665530067, 0.07417273721822748, 0.0028566565295641277, 0.0050795586692955474, 0.028000930973789973, 0.01909775324207763, 0.002876241662290391, 0.0789416405907617, 0.0022918173789540086, 0.005304437959804287, 9.999999999998899e-05, 0.010704473138278936, 0.00992233921833574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04897215345757211, 0.0371234839017085, 0.08417276677800933, 0.04458138270000567, 0.07221208685576153, 0.04200341377428629, 0.04611799095578739, 0.03783911919086602, 0.04770770585288031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005048486481783243, 0.020507219271236332, 9.999999999998899e-05, 9.999999999998899e-05, 0.2036730824004871, 0.19463345572490254, 0.1828457487315831, 0.18876925361155183, 0.1987813623016096, 0.17935353656419883, 0.17768451013299813, 0.18686643197358543, 0.19649846891071965, 0.04042486566471648, 0.0487440042523174, 0.04953557691088373, 0.05323373672192133, 0.04426275882159192, 0.05706827224037481, 0.05653322527595228, 0.04277077836399945, 0.04266753110492505, 0.13117720059376226, 0.13259347412898292, 0.13434549808164398, 0.1337099163462524, 0.1335757992569213, 0.1352410243179677, 0.15837440451656493, 0.12589979211618096, 0.14368678741524543, 0.1544827794139304, 0.174380206356196, 0.16276688866086497, 0.1638994877662724, 0.17417128742077115, 0.17008115857504236, 0.17737346681179111, 0.15542082358011644, 0.16910467634920145, 0.0988104840763746, 0.10709398769348266, 0.10046116295033958, 0.10774384720684116, 0.12915933828527482, 0.11182632372313217, 0.11461817536851215, 0.12188700831571964, 0.1364549620427048, 0.18149693517894394, 0.1497811920388975, 0.15136324750581898, 0.14179522711338488, 0.1468488836287264, 0.14438159259543315, 0.1433611602557021, 0.17977501086093983, 0.14685731431195603, 0.13628340451263266, 0.13574061344403576, 0.1574239164700888, 0.13702007961261675, 0.1497541812901605, 0.1525946470300893, 0.13856655924048555, 0.1464196019399776, 0.14318877631120208, 0.15900181314184614, 0.16452920915384073, 0.16905172287430592, 0.14900252633722866, 0.15497547455585392, 0.16518766414666675, 0.23697944858961417, 0.17515305462337505, 0.15397362622109667, 0.16737357991732438, 0.1555662738112713, 0.19060748835003294, 0.14118695983554264, 0.1669614761428757, 0.17012982513143926, 0.14826488696754347, 0.21674957401231876, 0.19218060239248502, 0.17935718203061712, 0.182174074014959, 0.1828932438693327, 0.18755816782856272, 0.18945693050311108, 0.185165039610118, 0.18707468110781544, 0.17539984025022282, 0.18476493237453662, 0.06072022562700152, 0.06653404095806947, 0.05033008151753382, 0.04851108804329418, 0.06499528768517449, 0.0539885842506761, 0.05293227274700896, 0.0466740092636152, 0.06404162340710973]}, "mutation_prompt": null}
{"id": "36de3539-7207-4889-ac53-5e733ebd0930", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Implementing a dynamic mutation strategy based on local fitness landscape to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.3452996787503062, 0.335947417445731, 0.36010677782635836, 0.35660136084531835, 0.3682652500887471, 0.3382926048547341, 0.37517139527446075, 0.3633991079519644, 0.3905688703839443, 9.999999999998899e-05, 0.03570922164875101, 9.999999999998899e-05, 0.007959659102083738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08948785218045174, 0.10679806356984778, 0.08755531314786313, 0.11016746483194417, 0.09562524137534834, 0.11776209503326662, 0.10204441482722215, 0.10975864597190699, 0.108716703715794, 0.08264970705151331, 0.09319687476052418, 0.08496521739526974, 0.09694023888301728, 0.08133568654548218, 0.08168225075883606, 0.1190345913777241, 0.08450659405700278, 0.08094553216510958, 0.9523473327222183, 0.967067140722907, 0.9611453411915262, 0.9552015837530619, 0.9600283905700004, 0.9616277483603005, 0.9356913245844221, 0.9642108908811879, 0.9349647911517053, 0.19606851997657637, 0.2286186546794302, 0.23203188873023817, 0.21736112918038042, 0.18859988135368955, 0.20892809048444938, 0.1988695821649179, 0.20184298963355563, 0.18816042113140508, 0.26327168108262233, 0.26018855709145705, 0.20387844350940287, 0.30169292513772106, 0.24448063149397425, 0.22530992316385268, 0.2291115759228174, 0.30813619813076143, 0.32381980112208963, 0.124745718796196, 0.12482332178482025, 0.13077604556738565, 0.1334214233253933, 0.13091634964230614, 0.1261272415388618, 0.1340750779180898, 0.13418263053437762, 0.13509190169643792, 0.13224665480709663, 0.10857075291207308, 0.13248269874062735, 0.1394835157692914, 0.14335012244295398, 0.1313347789660505, 0.14289625230237257, 0.09476152352248424, 0.1418126984283664, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045479769291301153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12055565662004342, 0.06888186936232321, 0.08025634390167902, 0.06619572178548205, 0.049046699103250324, 0.07066004351338995, 0.08917325435055101, 0.089390877092142, 0.06836916493359257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07835443238822681, 0.07169805070526414, 0.0608849410384148, 0.06539438467304881, 0.08442533842712274, 0.09826763105218816, 0.0798387781545844, 0.06771974847286144, 0.059135423429024, 0.33751491259316735, 0.3508887900465284, 0.3640743054929193, 0.33933709874905393, 0.3379640545060447, 0.3460671001934926, 0.3514498132439706, 0.3763477640656572, 0.3473923304189287, 0.09245481887140816, 0.09224129645978374, 0.08913133777540583, 0.10352744143026071, 0.10752059839839845, 0.09876180342946494, 0.09851128832859724, 0.0914509180544919, 0.08170535382277955, 0.14747973920274848, 0.1698361041412536, 0.1674434207535005, 0.1650138909127703, 0.18115367450486086, 0.1916907804488941, 0.2047250299123886, 0.176622753101631, 0.16787786330677523, 0.28594620235421064, 0.2568003443151049, 0.24413562667260025, 0.23796388543431335, 0.2417926479953576, 0.24297550658258538, 0.23967324052005168, 0.23715047862525185, 0.25398748717753583, 0.20272194156336498, 0.1827165410602496, 0.18850228042215833, 0.1891279883974617, 0.2021006655366674, 0.19990212059854984, 0.1996051241913116, 0.18788304242407672, 0.18178806193384145, 0.2030728288857957, 0.1831140654751946, 0.22294169877621728, 0.25306657027084556, 0.25815010505123226, 0.19379280923513365, 0.22150192429278537, 0.20882365081389875, 0.2015959384843069, 0.20778205584788167, 0.18297057585196164, 0.1920726307461228, 0.18457044510748966, 0.18186915314841967, 0.17263556077501996, 0.18984743796654946, 0.19037513154862395, 0.190644624643188, 0.1851046504855014, 0.48517221320080417, 0.2069920602507611, 0.39402054032608824, 0.19877765862267338, 0.1991901504189475, 0.22061091560436275, 0.46104904182456896, 0.16290501520830825, 0.11567857862450459, 0.11202050782614259, 0.4360088950099975, 0.42714823394982326, 0.2284769506219313, 0.39418791276098786, 0.16725541862563387, 0.2498877080948163, 0.346129357939982, 0.1852210114726286, 0.2095390252827759, 0.18535131653525683, 0.1915690747486637, 0.18303814072281643, 0.18723522100927625, 0.1774482090773356, 0.1741504225035565, 0.18457312521790847, 0.091325940520397, 0.09071882582723212, 0.09693018167211864, 0.10203477176284048, 0.09731151976581098, 0.08259113181837874, 0.09847182798824816, 0.0996730750054381, 0.07349854944965317]}, "mutation_prompt": null}
{"id": "ff89d3e5-41bd-4d9e-bffd-e6352409547d", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            # Introducing adaptive search space transformation\n            for i in range(self.dim):\n                transformed_population = np.clip(2 * population - best_individual, -5.0, 5.0)\n                transformed_fitness = np.array([func(individual) for individual in transformed_population])\n                if transformed_fitness.min() < fitness.min():\n                    population = transformed_population\n                    fitness = transformed_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Introducing a novel adaptive search space transformation mechanism to dynamically adjust the exploration capability of the algorithm.", "configspace": "", "generation": 51, "fitness": 0.1382227601028928, "feedback": "The algorithm EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.25316265593654497, 0.29491900948204053, 0.1541157093569393, 0.2945911202314707, 0.21810676766275405, 0.214222097919188, 0.24328249191633222, 0.1316633291363858, 0.2195505107841097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07461670320058289, 0.05721580359492362, 0.047619183936542187, 0.07036800736826876, 0.055702755831304795, 0.07114177030797109, 0.054930142960495476, 0.07512191008407632, 0.06427480683536724, 0.06398494457376769, 0.028143025958733414, 0.017239710921452156, 0.05557056124839799, 0.028192778032147592, 0.049976168922318376, 0.05914361235972587, 0.03640644649284552, 0.057883920599858696, 0.2755288272144528, 0.974948372409625, 0.9701846877818463, 0.9652296507865777, 0.9928779196346109, 0.9571518100745579, 0.9811187940472008, 0.9931260840867249, 0.830088130038208, 0.09012253831531325, 0.14677342793792592, 0.062299949324468584, 0.0985922652751604, 0.059563949255674764, 0.12167193694640244, 0.1527820686267447, 0.08964822223549052, 0.05529961165688946, 0.1837697394183444, 0.13133753062296705, 0.1254588275842805, 0.22751948295394964, 0.15372814684259917, 0.1733247473270576, 0.14711909308470406, 0.0872536059396265, 0.1176597224557181, 0.09147126151514184, 0.10519588819951564, 0.08059624700150603, 0.12289818480556225, 9.999999999998899e-05, 0.05816016714375416, 0.07160118722812281, 0.06001195318590158, 0.08659724660231072, 0.046761898786368494, 9.999999999998899e-05, 0.04165682180572838, 0.07941918615960986, 0.04498243974927152, 0.08242584158918287, 0.10544627623649883, 0.0017914522112354447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07688509636750718, 0.02924095201449728, 0.05059286863138024, 0.04829155448918532, 0.03480331840257622, 0.007037850438981641, 0.09008677010381161, 0.08199407264829839, 0.04065322944086425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021753551956627093, 0.028730060129528057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02215262695977649, 0.009628019142371658, 9.999999999998899e-05, 0.2953617329161783, 0.22998639699458834, 0.2015271199011125, 0.2741787791683922, 0.28197041509807563, 0.25184377711407024, 0.29722354343524504, 0.3084926845524456, 0.25273651797887153, 0.05643934544403473, 0.061400591352040235, 0.039245695841633954, 0.05836385409391476, 0.05155661113271959, 0.05141750306257342, 0.07429838144235579, 0.03446468229397037, 0.07466608830540644, 0.1446221210685138, 0.11914342834311842, 0.11966395493800885, 0.1271238998367591, 0.14316223007657425, 0.1186136658608592, 0.12633378392635808, 0.12368948178997763, 0.1359078401102254, 0.21350841611331717, 0.21059652725747469, 0.16515975278799178, 0.18096720874863248, 0.16961782574191964, 0.18022087528306585, 0.18556876139414347, 0.1497990316294583, 0.18949415257522628, 0.13587046980085793, 0.13170754403367724, 0.17221162145348168, 0.16538052514857393, 0.10142640006522319, 0.17393620632533635, 0.1379188967941587, 0.1601007290819343, 0.07104289113248019, 0.18636850160250984, 0.13534075599198825, 0.1686761115635279, 0.1992609871263511, 0.18507590136975072, 0.19050169147867513, 0.17087476900695142, 0.1317359910778767, 0.18207258896199752, 0.16754040886109434, 0.17737196226932428, 0.1596941990267493, 0.16733673934132443, 0.16646785689046117, 0.17249326856160785, 0.1537105369934164, 0.15736050087798703, 0.17089693024063968, 0.16885813812605666, 0.1465955612142429, 0.135612912484966, 0.3303696771650626, 0.12516852100184184, 0.16581381812981022, 0.1280462063461857, 0.11133945418781988, 0.15822734399964689, 0.3382667272891232, 0.10913365618417425, 0.10806498253395802, 0.2993069985554556, 0.11126202236055671, 0.16827382494156973, 0.14682376381510454, 0.10910135457676529, 0.08497051644342068, 0.18693893705055475, 0.18028681687327297, 0.18166030033052938, 0.17046932896720113, 0.1630276592052392, 0.1689699879920441, 0.16242840211673193, 0.17708929237344617, 0.16725210150956882, 0.05924908132836704, 0.08172526321164475, 0.06220439769731623, 0.05714063443688844, 0.080776484238684, 0.06237242881839644, 0.060822634383818186, 0.0540803729802648, 0.06395380619112478]}, "mutation_prompt": null}
{"id": "0ad2571c-aa9a-4127-a6c0-0db02c14794d", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeedImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n                    self.population_size = min(10, self.population_size + 1) if np.random.rand() < 0.5 else max(2, self.population_size - 1)\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeedImproved", "description": "Introducing a dynamic population resizing strategy to adaptively adjust the population size based on the local fitness landscape, enhancing exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (9,) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (9,) ')", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {}, "mutation_prompt": null}
{"id": "be24014c-f975-4e6c-9bd4-ada02bd49616", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing adaptive mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        \n                    if trial_fitness < fitness.min():  # Adapt mutation rate based on the performance\n                        mutation_rate *= 1.1\n                    else:\n                        mutation_rate *= 0.9\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedAdaptiveMutationOptimizationAlgorithmSpeed", "description": "Introducing a novel adaptive mutation strategy that dynamically adjusts the mutation rate based on the fitness landscape to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 53, "fitness": 0.19550200458243142, "feedback": "The algorithm EnhancedAdaptiveMutationOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.3452996787503062, 0.335947417445731, 0.36010677782635836, 0.35660136084531835, 0.3682652500887471, 0.3382926048547341, 0.37517139527446075, 0.3633991079519644, 0.3905688703839443, 9.999999999998899e-05, 0.03570922164875101, 9.999999999998899e-05, 0.007959659102083738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08948785218045174, 0.10679806356984778, 0.08755531314786313, 0.11016746483194417, 0.09562524137534834, 0.11776209503326662, 0.10204441482722215, 0.10975864597190699, 0.108716703715794, 0.08264970705151331, 0.09319687476052418, 0.08496521739526974, 0.09694023888301728, 0.08133568654548218, 0.08168225075883606, 0.1190345913777241, 0.08450659405700278, 0.08094553216510958, 0.9523473327222183, 0.967067140722907, 0.9611453411915262, 0.9552015837530619, 0.9600283905700004, 0.9616277483603005, 0.9356913245844221, 0.9642108908811879, 0.9349647911517053, 0.19606851997657637, 0.2286186546794302, 0.23203188873023817, 0.21736112918038042, 0.18859988135368955, 0.20892809048444938, 0.1988695821649179, 0.20184298963355563, 0.18816042113140508, 0.26327168108262233, 0.26018855709145705, 0.20387844350940287, 0.30169292513772106, 0.24448063149397425, 0.22530992316385268, 0.2291115759228174, 0.30813619813076143, 0.32381980112208963, 0.124745718796196, 0.12482332178482025, 0.13077604556738565, 0.1334214233253933, 0.13091634964230614, 0.1261272415388618, 0.1340750779180898, 0.13418263053437762, 0.13509190169643792, 0.13224665480709663, 0.10857075291207308, 0.13248269874062735, 0.1394835157692914, 0.14335012244295398, 0.1313347789660505, 0.14289625230237257, 0.09476152352248424, 0.1418126984283664, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045479769291301153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12055565662004342, 0.06888186936232321, 0.08025634390167902, 0.06619572178548205, 0.049046699103250324, 0.07066004351338995, 0.08917325435055101, 0.089390877092142, 0.06836916493359257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07835443238822681, 0.07169805070526414, 0.0608849410384148, 0.06539438467304881, 0.08442533842712274, 0.09826763105218816, 0.0798387781545844, 0.06771974847286144, 0.059135423429024, 0.33751491259316735, 0.3508887900465284, 0.3640743054929193, 0.33933709874905393, 0.3379640545060447, 0.3460671001934926, 0.3514498132439706, 0.3763477640656572, 0.3473923304189287, 0.09245481887140816, 0.09224129645978374, 0.08913133777540583, 0.10352744143026071, 0.10752059839839845, 0.09876180342946494, 0.09851128832859724, 0.0914509180544919, 0.08170535382277955, 0.14747973920274848, 0.1698361041412536, 0.1674434207535005, 0.1650138909127703, 0.18115367450486086, 0.1916907804488941, 0.2047250299123886, 0.176622753101631, 0.16787786330677523, 0.28594620235421064, 0.2568003443151049, 0.24413562667260025, 0.23796388543431335, 0.2417926479953576, 0.24297550658258538, 0.23967324052005168, 0.23715047862525185, 0.25398748717753583, 0.20272194156336498, 0.1827165410602496, 0.18850228042215833, 0.1891279883974617, 0.2021006655366674, 0.19990212059854984, 0.1996051241913116, 0.18788304242407672, 0.18178806193384145, 0.2030728288857957, 0.1831140654751946, 0.22294169877621728, 0.25306657027084556, 0.25815010505123226, 0.19379280923513365, 0.22150192429278537, 0.20882365081389875, 0.2015959384843069, 0.20778205584788167, 0.18297057585196164, 0.1920726307461228, 0.18457044510748966, 0.18186915314841967, 0.17263556077501996, 0.18984743796654946, 0.19037513154862395, 0.190644624643188, 0.1851046504855014, 0.48517221320080417, 0.2069920602507611, 0.39402054032608824, 0.19877765862267338, 0.1991901504189475, 0.22061091560436275, 0.46104904182456896, 0.16290501520830825, 0.11567857862450459, 0.11202050782614259, 0.4360088950099975, 0.42714823394982326, 0.2284769506219313, 0.39418791276098786, 0.16725541862563387, 0.2498877080948163, 0.346129357939982, 0.1852210114726286, 0.2095390252827759, 0.18535131653525683, 0.1915690747486637, 0.18303814072281643, 0.18723522100927625, 0.1774482090773356, 0.1741504225035565, 0.18457312521790847, 0.091325940520397, 0.09071882582723212, 0.09693018167211864, 0.10203477176284048, 0.09731151976581098, 0.08259113181837874, 0.09847182798824816, 0.0996730750054381, 0.07349854944965317]}, "mutation_prompt": null}
{"id": "e7575e1a-6927-4ea9-bd5d-712c3a3c9974", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Implementing a dynamic mutation strategy based on local fitness landscape to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.3452996787503062, 0.335947417445731, 0.36010677782635836, 0.35660136084531835, 0.3682652500887471, 0.3382926048547341, 0.37517139527446075, 0.3633991079519644, 0.3905688703839443, 9.999999999998899e-05, 0.03570922164875101, 9.999999999998899e-05, 0.007959659102083738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08948785218045174, 0.10679806356984778, 0.08755531314786313, 0.11016746483194417, 0.09562524137534834, 0.11776209503326662, 0.10204441482722215, 0.10975864597190699, 0.108716703715794, 0.08264970705151331, 0.09319687476052418, 0.08496521739526974, 0.09694023888301728, 0.08133568654548218, 0.08168225075883606, 0.1190345913777241, 0.08450659405700278, 0.08094553216510958, 0.9523473327222183, 0.967067140722907, 0.9611453411915262, 0.9552015837530619, 0.9600283905700004, 0.9616277483603005, 0.9356913245844221, 0.9642108908811879, 0.9349647911517053, 0.19606851997657637, 0.2286186546794302, 0.23203188873023817, 0.21736112918038042, 0.18859988135368955, 0.20892809048444938, 0.1988695821649179, 0.20184298963355563, 0.18816042113140508, 0.26327168108262233, 0.26018855709145705, 0.20387844350940287, 0.30169292513772106, 0.24448063149397425, 0.22530992316385268, 0.2291115759228174, 0.30813619813076143, 0.32381980112208963, 0.124745718796196, 0.12482332178482025, 0.13077604556738565, 0.1334214233253933, 0.13091634964230614, 0.1261272415388618, 0.1340750779180898, 0.13418263053437762, 0.13509190169643792, 0.13224665480709663, 0.10857075291207308, 0.13248269874062735, 0.1394835157692914, 0.14335012244295398, 0.1313347789660505, 0.14289625230237257, 0.09476152352248424, 0.1418126984283664, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045479769291301153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12055565662004342, 0.06888186936232321, 0.08025634390167902, 0.06619572178548205, 0.049046699103250324, 0.07066004351338995, 0.08917325435055101, 0.089390877092142, 0.06836916493359257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07835443238822681, 0.07169805070526414, 0.0608849410384148, 0.06539438467304881, 0.08442533842712274, 0.09826763105218816, 0.0798387781545844, 0.06771974847286144, 0.059135423429024, 0.33751491259316735, 0.3508887900465284, 0.3640743054929193, 0.33933709874905393, 0.3379640545060447, 0.3460671001934926, 0.3514498132439706, 0.3763477640656572, 0.3473923304189287, 0.09245481887140816, 0.09224129645978374, 0.08913133777540583, 0.10352744143026071, 0.10752059839839845, 0.09876180342946494, 0.09851128832859724, 0.0914509180544919, 0.08170535382277955, 0.14747973920274848, 0.1698361041412536, 0.1674434207535005, 0.1650138909127703, 0.18115367450486086, 0.1916907804488941, 0.2047250299123886, 0.176622753101631, 0.16787786330677523, 0.28594620235421064, 0.2568003443151049, 0.24413562667260025, 0.23796388543431335, 0.2417926479953576, 0.24297550658258538, 0.23967324052005168, 0.23715047862525185, 0.25398748717753583, 0.20272194156336498, 0.1827165410602496, 0.18850228042215833, 0.1891279883974617, 0.2021006655366674, 0.19990212059854984, 0.1996051241913116, 0.18788304242407672, 0.18178806193384145, 0.2030728288857957, 0.1831140654751946, 0.22294169877621728, 0.25306657027084556, 0.25815010505123226, 0.19379280923513365, 0.22150192429278537, 0.20882365081389875, 0.2015959384843069, 0.20778205584788167, 0.18297057585196164, 0.1920726307461228, 0.18457044510748966, 0.18186915314841967, 0.17263556077501996, 0.18984743796654946, 0.19037513154862395, 0.190644624643188, 0.1851046504855014, 0.48517221320080417, 0.2069920602507611, 0.39402054032608824, 0.19877765862267338, 0.1991901504189475, 0.22061091560436275, 0.46104904182456896, 0.16290501520830825, 0.11567857862450459, 0.11202050782614259, 0.4360088950099975, 0.42714823394982326, 0.2284769506219313, 0.39418791276098786, 0.16725541862563387, 0.2498877080948163, 0.346129357939982, 0.1852210114726286, 0.2095390252827759, 0.18535131653525683, 0.1915690747486637, 0.18303814072281643, 0.18723522100927625, 0.1774482090773356, 0.1741504225035565, 0.18457312521790847, 0.091325940520397, 0.09071882582723212, 0.09693018167211864, 0.10203477176284048, 0.09731151976581098, 0.08259113181837874, 0.09847182798824816, 0.0996730750054381, 0.07349854944965317]}, "mutation_prompt": null}
{"id": "4bd552d7-c09b-41d2-8563-a0a16ea5bbe1", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy with variable mutation range\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    mutation_range = 0.5 + 0.5 * (fitness[i] - fitness.min()) / (fitness.max() - fitness.min())\n                    trial_vector = population[i] + mutation_range * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Implementing a dynamic mutation strategy with a variable mutation range based on individual fitness to promote diverse exploration and improve convergence.", "configspace": "", "generation": 55, "fitness": 0.1921667472871357, "feedback": "The algorithm EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.33121831354392284, 0.3825910054512788, 0.34755742806175016, 0.36470364589676374, 0.34352318788288405, 0.3602162321129676, 0.4244048820866778, 0.3478709777336446, 0.3481602928423052, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030211614483743876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004044817175404725, 9.999999999998899e-05, 0.08968948497120999, 0.09945635419550458, 0.08856814270213598, 0.096165875654461, 0.1037074778343745, 0.0921919373573894, 0.10545946178540866, 0.11131259554101236, 0.11193323565576718, 0.07882098450158503, 0.08356135236463846, 0.08189939718358785, 0.09865869702740782, 0.07838023675810968, 0.07632229936215462, 0.08750741557729036, 0.08137461403486523, 0.08914099246053775, 0.9516549660486432, 0.9665380083302494, 0.9633334666920433, 0.9564166357133775, 0.9597674424453331, 0.9655939907954898, 0.9424173593207478, 0.9641830976780902, 0.9374056147251241, 0.20190471861473147, 0.2035705174918242, 0.22521569184729262, 0.18822843830496672, 0.2014962389648688, 0.2152673506653715, 0.18867345369012756, 0.18738403195713027, 0.18871574996784668, 0.2636675485753782, 0.23324076089054513, 0.20214888491149008, 0.26374380861505065, 0.26590105339637315, 0.24951652081197062, 0.22076413420082208, 0.26509487064434833, 0.25538845577552016, 0.13297890403559653, 0.11572006578300165, 0.1338837192318384, 0.125491916666285, 0.12535280081189681, 0.12312455178726345, 0.13832231205545864, 0.132638905741433, 0.14275630087659064, 0.14306744568529361, 0.11967048652845746, 0.13799694680963637, 0.1322874598151651, 0.12837622785893088, 0.11728111246457862, 0.13424868128552425, 0.09178372374770138, 0.12696701227243012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006250986908802325, 0.09567364798810107, 0.04477127941780368, 0.06383681268721997, 0.09558148502022323, 0.0365683518815455, 0.09342769727632128, 0.13923818106141883, 0.054295288944568365, 0.07766486781624171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06183092503607024, 0.060098121622919054, 0.07741762034054622, 0.06445485850141686, 0.0714809339439344, 0.06499801369485536, 0.0598333554018462, 0.06580456358234865, 0.0569868337137277, 0.36710828393495454, 0.36517671059669043, 0.3321178279415379, 0.36143352123661465, 0.33511028519037267, 0.3327419986282043, 0.35702892499303496, 0.35038196823650036, 0.3599184953060731, 0.10703863279402681, 0.09767496278314103, 0.09006517250782342, 0.10586241489569859, 0.09360348021451681, 0.09336727356317753, 0.08574996967161808, 0.10810444895748716, 0.10009756359580024, 0.18848432400934834, 0.1924103692595499, 0.16748974932071137, 0.17338057800322382, 0.17119182682729173, 0.1620529137299922, 0.16081562392594828, 0.2041166564686574, 0.1609467075475961, 0.2493805863861125, 0.24638039809177437, 0.2297468440359598, 0.2562446958641871, 0.22212239785400922, 0.24504424714741668, 0.2636450804361409, 0.24591992368166093, 0.2500850974541531, 0.18476168411548133, 0.21010071844504297, 0.18295039897984944, 0.19421659744377306, 0.176635537039189, 0.17994772657704783, 0.18323918534326322, 0.18187824097687322, 0.1900718746672868, 0.20486071135801887, 0.21688668747427586, 0.1910106293365701, 0.19847792250796725, 0.1947536243885606, 0.19932760671266414, 0.20762570091074117, 0.18421955757750152, 0.21295803142690006, 0.17619821596927054, 0.1836140217569986, 0.18128873677031987, 0.18379123336072922, 0.1807125110716008, 0.18306324931280482, 0.19406682670921904, 0.2017667995421022, 0.19334827816094902, 0.18638934487538694, 0.5080697952834062, 0.20396676352189747, 0.4500774782315582, 0.19754628328150392, 0.19596688788261796, 0.2140866922237209, 0.45005665059613176, 0.16402231265040013, 0.1147232897265521, 0.11163889306534003, 0.38856948995074325, 0.4047714098725248, 0.19935219848362506, 0.39058240294133606, 0.1671809095670631, 0.23169121514021696, 0.3273949763552101, 0.17411673496200952, 0.2083604410180776, 0.17991349995806027, 0.1699456929395854, 0.17522851025122688, 0.19033144895568377, 0.19777616951614452, 0.1781827766936609, 0.185095853485584, 0.09112236506587834, 0.08150935212967358, 0.08347593461821612, 0.08971920251983556, 0.09319251356254954, 0.08145221537795366, 0.10128218181184334, 0.10515245873243584, 0.08734803069394625]}, "mutation_prompt": null}
{"id": "a8feb6aa-b1e2-43d9-a272-fdbfadd04014", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Implementing a dynamic mutation strategy based on local fitness landscape to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.3452996787503062, 0.335947417445731, 0.36010677782635836, 0.35660136084531835, 0.3682652500887471, 0.3382926048547341, 0.37517139527446075, 0.3633991079519644, 0.3905688703839443, 9.999999999998899e-05, 0.03570922164875101, 9.999999999998899e-05, 0.007959659102083738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08948785218045174, 0.10679806356984778, 0.08755531314786313, 0.11016746483194417, 0.09562524137534834, 0.11776209503326662, 0.10204441482722215, 0.10975864597190699, 0.108716703715794, 0.08264970705151331, 0.09319687476052418, 0.08496521739526974, 0.09694023888301728, 0.08133568654548218, 0.08168225075883606, 0.1190345913777241, 0.08450659405700278, 0.08094553216510958, 0.9523473327222183, 0.967067140722907, 0.9611453411915262, 0.9552015837530619, 0.9600283905700004, 0.9616277483603005, 0.9356913245844221, 0.9642108908811879, 0.9349647911517053, 0.19606851997657637, 0.2286186546794302, 0.23203188873023817, 0.21736112918038042, 0.18859988135368955, 0.20892809048444938, 0.1988695821649179, 0.20184298963355563, 0.18816042113140508, 0.26327168108262233, 0.26018855709145705, 0.20387844350940287, 0.30169292513772106, 0.24448063149397425, 0.22530992316385268, 0.2291115759228174, 0.30813619813076143, 0.32381980112208963, 0.124745718796196, 0.12482332178482025, 0.13077604556738565, 0.1334214233253933, 0.13091634964230614, 0.1261272415388618, 0.1340750779180898, 0.13418263053437762, 0.13509190169643792, 0.13224665480709663, 0.10857075291207308, 0.13248269874062735, 0.1394835157692914, 0.14335012244295398, 0.1313347789660505, 0.14289625230237257, 0.09476152352248424, 0.1418126984283664, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045479769291301153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12055565662004342, 0.06888186936232321, 0.08025634390167902, 0.06619572178548205, 0.049046699103250324, 0.07066004351338995, 0.08917325435055101, 0.089390877092142, 0.06836916493359257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07835443238822681, 0.07169805070526414, 0.0608849410384148, 0.06539438467304881, 0.08442533842712274, 0.09826763105218816, 0.0798387781545844, 0.06771974847286144, 0.059135423429024, 0.33751491259316735, 0.3508887900465284, 0.3640743054929193, 0.33933709874905393, 0.3379640545060447, 0.3460671001934926, 0.3514498132439706, 0.3763477640656572, 0.3473923304189287, 0.09245481887140816, 0.09224129645978374, 0.08913133777540583, 0.10352744143026071, 0.10752059839839845, 0.09876180342946494, 0.09851128832859724, 0.0914509180544919, 0.08170535382277955, 0.14747973920274848, 0.1698361041412536, 0.1674434207535005, 0.1650138909127703, 0.18115367450486086, 0.1916907804488941, 0.2047250299123886, 0.176622753101631, 0.16787786330677523, 0.28594620235421064, 0.2568003443151049, 0.24413562667260025, 0.23796388543431335, 0.2417926479953576, 0.24297550658258538, 0.23967324052005168, 0.23715047862525185, 0.25398748717753583, 0.20272194156336498, 0.1827165410602496, 0.18850228042215833, 0.1891279883974617, 0.2021006655366674, 0.19990212059854984, 0.1996051241913116, 0.18788304242407672, 0.18178806193384145, 0.2030728288857957, 0.1831140654751946, 0.22294169877621728, 0.25306657027084556, 0.25815010505123226, 0.19379280923513365, 0.22150192429278537, 0.20882365081389875, 0.2015959384843069, 0.20778205584788167, 0.18297057585196164, 0.1920726307461228, 0.18457044510748966, 0.18186915314841967, 0.17263556077501996, 0.18984743796654946, 0.19037513154862395, 0.190644624643188, 0.1851046504855014, 0.48517221320080417, 0.2069920602507611, 0.39402054032608824, 0.19877765862267338, 0.1991901504189475, 0.22061091560436275, 0.46104904182456896, 0.16290501520830825, 0.11567857862450459, 0.11202050782614259, 0.4360088950099975, 0.42714823394982326, 0.2284769506219313, 0.39418791276098786, 0.16725541862563387, 0.2498877080948163, 0.346129357939982, 0.1852210114726286, 0.2095390252827759, 0.18535131653525683, 0.1915690747486637, 0.18303814072281643, 0.18723522100927625, 0.1774482090773356, 0.1741504225035565, 0.18457312521790847, 0.091325940520397, 0.09071882582723212, 0.09693018167211864, 0.10203477176284048, 0.09731151976581098, 0.08259113181837874, 0.09847182798824816, 0.0996730750054381, 0.07349854944965317]}, "mutation_prompt": null}
{"id": "2cc0082e-f540-424d-8d08-f4428fadd700", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_rank = np.argsort(np.argsort(fitness))  # New adaptive mutation strategy based on fitness rank\n                mutation_rate *= 1 + 0.1 * (fitness_rank[i] / self.population_size)\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Introducing a novel adaptive mutation strategy based on individual fitness rank to guide search direction and exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 57, "fitness": 0.19438749263390703, "feedback": "The algorithm EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.4494636640274715, 0.3394435419952899, 0.3983417990457736, 0.36157882799048424, 0.35188566643708485, 0.34945807893888503, 0.35267044511739354, 0.35409925773740114, 0.35201360955366234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09698462951388143, 0.10666287046475231, 0.09348391256601662, 0.0936557993233137, 0.08617725075132987, 0.11863198252447005, 0.11334872611177271, 0.10364041690423886, 0.09161092849461216, 0.10051496641080737, 0.07616158646451843, 0.08641945732571399, 0.09079301242802373, 0.08315685417201568, 0.09260858152336571, 0.08256632705749056, 0.10349108103692362, 0.10416059047390736, 0.9544387464507229, 0.9649540346261741, 0.9610283103654942, 0.9567472748221635, 0.9599423693788384, 0.9610975890026096, 0.9396589548567709, 0.9622901323817266, 0.9395130941339622, 0.19849090146405857, 0.20102295355406008, 0.18427245792145297, 0.18926379715675778, 0.22764927123361645, 0.1913187672421004, 0.1961969574180864, 0.19332588767583925, 0.17622714782824056, 0.3147846806254383, 0.2716266203680108, 0.22900226421946468, 0.24882056520876816, 0.25093196818315866, 0.2655893963833039, 0.25202287995859485, 0.2739254520818194, 0.24041977037091689, 0.12298402721611257, 0.12296024452396015, 0.13121573414558896, 0.1339192640778465, 0.125628978041596, 0.09493723183360803, 0.12952785775696973, 0.13257640987417585, 0.12887049571828413, 0.1230819786667866, 0.1233094452176412, 0.12713293567509065, 0.1441454624024422, 0.13705578301874033, 0.1321362999711415, 0.12308585031004182, 0.08341609740289113, 0.13580556920381748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10281816533507748, 0.04996157296226411, 0.08890954468994583, 0.10428891786646688, 0.05560943539053442, 0.06790465375400856, 0.1135949373993792, 0.0853081733726051, 0.06643206772618904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0897938890779364, 0.05684067273430393, 0.04921280320574384, 0.07668261620957706, 0.07884337621984416, 0.08742284849627724, 0.07244101310222117, 0.05876169882686222, 0.056521328564247963, 0.38815921419527855, 0.3678803953417187, 0.3429579055685682, 0.3784666112823898, 0.34293308739772954, 0.3436638262917727, 0.3453289483234051, 0.3353025674084755, 0.36454271292876084, 0.08815191391622701, 0.09088580934426882, 0.11040520423990785, 0.10497519471935934, 0.11015822686104004, 0.09580927803342454, 0.10138327381775014, 0.09892417208109561, 0.10137420257893459, 0.20042288650489615, 0.1643497653013808, 0.16215539162211245, 0.16294406855330001, 0.18784299118136993, 0.1901647651447913, 0.1853902398709255, 0.16305117794063628, 0.20443129320714337, 0.2585483493037982, 0.24796524288504107, 0.24214331014432988, 0.25584678568302777, 0.23310766051060094, 0.24105143832587805, 0.23435199375903415, 0.2458594495095089, 0.2452137009191775, 0.2003703500359615, 0.18397038710909963, 0.21418015211125796, 0.20066871382383444, 0.19326441927640747, 0.1799995915131336, 0.19028331313884972, 0.1970249724601344, 0.17954141206308527, 0.18959858390004158, 0.19373261891852966, 0.18925633498399097, 0.22081591403669532, 0.18944607955688353, 0.20476134273716096, 0.22083633865045005, 0.2103693483861777, 0.1953054666770343, 0.18408363322703203, 0.198837471660665, 0.18581148624361188, 0.17903672883645172, 0.1834155729388336, 0.18105963005282588, 0.18105711764049104, 0.18645135493535758, 0.19146786428171347, 0.18616730598902143, 0.5377763570051874, 0.18356862105571303, 0.4028159430189223, 0.19508053390307423, 0.19948574656387752, 0.21361798070577975, 0.47179115254501613, 0.1630028088112917, 0.11500907302923302, 0.1122306669896398, 0.41890273162955105, 0.44147106734547414, 0.1979235619853824, 0.4249770237224235, 0.1671010887694958, 0.18038605831206933, 0.41463858858247515, 0.17278351920933133, 0.18530145856358882, 0.17430688331451927, 0.18440383481703815, 0.18851723046231605, 0.1947066364485206, 0.17654982483609605, 0.18673085486816943, 0.18304731920461492, 0.09119900372983725, 0.07678274119629735, 0.09502007305566074, 0.07937230345662993, 0.12332185617883262, 0.08349233681716572, 0.08007668631223974, 0.08877966607120347, 0.08314712723249573]}, "mutation_prompt": null}
{"id": "7236dd63-4d38-41e9-8e89-d383e27c3fbc", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy\n                    local_fitness = np.array([func(population[j]) for j in range(self.population_size)])\n                    local_best_index = np.argmin(local_fitness)\n                    diff_vector = population[local_best_index] - population[i]\n                    trial_vector = population[i] + 0.8*diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeed", "description": "Implementing a dynamic mutation strategy based on local fitness landscape to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.3452996787503062, 0.335947417445731, 0.36010677782635836, 0.35660136084531835, 0.3682652500887471, 0.3382926048547341, 0.37517139527446075, 0.3633991079519644, 0.3905688703839443, 9.999999999998899e-05, 0.03570922164875101, 9.999999999998899e-05, 0.007959659102083738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08948785218045174, 0.10679806356984778, 0.08755531314786313, 0.11016746483194417, 0.09562524137534834, 0.11776209503326662, 0.10204441482722215, 0.10975864597190699, 0.108716703715794, 0.08264970705151331, 0.09319687476052418, 0.08496521739526974, 0.09694023888301728, 0.08133568654548218, 0.08168225075883606, 0.1190345913777241, 0.08450659405700278, 0.08094553216510958, 0.9523473327222183, 0.967067140722907, 0.9611453411915262, 0.9552015837530619, 0.9600283905700004, 0.9616277483603005, 0.9356913245844221, 0.9642108908811879, 0.9349647911517053, 0.19606851997657637, 0.2286186546794302, 0.23203188873023817, 0.21736112918038042, 0.18859988135368955, 0.20892809048444938, 0.1988695821649179, 0.20184298963355563, 0.18816042113140508, 0.26327168108262233, 0.26018855709145705, 0.20387844350940287, 0.30169292513772106, 0.24448063149397425, 0.22530992316385268, 0.2291115759228174, 0.30813619813076143, 0.32381980112208963, 0.124745718796196, 0.12482332178482025, 0.13077604556738565, 0.1334214233253933, 0.13091634964230614, 0.1261272415388618, 0.1340750779180898, 0.13418263053437762, 0.13509190169643792, 0.13224665480709663, 0.10857075291207308, 0.13248269874062735, 0.1394835157692914, 0.14335012244295398, 0.1313347789660505, 0.14289625230237257, 0.09476152352248424, 0.1418126984283664, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045479769291301153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12055565662004342, 0.06888186936232321, 0.08025634390167902, 0.06619572178548205, 0.049046699103250324, 0.07066004351338995, 0.08917325435055101, 0.089390877092142, 0.06836916493359257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07835443238822681, 0.07169805070526414, 0.0608849410384148, 0.06539438467304881, 0.08442533842712274, 0.09826763105218816, 0.0798387781545844, 0.06771974847286144, 0.059135423429024, 0.33751491259316735, 0.3508887900465284, 0.3640743054929193, 0.33933709874905393, 0.3379640545060447, 0.3460671001934926, 0.3514498132439706, 0.3763477640656572, 0.3473923304189287, 0.09245481887140816, 0.09224129645978374, 0.08913133777540583, 0.10352744143026071, 0.10752059839839845, 0.09876180342946494, 0.09851128832859724, 0.0914509180544919, 0.08170535382277955, 0.14747973920274848, 0.1698361041412536, 0.1674434207535005, 0.1650138909127703, 0.18115367450486086, 0.1916907804488941, 0.2047250299123886, 0.176622753101631, 0.16787786330677523, 0.28594620235421064, 0.2568003443151049, 0.24413562667260025, 0.23796388543431335, 0.2417926479953576, 0.24297550658258538, 0.23967324052005168, 0.23715047862525185, 0.25398748717753583, 0.20272194156336498, 0.1827165410602496, 0.18850228042215833, 0.1891279883974617, 0.2021006655366674, 0.19990212059854984, 0.1996051241913116, 0.18788304242407672, 0.18178806193384145, 0.2030728288857957, 0.1831140654751946, 0.22294169877621728, 0.25306657027084556, 0.25815010505123226, 0.19379280923513365, 0.22150192429278537, 0.20882365081389875, 0.2015959384843069, 0.20778205584788167, 0.18297057585196164, 0.1920726307461228, 0.18457044510748966, 0.18186915314841967, 0.17263556077501996, 0.18984743796654946, 0.19037513154862395, 0.190644624643188, 0.1851046504855014, 0.48517221320080417, 0.2069920602507611, 0.39402054032608824, 0.19877765862267338, 0.1991901504189475, 0.22061091560436275, 0.46104904182456896, 0.16290501520830825, 0.11567857862450459, 0.11202050782614259, 0.4360088950099975, 0.42714823394982326, 0.2284769506219313, 0.39418791276098786, 0.16725541862563387, 0.2498877080948163, 0.346129357939982, 0.1852210114726286, 0.2095390252827759, 0.18535131653525683, 0.1915690747486637, 0.18303814072281643, 0.18723522100927625, 0.1774482090773356, 0.1741504225035565, 0.18457312521790847, 0.091325940520397, 0.09071882582723212, 0.09693018167211864, 0.10203477176284048, 0.09731151976581098, 0.08259113181837874, 0.09847182798824816, 0.0996730750054381, 0.07349854944965317]}, "mutation_prompt": null}
{"id": "2b2fc244-cf5a-4ad1-9601-00a06f2b26a7", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeedImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n\n                if np.random.rand() < 0.3:  # Introducing a dynamic mutation strategy based on individual performance\n                    for j in range(self.population_size):\n                        if np.random.rand() < 0.5:  # Adaptive mutation rate based on individual performance\n                            mutation_rate_individual = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                            fitness_diff_individual = (population[j] - population) @ (population[j] - population).T\n                            mutation_rate_individual *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                            population[j, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate_individual * np.random.standard_normal()\n\n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedDynamicPopulationResizingOptimizationAlgorithmSpeedImproved", "description": "Introducing a novel adaptive mutation strategy based on individual performance to guide population exploration towards better solutions.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {}, "mutation_prompt": null}
{"id": "9a69e7d6-98ca-4d2c-bc2b-9ac13e6bf5f2", "solution": "import numpy as np\n\nclass AdaptiveMutationOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = (best_individual - population) @ (best_individual - population).T\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing the adaptive mutation strategy\n                    adaptive_mutation_rate = 0.5 + np.random.normal(0, 0.1)\n                    adaptive_mutation_rate = np.clip(adaptive_mutation_rate, 0.1, 0.9)\n                    adaptive_mutation_rate *= 1 + 0.1 * (fitness[i] - fitness.min()) / (fitness.max() - fitness.min())\n                    population[:, i] = population[:, i] + adaptive_mutation_rate * np.random.standard_normal(self.population_size)\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "AdaptiveMutationOptimizationAlgorithm", "description": "Introducing a novel adaptive mutation strategy based on individual fitness to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 60, "fitness": 0.18753198264004803, "feedback": "The algorithm AdaptiveMutationOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.3173260842028819, 0.33582005306341833, 0.3451047771163499, 0.3200049378546189, 0.31398002975834693, 0.31629533359727613, 0.34965425105406434, 0.32239635059499927, 0.3217060935705286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08887721014635686, 0.09111001472629088, 0.09612515348344042, 0.09335340745657172, 0.09951387971431414, 0.0957030461719407, 0.08989854601159442, 0.09133604837010445, 0.10907107993293486, 0.08057503528679189, 0.0889234715231374, 0.07609051056977223, 0.08530955695800801, 0.08848662890985504, 0.08585546297486435, 0.07646104885436467, 0.09493987590035469, 0.08784299882816504, 0.9850813746380963, 0.9843009100296901, 0.9828730931163892, 0.9867055737599908, 0.9815539146586312, 0.9800348510595861, 0.9859718911774038, 0.979284849304276, 0.9718905706567849, 0.19459271444033932, 0.21099237632367518, 0.21920904631814442, 0.1932281511115368, 0.17688384872795815, 0.18276850372355424, 0.19229750973530801, 0.1823286528515088, 0.17923869741034937, 0.21895934684530183, 0.21729435497757155, 0.22888704947919225, 0.24491752546922174, 0.23572017188827699, 0.2585095830082842, 0.23180080635583034, 0.236326646004819, 0.2249177112415489, 0.12371696616610894, 0.11242886953143882, 0.11411486714290153, 0.11359213890528641, 0.12523063174702143, 0.12422482469990825, 0.133679137506316, 0.12195122196449082, 0.12781540116296763, 0.12517307039876902, 0.12750488033215301, 0.10690811552626434, 0.11265023761909232, 0.11960176579853032, 0.11062184938075514, 0.14045032191750728, 0.12675459107169262, 0.1277361329361063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08597144896146403, 0.11096607170253392, 0.090442185501731, 0.06346549759473641, 0.08292943605538095, 0.03467461791289517, 0.09080956998310052, 0.06503206335732425, 0.06247214102699783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053036425215204464, 0.056558840081246675, 0.033574401164867096, 0.07698735905415577, 0.06972918356097657, 0.06883476270221778, 0.05992164803993494, 0.049962227353542055, 0.04821917227682038, 0.3595300932592098, 0.3150778500065813, 0.328065293868951, 0.31159616596886885, 0.32706386104021945, 0.356971744522541, 0.3242792817903666, 0.3296581124289095, 0.3309885904640151, 0.1036637687606421, 0.0944790231625815, 0.08728196283406864, 0.09994101634041197, 0.09708795791583813, 0.0915570790355199, 0.10462874280097689, 0.09781731456882936, 0.08627775652924197, 0.14902586573538834, 0.15509666527167443, 0.17364039083995142, 0.15017311893629592, 0.15688253256410278, 0.14923208440235647, 0.14599910236255997, 0.15183868290353897, 0.1476050334681297, 0.23400920693378147, 0.24089588386042238, 0.23583882285038382, 0.24331711527853794, 0.2351161478186985, 0.22614630917711853, 0.24357828086687605, 0.23753524056211794, 0.26775286504069196, 0.17274716764910025, 0.19225672634702295, 0.18226581806740527, 0.18224018430415068, 0.18071382561665483, 0.1634099058936821, 0.18971282264761535, 0.18371533559806907, 0.17641400460157142, 0.21088621947858177, 0.19632639382208328, 0.2048173389208573, 0.1935384578018584, 0.19195831232558158, 0.19908614098321764, 0.23189827962652432, 0.209990364542736, 0.19423506802078483, 0.18782399857320975, 0.17624129548201328, 0.18240372575804653, 0.17815778332292775, 0.1732833372975756, 0.1883787678925819, 0.18171191531329467, 0.18519704024095263, 0.17812088945542548, 0.19259808609046258, 0.4221018330748264, 0.17765614639061456, 0.4601947415685037, 0.19365422511659713, 0.3446420075200959, 0.19154480110425265, 0.4104030376961446, 0.37414331850296245, 0.15459891538103332, 0.17232546246293934, 0.20552854266987153, 0.4389896887879119, 0.17635189531761752, 0.15699643412417263, 0.19978407823588773, 0.3381302449239322, 0.3478908899043196, 0.1878523780005159, 0.1809748720236556, 0.18855647359423533, 0.18291430651056462, 0.17986941953304447, 0.1904424877248626, 0.1742353275897922, 0.18851001872631779, 0.18233966850792305, 0.07877359382129201, 0.10873218226614023, 0.08354378947053698, 0.08799607652018882, 0.08874236391879187, 0.08987692157615979, 0.09151521850287814, 0.08246515150162337, 0.07608088153873127]}, "mutation_prompt": null}
{"id": "47f6cbcf-8928-48ef-a6d0-dd9df8c77c81", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = np.abs(fitness - fitness[i])\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing adaptive mutation control\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * np.sum(fitness_diff))\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedAdaptiveMutationOptimizationAlgorithmSpeed", "description": "Introducing adaptive mutation control based on individual fitness differences to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 61, "fitness": 0.1985405776013366, "feedback": "The algorithm EnhancedAdaptiveMutationOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "afb954fa-d621-46b8-a19c-247b6f4a5154", "metadata": {"aucs": [0.34832094765856103, 0.3695637482169327, 0.37345591204995643, 0.38413659446074566, 0.3676615952459532, 0.3693816495453459, 0.3541905657749199, 0.4105213455040113, 0.3697966732818663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08279743651713412, 0.10074746837089987, 0.1159828087121415, 0.09771614917088212, 0.0926595282246806, 0.09539749932243935, 0.11256411280859824, 0.09124335269376405, 0.09419216046231815, 0.0833968504625876, 0.0940779545906828, 0.08949164463795456, 0.08999901620047313, 0.08932447185632864, 0.08948638619207161, 0.10534134332008727, 0.08384324955031586, 0.08332579549349284, 0.9796157298535932, 0.9784807109474545, 0.9745019525627071, 0.9778786775785634, 0.9792268849144813, 0.9780502712959066, 0.9634166405859894, 0.9772312132317702, 0.962544602980464, 0.2082579928376811, 0.21120754135140452, 0.20299202224445634, 0.20052668068727453, 0.20639455556328568, 0.2074352303553314, 0.1867035346863707, 0.24697479811316891, 0.19512265532998785, 0.28093638704696755, 0.24343040604930422, 0.2734600497846682, 0.26914728169735214, 0.2759617956260767, 0.25239879699228573, 0.2326140008347476, 0.257102943916256, 0.23791547003472924, 0.13290539199183726, 0.13489664705364068, 0.12814556859953774, 0.12892743937966877, 0.13310043933080473, 0.13545654849522726, 0.12462216584886321, 0.1284846276761611, 0.13217295486470448, 0.12944123614978909, 0.12317531242923563, 0.13265018161631414, 0.13801858688796365, 0.13038685522082394, 0.13475288602039415, 0.13973941201352413, 0.10500065872267272, 0.1452031769236517, 0.02490647866240303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10902456915671577, 0.0761727456235638, 0.07220353089663367, 0.09054458737104232, 0.05762709392922827, 0.0809722828399494, 0.12113369238896043, 0.07618192650115019, 0.08823423554274035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07488352404003673, 0.07183886338952539, 0.056725907036109136, 0.07299184229874212, 0.07225978477733519, 0.062183096686559636, 0.0591879195351841, 0.06286034042956312, 0.0745928208488631, 0.3658902991676869, 0.37424261333953124, 0.3492183294260255, 0.34055291053024717, 0.33746541504731364, 0.35669979432971255, 0.37224699687581464, 0.3496536547738439, 0.3567311408831553, 0.09650143300823855, 0.09725333882512566, 0.10048236492652374, 0.10161705617310202, 0.09701405493079673, 0.10657546626602632, 0.11785835149835255, 0.09569289277336579, 0.09390910130101204, 0.17536568336597935, 0.17930764556063294, 0.1819275476288058, 0.16608822952792157, 0.18091987576434843, 0.16730453256771094, 0.17801929183529996, 0.19103009358125833, 0.16150900632066367, 0.25330366731036524, 0.258402493413465, 0.24464497756487003, 0.25529582412167895, 0.24525208374240814, 0.27183045900493563, 0.2513039551962216, 0.24331989050211789, 0.24884106362876612, 0.19111057002608578, 0.1863984612857631, 0.19245404518198939, 0.19178223910772452, 0.19038127565936347, 0.20304540621912648, 0.18354742912258726, 0.18496614633594066, 0.1996137928923999, 0.20868685881912408, 0.2039676925363173, 0.20677807174152762, 0.20555888618698281, 0.2053346302411342, 0.24806739196990635, 0.21774831724694443, 0.21910847199668615, 0.20658869785424272, 0.18728571340436573, 0.19810547493973096, 0.190773208866017, 0.18346307612823798, 0.17879724749513592, 0.18392107860462314, 0.18835037415815403, 0.1817977556769984, 0.17983399412572398, 0.18599894927926774, 0.5537341353826712, 0.1851198809948017, 0.34178136709987617, 0.19876654147055128, 0.19769613674554376, 0.3702832870948648, 0.4996974914715119, 0.17177808797276395, 0.13791353234262116, 0.12690596536142096, 0.3800649694792022, 0.3225195121967085, 0.2921572443445468, 0.3765483290003212, 0.1665180052893207, 0.35092608072714615, 0.5091564116763312, 0.180813074870099, 0.1818986126952722, 0.17320382592011463, 0.17710846418656423, 0.20347979979310848, 0.20567040745068066, 0.1818793431452791, 0.1865966213443132, 0.17926692379485631, 0.08789893111691183, 0.07834473010245768, 0.09190179212371363, 0.1055880834033911, 0.09132513205238069, 0.07577231572862786, 0.08081142625934112, 0.08902502454811168, 0.10352606428131061]}, "mutation_prompt": null}
{"id": "0aa98f56-efaf-49ab-833f-0437783d6cf2", "solution": "import numpy as np\n\nclass DynamicNeighborhoodSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.neighborhood_radius = np.ones(self.population_size) * 0.5\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.population_size):\n                for j in range(self.dim):\n                    mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                    fitness_diff = np.abs(fitness - fitness[i])\n                    mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                    neighborhood = np.where(np.linalg.norm(population - population[i], axis=1) <= self.neighborhood_radius[i])\n                    neighborhood_fitness = fitness[neighborhood]\n                    neighborhood_best = population[neighborhood_fitness.argmin()]\n\n                    population[i, j] = 0.8 * global_best[j] + 0.2 * local_best[j] + mutation_rate * np.random.standard_normal()\n\n                    if np.random.rand() < 0.3:  # Introducing dynamic neighborhood search\n                        diff_vector = neighborhood_best - population[i]\n                        scale_factor = 0.8 + 0.2 * np.exp(-0.1 * np.sum(fitness_diff))\n                        trial_vector = population[i] + scale_factor * diff_vector\n                        trial_fitness = func(trial_vector)\n                        if trial_fitness < fitness[i]:\n                            population[i] = trial_vector\n                            fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicNeighborhoodSearch", "description": "Introducing dynamic neighborhood search to enable individuals to adapt their search radius based on the local fitness landscape, promoting faster convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "47f6cbcf-8928-48ef-a6d0-dd9df8c77c81", "metadata": {}, "mutation_prompt": null}
{"id": "59e70ff9-e638-4f27-999c-7a460a9385f4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = np.abs(fitness - fitness[i])\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing adaptive mutation control\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * np.sum(fitness_diff))\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedAdaptiveMutationOptimizationAlgorithmSpeed", "description": "Introducing adaptive mutation control based on individual fitness differences to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "47f6cbcf-8928-48ef-a6d0-dd9df8c77c81", "metadata": {"aucs": [0.34832094765856103, 0.3695637482169327, 0.37345591204995643, 0.38413659446074566, 0.3676615952459532, 0.3693816495453459, 0.3541905657749199, 0.4105213455040113, 0.3697966732818663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08279743651713412, 0.10074746837089987, 0.1159828087121415, 0.09771614917088212, 0.0926595282246806, 0.09539749932243935, 0.11256411280859824, 0.09124335269376405, 0.09419216046231815, 0.0833968504625876, 0.0940779545906828, 0.08949164463795456, 0.08999901620047313, 0.08932447185632864, 0.08948638619207161, 0.10534134332008727, 0.08384324955031586, 0.08332579549349284, 0.9796157298535932, 0.9784807109474545, 0.9745019525627071, 0.9778786775785634, 0.9792268849144813, 0.9780502712959066, 0.9634166405859894, 0.9772312132317702, 0.962544602980464, 0.2082579928376811, 0.21120754135140452, 0.20299202224445634, 0.20052668068727453, 0.20639455556328568, 0.2074352303553314, 0.1867035346863707, 0.24697479811316891, 0.19512265532998785, 0.28093638704696755, 0.24343040604930422, 0.2734600497846682, 0.26914728169735214, 0.2759617956260767, 0.25239879699228573, 0.2326140008347476, 0.257102943916256, 0.23791547003472924, 0.13290539199183726, 0.13489664705364068, 0.12814556859953774, 0.12892743937966877, 0.13310043933080473, 0.13545654849522726, 0.12462216584886321, 0.1284846276761611, 0.13217295486470448, 0.12944123614978909, 0.12317531242923563, 0.13265018161631414, 0.13801858688796365, 0.13038685522082394, 0.13475288602039415, 0.13973941201352413, 0.10500065872267272, 0.1452031769236517, 0.02490647866240303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10902456915671577, 0.0761727456235638, 0.07220353089663367, 0.09054458737104232, 0.05762709392922827, 0.0809722828399494, 0.12113369238896043, 0.07618192650115019, 0.08823423554274035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07488352404003673, 0.07183886338952539, 0.056725907036109136, 0.07299184229874212, 0.07225978477733519, 0.062183096686559636, 0.0591879195351841, 0.06286034042956312, 0.0745928208488631, 0.3658902991676869, 0.37424261333953124, 0.3492183294260255, 0.34055291053024717, 0.33746541504731364, 0.35669979432971255, 0.37224699687581464, 0.3496536547738439, 0.3567311408831553, 0.09650143300823855, 0.09725333882512566, 0.10048236492652374, 0.10161705617310202, 0.09701405493079673, 0.10657546626602632, 0.11785835149835255, 0.09569289277336579, 0.09390910130101204, 0.17536568336597935, 0.17930764556063294, 0.1819275476288058, 0.16608822952792157, 0.18091987576434843, 0.16730453256771094, 0.17801929183529996, 0.19103009358125833, 0.16150900632066367, 0.25330366731036524, 0.258402493413465, 0.24464497756487003, 0.25529582412167895, 0.24525208374240814, 0.27183045900493563, 0.2513039551962216, 0.24331989050211789, 0.24884106362876612, 0.19111057002608578, 0.1863984612857631, 0.19245404518198939, 0.19178223910772452, 0.19038127565936347, 0.20304540621912648, 0.18354742912258726, 0.18496614633594066, 0.1996137928923999, 0.20868685881912408, 0.2039676925363173, 0.20677807174152762, 0.20555888618698281, 0.2053346302411342, 0.24806739196990635, 0.21774831724694443, 0.21910847199668615, 0.20658869785424272, 0.18728571340436573, 0.19810547493973096, 0.190773208866017, 0.18346307612823798, 0.17879724749513592, 0.18392107860462314, 0.18835037415815403, 0.1817977556769984, 0.17983399412572398, 0.18599894927926774, 0.5537341353826712, 0.1851198809948017, 0.34178136709987617, 0.19876654147055128, 0.19769613674554376, 0.3702832870948648, 0.4996974914715119, 0.17177808797276395, 0.13791353234262116, 0.12690596536142096, 0.3800649694792022, 0.3225195121967085, 0.2921572443445468, 0.3765483290003212, 0.1665180052893207, 0.35092608072714615, 0.5091564116763312, 0.180813074870099, 0.1818986126952722, 0.17320382592011463, 0.17710846418656423, 0.20347979979310848, 0.20567040745068066, 0.1818793431452791, 0.1865966213443132, 0.17926692379485631, 0.08789893111691183, 0.07834473010245768, 0.09190179212371363, 0.1055880834033911, 0.09132513205238069, 0.07577231572862786, 0.08081142625934112, 0.08902502454811168, 0.10352606428131061]}, "mutation_prompt": null}
{"id": "a04ebd9b-cd51-4318-98ab-0e505b0bbddd", "solution": "import numpy as np\n\nclass EnhancedExplorationMutationOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_range = fitness.max() - fitness.min()\n                mutation_rate *= 1 + 0.1 * (fitness_range) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing dynamic mutation strategy\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * (fitness_range))\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedExplorationMutationOptimizationAlgorithmSpeed", "description": "Enhancing exploration by implementing a dynamic mutation strategy based on individual fitness ranges to improve convergence speed.", "configspace": "", "generation": 64, "fitness": 0.19608308164317273, "feedback": "The algorithm EnhancedExplorationMutationOptimizationAlgorithmSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "47f6cbcf-8928-48ef-a6d0-dd9df8c77c81", "metadata": {"aucs": [0.34527423882741937, 0.3483720636266854, 0.36476317911280076, 0.36370537751892584, 0.3579984247478596, 0.3468855801308063, 0.3544123730118819, 0.39471419391132034, 0.3606825857600937, 0.011601196237790878, 9.999999999998899e-05, 0.012299790614404671, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11040495599529787, 0.11630290201099958, 0.09501922066363477, 0.09833275798846408, 0.1032955037533606, 0.09385580404104443, 0.10961402213764226, 0.09099063845215027, 0.08184814602620205, 0.09137242299880999, 0.07723690730365962, 0.09034389717789659, 0.07964320601177755, 0.08963803909245893, 0.0844244941745077, 0.0975999205480037, 0.07975638779771943, 0.08117259715778691, 0.9795394929653263, 0.9817696956301944, 0.9747393060270367, 0.9786800980278745, 0.9792036579420935, 0.9796036409491585, 0.9688041928716895, 0.9787720040630927, 0.9648738868386, 0.18843426489099713, 0.1962824985088134, 0.18735989337403325, 0.22206344794405897, 0.20854311789800328, 0.20633137314772443, 0.20413752408401042, 0.2085924977614273, 0.18673426336719623, 0.256682972795794, 0.2693616726953568, 0.23764402708098342, 0.2909455817391059, 0.2820525102355993, 0.2786689316816119, 0.23905047011695346, 0.2503125098572998, 0.21812489673665425, 0.11848049869644783, 0.13447169258289138, 0.13145945703944162, 0.13132640835350484, 0.12452115613085046, 0.14341835727320795, 0.13114917223692446, 0.14060727718048982, 0.13514184702754461, 0.1438502431330928, 0.1411678273229372, 0.1278658612946323, 0.13272403280541478, 0.11572873188353527, 0.13986333056351008, 0.12651454872891132, 0.12521679465579705, 0.1400799643400833, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10252070791401546, 0.08237991348350604, 0.06939027624901917, 0.09694875222984245, 0.05868379722823791, 0.08753958446627763, 0.07457046674745871, 0.07099549521728765, 0.07773900926504429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05797055911222038, 0.07498713495671361, 0.06617224932475474, 0.07376876514504516, 0.06661121155512262, 0.0735435877055175, 0.06492729407674436, 0.05668319583391623, 0.06341632549664833, 0.3357313751960279, 0.33188121810570526, 0.3393029197272486, 0.36541813501486886, 0.35960406458253624, 0.3365451334608076, 0.33862824683177317, 0.3453572780066626, 0.35187710934198824, 0.10370759352044623, 0.0949216388932369, 0.10967562419748178, 0.0919620690257198, 0.10036129185121279, 0.09062374978104204, 0.09136109404206727, 0.09591603191901521, 0.08749283769383709, 0.167060334815328, 0.15443706041850436, 0.17788462336635225, 0.15419758593490207, 0.1969770216263318, 0.1687111497456144, 0.17970952425033737, 0.17532486941104541, 0.17643945643257175, 0.2542627489515714, 0.25424647418376156, 0.24812188174391736, 0.24482350854337542, 0.2500547063083878, 0.25862959252916573, 0.23852290972845558, 0.25250856507172725, 0.24835880725869042, 0.22042502005782283, 0.18785804038360832, 0.19141409741952908, 0.18039803378795716, 0.19448004023805376, 0.1998117373113556, 0.179592260096051, 0.17675975904726604, 0.18295824018463935, 0.2088020766716432, 0.21116486969325232, 0.19806598848408274, 0.22055273380541407, 0.201996043943245, 0.19981935004680285, 0.2036159538001573, 0.2057393516736391, 0.2562118455149138, 0.18253676043511347, 0.19459291451214333, 0.186525410538951, 0.1802825687285784, 0.18086536136969777, 0.18742067257333406, 0.18446213666905587, 0.1954860100492245, 0.18152583802890565, 0.18588487149807886, 0.4613947230073885, 0.18583952813364435, 0.5044619399225259, 0.1993783398129957, 0.1998853068125379, 0.37652213213869934, 0.49871835656946795, 0.16881572116597976, 0.13647225602270374, 0.12605579229710695, 0.3770680419449687, 0.22754412069381202, 0.3069671666398476, 0.39645757800946413, 0.16784532608941938, 0.3101265230217781, 0.41741385135547826, 0.1831239839307387, 0.20251233181489492, 0.1872406223209957, 0.17546203223046197, 0.17563739522769195, 0.19152097112920052, 0.18485041415353975, 0.17837926148394068, 0.18216828444647182, 0.10057060878953616, 0.07874434448488099, 0.08909854125323491, 0.07928520181866372, 0.08529752632677079, 0.08672153060521737, 0.12718570462430456, 0.10374377591000938, 0.07774539934401603]}, "mutation_prompt": null}
{"id": "1dcf0705-f8e3-418d-8106-0d9edc2e7df6", "solution": "import numpy as np\n\nclass DynamicPopulationSizeAdaptationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 12\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = np.abs(fitness - fitness[i])\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing adaptive mutation control\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * np.sum(fitness_diff))\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # Implementing dynamic population size adaptation\n                self.population_size = int(max(10, min(20, self.population_size + np.random.choice([-1, 1]))))\n\n        return best_individual", "name": "DynamicPopulationSizeAdaptationAlgorithm", "description": "Implementing a dynamic population size adaptation strategy to improve the exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (12,) (11,) ').", "error": "ValueError('operands could not be broadcast together with shapes (12,) (11,) ')", "parent_id": "47f6cbcf-8928-48ef-a6d0-dd9df8c77c81", "metadata": {}, "mutation_prompt": null}
{"id": "188d7a90-c63d-4979-8efe-0ed4e68c9bee", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = np.abs(fitness - fitness[i])\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing adaptive mutation control\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * np.sum(fitness_diff))\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability for dynamic population size adaptation\n                new_population_size = int(np.clip(np.round(self.population_size * (1 + np.random.uniform(-0.1, 0.1))), 2, 20)\n                new_population = np.random.uniform(-5.0, 5.0, (new_population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n                    self.population_size = new_population_size\n\n        return best_individual", "name": "EnhancedAdaptiveMutationOptimizationAlgorithmSpeed", "description": "Introducing dynamic population size adaptation based on fitness performance to enhance diversity and exploration for accelerated convergence.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 39, 17, '                new_population = np.random.uniform(-5.0, 5.0, (new_population_size, self.dim))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 39, 17, '                new_population = np.random.uniform(-5.0, 5.0, (new_population_size, self.dim))\\n'))", "parent_id": "47f6cbcf-8928-48ef-a6d0-dd9df8c77c81", "metadata": {}, "mutation_prompt": null}
{"id": "16507b3e-3cc8-464d-b63f-7151fdd44d5a", "solution": "import numpy as np\n\nclass DynamicMutationOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            \n            diversity = np.mean(np.std(population, axis=0))\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                mutation_rate *= 1 + 0.1 * diversity\n                population[:, i] = best_individual[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Dynamic mutation based on diversity\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * diversity)\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicMutationOptimizationAlgorithm", "description": "Implement a dynamic mutation strategy based on the population diversity to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 67, "fitness": 0.19660203794186867, "feedback": "The algorithm DynamicMutationOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "47f6cbcf-8928-48ef-a6d0-dd9df8c77c81", "metadata": {"aucs": [0.34295961454684076, 0.36498130336126566, 0.3363483317589081, 0.32155772730998666, 0.40322062819292914, 0.3799477741277971, 0.35896172579156693, 0.35169888061703847, 0.3919042606671447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12331932014163216, 0.0955577725170671, 0.10042107918554899, 0.10450341707166066, 0.10829328260885829, 0.1001743964510613, 0.10509453382925893, 0.0918322251829028, 0.11747113365842665, 0.10406589750151685, 0.08560410684481334, 0.0955243345770932, 0.09286410094763742, 0.08576419449812989, 0.08805283772922923, 0.0841375462410151, 0.08065831091624731, 0.08258531679014558, 0.9791463851220442, 0.9819017571162547, 0.98221875048433, 0.9799219321955746, 0.9791030776225949, 0.9771869493783812, 0.9666670087560277, 0.9817324670724555, 0.9649614384296797, 0.1852966059495912, 0.20502002275274767, 0.19935138520028084, 0.20845458337780687, 0.20320674248179893, 0.20933796978879526, 0.21915497339734247, 0.23862591015575874, 0.20392984378774348, 0.2255356632353792, 0.28386480181033924, 0.2680626040945059, 0.2584180502763965, 0.24017589968241648, 0.33086450257229927, 0.2590790190242186, 0.24244255760100586, 0.2431531585586304, 0.11809983555245074, 0.1365621328611436, 0.13190742779915565, 0.14134199559502758, 0.13165397840703885, 0.14467866883974834, 0.15892136978560434, 0.14463163569748172, 0.12256909416889161, 0.1385389845715923, 0.11624045464626165, 0.1266660622360667, 0.14189068082654666, 0.12426629951595847, 0.1334027803365876, 0.1203932997792343, 0.14290507772926053, 0.12553806929499312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024268528588381466, 9.999999999998899e-05, 9.999999999998899e-05, 0.07338057479553828, 0.07061719255615495, 0.061034575874892694, 0.1537381534744472, 0.08478286344187813, 0.1054228172685433, 0.06825051582709107, 0.06547187447832314, 0.0627664473558609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711024765181717, 0.09470489643682556, 0.06165790824728934, 0.07390978351529343, 0.058627653180231, 0.056686469495116354, 0.07701621478866616, 0.07153311612307678, 0.06054363401423457, 0.3739688498281425, 0.33886066872392673, 0.3258070176002894, 0.3285226927463686, 0.33882678958413304, 0.355084532134065, 0.3444962357632294, 0.3568471168038876, 0.3735275533623169, 0.08892167804237994, 0.11361461884133472, 0.10145431878862232, 0.11198583457876443, 0.08638550078379936, 0.08809887020266871, 0.11387120399210071, 0.10520605912377046, 0.10888294522242814, 0.17534827036334522, 0.15142244169475694, 0.1826053607913346, 0.21953545615343606, 0.1827103773756642, 0.1599443677560457, 0.16610183962092728, 0.18084107342055056, 0.1992503667859058, 0.23832656427737442, 0.25862122914289487, 0.25641090177789305, 0.24323418255048068, 0.2397186537563062, 0.24698656957575038, 0.23657481680462022, 0.2433701416495725, 0.24568347147943437, 0.20719377662950966, 0.2014581637571703, 0.18266453292086815, 0.19504884514496157, 0.18291006870760518, 0.19588985012749427, 0.18131482007581534, 0.17133996482816982, 0.17833146723544124, 0.20957383991734024, 0.19645053704389703, 0.1805867596135684, 0.21169122176368038, 0.19145082113412204, 0.2007934629010738, 0.1927447109301501, 0.19247908569500216, 0.1880805026971809, 0.19140316566174553, 0.19029716867706248, 0.2072914970716765, 0.18244928453298026, 0.19250531169395224, 0.1830912260726465, 0.19191549114086282, 0.19616525768130721, 0.1799518723723097, 0.1779839075456623, 0.28524761284743505, 0.3212495891058821, 0.45406449636235013, 0.20062563047462068, 0.20067673746471404, 0.3451022440622914, 0.4782153100945862, 0.17290573905477669, 0.136556899390042, 0.12672003151756706, 0.3653821744265139, 0.36697711535889543, 0.3211557665864079, 0.362079962312823, 0.16789240006640738, 0.27141685474665733, 0.3972119983988637, 0.18347225464389272, 0.18077166663120514, 0.18028646244615953, 0.1879137879495154, 0.1874643796689548, 0.19055664657801186, 0.18354508073195253, 0.17704385466677863, 0.19277856661592674, 0.09670859160140277, 0.07679690398103844, 0.1005920064546475, 0.08635396478742419, 0.08324403124803725, 0.10312146693585911, 0.09177246910130177, 0.08296093114128456, 0.08227140243399556]}, "mutation_prompt": null}
{"id": "167fb5aa-9064-4e33-b533-6d2c82627371", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationOptimizationAlgorithmSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                mutation_rate = np.clip(0.5 + np.random.normal(0, 0.1), 0.1, 0.9)\n                fitness_diff = np.abs(fitness - fitness[i])\n                mutation_rate *= 1 + 0.1 * (fitness - fitness.min()) / (fitness.max() - fitness.min())\n                population[:, i] = 0.8*global_best[i] + 0.2*local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing adaptive mutation control\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * np.sum(fitness_diff))\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "EnhancedAdaptiveMutationOptimizationAlgorithmSpeed", "description": "Introducing adaptive mutation control based on individual fitness differences to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "47f6cbcf-8928-48ef-a6d0-dd9df8c77c81", "metadata": {"aucs": [0.34832094765856103, 0.3695637482169327, 0.37345591204995643, 0.38413659446074566, 0.3676615952459532, 0.3693816495453459, 0.3541905657749199, 0.4105213455040113, 0.3697966732818663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08279743651713412, 0.10074746837089987, 0.1159828087121415, 0.09771614917088212, 0.0926595282246806, 0.09539749932243935, 0.11256411280859824, 0.09124335269376405, 0.09419216046231815, 0.0833968504625876, 0.0940779545906828, 0.08949164463795456, 0.08999901620047313, 0.08932447185632864, 0.08948638619207161, 0.10534134332008727, 0.08384324955031586, 0.08332579549349284, 0.9796157298535932, 0.9784807109474545, 0.9745019525627071, 0.9778786775785634, 0.9792268849144813, 0.9780502712959066, 0.9634166405859894, 0.9772312132317702, 0.962544602980464, 0.2082579928376811, 0.21120754135140452, 0.20299202224445634, 0.20052668068727453, 0.20639455556328568, 0.2074352303553314, 0.1867035346863707, 0.24697479811316891, 0.19512265532998785, 0.28093638704696755, 0.24343040604930422, 0.2734600497846682, 0.26914728169735214, 0.2759617956260767, 0.25239879699228573, 0.2326140008347476, 0.257102943916256, 0.23791547003472924, 0.13290539199183726, 0.13489664705364068, 0.12814556859953774, 0.12892743937966877, 0.13310043933080473, 0.13545654849522726, 0.12462216584886321, 0.1284846276761611, 0.13217295486470448, 0.12944123614978909, 0.12317531242923563, 0.13265018161631414, 0.13801858688796365, 0.13038685522082394, 0.13475288602039415, 0.13973941201352413, 0.10500065872267272, 0.1452031769236517, 0.02490647866240303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10902456915671577, 0.0761727456235638, 0.07220353089663367, 0.09054458737104232, 0.05762709392922827, 0.0809722828399494, 0.12113369238896043, 0.07618192650115019, 0.08823423554274035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07488352404003673, 0.07183886338952539, 0.056725907036109136, 0.07299184229874212, 0.07225978477733519, 0.062183096686559636, 0.0591879195351841, 0.06286034042956312, 0.0745928208488631, 0.3658902991676869, 0.37424261333953124, 0.3492183294260255, 0.34055291053024717, 0.33746541504731364, 0.35669979432971255, 0.37224699687581464, 0.3496536547738439, 0.3567311408831553, 0.09650143300823855, 0.09725333882512566, 0.10048236492652374, 0.10161705617310202, 0.09701405493079673, 0.10657546626602632, 0.11785835149835255, 0.09569289277336579, 0.09390910130101204, 0.17536568336597935, 0.17930764556063294, 0.1819275476288058, 0.16608822952792157, 0.18091987576434843, 0.16730453256771094, 0.17801929183529996, 0.19103009358125833, 0.16150900632066367, 0.25330366731036524, 0.258402493413465, 0.24464497756487003, 0.25529582412167895, 0.24525208374240814, 0.27183045900493563, 0.2513039551962216, 0.24331989050211789, 0.24884106362876612, 0.19111057002608578, 0.1863984612857631, 0.19245404518198939, 0.19178223910772452, 0.19038127565936347, 0.20304540621912648, 0.18354742912258726, 0.18496614633594066, 0.1996137928923999, 0.20868685881912408, 0.2039676925363173, 0.20677807174152762, 0.20555888618698281, 0.2053346302411342, 0.24806739196990635, 0.21774831724694443, 0.21910847199668615, 0.20658869785424272, 0.18728571340436573, 0.19810547493973096, 0.190773208866017, 0.18346307612823798, 0.17879724749513592, 0.18392107860462314, 0.18835037415815403, 0.1817977556769984, 0.17983399412572398, 0.18599894927926774, 0.5537341353826712, 0.1851198809948017, 0.34178136709987617, 0.19876654147055128, 0.19769613674554376, 0.3702832870948648, 0.4996974914715119, 0.17177808797276395, 0.13791353234262116, 0.12690596536142096, 0.3800649694792022, 0.3225195121967085, 0.2921572443445468, 0.3765483290003212, 0.1665180052893207, 0.35092608072714615, 0.5091564116763312, 0.180813074870099, 0.1818986126952722, 0.17320382592011463, 0.17710846418656423, 0.20347979979310848, 0.20567040745068066, 0.1818793431452791, 0.1865966213443132, 0.17926692379485631, 0.08789893111691183, 0.07834473010245768, 0.09190179212371363, 0.1055880834033911, 0.09132513205238069, 0.07577231572862786, 0.08081142625934112, 0.08902502454811168, 0.10352606428131061]}, "mutation_prompt": null}
{"id": "2a3a82cc-e59a-4dae-8ca9-17f72b936465", "solution": "import numpy as np\n\nclass DynamicMutationRateOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                fitness_diff = np.abs(fitness - fitness[i])\n                mutation_rate = 0.5 + np.random.normal(0, 0.1) * (1 + np.sum(fitness_diff)) / (self.population_size * np.sum(fitness_diff))\n                population[:, i] = 0.8 * global_best[i] + 0.2 * local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing dynamic mutation rate\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * np.sum(fitness_diff))\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicMutationRateOptimizationAlgorithm", "description": "Implement a dynamic selection mechanism for the mutation rate based on the fitness difference to improve exploration and exploitation balance.", "configspace": "", "generation": 69, "fitness": 0.1992645573079985, "feedback": "The algorithm DynamicMutationRateOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "47f6cbcf-8928-48ef-a6d0-dd9df8c77c81", "metadata": {"aucs": [0.3568493021678335, 0.3629917147352174, 0.3824142697178048, 0.3599552127514024, 0.35239545422581986, 0.3718326303491234, 0.3328451850783304, 0.38332465992041176, 0.3509343750533441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10911332369980953, 0.09547871303241551, 0.12478426209724824, 0.10150211683795296, 0.0955156555376343, 0.09637079568704976, 0.10453027667908077, 0.0949652677056454, 0.08718057963500159, 0.1012510163504694, 0.08388453543747842, 0.07648147406850203, 0.09930765869915814, 0.09220232890293445, 0.10711082419068685, 0.0978205741622945, 0.08848650757555665, 0.09819461135906427, 0.9794912051484707, 0.9772057927452152, 0.9745764334349031, 0.9766485100219897, 0.9771667308564236, 0.9762308656018573, 0.9662478722177887, 0.9789092241473674, 0.9625555667283235, 0.2068307988565129, 0.1966165900617004, 0.22708511689801059, 0.20145547586749568, 0.20778993435890647, 0.19907630518570207, 0.20185591409809245, 0.21186973457005187, 0.19599179954785617, 0.25203947187666986, 0.24222673346918822, 0.2505621936759673, 0.2737811862044066, 0.3192014369199384, 0.267550851942694, 0.2705699965204149, 0.2674227476002168, 0.23395978577590315, 0.12142274986822399, 0.13654253484773304, 0.15043270867213887, 0.14852746739832146, 0.14097117375349222, 0.13563803610614922, 0.1464710566613443, 0.15051130933866208, 0.12968281618822586, 0.13413106997574453, 0.12195571315801135, 0.15821191471515872, 0.13095056289867568, 0.14712502954653806, 0.12860530304161655, 0.13552550544727981, 0.10796005441733192, 0.1565507252941556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01537005924558199, 9.999999999998899e-05, 9.999999999998899e-05, 0.07480103118203152, 0.09980933035405393, 0.07182614096258899, 0.05870349216518189, 0.05607610375741101, 0.14533121621169032, 0.143227700369722, 0.0701642518133101, 0.0793418415124979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05252028624939953, 0.06034556373134714, 0.06799897911308361, 0.06507534776914214, 0.06825625538682689, 0.05982287500965355, 0.08352517963387418, 0.06574493079544574, 0.059259919776101344, 0.3634844821571708, 0.3659610490866012, 0.36296698027805485, 0.3680800093369123, 0.3607965286432203, 0.35987798851989095, 0.3339285686700979, 0.3929668448808601, 0.3309830021022875, 0.11344690759866682, 0.09388993201810991, 0.08963432485479295, 0.09115624474270212, 0.11035272037547206, 0.1046447432906531, 0.10233274599607645, 0.10327908479074233, 0.09462476739389458, 0.19211097062501192, 0.1804129177297067, 0.19301166085532384, 0.1859139529031426, 0.16777772090506338, 0.2027722272689645, 0.1872050334971359, 0.18570300490309433, 0.15972192923359252, 0.2556195534379465, 0.25065074390758535, 0.2437460186069944, 0.2461577003191281, 0.25067975338037074, 0.25625128315471724, 0.23275981311265348, 0.25369110988621135, 0.2413790498670182, 0.21796330234748562, 0.2115869776960968, 0.19754661166156673, 0.19147195315978327, 0.19693769397882754, 0.2141935234709348, 0.18876838457560652, 0.19308689792220568, 0.19582856015137107, 0.25960335906529397, 0.19899373367948003, 0.20836913633294707, 0.19064899484493913, 0.20095870325335763, 0.20332819469570418, 0.20967558514589368, 0.19908015324156758, 0.2165321621338665, 0.1990577300721178, 0.19024818328783732, 0.18649081881400364, 0.18152729360962006, 0.18202520169659553, 0.17922178622614515, 0.18961880169008005, 0.17798182567762721, 0.19635893944369753, 0.18786231055352387, 0.49160138612028237, 0.18503895816979554, 0.45375959191224546, 0.19755361317579, 0.1970776355766347, 0.382936029276832, 0.16179722275450292, 0.17418496522639015, 0.13750718842082388, 0.12676763018405468, 0.4260125530960178, 0.363045458803514, 0.3323015504297967, 0.4736603295893297, 0.1665149247486013, 0.3280727163082162, 0.46318743396658424, 0.1918868557126331, 0.17573956100612909, 0.18178725996973089, 0.1794341517490795, 0.17303746499500317, 0.1860171332872087, 0.18443368695658058, 0.21005291524887038, 0.18193386037380066, 0.09613131225113047, 0.0851981145287658, 0.08123939600276919, 0.09122157577002055, 0.11565955923332527, 0.07657342165319736, 0.11260455259194246, 0.09410615356868823, 0.08647219275425921]}, "mutation_prompt": null}
{"id": "914f91f9-c6b1-48ea-ae1f-457e5421dfd0", "solution": "import numpy as np\n\nclass DynamicMutationRateOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                fitness_diff = np.abs(fitness - fitness[i])\n                mutation_rate = 0.5 + np.random.normal(0, 0.1) * (1 + np.sum(fitness_diff)) / (self.population_size * np.sum(fitness_diff))\n                population[:, i] = 0.8 * global_best[i] + 0.2 * local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing dynamic mutation rate\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * np.sum(fitness_diff))\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicMutationRateOptimizationAlgorithm", "description": "Implement a dynamic selection mechanism for the mutation rate based on the fitness difference to improve exploration and exploitation balance.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a3a82cc-e59a-4dae-8ca9-17f72b936465", "metadata": {"aucs": [0.3568493021678335, 0.3629917147352174, 0.3824142697178048, 0.3599552127514024, 0.35239545422581986, 0.3718326303491234, 0.3328451850783304, 0.38332465992041176, 0.3509343750533441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10911332369980953, 0.09547871303241551, 0.12478426209724824, 0.10150211683795296, 0.0955156555376343, 0.09637079568704976, 0.10453027667908077, 0.0949652677056454, 0.08718057963500159, 0.1012510163504694, 0.08388453543747842, 0.07648147406850203, 0.09930765869915814, 0.09220232890293445, 0.10711082419068685, 0.0978205741622945, 0.08848650757555665, 0.09819461135906427, 0.9794912051484707, 0.9772057927452152, 0.9745764334349031, 0.9766485100219897, 0.9771667308564236, 0.9762308656018573, 0.9662478722177887, 0.9789092241473674, 0.9625555667283235, 0.2068307988565129, 0.1966165900617004, 0.22708511689801059, 0.20145547586749568, 0.20778993435890647, 0.19907630518570207, 0.20185591409809245, 0.21186973457005187, 0.19599179954785617, 0.25203947187666986, 0.24222673346918822, 0.2505621936759673, 0.2737811862044066, 0.3192014369199384, 0.267550851942694, 0.2705699965204149, 0.2674227476002168, 0.23395978577590315, 0.12142274986822399, 0.13654253484773304, 0.15043270867213887, 0.14852746739832146, 0.14097117375349222, 0.13563803610614922, 0.1464710566613443, 0.15051130933866208, 0.12968281618822586, 0.13413106997574453, 0.12195571315801135, 0.15821191471515872, 0.13095056289867568, 0.14712502954653806, 0.12860530304161655, 0.13552550544727981, 0.10796005441733192, 0.1565507252941556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01537005924558199, 9.999999999998899e-05, 9.999999999998899e-05, 0.07480103118203152, 0.09980933035405393, 0.07182614096258899, 0.05870349216518189, 0.05607610375741101, 0.14533121621169032, 0.143227700369722, 0.0701642518133101, 0.0793418415124979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05252028624939953, 0.06034556373134714, 0.06799897911308361, 0.06507534776914214, 0.06825625538682689, 0.05982287500965355, 0.08352517963387418, 0.06574493079544574, 0.059259919776101344, 0.3634844821571708, 0.3659610490866012, 0.36296698027805485, 0.3680800093369123, 0.3607965286432203, 0.35987798851989095, 0.3339285686700979, 0.3929668448808601, 0.3309830021022875, 0.11344690759866682, 0.09388993201810991, 0.08963432485479295, 0.09115624474270212, 0.11035272037547206, 0.1046447432906531, 0.10233274599607645, 0.10327908479074233, 0.09462476739389458, 0.19211097062501192, 0.1804129177297067, 0.19301166085532384, 0.1859139529031426, 0.16777772090506338, 0.2027722272689645, 0.1872050334971359, 0.18570300490309433, 0.15972192923359252, 0.2556195534379465, 0.25065074390758535, 0.2437460186069944, 0.2461577003191281, 0.25067975338037074, 0.25625128315471724, 0.23275981311265348, 0.25369110988621135, 0.2413790498670182, 0.21796330234748562, 0.2115869776960968, 0.19754661166156673, 0.19147195315978327, 0.19693769397882754, 0.2141935234709348, 0.18876838457560652, 0.19308689792220568, 0.19582856015137107, 0.25960335906529397, 0.19899373367948003, 0.20836913633294707, 0.19064899484493913, 0.20095870325335763, 0.20332819469570418, 0.20967558514589368, 0.19908015324156758, 0.2165321621338665, 0.1990577300721178, 0.19024818328783732, 0.18649081881400364, 0.18152729360962006, 0.18202520169659553, 0.17922178622614515, 0.18961880169008005, 0.17798182567762721, 0.19635893944369753, 0.18786231055352387, 0.49160138612028237, 0.18503895816979554, 0.45375959191224546, 0.19755361317579, 0.1970776355766347, 0.382936029276832, 0.16179722275450292, 0.17418496522639015, 0.13750718842082388, 0.12676763018405468, 0.4260125530960178, 0.363045458803514, 0.3323015504297967, 0.4736603295893297, 0.1665149247486013, 0.3280727163082162, 0.46318743396658424, 0.1918868557126331, 0.17573956100612909, 0.18178725996973089, 0.1794341517490795, 0.17303746499500317, 0.1860171332872087, 0.18443368695658058, 0.21005291524887038, 0.18193386037380066, 0.09613131225113047, 0.0851981145287658, 0.08123939600276919, 0.09122157577002055, 0.11565955923332527, 0.07657342165319736, 0.11260455259194246, 0.09410615356868823, 0.08647219275425921]}, "mutation_prompt": null}
{"id": "5ebd36ab-c8f1-4b09-8cc5-72e414b670b4", "solution": "import numpy as np\n\nclass AdaptivePopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.dim):\n                fitness_diff = np.abs(fitness - fitness[i])\n                mutation_rate = 0.5 + np.random.normal(0, 0.1) * (1 + np.sum(fitness_diff)) / (self.population_size * np.sum(fitness_diff))\n                population[:, i] = 0.8 * global_best[i] + 0.2 * local_best[i] + mutation_rate * np.random.standard_normal(self.population_size)\n                \n                if np.random.rand() < 0.3:  # Introducing dynamic mutation rate\n                    diff_vector = np.mean(population, axis=0) - population[i]\n                    scale_factor = 0.8 + 0.2 * np.exp(-0.1 * np.sum(fitness_diff))\n                    trial_vector = population[i] + scale_factor * diff_vector\n                    trial_fitness = func(trial_vector)\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            fitness = np.array([func(individual) for individual in population])\n\n            # Adaptive Population Size\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n                    # Adaptive Population Size Adjustment\n                    improvement_ratio = (fitness.min() - new_fitness.min()) / fitness.min()\n                    if improvement_ratio > 0.1:\n                        self.population_size = min(20, self.population_size + 2)\n                    elif improvement_ratio < 0.05:\n                        self.population_size = max(5, self.population_size - 1)\n\n        return best_individual", "name": "AdaptivePopulationSizeOptimizationAlgorithm", "description": "Introducing an adaptive population size that dynamically adjusts based on the fitness improvement to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('could not broadcast input array from shape (9,) into shape (10,)').", "error": "ValueError('could not broadcast input array from shape (9,) into shape (10,)')", "parent_id": "2a3a82cc-e59a-4dae-8ca9-17f72b936465", "metadata": {}, "mutation_prompt": null}
{"id": "0f28009d-b8e5-4cd6-b776-7370a89b9395", "solution": "import numpy as np\n\nclass AdaptiveLearningRateOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(self.population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.population_size):\n                mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and learning rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    learning_rates[i] *= 1.1\n                else:  # Adjust learning rate downwards\n                    learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "AdaptiveLearningRateOptimizationAlgorithm", "description": "Introduce adaptive learning rates for each individual based on their performance to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 72, "fitness": 0.22128544461684319, "feedback": "The algorithm AdaptiveLearningRateOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "2a3a82cc-e59a-4dae-8ca9-17f72b936465", "metadata": {"aucs": [0.8938460896262863, 0.8729631742059013, 0.8866301594520893, 0.8225057021570918, 0.8492726677218183, 0.8598782223522059, 0.8576041228084734, 0.8594983310477722, 0.8778543560069093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05254603628201804, 0.033994080384013636, 0.0377087347604016, 0.06907274634675009, 0.0532024597050369, 0.06201421159144049, 0.050018277839541825, 0.11054899301546717, 0.03729184270725183, 0.04045890952170539, 0.026753792973090995, 0.039003934014222974, 0.08792878485026812, 0.03239221844079143, 0.12264827325767325, 0.04449503966588764, 0.030716655507876722, 0.015739439131086108, 0.9607071352772225, 0.9526307724782708, 0.8685689427130282, 0.9149435293033696, 0.9415109624750398, 0.9467717907363402, 0.923514489260109, 0.9054999740106469, 0.9352284946965369, 0.17548032021497584, 0.15200750478440783, 0.1937739276369398, 0.2126741379802739, 0.34156344924754223, 0.16695386030554615, 0.24425902712501135, 0.1396623769831682, 0.12953850855254223, 0.1285049300491059, 0.18382228198076678, 0.09849522821050982, 0.09591469389537, 0.1584109273930464, 0.10624238015442555, 0.11019221638829291, 0.22750435347381903, 0.16490462976931652, 0.16564311525633946, 0.28765672982426427, 0.16101828228377035, 0.22799903424659929, 0.17438765991504357, 0.16785985174604134, 0.2725069072696872, 0.4400741014737961, 0.1850977194652781, 0.2570073020055238, 0.22956242002357374, 0.1610513272849119, 0.13980263517449298, 0.25872371055762844, 0.1447577658305862, 0.19113658995226912, 0.23067135694903018, 0.14328758503782613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07857354484016199, 0.08038817752886063, 0.10870927149483556, 0.06352628468379118, 0.05143537885741789, 0.10261779876628896, 0.1537368126139298, 0.07690678789566119, 0.10305000617468485, 0.3072232511213647, 0.2110352363299357, 0.256132556386072, 0.26014322988626226, 0.178750711085506, 0.33164794027243394, 0.30220873332538745, 0.4394715975843143, 0.15543800917037098, 0.0982745516533503, 0.06000058950540499, 0.12150254945059202, 0.10959938908950662, 0.17089721642498512, 0.16755762723988432, 0.18668508055960098, 0.1419899872497291, 0.1673181836061729, 0.38307086179216354, 0.4137107385398986, 0.42254777877713745, 0.4337381558054061, 0.40410916293782484, 0.4347270764231421, 0.39608619137740153, 0.40247942634334355, 0.42916071062193517, 0.02996077762262017, 0.04018064782184538, 0.03646430816186419, 0.07032991683137368, 0.046003515453353794, 0.07272566131244529, 0.07618088840062243, 0.12042378649833385, 0.0733218224919523, 0.16352882674584923, 0.15426379993950545, 0.20937842098091153, 0.2499265398342584, 0.1482987588800868, 0.19522780130800588, 0.1638391763807593, 0.14970036556872401, 0.21019506674463218, 0.17775531858081595, 0.15723522288426006, 0.15309687077680645, 0.15636646318392033, 0.17034955130169527, 0.15948357381459477, 0.1756661303464896, 0.1629517551823697, 0.1572900357712771, 0.12060663858288534, 0.13949484179453664, 0.08623811188868236, 0.09159260118427281, 0.12357984208637973, 0.13245216950333694, 0.10054155317902003, 0.10751400043360793, 0.09302328831899154, 0.26787855416296247, 0.19390895062808822, 0.17845053866808125, 0.18401314709661643, 0.1484965565518962, 0.15884673612794964, 0.23920121241774628, 0.18614667887950664, 0.19888315154664693, 0.21157559022040928, 0.17534028053861517, 0.19825562683810638, 0.21630451732303457, 0.1817332940270615, 0.19579672314124186, 0.19502814579989136, 0.19995290001216803, 0.18132717286845934, 0.18604422389802389, 0.19693017355574938, 0.7313555682845037, 0.29990421945842616, 0.20101373650782128, 0.16189491267616862, 0.18581174977821813, 0.5220759058853975, 0.3532345078027702, 0.3416161105319565, 0.23671555779132758, 0.20307579179227198, 0.24108020420778475, 0.1923499342416869, 0.21330305044942544, 0.15552138988096575, 0.2710205843986677, 0.21435290923441186, 0.208681245145785, 0.2086977508128045, 0.22500042452178537, 0.23299944672119122, 0.23214681130454196, 0.2529977907309814, 0.22759380178085498, 0.22461328382668722, 0.21293782013443618, 0.0593492272575733, 0.07145795757738038, 0.055791722333409455, 0.049092616742439144, 0.05581067647979887, 0.06998090487706654, 0.05550788624575076, 0.057106012659488115, 0.05389950089088347]}, "mutation_prompt": null}
{"id": "cbae27e4-a386-4a01-bde8-57ca5bac387b", "solution": "import numpy as np\n\nclass DynamicMutationStepOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        mutation_step_size = np.full(self.population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.population_size):\n                mutation_step = np.random.standard_normal(self.dim) * mutation_step_size[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and mutation step size\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    mutation_step_size[i] *= 1.2\n                else:  # Adjust mutation step size downwards\n                    mutation_step_size[i] *= 0.8\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "DynamicMutationStepOptimizationAlgorithm", "description": "Introduce a dynamic adaptation of the mutation step size based on the performance of individuals to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 73, "fitness": 0.17503571730268058, "feedback": "The algorithm DynamicMutationStepOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "0f28009d-b8e5-4cd6-b776-7370a89b9395", "metadata": {"aucs": [0.8727947981661728, 0.8119911177309289, 0.5632790054415919, 0.7146485606545472, 0.7724651738182721, 0.23380980439202448, 0.7867595488325743, 0.5774162679573553, 0.9183435975600124, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035601179119622794, 0.03546805357205429, 0.03601921722773627, 0.04335809229237986, 0.046920628555164545, 0.0414792928645642, 0.05403983084966768, 0.051754310509519064, 0.03525569089775149, 0.016606111369352194, 0.0184608287899235, 0.02479991904076595, 0.07086467350276249, 0.013568536653342345, 0.020071983551256722, 0.04910283743524091, 0.045283540268118316, 0.01361465980331067, 0.9588010798173772, 0.9528385912922267, 0.6877671551785323, 0.925563491116848, 0.9432503997397199, 0.9530031565408517, 0.9227649206065225, 0.8606268715451731, 0.1827013108801976, 0.18723443355111813, 0.14118489301279769, 0.06294466265693077, 0.13309596649805866, 0.13064660950133644, 0.09063612831217105, 0.04723816507275913, 0.09457365905899473, 0.08765374213998134, 0.12849908528550347, 0.1264134928303381, 0.08618920013036258, 0.09157938533953114, 0.12754082609365647, 0.07354863668861455, 0.09645505662536957, 0.13166403992103604, 0.14943915557490095, 0.19237757295747393, 0.11766186088010422, 0.00696315252444224, 0.23371924415669154, 0.16399036298477043, 0.14171725406908575, 0.07228201129685874, 0.13025323095504504, 0.10725186038249723, 0.08399354257779523, 0.13384418734425763, 0.036333331217443976, 0.12592985918491106, 0.1360018759487026, 0.12457778436441691, 0.1323029596456432, 0.07363126741479886, 0.016638907774491396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07896288781802885, 0.07908524813099871, 0.10149841332043363, 0.06492263370031692, 0.1148481453731216, 0.07170825113993762, 0.14528427901739083, 0.09429474164592866, 0.10225301399940256, 9.999999999998899e-05, 0.06144864218367074, 0.16661087537805885, 0.3197395572312959, 0.14215185916507378, 0.15622711593158678, 0.10817608986619198, 0.2244916972194555, 0.1569526339125188, 9.999999999998899e-05, 0.03174252634185082, 0.030421851231473562, 0.04151212530512516, 0.11356529422294936, 0.174264045159498, 0.06898046791419987, 0.042302003393695276, 0.047347823481748263, 0.34576346491503995, 0.3303444453718044, 0.42331320308949383, 0.40481921872515947, 0.28634274750969113, 0.2121490217892762, 0.27035591607812315, 0.40134487988167933, 0.36216093638911184, 0.02868380016635197, 0.09426245969560565, 0.04745891691008397, 0.033977193315003595, 0.044956775848898345, 0.04906440171826831, 0.06751322894462664, 0.048314046443825864, 0.08168932471467538, 0.13867228202034876, 0.1469785104216671, 0.20703956854511585, 0.15232596383686525, 0.1368755010257573, 0.12371739427681383, 0.15837857749425055, 0.10734647347722659, 0.1426838214419247, 0.1665851933529373, 0.14532931119084735, 0.15772742297780917, 0.1557329610373246, 0.16852691593107305, 0.14863057771136867, 0.17195319594714242, 0.16064093545045088, 0.15237322873618364, 0.10704803107320093, 0.13918082682050537, 0.0921585161987567, 0.0917711191016588, 0.11804537229332868, 0.10692062146731096, 0.09904635679742024, 0.10230360302122188, 0.09120717503435771, 0.17931412447006956, 0.2258069820682359, 0.16723065894560296, 0.13586826057679557, 0.14295352883996015, 0.17013096109150772, 0.13158489631509784, 0.2139074263225963, 0.1536945872261931, 0.21347598175650395, 0.17773440757970838, 0.1947079323253723, 0.16906743703400096, 0.17873104259168582, 0.174550523832257, 0.16468045339339077, 0.18383896857514104, 0.1785765897183399, 0.12464839597455046, 0.16237897631383547, 0.6219928435334605, 0.1772569199552232, 0.18689567012993769, 0.14750805650788623, 0.1833308819512165, 0.4802283656433348, 0.1938698650578834, 0.2260759074218387, 0.2344127346792627, 0.14002888125639323, 0.15576210981471073, 0.16767213907311396, 0.19303801896714445, 0.1560533569852247, 0.22661575933203792, 0.24879584457372916, 0.20653256214211313, 0.20234272741730808, 0.1984915359003735, 0.216483243145415, 0.2116873975418967, 0.19739137920165228, 0.19410631763147945, 0.22735014075614002, 0.19620636448451156, 0.07479610452519503, 0.047474396758792725, 0.0770228611138527, 0.06793633382187236, 0.04960359808717929, 0.04772992096733397, 0.04136751911409686, 0.05750158036254527, 0.041664162754110334]}, "mutation_prompt": null}
{"id": "0c0c3134-e799-48fc-bc07-37e10af6b1da", "solution": "import numpy as np\n\nclass AdaptiveLearningRateOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(self.population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.population_size):\n                mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and learning rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    learning_rates[i] *= 1.1\n                else:  # Adjust learning rate downwards\n                    learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "AdaptiveLearningRateOptimizationAlgorithm", "description": "Introduce adaptive learning rates for each individual based on their performance to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f28009d-b8e5-4cd6-b776-7370a89b9395", "metadata": {"aucs": [0.8938460896262863, 0.8729631742059013, 0.8866301594520893, 0.8225057021570918, 0.8492726677218183, 0.8598782223522059, 0.8576041228084734, 0.8594983310477722, 0.8778543560069093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05254603628201804, 0.033994080384013636, 0.0377087347604016, 0.06907274634675009, 0.0532024597050369, 0.06201421159144049, 0.050018277839541825, 0.11054899301546717, 0.03729184270725183, 0.04045890952170539, 0.026753792973090995, 0.039003934014222974, 0.08792878485026812, 0.03239221844079143, 0.12264827325767325, 0.04449503966588764, 0.030716655507876722, 0.015739439131086108, 0.9607071352772225, 0.9526307724782708, 0.8685689427130282, 0.9149435293033696, 0.9415109624750398, 0.9467717907363402, 0.923514489260109, 0.9054999740106469, 0.9352284946965369, 0.17548032021497584, 0.15200750478440783, 0.1937739276369398, 0.2126741379802739, 0.34156344924754223, 0.16695386030554615, 0.24425902712501135, 0.1396623769831682, 0.12953850855254223, 0.1285049300491059, 0.18382228198076678, 0.09849522821050982, 0.09591469389537, 0.1584109273930464, 0.10624238015442555, 0.11019221638829291, 0.22750435347381903, 0.16490462976931652, 0.16564311525633946, 0.28765672982426427, 0.16101828228377035, 0.22799903424659929, 0.17438765991504357, 0.16785985174604134, 0.2725069072696872, 0.4400741014737961, 0.1850977194652781, 0.2570073020055238, 0.22956242002357374, 0.1610513272849119, 0.13980263517449298, 0.25872371055762844, 0.1447577658305862, 0.19113658995226912, 0.23067135694903018, 0.14328758503782613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07857354484016199, 0.08038817752886063, 0.10870927149483556, 0.06352628468379118, 0.05143537885741789, 0.10261779876628896, 0.1537368126139298, 0.07690678789566119, 0.10305000617468485, 0.3072232511213647, 0.2110352363299357, 0.256132556386072, 0.26014322988626226, 0.178750711085506, 0.33164794027243394, 0.30220873332538745, 0.4394715975843143, 0.15543800917037098, 0.0982745516533503, 0.06000058950540499, 0.12150254945059202, 0.10959938908950662, 0.17089721642498512, 0.16755762723988432, 0.18668508055960098, 0.1419899872497291, 0.1673181836061729, 0.38307086179216354, 0.4137107385398986, 0.42254777877713745, 0.4337381558054061, 0.40410916293782484, 0.4347270764231421, 0.39608619137740153, 0.40247942634334355, 0.42916071062193517, 0.02996077762262017, 0.04018064782184538, 0.03646430816186419, 0.07032991683137368, 0.046003515453353794, 0.07272566131244529, 0.07618088840062243, 0.12042378649833385, 0.0733218224919523, 0.16352882674584923, 0.15426379993950545, 0.20937842098091153, 0.2499265398342584, 0.1482987588800868, 0.19522780130800588, 0.1638391763807593, 0.14970036556872401, 0.21019506674463218, 0.17775531858081595, 0.15723522288426006, 0.15309687077680645, 0.15636646318392033, 0.17034955130169527, 0.15948357381459477, 0.1756661303464896, 0.1629517551823697, 0.1572900357712771, 0.12060663858288534, 0.13949484179453664, 0.08623811188868236, 0.09159260118427281, 0.12357984208637973, 0.13245216950333694, 0.10054155317902003, 0.10751400043360793, 0.09302328831899154, 0.26787855416296247, 0.19390895062808822, 0.17845053866808125, 0.18401314709661643, 0.1484965565518962, 0.15884673612794964, 0.23920121241774628, 0.18614667887950664, 0.19888315154664693, 0.21157559022040928, 0.17534028053861517, 0.19825562683810638, 0.21630451732303457, 0.1817332940270615, 0.19579672314124186, 0.19502814579989136, 0.19995290001216803, 0.18132717286845934, 0.18604422389802389, 0.19693017355574938, 0.7313555682845037, 0.29990421945842616, 0.20101373650782128, 0.16189491267616862, 0.18581174977821813, 0.5220759058853975, 0.3532345078027702, 0.3416161105319565, 0.23671555779132758, 0.20307579179227198, 0.24108020420778475, 0.1923499342416869, 0.21330305044942544, 0.15552138988096575, 0.2710205843986677, 0.21435290923441186, 0.208681245145785, 0.2086977508128045, 0.22500042452178537, 0.23299944672119122, 0.23214681130454196, 0.2529977907309814, 0.22759380178085498, 0.22461328382668722, 0.21293782013443618, 0.0593492272575733, 0.07145795757738038, 0.055791722333409455, 0.049092616742439144, 0.05581067647979887, 0.06998090487706654, 0.05550788624575076, 0.057106012659488115, 0.05389950089088347]}, "mutation_prompt": null}
{"id": "7f95e503-3ad6-4569-9ff5-cec58a6f23d6", "solution": "import numpy as np\n\nclass AdaptiveLearningRateOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(self.population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.population_size):\n                mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and learning rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    learning_rates[i] *= 1.1\n                else:  # Adjust learning rate downwards\n                    learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n        return best_individual", "name": "AdaptiveLearningRateOptimizationAlgorithm", "description": "Introduce adaptive learning rates for each individual based on their performance to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f28009d-b8e5-4cd6-b776-7370a89b9395", "metadata": {"aucs": [0.8938460896262863, 0.8729631742059013, 0.8866301594520893, 0.8225057021570918, 0.8492726677218183, 0.8598782223522059, 0.8576041228084734, 0.8594983310477722, 0.8778543560069093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05254603628201804, 0.033994080384013636, 0.0377087347604016, 0.06907274634675009, 0.0532024597050369, 0.06201421159144049, 0.050018277839541825, 0.11054899301546717, 0.03729184270725183, 0.04045890952170539, 0.026753792973090995, 0.039003934014222974, 0.08792878485026812, 0.03239221844079143, 0.12264827325767325, 0.04449503966588764, 0.030716655507876722, 0.015739439131086108, 0.9607071352772225, 0.9526307724782708, 0.8685689427130282, 0.9149435293033696, 0.9415109624750398, 0.9467717907363402, 0.923514489260109, 0.9054999740106469, 0.9352284946965369, 0.17548032021497584, 0.15200750478440783, 0.1937739276369398, 0.2126741379802739, 0.34156344924754223, 0.16695386030554615, 0.24425902712501135, 0.1396623769831682, 0.12953850855254223, 0.1285049300491059, 0.18382228198076678, 0.09849522821050982, 0.09591469389537, 0.1584109273930464, 0.10624238015442555, 0.11019221638829291, 0.22750435347381903, 0.16490462976931652, 0.16564311525633946, 0.28765672982426427, 0.16101828228377035, 0.22799903424659929, 0.17438765991504357, 0.16785985174604134, 0.2725069072696872, 0.4400741014737961, 0.1850977194652781, 0.2570073020055238, 0.22956242002357374, 0.1610513272849119, 0.13980263517449298, 0.25872371055762844, 0.1447577658305862, 0.19113658995226912, 0.23067135694903018, 0.14328758503782613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07857354484016199, 0.08038817752886063, 0.10870927149483556, 0.06352628468379118, 0.05143537885741789, 0.10261779876628896, 0.1537368126139298, 0.07690678789566119, 0.10305000617468485, 0.3072232511213647, 0.2110352363299357, 0.256132556386072, 0.26014322988626226, 0.178750711085506, 0.33164794027243394, 0.30220873332538745, 0.4394715975843143, 0.15543800917037098, 0.0982745516533503, 0.06000058950540499, 0.12150254945059202, 0.10959938908950662, 0.17089721642498512, 0.16755762723988432, 0.18668508055960098, 0.1419899872497291, 0.1673181836061729, 0.38307086179216354, 0.4137107385398986, 0.42254777877713745, 0.4337381558054061, 0.40410916293782484, 0.4347270764231421, 0.39608619137740153, 0.40247942634334355, 0.42916071062193517, 0.02996077762262017, 0.04018064782184538, 0.03646430816186419, 0.07032991683137368, 0.046003515453353794, 0.07272566131244529, 0.07618088840062243, 0.12042378649833385, 0.0733218224919523, 0.16352882674584923, 0.15426379993950545, 0.20937842098091153, 0.2499265398342584, 0.1482987588800868, 0.19522780130800588, 0.1638391763807593, 0.14970036556872401, 0.21019506674463218, 0.17775531858081595, 0.15723522288426006, 0.15309687077680645, 0.15636646318392033, 0.17034955130169527, 0.15948357381459477, 0.1756661303464896, 0.1629517551823697, 0.1572900357712771, 0.12060663858288534, 0.13949484179453664, 0.08623811188868236, 0.09159260118427281, 0.12357984208637973, 0.13245216950333694, 0.10054155317902003, 0.10751400043360793, 0.09302328831899154, 0.26787855416296247, 0.19390895062808822, 0.17845053866808125, 0.18401314709661643, 0.1484965565518962, 0.15884673612794964, 0.23920121241774628, 0.18614667887950664, 0.19888315154664693, 0.21157559022040928, 0.17534028053861517, 0.19825562683810638, 0.21630451732303457, 0.1817332940270615, 0.19579672314124186, 0.19502814579989136, 0.19995290001216803, 0.18132717286845934, 0.18604422389802389, 0.19693017355574938, 0.7313555682845037, 0.29990421945842616, 0.20101373650782128, 0.16189491267616862, 0.18581174977821813, 0.5220759058853975, 0.3532345078027702, 0.3416161105319565, 0.23671555779132758, 0.20307579179227198, 0.24108020420778475, 0.1923499342416869, 0.21330305044942544, 0.15552138988096575, 0.2710205843986677, 0.21435290923441186, 0.208681245145785, 0.2086977508128045, 0.22500042452178537, 0.23299944672119122, 0.23214681130454196, 0.2529977907309814, 0.22759380178085498, 0.22461328382668722, 0.21293782013443618, 0.0593492272575733, 0.07145795757738038, 0.055791722333409455, 0.049092616742439144, 0.05581067647979887, 0.06998090487706654, 0.05550788624575076, 0.057106012659488115, 0.05389950089088347]}, "mutation_prompt": null}
{"id": "f040c884-234e-4139-bd20-7324464ee985", "solution": "import numpy as np\n\nclass DynamicPopulationSizingAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and learning rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    learning_rates[i] *= 1.1\n                else:  # Adjust learning rate downwards\n                    learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population_size = min(self.max_population_size, int(population_size * 1.1))\n                new_population = np.random.uniform(-5.0, 5.0, (new_population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n                    population_size = new_population_size\n\n        return best_individual", "name": "DynamicPopulationSizingAlgorithm", "description": "Introduce dynamic population sizing by dynamically adjusting the number of individuals based on their performance to improve convergence speed.", "configspace": "", "generation": 76, "fitness": 0.21690036117296363, "feedback": "The algorithm DynamicPopulationSizingAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.24.", "error": "", "parent_id": "0f28009d-b8e5-4cd6-b776-7370a89b9395", "metadata": {"aucs": [0.9464704183364631, 0.9397661788670537, 0.9277598913829818, 0.9440357887404265, 0.9231475033320582, 0.9130051602993727, 0.9328545081854036, 0.9348270750528175, 0.9372137582445239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04629140102173113, 0.07367304977892286, 0.05962407128704561, 0.05564604238386328, 0.04582995550214308, 0.04449741691269571, 0.060930417125840686, 0.08793709968565377, 0.042905232070475696, 0.027765235041579794, 0.036409306803676156, 0.02764174973559852, 0.0407539691107589, 0.04609228473699989, 0.014567111062891103, 0.045156867337592166, 0.01848451487146263, 0.04903659530789317, 0.9796021694592442, 0.9174374044284705, 0.8233030088349925, 0.84652814484684, 0.9366034632788713, 0.9390644199734905, 0.980977602754565, 0.895585278592371, 0.9557823512355246, 0.21934617395575862, 0.17351907066516892, 0.17948165746747324, 0.2510717265864123, 0.3872249023593729, 0.2702693336097638, 0.18310026535088697, 0.156241532989714, 0.1566992107203652, 0.11315062869490777, 0.17937471700278762, 0.095361142024599, 0.1155127748497995, 0.13968593730841583, 0.21292880328835884, 0.0952245655459728, 0.10091370962591317, 0.0909081009091891, 0.3546615649687569, 0.35166485968931727, 0.18534998040476924, 0.1799327046825181, 0.19509194436269695, 0.15280125967363423, 0.1521245730234323, 0.16450943582176802, 0.16482556903930312, 0.18888530524434832, 0.19117838112069385, 0.3863271981564157, 0.14247554117027372, 0.42612168381647064, 0.14346743730835243, 0.1442770103632418, 0.14752510822230558, 0.1329519729737516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05102128385303606, 0.13721232371896463, 0.11874868060688237, 0.07601155553981898, 0.049234415177652924, 0.022727731841710508, 0.13664029130826383, 0.055370436565656544, 0.0916936820105495, 0.27696956003926443, 0.18143862064742877, 0.37897732881669155, 0.16797875830073683, 0.15551186379836401, 0.10625666662155853, 0.32817310388336296, 0.3192459755085144, 0.4335746712225176, 0.08729103158940488, 0.0669764545140843, 0.13097712858978505, 0.2704229845617703, 0.11973395618628568, 0.09135624208902848, 0.0917495952177253, 0.11863083397315555, 0.12508527722896723, 0.41902400149934826, 0.5162439325438519, 0.43601077071291583, 0.47426469219094725, 0.39810342121320774, 0.33921919430327474, 0.4220431115420803, 0.454276733093701, 0.4367282099504479, 0.07267567848316725, 0.12614357638938378, 0.04346171058731818, 0.06454920037393264, 0.04294988961987334, 0.03959768808236164, 0.07566769579080823, 0.025834931937142702, 0.06461890506671919, 0.17538258644045035, 0.1404397906640592, 0.16829051599461253, 0.12629754916111846, 0.19670105466677612, 0.17202543824978855, 0.19084492398065445, 0.1467170164719268, 0.17765010075178322, 0.1645606004645217, 0.2137220963881451, 0.19622563973447238, 0.14472222079777763, 0.14061155568482386, 0.17324810419211822, 0.15190437293854397, 0.15114501919119339, 0.1558581074986065, 0.09038157009512848, 0.18651112930101676, 0.1316824417340171, 0.09723505214970607, 0.0938770859221324, 0.11409710978780674, 0.1005108612636001, 0.10845097937554204, 0.10623196220913145, 0.1480776761701249, 0.15799301559911072, 0.1618799030107284, 0.14555342358447687, 0.1933148074861223, 0.18728808390039253, 0.1383737607351606, 0.17591796256686887, 0.20883461996095143, 0.20339082498681593, 0.20864942305796164, 0.2088177970726678, 0.18937596992383676, 0.1897217981766698, 0.17775363659757804, 0.1925660313538229, 0.19669733246720367, 0.185390493322245, 0.1924689765129063, 0.16255287303089994, 0.597269956395462, 0.7452344377168533, 0.2021194929375647, 0.1650733253905985, 0.19070700962425535, 0.16233483828251827, 0.16016004268746442, 0.1659408808296683, 0.16867795557845033, 0.12345101103092415, 0.20867402626727094, 0.1688315694381638, 0.18360308129627922, 0.13444821059762635, 0.11529440727580753, 0.23804126180390572, 0.1690916717373584, 0.20032243541823336, 0.1855992438455092, 0.22160310744081446, 0.19184664240582394, 0.2275584976469035, 0.2202562741895463, 0.25954651050951316, 0.2518718841081613, 0.04624098493708895, 0.07633354891431476, 0.058813614482543186, 0.051937863026391806, 0.04701664213977852, 0.04424804250691616, 0.053048963146401173, 0.047276207063506104, 0.06444505265166478]}, "mutation_prompt": null}
{"id": "3106cb54-ed71-4d4d-b105-78cd48445335", "solution": "import numpy as np\n\nclass EnhancedAdaptiveLearningRateOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(self.population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(self.population_size):\n                mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and learning rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    learning_rates[i] *= 1.1\n                else:  # Adjust learning rate downwards\n                    learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            # Dynamic population size adjustment based on individual performance\n            if np.random.rand() < 0.2: \n                if np.random.rand() < 0.5:\n                    self.population_size += 1\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim)))\n                    fitness = np.append(fitness, func(population[-1]))\n                else:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n\n        return best_individual", "name": "EnhancedAdaptiveLearningRateOptimizationAlgorithm", "description": "Introduce dynamic population size adjustment based on individual performance to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 45, 21, '                    fitness = np.append(fitness, func(population[-1]))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 45, 21, '                    fitness = np.append(fitness, func(population[-1]))\\n'))", "parent_id": "0f28009d-b8e5-4cd6-b776-7370a89b9395", "metadata": {}, "mutation_prompt": null}
{"id": "9c46ed6f-adff-4c07-98b8-bfbbe320c96b", "solution": "class DynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and learning rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    learning_rates[i] *= 1.1\n                else:  # Adjust learning rate downwards\n                    learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n        return best_individual", "name": "DynamicPopulationSizeOptimizationAlgorithm", "description": "Introduce a dynamic population size adjustment mechanism based on individual performance to enhance exploration and exploitation balance, leading to faster convergence.", "configspace": "", "generation": 78, "fitness": 0.23324148771779077, "feedback": "The algorithm DynamicPopulationSizeOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.24.", "error": "", "parent_id": "0f28009d-b8e5-4cd6-b776-7370a89b9395", "metadata": {"aucs": [0.9226324695515323, 0.88540806856045, 0.9213412191884761, 0.882810556492453, 0.9106738156851752, 0.8626858319988174, 0.8857267228863273, 0.9094669591028325, 0.9388676461253599, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009560650628802625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05170694675872145, 0.07814039444979348, 0.060347004436135276, 0.09566647853865273, 0.08019748319423925, 0.06323603270079314, 0.05617497995095422, 0.0523729535268449, 0.06347493635106471, 0.05235277654315451, 0.06144879552899185, 0.0536505147102142, 0.04193732532228134, 0.04700566846510357, 0.06135083621057402, 0.062093282416143536, 0.04293156869433312, 0.05097759673250002, 0.7168560877586276, 0.9625658412576003, 0.9603318243876439, 0.8834989881745299, 0.9354818707587227, 0.8854614990388887, 0.9462447115965643, 0.9579424558244348, 0.9633934925792742, 0.2246173993413254, 0.14841229987947968, 0.18471734517160543, 0.19421768000582207, 0.1976467229048302, 0.19362734770890944, 0.21735934863269335, 0.24269425625890573, 0.26780715012705825, 0.19115891066949287, 0.17285017681738923, 0.19079645918116317, 0.14758034659504815, 0.14988720730000937, 0.17826142562411773, 0.15456406661394362, 0.12220019873269161, 0.10066945833986152, 0.3498618728412781, 0.14455111576652457, 0.1833797035064728, 0.3765367182835163, 0.1920967535147019, 0.28758650235072747, 0.24284457632148038, 0.1389226879098926, 0.16972517087845607, 0.16291485704984243, 0.1752963002324961, 0.347040081648749, 0.18374606157317397, 0.16427572940312163, 0.25493792309716123, 0.16619334191930268, 0.24665312548698015, 0.20922073013143272, 9.999999999998899e-05, 0.05061119489076282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016150539001886788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301344469812955, 0.10094464664570568, 0.08682268873237575, 0.1005326697873612, 0.08910545863917163, 0.047825869405966115, 0.12155752399205211, 0.07889090180879543, 0.0985783592022722, 0.16308249852535683, 0.21834602557855343, 0.440232679055942, 0.38564373500994464, 0.13592886891219513, 0.22493479228749458, 0.32020524804830164, 0.22684999284688578, 0.24620393925907735, 0.11388742197326696, 0.13862868918925342, 0.10478146069570848, 0.26975388535872935, 0.17092044371115955, 0.44939436638922226, 0.1616592378624555, 0.14922795352051021, 0.20665021316161913, 0.45025150028688143, 0.453141911963728, 0.4380774131171037, 0.4156203240445743, 0.47038378957349336, 0.3740775052762154, 0.424856032923834, 0.4360508739389024, 0.44626733826689835, 0.056554881664571455, 0.062224370502032444, 0.06256040898607462, 0.07617631379644385, 0.070652598559796, 0.10695145967175868, 0.04409725971118239, 0.04688125734411985, 0.11650621063548827, 0.17828220186227595, 0.17582874820014383, 0.14548176242606337, 0.2081718883043755, 0.176927450142065, 0.17910653131997656, 0.1948029737561261, 0.1542594470311911, 0.16719922259084596, 0.16684078716817985, 0.18774682883250904, 0.21217601716503043, 0.17720291227515805, 0.1973243776008159, 0.18814035560690257, 0.19288003629355732, 0.1834254691094852, 0.1593395355054067, 0.10078156582803299, 0.10153058577430418, 0.17820305222773336, 0.10494662465681781, 0.13961393129823396, 0.10871506944936249, 0.14979259936941047, 0.15791840662727485, 0.10125709100209856, 0.1864752801053351, 0.22576874924913815, 0.19633374026159556, 0.17681016508617542, 0.19960501776680162, 0.1719459810774664, 0.18797748490107213, 0.26960896336519935, 0.19981531956956, 0.19205958066432205, 0.21945802697740024, 0.20650869889668366, 0.19955732875846433, 0.20540551635315396, 0.18402998112712954, 0.1836782424690141, 0.20983766019659544, 0.1962724388585707, 0.18888396004437225, 0.18164836798170836, 0.8313757868036051, 0.6627675201286485, 0.2020219168817271, 0.32495899617285884, 0.308485799143719, 0.19126770485400835, 0.4062448917192426, 0.29481994918816223, 0.26211318095677427, 0.330892163571574, 0.20782515317935168, 0.1901954372161765, 0.17825777171127155, 0.16404402467148904, 0.21287730300722052, 0.16036818690259425, 0.213931579558562, 0.26000825803912064, 0.22477340714218974, 0.31098639632223246, 0.2357179062283894, 0.24735080843106538, 0.22841489728528774, 0.2351604487045803, 0.22526625856484583, 0.06381902691113917, 0.07210149124901089, 0.11061794971024486, 0.06011966525395418, 0.08316299589670673, 0.06319186473016525, 0.06484429735803676, 0.09718362699968108, 0.05449524168373643]}, "mutation_prompt": null}
{"id": "fd3ba2c6-72cb-4b82-8333-5aab7da5f545", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm: \n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        mutation_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                mutation_step = np.random.standard_normal(self.dim) * mutation_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and mutation rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    mutation_rates[i] *= 1.2\n                else:  # Adjust mutation rate downwards\n                    mutation_rates[i] *= 0.8\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    mutation_rates = np.append(mutation_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    mutation_rates = np.delete(mutation_rates, worst_idx)\n                    population_size -= 1\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Introduce a novel adaptive mutation control mechanism that dynamically adjusts mutation rates based on individual performance to promote faster convergence.", "configspace": "", "generation": 79, "fitness": 0.18572076146926875, "feedback": "The algorithm EnhancedDynamicPopulationSizeOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "9c46ed6f-adff-4c07-98b8-bfbbe320c96b", "metadata": {"aucs": [0.5373143179820205, 0.6116184767451267, 0.4440117134617434, 0.38472971095777964, 0.6280087980328586, 0.5541555361128236, 0.80276995966971, 0.5826745647384959, 0.861320647037862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06084320217470085, 0.0828760562517129, 0.060804321081517676, 0.05078291761301623, 0.0522524657118858, 0.062268432019395914, 0.06399175529909895, 0.06252939074619956, 0.046158311906522975, 0.02786126210720319, 0.034263098930184754, 0.04897409565636135, 0.02731045296235679, 0.05776491710739118, 0.07005184557308552, 0.028847180771669256, 0.039223756523961706, 0.02824140434296407, 0.6441679040868553, 0.9621119001204733, 0.46507562676248626, 0.7260894670121325, 0.8342918045407304, 0.633090487872901, 0.9628015562724699, 0.876488276018409, 0.8219318877510944, 0.11432458458828709, 0.09073564584068772, 0.14781932128293263, 0.08771120873195903, 0.12974096175336913, 0.14910857243152476, 0.16153563075387445, 0.15177451149370869, 0.1315072891201251, 0.09727418247688724, 0.17573529740921312, 0.10203540780721232, 0.11854824194424707, 0.12394880625382287, 0.12349294234402863, 0.0969003359753271, 0.09470894277211406, 0.11753658864936511, 0.13411734502271466, 0.11788130874261082, 0.20849580213414132, 0.1407447036783639, 0.15936875762691394, 0.22363297213967415, 0.2694958945165329, 0.0885630189699792, 0.19805206130920672, 0.17634377229296294, 0.12939410267960283, 0.32543587538313623, 0.13024977602723287, 0.3458622177421177, 0.12937242208330535, 0.11896737791420398, 0.32047799805557, 0.1867754970234804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11253854948645714, 0.14080413424050442, 0.07748801585243581, 0.09844598829724438, 0.0878143456399414, 0.053256645949318004, 0.14064906031675184, 0.07726802585555925, 0.1065813943094931, 0.025171236189298174, 0.19884034303354214, 0.2703392972450577, 0.25945362752862655, 0.2246171493758512, 0.08351306226553112, 0.29994100828127435, 0.059970361209100376, 0.054559497261084666, 0.02868319812306419, 0.08832449596249792, 0.054053532244179414, 0.08146396688745594, 0.05002299979544045, 0.1287386093209385, 0.03559572879329931, 0.27681986843830886, 0.10127239248151765, 0.382662476115295, 0.37624084260206847, 0.40965124541408526, 0.34440938212395256, 0.38956684683266674, 0.2896777003314782, 0.40857599753665597, 0.3679811923750763, 0.35844368223622236, 0.03922435467135332, 0.05289836402284398, 0.05570237087231056, 0.053736871021457966, 0.05262338161719582, 0.09294720350830488, 0.0833016364131528, 0.03137297830728569, 0.08347330899551975, 0.1729351357984964, 0.19132111042790734, 0.1339940990938061, 0.17580468485787282, 0.15602554884105724, 0.13765262231950004, 0.1936528926588128, 0.23857011796935845, 0.16658223471392375, 0.16580669168747042, 0.18304496266574566, 0.18227577570872233, 0.14917766357619533, 0.18411811686061474, 0.18001471083564724, 0.18418085796381334, 0.1742716179378644, 0.14704909281785372, 0.09372867403360197, 0.10002723524630164, 0.16895017141914848, 0.1131895711073505, 0.10818137645833592, 0.09263861382808336, 0.14744872147769494, 0.1478347009904264, 0.09507612034157431, 0.18423355489216364, 0.21187906343256202, 0.1869211828618108, 0.22177929958998244, 0.15686818055243623, 0.19533063735288048, 0.16977196987758747, 0.15047416547990178, 0.17995758468814693, 0.18198043858199986, 0.19403331910891797, 0.19165345630825836, 0.16621523778657887, 0.18600888540595728, 0.17834151554695055, 0.1705432116731015, 0.1998810779625162, 0.21958146354684782, 0.18854829956578267, 0.17881908044517003, 0.3026310898424075, 0.4073892926554554, 0.20173903552350314, 0.188869187996351, 0.2596817592288627, 0.17756860012705733, 0.25592411408038596, 0.20832111856289282, 0.24928190488546553, 0.2795541604580186, 0.20388094118264688, 0.16640749890880557, 0.15886031733773542, 0.15547612527427024, 0.21109288672920778, 0.15043914485901788, 0.18861170898681945, 0.27561682008321764, 0.2123688533436534, 0.2292568405646942, 0.22079275932525044, 0.1970324758780605, 0.24384487221181184, 0.21207556301086394, 0.21468035857983103, 0.05318840190700924, 0.08063678804833785, 0.09018555185688726, 0.08277886837296211, 0.0829216522919296, 0.09894285547425696, 0.05464145783318852, 0.08792433110973219, 0.07080914822839801]}, "mutation_prompt": null}
{"id": "2add6a11-fc3f-4e9a-84ff-b7ee174fec8a", "solution": "class DynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and learning rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    learning_rates[i] *= 1.1\n                else:  # Adjust learning rate downwards\n                    learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n        return best_individual", "name": "DynamicPopulationSizeOptimizationAlgorithm", "description": "Introduce a dynamic population size adjustment mechanism based on individual performance to enhance exploration and exploitation balance, leading to faster convergence.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9c46ed6f-adff-4c07-98b8-bfbbe320c96b", "metadata": {"aucs": [0.9226324695515323, 0.88540806856045, 0.9213412191884761, 0.882810556492453, 0.9106738156851752, 0.8626858319988174, 0.8857267228863273, 0.9094669591028325, 0.9388676461253599, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009560650628802625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05170694675872145, 0.07814039444979348, 0.060347004436135276, 0.09566647853865273, 0.08019748319423925, 0.06323603270079314, 0.05617497995095422, 0.0523729535268449, 0.06347493635106471, 0.05235277654315451, 0.06144879552899185, 0.0536505147102142, 0.04193732532228134, 0.04700566846510357, 0.06135083621057402, 0.062093282416143536, 0.04293156869433312, 0.05097759673250002, 0.7168560877586276, 0.9625658412576003, 0.9603318243876439, 0.8834989881745299, 0.9354818707587227, 0.8854614990388887, 0.9462447115965643, 0.9579424558244348, 0.9633934925792742, 0.2246173993413254, 0.14841229987947968, 0.18471734517160543, 0.19421768000582207, 0.1976467229048302, 0.19362734770890944, 0.21735934863269335, 0.24269425625890573, 0.26780715012705825, 0.19115891066949287, 0.17285017681738923, 0.19079645918116317, 0.14758034659504815, 0.14988720730000937, 0.17826142562411773, 0.15456406661394362, 0.12220019873269161, 0.10066945833986152, 0.3498618728412781, 0.14455111576652457, 0.1833797035064728, 0.3765367182835163, 0.1920967535147019, 0.28758650235072747, 0.24284457632148038, 0.1389226879098926, 0.16972517087845607, 0.16291485704984243, 0.1752963002324961, 0.347040081648749, 0.18374606157317397, 0.16427572940312163, 0.25493792309716123, 0.16619334191930268, 0.24665312548698015, 0.20922073013143272, 9.999999999998899e-05, 0.05061119489076282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016150539001886788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301344469812955, 0.10094464664570568, 0.08682268873237575, 0.1005326697873612, 0.08910545863917163, 0.047825869405966115, 0.12155752399205211, 0.07889090180879543, 0.0985783592022722, 0.16308249852535683, 0.21834602557855343, 0.440232679055942, 0.38564373500994464, 0.13592886891219513, 0.22493479228749458, 0.32020524804830164, 0.22684999284688578, 0.24620393925907735, 0.11388742197326696, 0.13862868918925342, 0.10478146069570848, 0.26975388535872935, 0.17092044371115955, 0.44939436638922226, 0.1616592378624555, 0.14922795352051021, 0.20665021316161913, 0.45025150028688143, 0.453141911963728, 0.4380774131171037, 0.4156203240445743, 0.47038378957349336, 0.3740775052762154, 0.424856032923834, 0.4360508739389024, 0.44626733826689835, 0.056554881664571455, 0.062224370502032444, 0.06256040898607462, 0.07617631379644385, 0.070652598559796, 0.10695145967175868, 0.04409725971118239, 0.04688125734411985, 0.11650621063548827, 0.17828220186227595, 0.17582874820014383, 0.14548176242606337, 0.2081718883043755, 0.176927450142065, 0.17910653131997656, 0.1948029737561261, 0.1542594470311911, 0.16719922259084596, 0.16684078716817985, 0.18774682883250904, 0.21217601716503043, 0.17720291227515805, 0.1973243776008159, 0.18814035560690257, 0.19288003629355732, 0.1834254691094852, 0.1593395355054067, 0.10078156582803299, 0.10153058577430418, 0.17820305222773336, 0.10494662465681781, 0.13961393129823396, 0.10871506944936249, 0.14979259936941047, 0.15791840662727485, 0.10125709100209856, 0.1864752801053351, 0.22576874924913815, 0.19633374026159556, 0.17681016508617542, 0.19960501776680162, 0.1719459810774664, 0.18797748490107213, 0.26960896336519935, 0.19981531956956, 0.19205958066432205, 0.21945802697740024, 0.20650869889668366, 0.19955732875846433, 0.20540551635315396, 0.18402998112712954, 0.1836782424690141, 0.20983766019659544, 0.1962724388585707, 0.18888396004437225, 0.18164836798170836, 0.8313757868036051, 0.6627675201286485, 0.2020219168817271, 0.32495899617285884, 0.308485799143719, 0.19126770485400835, 0.4062448917192426, 0.29481994918816223, 0.26211318095677427, 0.330892163571574, 0.20782515317935168, 0.1901954372161765, 0.17825777171127155, 0.16404402467148904, 0.21287730300722052, 0.16036818690259425, 0.213931579558562, 0.26000825803912064, 0.22477340714218974, 0.31098639632223246, 0.2357179062283894, 0.24735080843106538, 0.22841489728528774, 0.2351604487045803, 0.22526625856484583, 0.06381902691113917, 0.07210149124901089, 0.11061794971024486, 0.06011966525395418, 0.08316299589670673, 0.06319186473016525, 0.06484429735803676, 0.09718362699968108, 0.05449524168373643]}, "mutation_prompt": null}
{"id": "e22aa2a3-abbf-4314-94cc-e56160f38724", "solution": "class EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n        crossover_prob = 0.8  # Initial crossover probability\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and learning rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    learning_rates[i] *= 1.1\n                else:  # Adjust learning rate downwards\n                    learning_rates[i] *= 0.9\n\n            if np.random.rand() < crossover_prob:  # Adaptive crossover probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            crossover_prob *= 0.999  # Reduce crossover probability over time for exploitation\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Introduce adaptive crossover probability to promote exploration and exploit the diversity of solutions for faster convergence.", "configspace": "", "generation": 81, "fitness": 0.23169449899970157, "feedback": "The algorithm EnhancedDynamicPopulationSizeOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "9c46ed6f-adff-4c07-98b8-bfbbe320c96b", "metadata": {"aucs": [0.9026724009128921, 0.7880808081075608, 0.8668315826175588, 0.8905667249788667, 0.8230715089947294, 0.818156604955762, 0.9046625913722468, 0.8366965467289844, 0.8492590305513923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022123127893713734, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019068960888869446, 0.051036350020718824, 0.06426575497666831, 0.0789137382926629, 0.10795709871575421, 0.05318325238518484, 0.08568031802019194, 0.054068787025855825, 0.0762469307146546, 0.06454195722301026, 0.056367242719149946, 0.04403725070305775, 0.05755973162239347, 0.03679507221415912, 0.047308749035036124, 0.06642046010712488, 0.055464560920842065, 0.07118947376103857, 0.03835078226527444, 0.9070901160588843, 0.9427059036663425, 0.7855412952131686, 0.9606786030146113, 0.9424998013971322, 0.9588006023662613, 0.8736439333149062, 0.9537454047615405, 0.9726705020249627, 0.2734162277180797, 0.2621330231341511, 0.28023373647286354, 0.14021061384380118, 0.27135172912007266, 0.2690566547943377, 0.20090779081898946, 0.24113703750139948, 0.21948848064659487, 0.1339750157236378, 0.1269516977599009, 0.15839326066529213, 0.139393419779824, 0.19618476280771147, 0.17767588422341374, 0.13118950617734626, 0.1178244886574541, 0.21760911173816644, 0.20147229823120905, 0.19180202220133657, 0.1324160964494444, 0.11193145012966166, 0.18722133729080814, 0.35553401375050175, 0.1779758655260799, 0.21897366750588843, 0.21986200144606682, 0.27148666208188843, 0.23427301205393125, 0.2470027407176646, 0.20180654040858448, 0.2278821643571155, 0.2249095429652601, 0.39013787594534977, 0.14862895164817402, 0.19411460506798006, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10855892484753094, 0.086701841413653, 0.07080130463947243, 0.09797460979064654, 0.06431287590676515, 0.0911229452539819, 0.1154299645770227, 0.09604148629290066, 0.09767468861822359, 0.2727980689137667, 0.2964014549634185, 0.22756173121151346, 0.19661177651797157, 0.24762807820427102, 0.24216573555701348, 0.2372744127837435, 0.21486619722676037, 0.24010220063467635, 0.16190595475743175, 0.21245522550722673, 0.13905305867243456, 0.20772304683561593, 0.20726361862760556, 0.18263171437279724, 0.17366710106777405, 0.19023645799506161, 0.14325426247440576, 0.43515738746781507, 0.4554563790301718, 0.4384333176818602, 0.43359849722654775, 0.42619859109670866, 0.4764831948824795, 0.4211112558513971, 0.41097655241637954, 0.427022912219012, 0.05734788217874265, 0.04166950838782846, 0.08058417589775035, 0.06170073378582508, 0.11854904018590273, 0.06100328856378323, 0.0837405631952417, 0.08305038660913922, 0.08382790732160506, 0.19038781302919672, 0.1979304064648989, 0.1965633686479169, 0.2212129394036776, 0.18708223832928428, 0.19514051446976477, 0.22595230315489556, 0.2046741334566965, 0.1965623129667029, 0.15749731200432293, 0.16804966130386623, 0.17493198525144904, 0.1671856021391337, 0.16821818589213366, 0.22683095401206144, 0.17677979363439877, 0.18908337683890764, 0.1647537881377149, 0.10518302985317607, 0.10897539073393148, 0.14595562739511392, 0.11995264659102978, 0.1079331670985173, 0.11833883658985889, 0.1674306360039829, 0.1543067211651925, 0.12374867356024954, 0.1834169857967083, 0.16345667177476408, 0.19220955039918608, 0.1637412029739016, 0.1863557508343403, 0.20605597701642886, 0.1753959565582096, 0.1699054852033991, 0.16388048720873338, 0.19551321071003236, 0.1996030269432053, 0.19139641863730372, 0.18688632499984337, 0.19619329310925948, 0.2373449903360727, 0.22112984654718792, 0.19429856520577438, 0.19858057120054373, 0.17240960150420526, 0.8096280962422925, 0.3816950924915482, 0.26962064756786597, 0.195123039412051, 0.6547607758808628, 0.31255194544828435, 0.2779731050096831, 0.3454246991684512, 0.29694331855265477, 0.2684507653088548, 0.2574105890993543, 0.2162468881440467, 0.2098567883847675, 0.20035462083926503, 0.19827254723788068, 0.26481944063724416, 0.20056286325313888, 0.21493910423097395, 0.22028983565350668, 0.21089428674596788, 0.20442555114791494, 0.23549844139611098, 0.22950745189661004, 0.24169865534712442, 0.22100710146564728, 0.2512518147326517, 0.06412808229801792, 0.06351879864011101, 0.07651347797653107, 0.07608585940409829, 0.06231880003572898, 0.10867313789395028, 0.08141104607802807, 0.05920718189770613, 0.08142750256440634]}, "mutation_prompt": null}
{"id": "66406fbf-2db1-4588-8e95-c0908bd69004", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                trial_vector = population[i] + mutation_step\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:  # Update individual and learning rate\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    learning_rates[i] *= 1.1\n                else:  # Adjust learning rate downwards\n                    learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Introduce a dynamic step size adjustment mechanism based on individual fitness improvement to adapt exploration and exploitation dynamically, promoting faster convergence.", "configspace": "", "generation": 82, "fitness": 0.24754231447876213, "feedback": "The algorithm EnhancedDynamicPopulationSizeOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "9c46ed6f-adff-4c07-98b8-bfbbe320c96b", "metadata": {"aucs": [0.8446916749695784, 0.9082222845327207, 0.8956368774957756, 0.8468350474438847, 0.9049681197582908, 0.871290905795486, 0.844996453477761, 0.9097189464267581, 0.8825495434962116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07258383275078018, 9.999999999998899e-05, 0.013755964457334402, 9.999999999998899e-05, 9.999999999998899e-05, 0.08472833510095845, 0.05841393506475656, 0.13800494199601876, 0.08201202347092473, 0.0837416010581652, 0.06839806410894866, 0.07051884115575124, 0.09731656149580226, 0.10947215012678446, 0.08386685775850311, 0.03224336222425739, 0.05257048716331569, 0.03576519332933037, 0.04099482408926636, 0.0719158113201358, 0.08779717178454904, 0.051064776985409455, 0.09163059145030439, 0.0807644671363591, 0.9514563262870972, 0.9723642103991484, 0.9427371195560252, 0.9828139887669222, 0.9544799109136735, 0.9763260260893722, 0.9772499292373255, 0.9591341423168619, 0.9711801220353316, 0.47779641120292093, 0.2727911394306076, 0.31743207648585003, 0.5787114724367095, 0.35232401634205146, 0.3119937023408276, 0.29796635001018457, 0.495039868206427, 0.3834693468448974, 0.16839794839713018, 0.19913575655258542, 0.10426034845906818, 0.17877233531282, 0.17091810171713862, 0.27635869839220406, 0.15744353147715995, 0.193056148672466, 0.14088964188948028, 0.15566613858464973, 0.20179435153908976, 0.2126840542087194, 0.17328408706028753, 0.1565353416773223, 0.24818574922049907, 0.2443975996456541, 0.17357638871418546, 0.1832821441953162, 0.29932014442215793, 0.15040492634526237, 0.2653643903796443, 0.21064875246905745, 0.3165163327347347, 0.1856783095782023, 0.2515506957640349, 0.40318653188871, 0.17527221172580865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0046178272161842004, 9.999999999998899e-05, 0.1060744521246959, 0.06947739305162992, 0.0940454600085393, 0.11475927373131634, 0.10786582762067265, 0.13832730008001748, 0.1426755283740011, 0.09274367603649247, 0.09209306061669287, 0.2286625423173574, 0.30139223124316883, 0.24207450947659714, 0.32270034898857625, 0.25821605853872365, 0.19302288970641335, 0.22277351190284767, 0.17947953033949837, 0.29239980765943896, 0.2692072781996899, 0.18683319620736483, 0.1568475055439681, 0.15411223518707085, 0.2318179488256482, 0.21065463150726393, 0.21041532129372276, 0.21855985762243912, 0.1968558609950647, 0.45325589464342586, 0.44691179773544376, 0.47240088162241023, 0.453073740803402, 0.4515314594620624, 0.4516341115939436, 0.4483649969329886, 0.4592148867632918, 0.4454903013024363, 0.10660608244641478, 0.06009761710808981, 0.07540233526134832, 0.05478788926240774, 0.04794856162295369, 0.09252475238638291, 0.048332644798982805, 0.06467883904364047, 0.09985429148263048, 0.25030400950968346, 0.17503729897686138, 0.1900543566333147, 0.19281365325205946, 0.2190845179829798, 0.21048120766090184, 0.266583413821861, 0.21711085246840856, 0.23348708435385357, 0.15515523761599848, 0.1759001662203995, 0.16513150452815117, 0.1633966201774103, 0.1783712810382443, 0.1678759369131151, 0.15249839788933983, 0.15059139784306497, 0.1879101740978767, 0.08950350770955351, 0.1035827514026465, 0.12598857994571167, 0.1115341885083937, 0.13629859462547067, 0.11033248997425193, 0.0962208997693782, 0.12730859503126724, 0.10928669376072808, 0.17066270693237962, 0.18052528342881302, 0.2271708929887324, 0.1753142246282785, 0.18569844182385742, 0.19454806132246882, 0.1907513272093383, 0.19164574663358847, 0.15084993809118152, 0.24313702253200842, 0.18959661917686865, 0.19243915504103004, 0.19714067366511545, 0.22778872272112072, 0.20845176844260982, 0.2062937352706482, 0.21909304828586507, 0.21015854501526654, 0.1897862014059305, 0.2959292448698332, 0.8306546953960117, 0.17316359999233844, 0.25053196545294265, 0.17029174224953003, 0.20200686981208948, 0.791658915298254, 0.45213133465046995, 0.4429852003848742, 0.22878901756345194, 0.2371748366944878, 0.19959854177574565, 0.20913096382092122, 0.3451610406567044, 0.2121063425870251, 0.3852509459042095, 0.16246953737768977, 0.2122050574138148, 0.2642959089781428, 0.2299996130408043, 0.204624611661533, 0.22706126351512246, 0.23790603778643948, 0.21808277089967054, 0.2245122420643223, 0.21011342110292908, 0.06012333438579476, 0.06553068467471945, 0.0486889189632731, 0.09744202788312939, 0.06379758418765069, 0.08424133828374558, 0.11721821952336431, 0.05062050818041386, 0.09021344801804754]}, "mutation_prompt": null}
{"id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 83, "fitness": 0.2664801576468822, "feedback": "The algorithm EnhancedDynamicPopulationSizeOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "66406fbf-2db1-4588-8e95-c0908bd69004", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "51f59428-c1a8-42ae-8161-bd9301d10b32", "solution": "import numpy as np\n\nclass EnhancedDynamicCrossoverOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        crossover_probs = np.full(population_size, 0.9)  # Initialize crossover probabilities\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < crossover_probs[i]:  # Dynamic probability for crossover\n                    mutation_step = np.random.standard_normal(self.dim)\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        crossover_probs[i] *= 1.1  # Adjust crossover probability based on success\n                    else:\n                        crossover_probs[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability for new population generation\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):\n                        crossover_probs[i] *= 1.2\n                    else:\n                        crossover_probs[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    crossover_probs = np.append(crossover_probs, 0.9)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    crossover_probs = np.delete(crossover_probs, worst_idx)\n                    population_size -= 1\n\n        return best_individual", "name": "EnhancedDynamicCrossoverOptimizationAlgorithm", "description": "Implement a dynamic crossover probability mechanism to adaptively adjust the exploration-exploitation balance during the optimization process.", "configspace": "", "generation": 84, "fitness": 0.16819788695566437, "feedback": "The algorithm EnhancedDynamicCrossoverOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.26701426955407037, 0.27655943856921716, 0.2741809604634611, 0.256327715925845, 0.2671648046705587, 0.2801608476580173, 0.2631131130896729, 0.3171740205373752, 0.3228969566347747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002196827525488332, 9.999999999998899e-05, 0.06364814466680979, 0.07549128673551009, 0.08677671848523005, 0.07913584817989316, 0.07749163848364204, 0.07480700919936512, 0.08955782665433853, 0.0693018121752833, 0.06689818522555013, 0.07990089428834357, 0.06480661866177362, 0.04964151074762957, 0.06143064497457529, 0.07333928310286353, 0.07117638073019639, 0.06600672900746063, 0.07892763866906294, 0.06187467251389356, 0.984308420094042, 0.9808481712121214, 0.9863040940384636, 0.9855100424096546, 0.9850674651650301, 0.9850160197641515, 0.9886648297425858, 0.9752977631069438, 0.9804033985643847, 0.1595489036884945, 0.1515724024596311, 0.147337235931029, 0.18817613660644728, 0.15184396047776516, 0.1644705636039644, 0.14317083386174112, 0.164949748980313, 0.14247079628019088, 0.16140274639936836, 0.17343038300235458, 0.20780357971594365, 0.21147071686759233, 0.20789919792695, 0.1914172711575386, 0.23647113584874968, 0.21622972799783235, 0.16834147308881509, 0.079137736046612, 0.07484451159183214, 0.0733886719148713, 0.1034638573441169, 0.07340788757906669, 0.10182737825137278, 0.08522608195488501, 0.08244647134330085, 0.07042137823363714, 0.09178276557607079, 0.07515158789085585, 0.12241391295362991, 0.07735471912437875, 0.081291444612002, 0.07331611939733995, 0.09377414498284686, 0.07094557689802372, 0.08165938073788837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371625190708141, 0.0627610165452186, 0.09168592424448485, 0.08368475591124591, 0.050648144884426594, 0.055905682027226566, 0.0519125876570089, 0.04789217427001058, 0.060867468134372604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016324956139607494, 0.01578303178496876, 0.03234065062580371, 0.0456303190416677, 0.047693932902603375, 0.03483713696753399, 0.015255034502694609, 0.03289024888958281, 0.03249158397733243, 0.26726793057456166, 0.2659703212002872, 0.29375248485424066, 0.276072068775459, 0.27358893003880436, 0.2862141792772216, 0.27622387357016154, 0.2597763898175379, 0.268833915649764, 0.07561055445241838, 0.08386115495351587, 0.061549431173422264, 0.0658563370339369, 0.07112606850273573, 0.08133787103580858, 0.08611285128993618, 0.06019966315254821, 0.07867373582460935, 0.16133406614599644, 0.13136135322685205, 0.13557056896004505, 0.13223105988935657, 0.14191116845468876, 0.21000572710064036, 0.12870536103843955, 0.1227205064011534, 0.16146421697634628, 0.21113572496890265, 0.19146933522495013, 0.21400670861004134, 0.20300044906806103, 0.20655667528730803, 0.21104494647388383, 0.19804741265796177, 0.199836696955494, 0.22943723094541868, 0.14909993335597826, 0.14622634206080798, 0.15550033763620053, 0.1416799668609603, 0.15036104085332358, 0.1488081326294678, 0.13916250664351248, 0.15911287500006144, 0.14199341983585378, 0.1879690725788341, 0.18789187844262456, 0.22202867383481995, 0.17593206804127204, 0.1701310822811145, 0.17249187571845104, 0.19493270814920793, 0.1904973025160751, 0.1784288975560887, 0.16124794815711285, 0.17947188907666844, 0.17088531960993392, 0.17790548658542393, 0.164385456435155, 0.1620519690123381, 0.17331560112429345, 0.17506713369725713, 0.1690547583909534, 0.2903217014489443, 0.3025751581948122, 0.2958903161734636, 0.2620487215239591, 0.45896335138947364, 0.3041401968325539, 0.24248030374148088, 0.2935375868244582, 0.2643913192484948, 0.23973567449895805, 0.2559205043073228, 0.29377708600964636, 0.30102287603564737, 0.22156426426209963, 0.23662667276456195, 0.20366765454473468, 0.30382216711789123, 0.17894984604978836, 0.17774607785367458, 0.19144288638628937, 0.1933874402509015, 0.17127625511185796, 0.18670751396160135, 0.17510158976697343, 0.1894591611760077, 0.18100582650713037, 0.17530169907034832, 0.07325279928078832, 0.07021989107531812, 0.08072873453848317, 0.07864889015095067, 0.0694229933863646, 0.07507430450112551, 0.06919016849128823, 0.07634374638822772, 0.06629421594397522]}, "mutation_prompt": null}
{"id": "d1db11be-9147-4b94-8598-3a7d89401d32", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "18ee978f-4919-4b43-b605-3ed0edcb6819", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "7c15950a-045c-4f71-ad6a-6012f1c39b76", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "d4302536-52d7-45e7-a807-36d27b9003e4", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "be211f57-568e-45ef-b954-7bbc3b1a026d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCrowdingOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for adaptive crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                crowding_scores = 1 / np.abs(np.mean(crowding_population, axis=1) - np.mean(crowding_population, axis=0))\n                selection_probabilities = crowding_scores / crowding_scores.sum()\n                selected_indices = np.random.choice(np.arange(population_size), size=2, p=selection_probabilities, replace=False)\n                if crowding_fitness[selected_indices[0]] < fitness[selected_indices[1]]:\n                    population[selected_indices[0]] = crowding_population[selected_indices[0]]\n                    fitness[selected_indices[0]] = crowding_fitness[selected_indices[0]]\n\n        return best_individual", "name": "EnhancedAdaptiveCrowdingOptimizationAlgorithm", "description": "Introduce a novel adaptive crowding mechanism that prioritizes individuals with diverse characteristics for enhanced exploration.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (7,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (7,) (5,) ')", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {}, "mutation_prompt": null}
{"id": "889f44cc-bfa1-406d-88ab-25d13fa82463", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate based on trial performance\n                        if trial_fitness < np.mean(fitness):\n                            learning_rates[i] *= 1.2\n                        else:\n                            learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithmEnhanced", "description": "Introduce adaptive learning rates that dynamically adjust based on individual performance to accelerate convergence.", "configspace": "", "generation": 90, "fitness": 0.19966731635110796, "feedback": "The algorithm EnhancedDynamicPopulationSizeOptimizationAlgorithmEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.37483380410364, 0.30240276784117437, 0.4433839843554662, 0.4142027607359595, 0.493307144344332, 0.3838069593570612, 0.4525271549101202, 0.4738028573469384, 0.44036679590079475, 0.006513250050668273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09288845338832274, 0.07655653442566002, 0.08870439142188424, 0.0922809021463652, 0.08194269418629463, 0.0883812814268562, 0.09311309698865589, 0.07664911912277494, 0.08183562231225938, 0.08532219472355884, 0.07519576371915282, 0.07731140876220632, 0.07195411855179024, 0.0736169210435339, 0.05630686298365306, 0.09450234059667018, 0.08999476547347873, 0.08252927307285185, 0.9778017936217972, 0.986832529543532, 0.990956455687209, 0.983440757003509, 0.9924027053024614, 0.9854146568602598, 0.9748059542847493, 0.9846592341175295, 0.9882625385830734, 0.21164649826465398, 0.2283570429295423, 0.2410241120326253, 0.29144500959645603, 0.27516443694445913, 0.2466256584549409, 0.1879073173713055, 0.19369170086554732, 0.22708485345480478, 0.25852115901880546, 0.2248804544980132, 0.26859540242381885, 0.23441563176428204, 0.20955979022386761, 0.2518938067349924, 0.1761733889471554, 0.2290701575374624, 0.19920186146371055, 0.09881777402268876, 0.15410153718739006, 0.14961225296333214, 0.1338644411551353, 0.14214777952565105, 0.16106571254156865, 0.15013826415188158, 0.0991954152832879, 0.17389512345755898, 0.17189923582029332, 0.14268047160020747, 0.1996539477496938, 0.20302989554982165, 0.15279292625937757, 0.19738573210732213, 0.13929139970440851, 0.11111883562416047, 0.1461429254208384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038299433415953654, 9.999999999998899e-05, 0.0005514185188277843, 0.0016679157069499073, 9.999999999998899e-05, 0.039799146241961125, 0.0998084706872816, 0.07694752156137785, 0.046024145428483876, 0.06095948787082084, 0.06888645221005696, 0.08908095025947949, 0.11084930419322503, 0.09154517977714371, 9.999999999998899e-05, 0.01404455815270611, 9.999999999998899e-05, 0.021341490948857622, 0.005016341067592522, 0.02130568647927944, 9.999999999998899e-05, 0.060910523432561425, 9.999999999998899e-05, 0.058066173382286035, 0.05638749190196468, 0.07927086899947022, 0.08357031384182878, 0.07068300571798258, 0.06074000233898191, 0.05689169688144757, 0.07364554216932284, 0.07755176440265255, 0.3972083407442848, 0.34258684246715276, 0.387438260695261, 0.39257403037229255, 0.3704749695131304, 0.34002059615346747, 0.4225905661198257, 0.3742283603635026, 0.35775254286249614, 0.0930300811439373, 0.0900589933457786, 0.0813897032770372, 0.10193642508585798, 0.09270069322336971, 0.06987268125384782, 0.08200967760715028, 0.1315328765138296, 0.10635341945971866, 0.21012644354973387, 0.1673913053784175, 0.232871244216187, 0.19316556827477294, 0.22080504994006744, 0.18910764341447528, 0.1840838401164988, 0.17000182295515187, 0.19291977645479308, 0.2197233682767713, 0.2267544425975535, 0.19841502709872916, 0.22032207479328247, 0.20499292241006728, 0.21095876228718058, 0.19129431206118974, 0.20872905472657255, 0.18300591196425753, 0.14657024242370953, 0.1527410450506288, 0.12432933981435035, 0.1485924660159086, 0.15898300548775335, 0.15963028399049983, 0.15493546989489237, 0.15635355883327517, 0.13652147758587996, 0.20644603110313287, 0.23260452700136303, 0.1938706579246725, 0.2020621185973388, 0.17799448830936093, 0.2032902062474986, 0.18104439644365544, 0.20896174788361999, 0.18187043884211918, 0.18782177216595963, 0.18244124376820647, 0.1987872639391317, 0.19366192539914306, 0.18360653485930345, 0.17712681372719707, 0.19238876718084152, 0.183447654417488, 0.18709929477919984, 0.4198617805437219, 0.17826737051538144, 0.17457669819621224, 0.39443641048714007, 0.1815232378246011, 0.22138880767160796, 0.32342621621995526, 0.17907463845786098, 0.17412992641176916, 0.25733461759599363, 0.3493254893952532, 0.29774821025332576, 0.3512137986752877, 0.3447347439831412, 0.27751396434117714, 0.42739023485946104, 0.3639522571448851, 0.2110271039297641, 0.24586665113221662, 0.23635697314338233, 0.20942122602721502, 0.24857626323779114, 0.24486874135174808, 0.24771723500978038, 0.25497673209724414, 0.2419142040373804, 0.27950135459516134, 0.0794287062116118, 0.07884843647771378, 0.09379527075620886, 0.08736588857399796, 0.06885383998715877, 0.0790766143093995, 0.066257248676314, 0.060514603237019626, 0.06418723760621725]}, "mutation_prompt": null}
{"id": "cc59b606-8887-434f-b7e3-eedea6ed9260", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "97f99a91-10f7-4392-bbd7-432d63578b0c", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "89c9e9fb-465e-4c8f-b54c-8d8620f36d20", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "bf8df287-729b-4697-862c-80d2b4e1a75d", "solution": "import numpy as np\n\nclass AdaptiveMutationStepOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        mutation_step_sizes = np.full((population_size, self.dim), 0.1)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                mutation_step = np.random.normal(0.0, mutation_step_sizes[i])\n                trial_vector = population[i] + mutation_step\n                trial_vector = np.clip(trial_vector, -5.0, 5.0)\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    mutation_step_sizes[i] *= 1.1\n                else:\n                    mutation_step_sizes[i] *= 0.9\n\n            if np.random.rand() < 0.2:  \n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  \n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):\n                        mutation_step_sizes[i] *= 1.2\n                    else:\n                        mutation_step_sizes[i] *= 0.8\n\n            if np.random.rand() < 0.1:  \n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    mutation_step_sizes = np.vstack((mutation_step_sizes, np.full(self.dim, 0.1)))\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    mutation_step_sizes = np.delete(mutation_step_sizes, worst_idx, axis=0)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  \n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):\n                        mutation_step_sizes[i] += np.random.normal(0.0, 0.1, self.dim)\n\n        return best_individual", "name": "AdaptiveMutationStepOptimizationAlgorithm", "description": "Implement adaptive mutation step sizes for each individual based on their historical performance to accelerate convergence.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {}, "mutation_prompt": null}
{"id": "8ad0f34c-94a8-40f9-8cbf-1e7f188b3741", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n        self.elitism_percentage = 0.1  # Elitism percentage\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            elite_count = int(self.elitism_percentage * population_size)\n            elite_indices = sorted_indices[:elite_count]\n\n            for i in range(population_size):\n                if i not in elite_indices:\n                    if np.random.rand() < 0.5:  # 50% probability for mutation\n                        mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                        trial_vector = population[i] + mutation_step\n                        trial_fitness = func(trial_vector)\n\n                        if trial_fitness < fitness[i]:  # Update individual and learning rate\n                            population[i] = trial_vector\n                            fitness[i] = trial_fitness\n                            learning_rates[i] *= 1.1\n                        else:  # Adjust learning rate downwards\n                            learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Introducing elitism by preserving a percentage of the best individuals in each generation to maintain high-quality solutions, enhancing convergence speed.", "configspace": "", "generation": 95, "fitness": 0.2469543931152293, "feedback": "The algorithm EnhancedDynamicPopulationSizeOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.6135424386206653, 0.8190012419544039, 0.8705316628761725, 0.5994710736655167, 0.8331729735742479, 0.8680406866023282, 0.6442783200370353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04183650923149873, 9.999999999998899e-05, 0.0005740167211933933, 9.999999999998899e-05, 0.01083489610560806, 0.0007490385236820218, 0.06039166099654636, 0.1163774708263885, 0.07041298865106238, 0.1131691638161163, 0.10837794810600732, 0.05985547776059652, 0.0930363215783363, 0.0767458621058742, 0.07701064687912318, 0.07685278317978395, 0.05907163148711936, 0.059946172516191276, 0.07728297273304174, 0.057060573284348215, 0.0781361126872242, 0.07204631868013256, 0.09528004421857983, 0.07119060130803867, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.33581021060643923, 0.6965802078631839, 0.3124471640748998, 0.5176872465987612, 0.6304501659311839, 0.3390301810604752, 0.4184931101061077, 0.5357097499710893, 0.24672237015592624, 0.17971617760851422, 0.1631152661228864, 0.19280307960694054, 0.22183089143631907, 0.19164013699051274, 0.24160886091148137, 0.15958651006605884, 0.2574720112688982, 0.20113271411855038, 0.19334786486402922, 0.17914261010912325, 0.16813220678870677, 0.13232202363301204, 0.2427433680879605, 0.22294186580125586, 0.2095260630460375, 0.22051911381822165, 0.15145648720399674, 0.19432634926288705, 0.1988907769970112, 0.19133321910509538, 0.21817487004003866, 0.18330550511518717, 0.14610145465416458, 0.18952458342687306, 0.25351035748891093, 0.18587029486629558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006414920599272955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016128625039233402, 0.07716639594519636, 0.1052269614306166, 0.08822965026318796, 0.08072030063439328, 0.09257382346599352, 0.07360060849872896, 0.1174204586952532, 0.06091036697644536, 0.12715179367679752, 0.19026233337470044, 0.16428219617378859, 0.10212750450325403, 0.1756574207421352, 0.13763528150718318, 0.09803385258554465, 0.15946621651172466, 0.2924272359094372, 0.1389840441262602, 0.409702634559841, 0.1915644059351893, 0.1338870977150609, 0.17875470372894375, 0.27818920027101324, 0.11705732158562054, 0.16061093889871303, 0.12286619783483133, 0.11574687892374802, 0.4586792189432243, 0.4962613850556923, 0.4362245591472106, 0.4907925683554596, 0.4594098899469674, 0.4077100458014369, 0.4873504403731834, 0.47002503467343504, 0.38262663052137513, 0.11911577785127525, 0.14377242203200513, 0.0706238407335037, 0.13329076450544286, 0.12159598469325339, 0.06262388217930581, 0.05703439493403295, 0.08418258827132463, 0.09146521866708757, 0.2271718367467993, 0.1773978896616445, 0.19140182329584499, 0.2123969547215534, 0.23998497276224162, 0.19507415864119781, 0.2069067779672239, 0.18358650756094197, 0.20418417334827743, 0.18109771567686306, 0.19185141767820135, 0.19239993706711678, 0.17986946431248285, 0.18255686885209388, 0.2040930650865841, 0.2104483663807264, 0.2476663123845685, 0.1753958128583536, 0.19199199912388487, 0.1700726281840752, 0.1591832228657467, 0.12596783544946777, 0.16219003205819937, 0.16069123848615563, 0.1629283174183196, 0.11970897295253013, 0.1217832366659739, 0.1677088020288915, 0.17940442650792587, 0.2198030675958217, 0.19249005078519887, 0.1952602249394394, 0.1701458545625132, 0.19098582743733883, 0.19824577541819854, 0.19292573963989568, 0.2041061138451924, 0.19401227082898753, 0.19712465851731154, 0.18607823885150698, 0.20373042885320847, 0.19714562505955424, 0.1852355613794503, 0.1803036878854406, 0.18750857162150047, 0.8013999623465469, 0.1645723250460085, 0.1965352755932851, 0.8979931775464964, 0.20052584667858042, 0.17107421854962868, 0.48642117317052547, 0.1990829119634473, 0.2991859551679331, 0.2495134226624951, 0.6230788815234215, 0.19782201952706757, 0.35875475304100035, 0.5522747829382794, 0.22806320160287508, 0.5033353986288867, 0.45952579695320706, 0.1650608627529695, 0.24033248962191478, 0.2656642738498364, 0.21404499845852432, 0.2664693025082654, 0.22343801622036896, 0.19589758791890355, 0.21804416945202088, 0.2541844732734415, 0.22520250991867952, 0.08999145496366112, 0.06347664079901982, 0.0534374343500289, 0.0888918599352383, 0.07702182064080076, 0.06487569879679611, 0.06703570177806706, 0.0799605821905014, 0.06169566868161214]}, "mutation_prompt": null}
{"id": "6bd3f0ac-b3fd-4e04-967a-3fe9002e6aaf", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n        mutation_probabilities = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < mutation_probabilities[i]:\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                        mutation_probabilities[i] = min(1.0, mutation_probabilities[i] * 1.1)\n                    else:\n                        learning_rates[i] *= 0.9\n                        mutation_probabilities[i] = max(0.1, mutation_probabilities[i] * 0.9)\n\n            if np.random.rand() < 0.2:\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    mutation_probabilities = np.append(mutation_probabilities, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    mutation_probabilities = np.delete(mutation_probabilities, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual\n", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Introducing adaptive mutation probabilities based on individual fitness to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 96, "fitness": 0.14731430381903296, "feedback": "The algorithm EnhancedDynamicPopulationSizeOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.2641642638693754, 0.26931940333818605, 0.24173084031982495, 0.24769123182792707, 0.24209127517955153, 0.2647571763667941, 0.2369401360047816, 0.22827024855921985, 0.2545385774161949, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04971335685249634, 0.06152801623845572, 0.07063637377494247, 0.06034507279480117, 0.04953878689365665, 0.05084019117258631, 0.060117421193647935, 0.05388301583453414, 0.0713880416369348, 0.044374320708415516, 0.04985872997595686, 0.03701497544033594, 0.029282766546185113, 0.039232999670306024, 0.04916559726305858, 0.03877733133581274, 0.04003856430591024, 0.030662965697265232, 0.9867110525883045, 0.9782762818037812, 0.9662284200468312, 0.9661820615666621, 0.9714853220604152, 0.965931935182724, 0.9303320196796052, 0.9706544574680792, 0.9714872716425225, 0.07081490633486098, 0.10766097603400526, 0.1139564997774718, 0.07182917248721021, 0.08767686641013861, 0.13447335000823968, 0.15886543215478155, 0.08530840576649656, 0.11603443500771404, 0.16271700243029807, 0.12133526340409795, 0.21205366292132333, 0.15893360038335302, 0.11281239128250564, 0.16321219328364822, 0.19511816982358143, 0.1549799192607737, 0.15799767744793758, 0.011411152297010063, 0.06245439186314017, 0.03864701663620074, 0.03924372938163356, 0.05813489341891653, 0.0423468324793852, 0.06805549701092917, 0.030806136646855387, 0.06555400206995621, 0.04120905959054266, 0.046078497098262394, 0.05298387080279132, 0.052979021532150505, 0.0568686907893331, 0.07673997626021467, 0.10957884468383416, 0.09079158193843972, 0.0684962646208509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06923225015785994, 0.06581169264063569, 0.07301022073386632, 0.07003706942173504, 0.08003758534066341, 0.10280063187285737, 0.09299385594573195, 0.06976060864080391, 0.0752518898274398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018047885858974433, 0.02876406346021776, 0.0012736479841358728, 0.03681290992986197, 0.035635087497755236, 0.001725716960123802, 9.999999999998899e-05, 0.000147733553991225, 0.0010310169051208629, 0.2483039882189073, 0.24390047403167725, 0.28061845313756106, 0.21799330971631914, 0.22390855606994908, 0.26074474381924984, 0.25950759095436626, 0.2383573279351039, 0.2737208695774327, 0.053817711205349616, 0.05843417300316178, 0.057455385881695076, 0.04897631826710713, 0.05913196598371928, 0.04780989277083225, 0.04536604497309815, 0.04773468072138365, 0.055577993123049785, 0.1929899633353619, 0.14655821214536735, 0.1591783914913507, 0.157850232058805, 0.1563409488442039, 0.1715603791931266, 0.1784933435788274, 0.13547716972888846, 0.1413311405865434, 0.1683719120971776, 0.178129743303039, 0.17510983371573352, 0.1609352320326305, 0.17449174719239946, 0.1869204732943186, 0.15381782541991196, 0.17491341276276984, 0.19362050581072188, 0.11919830931265296, 0.10765779378146367, 0.12560079802171908, 0.12100938821472917, 0.15869813094679508, 0.11684833035381381, 0.11679334875535219, 0.13641952454588335, 0.11608383273560685, 0.15854420673912994, 0.15512538272389398, 0.16310776144079298, 0.17907801990542815, 0.1791434140100291, 0.15080014129425368, 0.1547499089561668, 0.16411034260104584, 0.15447581456291204, 0.15668540453983693, 0.16916639453576976, 0.16150305805309895, 0.17521986562561864, 0.1719058427187189, 0.17183687235886713, 0.15825519660373122, 0.15951623704641493, 0.15680679312653578, 0.17484570210382322, 0.16871760917182255, 0.24115043429200855, 0.2765457372092758, 0.1687454801812619, 0.16837274891906984, 0.20464749483996159, 0.16430957601260288, 0.39881025772364953, 0.16572235271562918, 0.21574062297681507, 0.24644764876523872, 0.17745219281313585, 0.18328225650616792, 0.15072313248890934, 0.2642961042158458, 0.1925133122467142, 0.17923439668917962, 0.18966267928083502, 0.18991120257396554, 0.2011780975562787, 0.18456542894294148, 0.17992424233328197, 0.19922821234373966, 0.1900832679306974, 0.18934936068413222, 0.1930964352609137, 0.051051806609358596, 0.058776118878420824, 0.06251644862563166, 0.06582597099689369, 0.050514818109868465, 0.055592566363455775, 0.04851953232484141, 0.053135561980736545, 0.06308700242587462]}, "mutation_prompt": null}
{"id": "73c9cdf6-a7d8-4d84-b9f3-653af73ad357", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "e03e8bae-3b24-4334-8833-082bdb91bd58", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
{"id": "3e6b171f-c2f1-4386-a390-09cad6fa1586", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 5\n        self.max_population_size = 15\n\n    def __call__(self, func):\n        population_size = self.min_population_size\n        population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        learning_rates = np.full(population_size, 0.5)\n\n        for _ in range(self.budget):\n            sorted_indices = np.argsort(fitness)\n            best_individual = population[sorted_indices[0]]\n            global_best = population[sorted_indices[0]]\n            local_best = population[sorted_indices[1]]\n\n            for i in range(population_size):\n                if np.random.rand() < 0.5:  # 50% probability for mutation\n                    mutation_step = np.random.standard_normal(self.dim) * learning_rates[i]\n                    trial_vector = population[i] + mutation_step\n                    trial_fitness = func(trial_vector)\n\n                    if trial_fitness < fitness[i]:  # Update individual and learning rate\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        learning_rates[i] *= 1.1\n                    else:  # Adjust learning rate downwards\n                        learning_rates[i] *= 0.9\n\n            if np.random.rand() < 0.2:  # 20% probability\n                new_population = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n                new_fitness = np.array([func(individual) for individual in new_population])\n\n                if new_fitness.min() < fitness.min():\n                    population = new_population\n                    fitness = new_fitness\n\n            if np.random.rand() < 0.15:  # 15% probability for dynamic step size adjustment based on fitness improvement\n                for i in range(population_size):\n                    if fitness[i] < np.mean(fitness):  # Increase step size if individual fitness is below average\n                        learning_rates[i] *= 1.2\n                    else:\n                        learning_rates[i] *= 0.8\n\n            if np.random.rand() < 0.1:  # 10% probability for dynamic population size adjustment\n                if np.random.rand() < 0.5 and population_size < self.max_population_size:\n                    population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    learning_rates = np.append(learning_rates, 0.5)\n                    population_size += 1\n                elif population_size > self.min_population_size:\n                    worst_idx = np.argmax(fitness)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness = np.delete(fitness, worst_idx)\n                    learning_rates = np.delete(learning_rates, worst_idx)\n                    population_size -= 1\n\n            if np.random.rand() < 0.1:  # 10% probability for probabilistic crowding mechanism\n                crowding_population = np.copy(population)\n                crowding_fitness = np.copy(fitness)\n                for j in range(population_size):\n                    rand_idx = np.random.choice(np.delete(np.arange(population_size), j))\n                    if crowding_fitness[j] < fitness[rand_idx]:\n                        population[j] = crowding_population[j]\n                        fitness[j] = crowding_fitness[j]\n\n        return best_individual", "name": "EnhancedDynamicPopulationSizeOptimizationAlgorithm", "description": "Implement a probabilistic crowding mechanism to promote diversity within the population, enhancing exploration capabilities for faster convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b0a648ee-33ab-48cb-9fa2-4c7b05b0ed85", "metadata": {"aucs": [0.8581290293750022, 0.8565612136752636, 0.8839269640675923, 0.8190012419544039, 0.8705316628761725, 0.8633560862929713, 0.8331729735742479, 0.8680406866023282, 0.8808338925020238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044751839552211514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059047887704705704, 0.05861085499375329, 0.11637747083136984, 0.08241558501355972, 0.11325122330561299, 0.10837795210533008, 0.06136242833124905, 0.09119066954916366, 0.08197048844895449, 0.07885491094075137, 0.07752420646995939, 0.05907163364837975, 0.0846601723090995, 0.07451839039226105, 0.056479376167204665, 0.11315745950116995, 0.07204631868143174, 0.09566185054282084, 0.062036405924847715, 0.978096780684012, 0.9658636289830245, 0.961947574224384, 0.9683233874480455, 0.9727535085717415, 0.951338098794248, 0.9640505850262985, 0.9742571986445848, 0.9471758626522284, 0.3719074304216814, 0.7282730526594203, 0.552731820619893, 0.5923210788921873, 0.6376829625944547, 0.5969489987535856, 0.4988164030265462, 0.5849670283696837, 0.4718743934351566, 0.1797169054010772, 0.1631152661228864, 0.16292786157483474, 0.22006096013744358, 0.2409744090575331, 0.2669778357733842, 0.15239571920753647, 0.2579493583940303, 0.2145918921332769, 0.17790138110860387, 0.17753688239038024, 0.17028837386276008, 0.15138461614868026, 0.24322043401306714, 0.3485407155171095, 0.22805514613635847, 0.16724334161718724, 0.17174548035129933, 0.210685518018071, 0.19433538787655935, 0.1829091171382231, 0.23569363540117916, 0.21392055839506519, 0.17067281164179404, 0.1929710600180008, 0.2545749591604559, 0.18505261493176928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010181778147796416, 9.999999999998899e-05, 0.05414443003699543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07574366932497634, 0.10522351379439754, 0.10402987645895068, 0.08068871785032661, 0.09844810740771304, 0.11927905062595179, 0.1169411193906903, 0.09263361257776448, 0.1315750908608554, 0.19026289547767905, 0.16428073927901166, 0.17061275892488226, 0.17565838461044836, 0.23068163085864613, 0.13297280594652894, 0.18782335883539414, 0.2924326936278824, 0.2638414502776447, 0.41016440881959515, 0.16396597571206672, 0.2518725663961162, 0.18671353124700873, 0.2784941891267094, 0.23740558555168778, 0.1606113135947107, 0.12388696438884983, 0.25336955684890583, 0.4602214574961344, 0.4950893174935166, 0.49118043188956106, 0.49323661541299224, 0.46408270655741946, 0.4547694084886399, 0.4888174895796433, 0.4733470861961878, 0.4510126449655635, 0.1211299906368084, 0.14377242238224774, 0.10563407318429874, 0.1332907644937854, 0.12159598494471269, 0.07151992290899778, 0.07461572544490558, 0.08368423574509964, 0.1065238331858418, 0.2284606242725704, 0.1773978315392747, 0.20963134292362995, 0.2123985800539001, 0.239670063696926, 0.21061115539248, 0.20690692848879189, 0.18040877950447431, 0.19308981698327765, 0.18109896050550778, 0.19187189516906988, 0.17730045902117997, 0.17988173358966686, 0.18255686885531452, 0.18738291434487175, 0.2104486061434775, 0.2575326221572968, 0.16459002726669003, 0.19204238638163018, 0.17006475825347056, 0.1751164387961751, 0.12638471491705294, 0.16217931676518382, 0.2041304069218507, 0.1629542368876581, 0.1196872495716762, 0.11534081135639296, 0.17196680742319603, 0.1819008242107386, 0.21839571873013042, 0.2019114967446176, 0.20909523307419142, 0.21751362266526786, 0.19100933130784814, 0.19399847381830504, 0.22491791718043264, 0.2037028174148966, 0.1940122744593229, 0.19791659256886485, 0.1827885277842235, 0.18543143338739354, 0.19343558822312168, 0.1788924666163153, 0.18595390205204532, 0.19714838693089898, 0.8013999623465469, 0.17927401783462338, 0.1993777710571779, 0.8979931775464964, 0.200525846685511, 0.2724967126821334, 0.5597960029289597, 0.18996143189861048, 0.23862568751199342, 0.25543539941745264, 0.5920313202062075, 0.2684960001998825, 0.36152021637061726, 0.546197553058995, 0.33474036842243526, 0.5018499350548293, 0.45640106056189345, 0.571304635278848, 0.2384256859767856, 0.26562286612095676, 0.19849105611170237, 0.26646955925731364, 0.23978501251511375, 0.24093558537703674, 0.22870068851927383, 0.27146806065472073, 0.2581344515143522, 0.08999251719826695, 0.06503439197667127, 0.07092711909872773, 0.08916539548449987, 0.07695257876372452, 0.08215636409071303, 0.07182851882436114, 0.07989916777196593, 0.07061019138572866]}, "mutation_prompt": null}
