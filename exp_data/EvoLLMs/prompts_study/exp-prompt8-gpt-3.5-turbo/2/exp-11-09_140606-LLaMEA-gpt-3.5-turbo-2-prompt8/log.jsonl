{"id": "f3e91e6e-84a7-487a-94b0-21eb65af948a", "solution": "import numpy as np\n\nclass FruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * np.std(population, axis=0)\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "FruitFlyOptimizationAlgorithm", "description": "Fruit Fly Optimization Algorithm (FFOA) mimics the swarming behavior of fruit flies to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.07471319091512002, "feedback": "The algorithm FruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1867797221784968, 0.1438989299621295, 0.13558557560057216, 0.06978641739597569, 0.07511552475943539, 0.07283113222279569, 0.07941879636684623, 0.12258662665328979, 0.0749228993161134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05679465385909699, 0.09733811238105372, 0.030753721096285935, 0.054186704435366106, 0.04222005159664399, 0.04188220604271464, 0.0740741753212868, 0.034681972705925546, 0.033363015384525574, 0.016212064929341796, 9.999999999998899e-05, 0.009496336802078398, 0.03810535570975626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04603139225825048, 0.038323921255761006, 0.04287777107098589, 0.040875357198123075, 0.04783674555013262, 0.03550401188707997, 0.03788210939851555, 0.0489921924738419, 0.0316049562235563, 0.03664921672418264, 0.0025582621545572337, 9.999999999998899e-05, 0.042181020889915044, 0.03562152091696735, 0.01525057852905154, 9.999999999998899e-05, 0.018040127097696312, 9.999999999998899e-05, 0.11917684206806933, 0.11438586924728911, 0.058902894760212265, 0.06956836968108204, 0.006038330827513927, 0.019581720221405474, 0.06965494439231301, 0.07073546969085442, 0.11819156110120799, 0.01601728216744891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07396816429224362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03897493145081721, 9.999999999998899e-05, 0.01775405302282196, 9.999999999998899e-05, 0.15186087153415662, 9.999999999998899e-05, 0.006778307277070739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10857828982578177, 0.05267731934421005, 0.12615504810305067, 0.030268798867706614, 0.0263210298583062, 0.017341526750025538, 0.09407537520057851, 0.055214190157907406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1978023446304491, 0.2030960818040497, 0.17004691128498217, 0.09996397522648681, 0.11452224784971787, 0.11940952695020002, 0.15086016829797555, 0.16398069433806928, 0.18021278493569082, 0.012583710310547058, 0.0011261026100281013, 9.999999999998899e-05, 0.06109535118213605, 0.04666182262701202, 0.0622419260463537, 0.0772436978183283, 0.09310366555414917, 0.07174940964171495, 0.26383096234811176, 0.13349359582799025, 0.08730905183603577, 0.19081638402069934, 0.15443452643718114, 0.14022496340561796, 0.15311782270748642, 0.1109006617848034, 0.1492243631002309, 0.13386213283162562, 0.1696725994645636, 0.12895324605360747, 0.15067007156296008, 0.18018852208848746, 0.13895799707268963, 0.1345926376357589, 0.13681183555096466, 0.10984809730407374, 0.08051053453734203, 0.10217469671129731, 0.0660876575334216, 0.07994524615800147, 0.1450895295827206, 0.09079703910528858, 0.0793530367921168, 0.08714861077406422, 0.04414807433623669, 0.23037053848450473, 0.1889438355363775, 0.21715013305986464, 0.27019665107266555, 0.21929496411720284, 0.19128911854760577, 0.21446965896229142, 0.25378887904952363, 0.20505793608076528, 0.14968111033584242, 0.16384667563302502, 0.1553581035248912, 0.15304574754893496, 0.17621854133471082, 9.999999999998899e-05, 0.16310425898720227, 0.16329614053560204, 9.999999999998899e-05, 0.11611672255350691, 0.1758370824525216, 0.07901424411050606, 0.1571878074675298, 0.13014805081118952, 0.0995656990546302, 0.06088618922663591, 0.058791705753620804, 0.11412072261259076, 0.12394698391564074, 0.07510189552863611, 0.13372888073368816, 0.07202919253653095, 0.06404039407658524, 0.04764729700441095, 0.17101681251975698, 0.05493244095223859, 0.15533280166715813, 0.1842855426439094, 0.17457913569299321, 0.19527900465951287, 0.20015273654695875, 0.19528677553736484, 0.1792583319873482, 0.20328767719786012, 0.20553577490858577, 0.20997909646209345, 0.0766284089680499, 0.06652352051966004, 0.05275249765651502, 0.06478576587559692, 0.0617739600309376, 0.12937547288274853, 0.07533876321590938, 0.053281769595998396, 0.058939101633804225]}, "mutation_prompt": null}
{"id": "be141671-6a32-4f4f-99a0-8c6d95a276a0", "solution": "import numpy as np\n\nclass FruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * np.std(population, axis=0)\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "FruitFlyOptimizationAlgorithm", "description": "Fruit Fly Optimization Algorithm (FFOA) mimics the swarming behavior of fruit flies to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3e91e6e-84a7-487a-94b0-21eb65af948a", "metadata": {"aucs": [0.1867797221784968, 0.1438989299621295, 0.13558557560057216, 0.06978641739597569, 0.07511552475943539, 0.07283113222279569, 0.07941879636684623, 0.12258662665328979, 0.0749228993161134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05679465385909699, 0.09733811238105372, 0.030753721096285935, 0.054186704435366106, 0.04222005159664399, 0.04188220604271464, 0.0740741753212868, 0.034681972705925546, 0.033363015384525574, 0.016212064929341796, 9.999999999998899e-05, 0.009496336802078398, 0.03810535570975626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04603139225825048, 0.038323921255761006, 0.04287777107098589, 0.040875357198123075, 0.04783674555013262, 0.03550401188707997, 0.03788210939851555, 0.0489921924738419, 0.0316049562235563, 0.03664921672418264, 0.0025582621545572337, 9.999999999998899e-05, 0.042181020889915044, 0.03562152091696735, 0.01525057852905154, 9.999999999998899e-05, 0.018040127097696312, 9.999999999998899e-05, 0.11917684206806933, 0.11438586924728911, 0.058902894760212265, 0.06956836968108204, 0.006038330827513927, 0.019581720221405474, 0.06965494439231301, 0.07073546969085442, 0.11819156110120799, 0.01601728216744891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07396816429224362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03897493145081721, 9.999999999998899e-05, 0.01775405302282196, 9.999999999998899e-05, 0.15186087153415662, 9.999999999998899e-05, 0.006778307277070739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10857828982578177, 0.05267731934421005, 0.12615504810305067, 0.030268798867706614, 0.0263210298583062, 0.017341526750025538, 0.09407537520057851, 0.055214190157907406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1978023446304491, 0.2030960818040497, 0.17004691128498217, 0.09996397522648681, 0.11452224784971787, 0.11940952695020002, 0.15086016829797555, 0.16398069433806928, 0.18021278493569082, 0.012583710310547058, 0.0011261026100281013, 9.999999999998899e-05, 0.06109535118213605, 0.04666182262701202, 0.0622419260463537, 0.0772436978183283, 0.09310366555414917, 0.07174940964171495, 0.26383096234811176, 0.13349359582799025, 0.08730905183603577, 0.19081638402069934, 0.15443452643718114, 0.14022496340561796, 0.15311782270748642, 0.1109006617848034, 0.1492243631002309, 0.13386213283162562, 0.1696725994645636, 0.12895324605360747, 0.15067007156296008, 0.18018852208848746, 0.13895799707268963, 0.1345926376357589, 0.13681183555096466, 0.10984809730407374, 0.08051053453734203, 0.10217469671129731, 0.0660876575334216, 0.07994524615800147, 0.1450895295827206, 0.09079703910528858, 0.0793530367921168, 0.08714861077406422, 0.04414807433623669, 0.23037053848450473, 0.1889438355363775, 0.21715013305986464, 0.27019665107266555, 0.21929496411720284, 0.19128911854760577, 0.21446965896229142, 0.25378887904952363, 0.20505793608076528, 0.14968111033584242, 0.16384667563302502, 0.1553581035248912, 0.15304574754893496, 0.17621854133471082, 9.999999999998899e-05, 0.16310425898720227, 0.16329614053560204, 9.999999999998899e-05, 0.11611672255350691, 0.1758370824525216, 0.07901424411050606, 0.1571878074675298, 0.13014805081118952, 0.0995656990546302, 0.06088618922663591, 0.058791705753620804, 0.11412072261259076, 0.12394698391564074, 0.07510189552863611, 0.13372888073368816, 0.07202919253653095, 0.06404039407658524, 0.04764729700441095, 0.17101681251975698, 0.05493244095223859, 0.15533280166715813, 0.1842855426439094, 0.17457913569299321, 0.19527900465951287, 0.20015273654695875, 0.19528677553736484, 0.1792583319873482, 0.20328767719786012, 0.20553577490858577, 0.20997909646209345, 0.0766284089680499, 0.06652352051966004, 0.05275249765651502, 0.06478576587559692, 0.0617739600309376, 0.12937547288274853, 0.07533876321590938, 0.053281769595998396, 0.058939101633804225]}, "mutation_prompt": null}
{"id": "59bfe601-2197-41b4-aabc-c76ce93d7348", "solution": "import numpy as np\n\nclass EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            std_dev = np.std(population, axis=0)\n            weights = 1 / (1 + np.exp(-2 * fitness_values))  # Dynamic weights based on fitness\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * weights * std_dev\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Enhancing the exploration-exploitation balance by introducing dynamic weights for individual updates based on fitness values.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,) (10,) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,) (10,) ')", "parent_id": "f3e91e6e-84a7-487a-94b0-21eb65af948a", "metadata": {}, "mutation_prompt": null}
{"id": "31246855-cc33-47d9-afb2-9f7218016e4b", "solution": "import numpy as np\n\nclass FruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * np.std(population, axis=0)\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "FruitFlyOptimizationAlgorithm", "description": "Fruit Fly Optimization Algorithm (FFOA) mimics the swarming behavior of fruit flies to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3e91e6e-84a7-487a-94b0-21eb65af948a", "metadata": {"aucs": [0.1867797221784968, 0.1438989299621295, 0.13558557560057216, 0.06978641739597569, 0.07511552475943539, 0.07283113222279569, 0.07941879636684623, 0.12258662665328979, 0.0749228993161134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05679465385909699, 0.09733811238105372, 0.030753721096285935, 0.054186704435366106, 0.04222005159664399, 0.04188220604271464, 0.0740741753212868, 0.034681972705925546, 0.033363015384525574, 0.016212064929341796, 9.999999999998899e-05, 0.009496336802078398, 0.03810535570975626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04603139225825048, 0.038323921255761006, 0.04287777107098589, 0.040875357198123075, 0.04783674555013262, 0.03550401188707997, 0.03788210939851555, 0.0489921924738419, 0.0316049562235563, 0.03664921672418264, 0.0025582621545572337, 9.999999999998899e-05, 0.042181020889915044, 0.03562152091696735, 0.01525057852905154, 9.999999999998899e-05, 0.018040127097696312, 9.999999999998899e-05, 0.11917684206806933, 0.11438586924728911, 0.058902894760212265, 0.06956836968108204, 0.006038330827513927, 0.019581720221405474, 0.06965494439231301, 0.07073546969085442, 0.11819156110120799, 0.01601728216744891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07396816429224362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03897493145081721, 9.999999999998899e-05, 0.01775405302282196, 9.999999999998899e-05, 0.15186087153415662, 9.999999999998899e-05, 0.006778307277070739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10857828982578177, 0.05267731934421005, 0.12615504810305067, 0.030268798867706614, 0.0263210298583062, 0.017341526750025538, 0.09407537520057851, 0.055214190157907406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1978023446304491, 0.2030960818040497, 0.17004691128498217, 0.09996397522648681, 0.11452224784971787, 0.11940952695020002, 0.15086016829797555, 0.16398069433806928, 0.18021278493569082, 0.012583710310547058, 0.0011261026100281013, 9.999999999998899e-05, 0.06109535118213605, 0.04666182262701202, 0.0622419260463537, 0.0772436978183283, 0.09310366555414917, 0.07174940964171495, 0.26383096234811176, 0.13349359582799025, 0.08730905183603577, 0.19081638402069934, 0.15443452643718114, 0.14022496340561796, 0.15311782270748642, 0.1109006617848034, 0.1492243631002309, 0.13386213283162562, 0.1696725994645636, 0.12895324605360747, 0.15067007156296008, 0.18018852208848746, 0.13895799707268963, 0.1345926376357589, 0.13681183555096466, 0.10984809730407374, 0.08051053453734203, 0.10217469671129731, 0.0660876575334216, 0.07994524615800147, 0.1450895295827206, 0.09079703910528858, 0.0793530367921168, 0.08714861077406422, 0.04414807433623669, 0.23037053848450473, 0.1889438355363775, 0.21715013305986464, 0.27019665107266555, 0.21929496411720284, 0.19128911854760577, 0.21446965896229142, 0.25378887904952363, 0.20505793608076528, 0.14968111033584242, 0.16384667563302502, 0.1553581035248912, 0.15304574754893496, 0.17621854133471082, 9.999999999998899e-05, 0.16310425898720227, 0.16329614053560204, 9.999999999998899e-05, 0.11611672255350691, 0.1758370824525216, 0.07901424411050606, 0.1571878074675298, 0.13014805081118952, 0.0995656990546302, 0.06088618922663591, 0.058791705753620804, 0.11412072261259076, 0.12394698391564074, 0.07510189552863611, 0.13372888073368816, 0.07202919253653095, 0.06404039407658524, 0.04764729700441095, 0.17101681251975698, 0.05493244095223859, 0.15533280166715813, 0.1842855426439094, 0.17457913569299321, 0.19527900465951287, 0.20015273654695875, 0.19528677553736484, 0.1792583319873482, 0.20328767719786012, 0.20553577490858577, 0.20997909646209345, 0.0766284089680499, 0.06652352051966004, 0.05275249765651502, 0.06478576587559692, 0.0617739600309376, 0.12937547288274853, 0.07533876321590938, 0.053281769595998396, 0.058939101633804225]}, "mutation_prompt": null}
{"id": "d4f4dc36-bffb-4f64-a7b0-b98b71096cb6", "solution": "import numpy as np\n\nclass FruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * np.std(population, axis=0)\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "FruitFlyOptimizationAlgorithm", "description": "Fruit Fly Optimization Algorithm (FFOA) mimics the swarming behavior of fruit flies to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3e91e6e-84a7-487a-94b0-21eb65af948a", "metadata": {"aucs": [0.1867797221784968, 0.1438989299621295, 0.13558557560057216, 0.06978641739597569, 0.07511552475943539, 0.07283113222279569, 0.07941879636684623, 0.12258662665328979, 0.0749228993161134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05679465385909699, 0.09733811238105372, 0.030753721096285935, 0.054186704435366106, 0.04222005159664399, 0.04188220604271464, 0.0740741753212868, 0.034681972705925546, 0.033363015384525574, 0.016212064929341796, 9.999999999998899e-05, 0.009496336802078398, 0.03810535570975626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04603139225825048, 0.038323921255761006, 0.04287777107098589, 0.040875357198123075, 0.04783674555013262, 0.03550401188707997, 0.03788210939851555, 0.0489921924738419, 0.0316049562235563, 0.03664921672418264, 0.0025582621545572337, 9.999999999998899e-05, 0.042181020889915044, 0.03562152091696735, 0.01525057852905154, 9.999999999998899e-05, 0.018040127097696312, 9.999999999998899e-05, 0.11917684206806933, 0.11438586924728911, 0.058902894760212265, 0.06956836968108204, 0.006038330827513927, 0.019581720221405474, 0.06965494439231301, 0.07073546969085442, 0.11819156110120799, 0.01601728216744891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07396816429224362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03897493145081721, 9.999999999998899e-05, 0.01775405302282196, 9.999999999998899e-05, 0.15186087153415662, 9.999999999998899e-05, 0.006778307277070739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10857828982578177, 0.05267731934421005, 0.12615504810305067, 0.030268798867706614, 0.0263210298583062, 0.017341526750025538, 0.09407537520057851, 0.055214190157907406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1978023446304491, 0.2030960818040497, 0.17004691128498217, 0.09996397522648681, 0.11452224784971787, 0.11940952695020002, 0.15086016829797555, 0.16398069433806928, 0.18021278493569082, 0.012583710310547058, 0.0011261026100281013, 9.999999999998899e-05, 0.06109535118213605, 0.04666182262701202, 0.0622419260463537, 0.0772436978183283, 0.09310366555414917, 0.07174940964171495, 0.26383096234811176, 0.13349359582799025, 0.08730905183603577, 0.19081638402069934, 0.15443452643718114, 0.14022496340561796, 0.15311782270748642, 0.1109006617848034, 0.1492243631002309, 0.13386213283162562, 0.1696725994645636, 0.12895324605360747, 0.15067007156296008, 0.18018852208848746, 0.13895799707268963, 0.1345926376357589, 0.13681183555096466, 0.10984809730407374, 0.08051053453734203, 0.10217469671129731, 0.0660876575334216, 0.07994524615800147, 0.1450895295827206, 0.09079703910528858, 0.0793530367921168, 0.08714861077406422, 0.04414807433623669, 0.23037053848450473, 0.1889438355363775, 0.21715013305986464, 0.27019665107266555, 0.21929496411720284, 0.19128911854760577, 0.21446965896229142, 0.25378887904952363, 0.20505793608076528, 0.14968111033584242, 0.16384667563302502, 0.1553581035248912, 0.15304574754893496, 0.17621854133471082, 9.999999999998899e-05, 0.16310425898720227, 0.16329614053560204, 9.999999999998899e-05, 0.11611672255350691, 0.1758370824525216, 0.07901424411050606, 0.1571878074675298, 0.13014805081118952, 0.0995656990546302, 0.06088618922663591, 0.058791705753620804, 0.11412072261259076, 0.12394698391564074, 0.07510189552863611, 0.13372888073368816, 0.07202919253653095, 0.06404039407658524, 0.04764729700441095, 0.17101681251975698, 0.05493244095223859, 0.15533280166715813, 0.1842855426439094, 0.17457913569299321, 0.19527900465951287, 0.20015273654695875, 0.19528677553736484, 0.1792583319873482, 0.20328767719786012, 0.20553577490858577, 0.20997909646209345, 0.0766284089680499, 0.06652352051966004, 0.05275249765651502, 0.06478576587559692, 0.0617739600309376, 0.12937547288274853, 0.07533876321590938, 0.053281769595998396, 0.058939101633804225]}, "mutation_prompt": null}
{"id": "e4de7514-a860-433a-935f-04b9bf3bc037", "solution": "import numpy as np\n\nclass DynamicPopSizeFFOA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * np.std(population, axis=0)\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n            else:\n                diversity = np.mean(np.std(population, axis=0))\n                if np.random.rand() < 0.5 and population_size < 20:\n                    population = np.vstack([population, new_individual])\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif np.random.rand() < 0.5 and population_size > 5:\n                    min_idx = np.argmin(fitness_values)\n                    population = np.delete(population, min_idx, axis=0)\n                    fitness_values = np.delete(fitness_values, min_idx)\n                    population_size -= 1\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopSizeFFOA", "description": "Introducing dynamic population size adaptation based on fitness diversity to enhance convergence speed.", "configspace": "", "generation": 5, "fitness": 0.06558928574458894, "feedback": "The algorithm DynamicPopSizeFFOA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "f3e91e6e-84a7-487a-94b0-21eb65af948a", "metadata": {"aucs": [0.1867889194654624, 0.14394766757915445, 0.13488439548188036, 0.06890309967090247, 0.07158119857662204, 0.07257971644318473, 0.07928666616087265, 0.12366091631507947, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03774048084935333, 0.08319156040367182, 0.018438565459512724, 0.04003019001110808, 0.04161225197335283, 0.024401295358073227, 0.05312456234394247, 0.023614312804229654, 0.03079626878945796, 0.014553210217574608, 9.999999999998899e-05, 0.0028670593937720756, 0.020112738454993395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.03706748032612084, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03772023047514994, 0.048986754550083944, 0.02584969810736515, 0.03721810216862265, 0.0010920987514251301, 9.999999999998899e-05, 0.03943150740076529, 0.03625779734330303, 0.015418679422472659, 9.999999999998899e-05, 0.018276655996182667, 9.999999999998899e-05, 0.10027683525177622, 0.1063336018175578, 0.0721701779943652, 0.06789770553473662, 9.999999999998899e-05, 0.016852188202675644, 0.06148102731050675, 0.08118555139407313, 0.07286458539449214, 0.0005651168257938544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07430462548605066, 9.999999999998899e-05, 0.0032171636452130725, 9.999999999998899e-05, 9.999999999998899e-05, 0.005743199589543613, 9.999999999998899e-05, 0.016221705919256424, 9.999999999998899e-05, 0.050157258771554414, 9.999999999998899e-05, 0.008071538041464876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08539051999530345, 0.043455889942602854, 0.11319303005373349, 0.03840768375834036, 0.022871685075158354, 0.023709696921901724, 0.0977555462976687, 0.05106381173785446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19778327182405453, 0.2025584055340014, 0.17000896214918448, 0.10112537031612012, 0.1146159112461419, 0.10728810181097237, 0.14456472120700326, 0.1639296971140085, 0.18018858737633758, 0.0020694665319346273, 9.999999999998899e-05, 9.999999999998899e-05, 0.040615745238838485, 0.05914058380691645, 0.031333423024711204, 0.07282634089474416, 0.05090869506358553, 0.040687953425811996, 0.09680779573634934, 0.13409255221732563, 0.0924537970916477, 0.12864456032824523, 0.13882359144626755, 0.08135055002487024, 0.09453158988700239, 0.15927034854317135, 0.09106973335533752, 0.12171795473208369, 0.1538257793725788, 0.12932479813394726, 0.14096160269455904, 0.1626561508496801, 0.1310021455309046, 0.1176501172307628, 0.1272096105779521, 0.10381685396975027, 0.06947255957820764, 0.10533176061280647, 0.06396086439133342, 0.06789329802572952, 0.13443583885601207, 0.08655385156885875, 0.05648699256316181, 0.08790886321600688, 0.04627475671026282, 0.23505441403631366, 0.19593804593096842, 0.23555540320371016, 0.227830202019905, 0.1900854571475944, 0.16376000002208257, 0.210342499710519, 0.2214614715065406, 0.19936576227784986, 0.014841146499672275, 0.16925820215859788, 0.14164976482128477, 0.1524957009413812, 0.17043183880381818, 9.999999999998899e-05, 0.16225509101001245, 0.1555600269582419, 9.999999999998899e-05, 0.07833198851593737, 0.17108696618988706, 0.10070978029906785, 0.152427430848581, 0.1207914665021157, 0.07753022701109769, 0.06088618922663591, 0.056615725614002965, 0.10101456597111069, 0.16931394060707428, 0.0493621660744602, 0.12584264901835118, 0.05140225896161377, 0.05270209301251505, 0.045511073114331335, 0.06676563709988659, 0.059247550293311524, 0.06663164445323178, 0.16973700669153768, 0.19643619305472326, 0.16800614585469809, 0.17344310389934092, 0.17089062525858423, 0.17170952590292654, 0.17480490193756937, 0.16641373672183235, 0.16509112117687286, 0.061208377900415334, 0.050735794788900224, 0.037180913590281084, 0.059716502689308615, 0.04789819433000175, 0.05671238102750209, 0.06646561302769516, 0.058267675825182, 0.05679727285306313]}, "mutation_prompt": null}
{"id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.23020855919705616, "feedback": "The algorithm EnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.27.", "error": "", "parent_id": "f3e91e6e-84a7-487a-94b0-21eb65af948a", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "58ea8afa-031e-4d6b-a0f9-15477163656d", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            fitness_rankings = np.argsort(fitness_values)\n            mutation_factor = 1.0 / (1.0 + fitness_rankings[np.argmax(fitness_values)] - fitness_rankings)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n                self.step_size *= mutation_factor  # Dynamic mutation based on fitness rankings\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                self.step_size *= mutation_factor  # Dynamic mutation based on fitness rankings\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicMutationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implementing a dynamic mutation strategy based on individual fitness rankings to adapt search behavior for faster convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,) (10,) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,) (10,) ')", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {}, "mutation_prompt": null}
{"id": "6f550d75-bdad-4671-aefb-715b3f81446b", "solution": "import numpy as np\n\nclass EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n            \n            if np.random.rand() < 0.1:  # 2% code addition for dynamic population adjustment\n                if np.mean(fitness_values) < np.median(fitness_values):\n                    population = np.vstack([population, new_individual])\n                    fitness_values = np.append(fitness_values, new_fitness)\n                else:\n                    worst_idx = np.argmax(fitness_values)\n                    population = np.delete(population, worst_idx, axis=0)\n                    fitness_values = np.delete(fitness_values, worst_idx)\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population size adaptation mechanism to adjust the population size based on the convergence progress.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('zero-size array to reduction operation maximum which has no identity').", "error": "ValueError('zero-size array to reduction operation maximum which has no identity')", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {}, "mutation_prompt": null}
{"id": "184f8726-4580-40b3-bc04-fb42405279a6", "solution": "import numpy as np\n\nclass EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                \n                # Adapt step size based on fitness difference\n                fitness_diff = new_fitness - fitness_values[max_idx]\n                self.step_size *= 1.1 if fitness_diff < 0 else 0.9\n                \n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing a dynamic adaptation of the step size based on the difference in fitness between the new individual and the worst individual.", "configspace": "", "generation": 9, "fitness": 0.049686582489919945, "feedback": "The algorithm EnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.15820490589186154, 0.11035401387966992, 0.1389797754505404, 0.040877919293056064, 0.05400348346071138, 0.044419418487561035, 0.06048593703000538, 0.08772226283798212, 0.06759854107662855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008077880795972492, 0.019257244384603522, 9.999999999998899e-05, 0.03990281029211329, 0.013481892915203741, 0.009865801931428941, 0.044133130921764296, 0.005435786614125027, 0.013214230273431493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06193201452483277, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019645728763453274, 0.029558297732128036, 0.006849249278242264, 9.999999999998899e-05, 0.015108924310945127, 9.999999999998899e-05, 0.11106406162952154, 0.10778642913529313, 0.05299945581925114, 0.021175892268420093, 9.999999999998899e-05, 9.999999999998899e-05, 0.040464096572862984, 0.002215502704902561, 0.05291558901573079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01079325559513944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05881873828059092, 0.10532485377776135, 0.04134420854333998, 9.999999999998899e-05, 9.999999999998899e-05, 0.09485295601384769, 0.07057596621806428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12046918338800405, 0.15255162556228696, 0.16212989996532046, 0.09425923977458062, 0.0965142435629317, 0.09580441870675127, 0.13294422313691046, 0.17570484483518267, 0.16319548084789692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00613089031234193, 0.01706030735334585, 0.026449578869643164, 0.014213183241259308, 0.0343524289517283, 0.0267656688986897, 0.08319450258925931, 0.0742935008919754, 0.09144889355503438, 0.09855305120349966, 0.07998230565004183, 0.05643121168494414, 0.06747632925170022, 0.055935483854659296, 0.07726393575557644, 0.11542625672987328, 0.14082767446270705, 0.12662900679311884, 0.13022221820403224, 0.14081569559348805, 0.11602850366064599, 0.11931557374740553, 0.10707038439687344, 0.09016993413758523, 0.04528398049828397, 0.0774680426918849, 0.05231481521623593, 0.06504096835634976, 0.08429827937879031, 0.07499185070792214, 0.061313167517197176, 0.05245405093390565, 0.02499840909127926, 0.16175626045633396, 0.1749571085189109, 0.21024725939026145, 0.2616921658216894, 0.2120225974520341, 0.1437589370284984, 0.1702188118441047, 0.18054961734994834, 0.18101003706918373, 9.999999999998899e-05, 0.13876111108362676, 0.12333680918239498, 9.999999999998899e-05, 0.1484647496131818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04385307240429104, 0.09310301680672861, 0.05626128006000852, 0.10485121283433085, 0.1207914665021157, 0.06988160273669142, 0.06088618922663591, 0.056615725614002965, 0.0760846647045208, 0.07812917964824428, 0.03967402848431323, 0.08693179592324674, 0.018606112313171663, 0.021600351495484005, 0.045511073114331335, 0.023517338127723608, 0.02334571767132343, 0.04143420019681854, 0.16162529695278882, 0.1460992198779335, 0.16231234222658275, 0.14474356655092413, 0.16194274666574293, 0.1730991533953451, 0.15495709983632477, 0.13491785798250278, 0.1478942790175526, 0.05593723345627788, 0.03422451571411189, 0.031393493129599714, 0.03604090225314882, 0.03702934328945262, 0.05466945105769061, 0.03651989655410037, 0.04446499678255256, 0.04294071844931857]}, "mutation_prompt": null}
{"id": "96b45a57-2b82-40e7-8e55-abba471f9b52", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            \n            # Dynamic mutation strategy based on fitness distribution\n            mean_fitness = np.mean(fitness_values)\n            std_fitness = np.std(fitness_values)\n            mutation_scale = np.exp(-std_fitness)\n            new_individual += np.random.normal(0, mutation_scale, self.dim)\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicMutationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic mutation strategy that adjusts based on the population's fitness distribution to enhance exploration and exploitation.", "configspace": "", "generation": 10, "fitness": 0.17832092241382475, "feedback": "The algorithm DynamicMutationEnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.27638197237299345, 0.3031221379872435, 0.2817728257285105, 0.2901529176486777, 0.2855652766505282, 0.30320214595705564, 0.27986809989788486, 0.2881313801707003, 0.28701879675858755, 9.999999999998899e-05, 0.012740399473448849, 0.05238392679143178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627167823976519, 0.07185974526514916, 0.11726621740650711, 0.09856425601553276, 0.07211911179365094, 0.09700319854525208, 0.0363589923025871, 0.07675951489105426, 0.05842557784640412, 0.03798443775491145, 0.05378229261667, 0.09017094628757027, 0.03929823849301317, 0.09276938559661085, 0.09626149758551295, 0.06911442589422445, 0.07951239490247863, 0.06438305569650005, 0.9918359960263452, 0.9965426025478987, 0.9950226333055885, 0.9912387260069011, 0.9916047585933404, 0.9935193249698663, 0.9905294405853214, 0.9917543679147323, 0.989587698117625, 0.21285691646607774, 0.20589847256733795, 0.20756435926231498, 0.20967468135177236, 0.22812433793770126, 0.2242916978065933, 0.20077101724951696, 0.189416579275134, 0.18629526743532365, 0.2404626462848639, 0.202339942973221, 0.22213073184414756, 0.2595763802170258, 0.20460147804095474, 0.28081608933831603, 0.22834981638245466, 0.25186044361313675, 0.24272942028786815, 0.1503053876923388, 0.14153244035387558, 0.13492492499975217, 0.16876006417875544, 0.12108311288969431, 0.1442668643883961, 0.14977818630393835, 0.16325482403695113, 0.1416521051847952, 0.14602339411966136, 0.13589512736123965, 0.14611914886379707, 0.12012057406203547, 0.13471961501425556, 0.1329291400632201, 0.12033800689388063, 0.11994386326588269, 0.11941178890967707, 0.0021405190477740144, 9.999999999998899e-05, 9.999999999998899e-05, 0.013250056475316296, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022966683305428726, 0.007622627283753847, 9.999999999998899e-05, 0.10115337791191248, 0.06806772607027123, 0.11451711062563041, 0.06085511548104772, 0.029170133880476845, 0.05291013639920916, 0.13825686054151665, 0.07598696332168198, 0.09379511289409126, 0.12380317994480083, 0.12492118169163446, 0.11771575016334668, 0.07754279596300861, 0.1260629715559467, 0.056926256773741635, 0.07228656630265817, 0.12989542130934606, 0.11512114366224069, 0.09108304891955743, 0.10012170909646934, 0.1258786159840949, 0.0943133544006316, 0.10871984747223395, 0.12401754238147855, 0.057360432166448705, 0.016567548132605192, 0.08658721522369617, 0.2959771147773278, 0.29060019831578643, 0.29594908462732605, 0.31418783869606637, 0.3211968330872268, 0.31118591330744183, 0.2967532146497791, 0.3066269689419767, 0.30874744959410405, 0.10883307958538191, 0.06704189617503564, 0.12795371984952197, 0.052589691556071405, 0.11153502689423966, 0.06568322933793502, 0.061276990147385746, 0.07424920759749343, 0.05634074621270524, 0.16050300523006822, 0.09257765370040993, 0.15538608301962142, 0.09855305120349966, 0.21703721372805762, 0.06709837353580317, 0.17825533892055723, 0.06802808676060745, 0.07726393575557644, 0.2157894195399782, 0.23817682110041594, 0.23413187330297236, 0.24588211932414028, 0.2327848300351596, 0.23369024353558465, 0.21964209860771833, 0.20010082467616042, 0.2160819058532485, 0.18892177278579803, 0.1721889526948056, 0.17456068511017075, 0.17276259815000272, 0.17954090545359136, 0.20086490054212314, 0.14115949322764632, 0.15999152222034496, 0.16644238804491507, 0.22276515085514248, 0.2246697621807051, 0.2746196466385378, 0.25106503372553457, 0.23477344800539957, 0.22063141885324689, 0.2234082453003382, 0.22566570717752021, 0.22140374122170925, 0.18302698060421774, 0.17569511823630313, 0.18146143675214288, 0.17558888960860675, 0.18722142892411575, 0.19256340108815206, 0.17683640045145477, 0.20440085171161992, 0.17626254208411263, 0.04385307240429104, 0.17831969848177964, 0.17506456212628707, 0.12522771670292054, 0.1207914665021157, 0.18613897922121425, 0.0756811720560121, 0.056615725614002965, 0.16586500471575072, 0.1244005255089854, 0.08083156558143112, 0.3389329799492573, 0.018606112313171663, 0.03351854188432368, 0.19826798867728457, 0.075769928627343, 0.08921082725624896, 0.3189480584035972, 0.18541078385579524, 0.19967438797532722, 0.19756057238635727, 0.18345895020504588, 0.19725699751915704, 0.18066339374504403, 0.18453510261936845, 0.18218343306536633, 0.1870232330737175, 0.07260000429331526, 0.05867735380182626, 0.057053210851398584, 0.10157391415782424, 0.049812103486546966, 0.07323326862616575, 0.04351840169884347, 0.07944209741877917, 0.06254837278846404]}, "mutation_prompt": null}
{"id": "f86b0c8e-c73e-47f4-a239-3ff7ed5f74cd", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "007ce3f3-b372-4ca4-a97e-b43437dfde3e", "solution": "class FastFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n                if np.random.rand() < 0.2:  # Introduce dynamic population size adaptation\n                    new_individual = np.random.uniform(self.lb, self.ub, self.dim)\n                    new_fitness = func(new_individual)\n                    min_idx = np.argmin(fitness_values)\n                    population[min_idx] = new_individual\n                    fitness_values[min_idx] = new_fitness\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "FastFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population size adaptation strategy based on fitness improvement to increase diversity and accelerate convergence.", "configspace": "", "generation": 12, "fitness": 0.18720358679822754, "feedback": "The algorithm FastFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.4942940685016629, 0.4817982204232, 0.46169148022285267, 0.3844608810365734, 0.41557733039513844, 0.438523135488882, 0.4658174514788378, 0.45313275507723816, 0.44392011387503283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05588322926524181, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1102687135376067, 0.10253210789396583, 0.05720135855945352, 0.0775768529799381, 0.08203192491985023, 0.11026785685363083, 0.11855178587372062, 0.08112133446909642, 0.07775521088297266, 0.035338067821601205, 0.0466003405026435, 0.06467477215000272, 0.06527139043109742, 0.06421264224326895, 0.07149489705472623, 0.07683593836215774, 0.08983177995004776, 0.05854455024545546, 0.9866064214339402, 0.9952438312173193, 0.9909086119544406, 0.9861828239469571, 0.9864104331662508, 0.991002277863675, 0.988746908188603, 0.9861028597523842, 0.9919608580592825, 0.28866285676418824, 0.31299844592799975, 0.2594333547614456, 0.27513501921847094, 0.3074836453053238, 0.3169799309425597, 0.3216850964729029, 0.27754073959967707, 0.2762129335220438, 0.11393549058030317, 0.11582526939948423, 0.10888510960277853, 0.3394385586925962, 0.2129678591932036, 0.2756606194720622, 0.1875018945864141, 0.09562035516032719, 0.12272590733534794, 0.19211024057620463, 0.14957797283207652, 0.15811106900300675, 0.23852772659761956, 0.2270067618380579, 0.1664472018265436, 0.15641357096118713, 0.15852874499048852, 0.17924185892741662, 0.1585958975769427, 0.1414629704302386, 0.14976186316157913, 0.1414237159715378, 0.15852741303877682, 0.16584694626378238, 0.14845975272877876, 0.14337688041284946, 0.14773941220658782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0326346084657938, 9.999999999998899e-05, 0.12276335378218295, 0.10775552864293425, 0.10550547273470079, 0.04258299800351595, 0.045893891182112734, 0.03619665779257597, 0.09323495821209249, 0.09351380645391161, 0.10511047374640803, 9.999999999998899e-05, 0.017962223524956467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00036751027498049815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13983303894914256, 0.10335413048456144, 0.11672785043644507, 0.09640489708228961, 0.13733946235551486, 0.12464242632292866, 0.10900236165878563, 0.08763437644861716, 0.07685390363159728, 0.4718477023874915, 0.4986213147588383, 0.4791499039296474, 0.4183584204513857, 0.4466360810344199, 0.4890513666890558, 0.4465838965033344, 0.4881293021858707, 0.44648152592574053, 0.06467378441400617, 0.07752605244589572, 0.10317299195957752, 0.07470334680300217, 0.07012865800144241, 0.05475580783844125, 0.07670392261814818, 0.0573816154458171, 0.16292422886830116, 0.10063281028709825, 0.06735693451091307, 0.07517413801794115, 0.09855305120349966, 0.10866517244758889, 0.08368732576852256, 0.116972188751433, 0.10983700006330432, 0.07726393575557644, 0.15024784735402574, 0.37277875452135345, 0.34310983661714267, 0.3467831402385805, 0.26821291249095125, 0.21398408682131165, 0.13440724904336387, 0.23709461927593833, 0.10997712556097794, 0.06778377968636362, 0.2688407089411248, 0.2907361080331947, 0.17636616114541337, 0.15307553864006096, 0.23614053195672935, 0.2174734242614883, 0.20343480847749718, 0.1384782876641102, 0.20499272664610202, 0.20199712174082451, 0.18701203333484506, 0.15301625251654827, 0.19115230200543676, 0.17335853376190602, 0.18006805363081568, 0.15803798884183162, 0.17391673923834694, 0.17317184922352102, 0.16223606334191865, 0.16061872626099793, 0.1513942148173244, 0.16530565272589515, 0.17180768238477162, 0.1657499078189728, 0.15894284649049673, 0.16128515221686435, 0.07099287659719378, 0.09551414174126183, 0.18813718728073214, 0.17042164603064502, 0.16387296747506663, 0.08825565292405413, 0.06817779691501569, 0.16443234371605886, 0.11399936221626339, 0.3315040133484516, 0.09334816678271896, 0.11958115081095533, 0.05847181061676254, 0.16929497940805627, 0.2119640618848817, 0.054657983909315644, 0.10768956184767864, 0.10981023614182772, 0.17253616350291212, 0.1410674743325544, 0.14763022729669195, 0.137585305168201, 0.13245048378894608, 0.1491841404734392, 0.1514247535889559, 0.14168898450813672, 0.14689007985489466, 0.051779299492368924, 0.05593834230018424, 0.04920321784060666, 0.07754498094983753, 0.05682717863007636, 0.10181349700371889, 0.0681787315336575, 0.06797621618107696, 0.04232625338502172]}, "mutation_prompt": null}
{"id": "97180ac9-0237-4708-82f4-455c2eff43d5", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "bc8eef38-2f2b-49db-8220-f84ecbec46c0", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "e43789f6-7857-4534-86b5-4fe79d0979e3", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "13d3c8cd-570d-42b1-8da2-9dc709f54ccd", "solution": "import numpy as np\n\nclass EnhancedFFOAImprovedSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= (1.0 + (fitness_values[max_idx] - new_fitness) / fitness_values[max_idx])  # Dynamic mutation strategy\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFFOAImprovedSpeed", "description": "Implementing a dynamic mutation strategy based on individual fitness values to adapt the search behavior for faster convergence.", "configspace": "", "generation": 16, "fitness": 0.07907388045291783, "feedback": "The algorithm EnhancedFFOAImprovedSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.8329335259359874, 0.2491014499338179, 0.2360916581515765, 0.12166821654152848, 0.1004785826798581, 0.06858776449072435, 0.1032182139672132, 0.15645153518349963, 0.11171005993742478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332518442500539, 0.049919100995707955, 0.013147581061084046, 0.042259054371808324, 0.055350428591323, 0.021549776360973882, 0.057258351418949305, 0.020451922226281893, 0.03667884171806113, 0.032380216566123776, 0.002124458428760745, 0.007691908831403138, 0.043007313334031405, 9.999999999998899e-05, 9.999999999998899e-05, 0.004132439516513875, 0.032374113177933705, 9.999999999998899e-05, 0.06560609580336041, 0.04392059351581723, 0.05132096712138923, 0.05742780214168086, 0.05483132840852045, 0.03878064418935734, 0.0520245154771235, 0.05924353153573325, 0.03496425464074526, 0.0837701003971073, 0.022675224300270247, 0.006546993445347704, 0.05089932098577554, 0.04343023729012507, 0.02414740181791908, 0.09384261363780932, 0.026743817345112997, 0.059614032668846795, 0.13613435602386004, 0.11601533908499406, 0.06948300307844713, 0.10629487691101891, 0.0014609179344695633, 0.04881971742529201, 0.07335135176962826, 0.06513146180253337, 0.11819865210861114, 0.25276484985761616, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1478975955361448, 0.028898804622951357, 0.06950075241496612, 0.17236456960992708, 0.13766859383550567, 0.08841160919434021, 0.046634186704748615, 0.17206458730649177, 0.07172284716151567, 0.15715137100687038, 0.05323878700921891, 0.13467460176142887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13720831457200422, 0.05731851397429877, 0.109537885612074, 0.03947275083603885, 0.032501266649168636, 0.029022225782110445, 0.10089557301862184, 0.07391928768272449, 0.07935953595783996, 9.999999999998899e-05, 0.1640982666459997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010838901145580726, 0.2382203259568716, 0.341778360903519, 0.22906389414131545, 0.1460389564710034, 0.13751394262058625, 0.11757648154779654, 0.18569011164106275, 0.26346557755722155, 0.21940125945247468, 0.008583782305826348, 0.00011009103161463418, 9.999999999998899e-05, 0.03596657011964677, 0.033401903840650116, 0.0502259921959296, 0.04427344639909658, 0.056345497944166656, 0.060385816617405386, 0.10227276641782213, 0.08793844527229377, 0.06601859898123386, 0.10124160005042304, 0.06581597144687368, 0.05643121168494414, 0.06151168975383969, 0.04855804829477728, 0.07726393575557644, 0.10841591854707844, 0.15678610813543292, 0.11589122180460132, 0.12403482596844717, 0.16648050977417173, 0.12436786268771682, 0.11561050292664166, 0.12472611722109428, 0.08899667539740208, 0.0574947155685277, 0.06479493310600304, 0.06082972170487588, 0.07198539261180881, 0.12537360851550106, 0.07864476491572947, 0.05793182620135717, 0.06836772285983406, 0.03641861596931684, 0.16151348298792056, 0.16259793593255867, 0.19742838215119818, 0.15906339555877536, 0.17537643277742843, 0.16608794922852999, 0.14331591690807766, 0.14958509424299193, 0.21034613578498373, 0.1598056188234439, 0.15519865751244744, 0.15864379935582362, 0.1649145018863959, 0.1494835691143409, 0.1441109270201958, 0.15227275242131033, 0.1564901986936189, 0.14571683241781574, 0.04385307240429104, 0.1900074338736144, 0.05626128006000852, 0.1709272330540843, 0.1207914665021157, 0.11524132121512942, 0.06088618922663591, 0.056615725614002965, 0.12063164988703556, 0.05742792270298991, 0.07066265437278874, 0.15336295403082445, 0.020095510641533143, 0.021600351495484005, 0.0739229651080473, 0.02288501674733434, 0.08873600631489675, 0.04143420019681854, 0.12205057152542464, 0.141930285415923, 0.17885262492687248, 0.12303996393188665, 0.1418433104544805, 0.18034789650180572, 0.1286458555934612, 0.15175258582951978, 0.14689007985489466, 0.045359036091026206, 0.05381585127898947, 0.03591740388902365, 0.03472084145595522, 0.03599502560426304, 0.05045619683993596, 0.04467506352664152, 0.03896147240513692, 0.03720106769028231]}, "mutation_prompt": null}
{"id": "6031c3bd-e063-437b-bd7f-a56a0c31b5da", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                diff_fitness = np.abs(fitness_values - new_fitness)\n                max_diff_idx = np.argmax(diff_fitness)\n                self.step_size *= 0.9 + 0.1 * (1 - diff_fitness[max_diff_idx] / np.max(diff_fitness))  # Dynamic mutation based on fitness improvement\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicMutationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic mutation strategy where the mutation strength adapts based on the fitness improvement to accelerate convergence.", "configspace": "", "generation": 17, "fitness": 0.23020133196152484, "feedback": "The algorithm DynamicMutationEnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.27.", "error": "", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.08429290839883419, 0.11408750009160862, 0.12094073123684412, 0.08580161522655161, 0.08492374572654793, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07084262487912818, 0.04727530688078263, 0.03888794136352447, 0.0787268362451845, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11593751229699645, 0.2544624834271134, 0.16162480744239915, 0.15048215461097136, 0.0873912855344946, 0.15536520528457853, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09435285569184981, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16726033835234289, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.162021558313873, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.177348331335616, 0.16211141367952442, 0.04385307240429104, 0.18957582077732404, 0.05626128006000852, 0.17392542085816254, 0.1207914665021157, 0.11515202261936397, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21459111528664454, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "1534eabb-d708-47d3-89ba-e8c864c1bbff", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "e8eda17f-55a0-4af8-baa3-57fc388be27e", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "5389b033-e9e2-478a-8014-bf187c60a0ad", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "be466aed-714b-4d06-9436-f0f341296171", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "08c6b405-da41-4be4-b0c3-b086aa823f57", "solution": "class DynamicStepSizeEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                if new_fitness < fitness_values[max_idx]:  # Adjust step size dynamically based on fitness improvement\n                    self.step_size *= 1.1\n                else:\n                    self.step_size *= 0.9\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicStepSizeEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic adjustment of the step size based on the fitness improvement of the best individual to enhance convergence speed.", "configspace": "", "generation": 22, "fitness": 0.049686582489919945, "feedback": "The algorithm DynamicStepSizeEnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.15820490589186154, 0.11035401387966992, 0.1389797754505404, 0.040877919293056064, 0.05400348346071138, 0.044419418487561035, 0.06048593703000538, 0.08772226283798212, 0.06759854107662855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008077880795972492, 0.019257244384603522, 9.999999999998899e-05, 0.03990281029211329, 0.013481892915203741, 0.009865801931428941, 0.044133130921764296, 0.005435786614125027, 0.013214230273431493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06193201452483277, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019645728763453274, 0.029558297732128036, 0.006849249278242264, 9.999999999998899e-05, 0.015108924310945127, 9.999999999998899e-05, 0.11106406162952154, 0.10778642913529313, 0.05299945581925114, 0.021175892268420093, 9.999999999998899e-05, 9.999999999998899e-05, 0.040464096572862984, 0.002215502704902561, 0.05291558901573079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01079325559513944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05881873828059092, 0.10532485377776135, 0.04134420854333998, 9.999999999998899e-05, 9.999999999998899e-05, 0.09485295601384769, 0.07057596621806428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12046918338800405, 0.15255162556228696, 0.16212989996532046, 0.09425923977458062, 0.0965142435629317, 0.09580441870675127, 0.13294422313691046, 0.17570484483518267, 0.16319548084789692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00613089031234193, 0.01706030735334585, 0.026449578869643164, 0.014213183241259308, 0.0343524289517283, 0.0267656688986897, 0.08319450258925931, 0.0742935008919754, 0.09144889355503438, 0.09855305120349966, 0.07998230565004183, 0.05643121168494414, 0.06747632925170022, 0.055935483854659296, 0.07726393575557644, 0.11542625672987328, 0.14082767446270705, 0.12662900679311884, 0.13022221820403224, 0.14081569559348805, 0.11602850366064599, 0.11931557374740553, 0.10707038439687344, 0.09016993413758523, 0.04528398049828397, 0.0774680426918849, 0.05231481521623593, 0.06504096835634976, 0.08429827937879031, 0.07499185070792214, 0.061313167517197176, 0.05245405093390565, 0.02499840909127926, 0.16175626045633396, 0.1749571085189109, 0.21024725939026145, 0.2616921658216894, 0.2120225974520341, 0.1437589370284984, 0.1702188118441047, 0.18054961734994834, 0.18101003706918373, 9.999999999998899e-05, 0.13876111108362676, 0.12333680918239498, 9.999999999998899e-05, 0.1484647496131818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04385307240429104, 0.09310301680672861, 0.05626128006000852, 0.10485121283433085, 0.1207914665021157, 0.06988160273669142, 0.06088618922663591, 0.056615725614002965, 0.0760846647045208, 0.07812917964824428, 0.03967402848431323, 0.08693179592324674, 0.018606112313171663, 0.021600351495484005, 0.045511073114331335, 0.023517338127723608, 0.02334571767132343, 0.04143420019681854, 0.16162529695278882, 0.1460992198779335, 0.16231234222658275, 0.14474356655092413, 0.16194274666574293, 0.1730991533953451, 0.15495709983632477, 0.13491785798250278, 0.1478942790175526, 0.05593723345627788, 0.03422451571411189, 0.031393493129599714, 0.03604090225314882, 0.03702934328945262, 0.05466945105769061, 0.03651989655410037, 0.04446499678255256, 0.04294071844931857]}, "mutation_prompt": null}
{"id": "78f389c2-fce7-4fa3-82b5-fb214d414c41", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n            \n            if np.random.rand() < 0.1:  # Adjust population size dynamically\n                population_size = min(50, int(population_size * 1.1))\n                population = np.vstack([population, np.random.uniform(self.lb, self.ub, (population_size - len(population), self.dim))])\n                fitness_values = np.concatenate((fitness_values, [func(individual) for individual in population[len(population) - population_size:]]))\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Implementing a dynamic population size adjustment mechanism to adapt to the optimization landscape and enhance convergence speed.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 11').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 11')", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {}, "mutation_prompt": null}
{"id": "0a64be2f-96a6-44f5-9dba-c8e93fa7c76f", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n\n            if np.random.rand() < 0.1:  # Dynamic population size adaptation\n                population = np.vstack([population, np.random.uniform(self.lb, self.ub, (1, self.dim))])\n                fitness_values = np.append(fitness_values, func(population[-1]))\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic adaptation of the population size based on fitness improvement to enhance exploration and speed up convergence.", "configspace": "", "generation": 24, "fitness": 0.1942116567148732, "feedback": "The algorithm EnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.4199304406388983, 0.41939242556631806, 0.40684027495238284, 0.37419559464572616, 0.3513957271442911, 0.3537123367926538, 0.3769250621843019, 0.3956686273625166, 0.3780840771826738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16315044236239795, 0.08806680110318832, 0.07969157059897825, 0.15845315704882357, 0.33123324426493694, 0.15528467461324402, 0.12350562539038323, 0.09592840347987985, 0.08228251178723023, 0.09426880484874256, 0.08369333285148983, 0.08001166481624655, 0.1092815462845731, 0.08490624100301625, 0.07667069635952595, 0.07794996969578805, 0.09813145809660706, 0.07957778368481994, 0.9897402050518899, 0.9907947327463016, 0.9912008912387479, 0.9896320186110058, 0.9924697445959002, 0.9902096857755104, 0.9890947062768064, 0.9849919231679515, 0.9896247845851237, 0.24453616501991382, 0.21478256230843296, 0.21662372977808275, 0.22656793292395028, 0.23454833555072463, 0.23788015527341022, 0.17940838640116874, 0.15988798148612737, 0.16997799667717695, 0.22066090713159803, 0.1411353432663689, 0.14035036227582276, 0.2760629021336577, 0.27690755969081304, 0.716304515938473, 0.12408178378799073, 0.16223911766871024, 0.1613430821889802, 0.1264774685303921, 0.12020081823434792, 0.12196539223353853, 0.12106385734746405, 0.0819694746287769, 0.12185746977324108, 0.12556262415721686, 0.1276321419388311, 0.12617730943435657, 0.13646446153425862, 0.1411573104934234, 0.1390534412530554, 0.14265792844432512, 0.13852132984646415, 0.14721627202638232, 0.1353303885564523, 0.1347251992653402, 0.13960382010951922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08833573173217446, 0.07408044536215186, 0.11196343816510379, 0.05556600301638026, 0.035758221131158785, 0.017865195487498986, 0.10474963444657115, 0.07093967151460145, 0.07577065140450179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004535468554905497, 0.0017692760112846262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12033723025408505, 0.130128642980756, 0.12099693785136534, 0.09866464375407247, 0.12289502885704662, 0.0913661956229389, 0.12964798308275827, 0.0855966699347126, 0.08552542398470087, 0.40463686983604386, 0.42280479272123184, 0.44983662847120853, 0.36210259028687986, 0.4047346121388137, 0.3617232827969642, 0.4068066654845772, 0.4641054776274567, 0.4558887377025007, 0.14958911947059172, 0.13955922745949478, 0.08742621164950048, 0.1052025325425806, 0.08592052311485332, 0.16024679044155632, 0.22152517355185375, 0.0963410219264883, 0.1421734807908397, 0.08656454741686737, 0.20546006190585608, 0.11849785471564078, 0.16761065260558938, 0.11452851057648206, 0.10852939947971951, 0.10591510297274032, 0.12401637293396328, 0.11735794692175894, 0.299306443651687, 0.3215399664420052, 0.33457412918572527, 0.2465507007682356, 0.3268192441914983, 0.3299347801792727, 0.24935498857189864, 0.2386747070859998, 0.2258732741619035, 0.2134626577146943, 0.2795699895586564, 0.2444800814092306, 0.19906243715717142, 0.2332222015023444, 0.2810979554082814, 0.20259992997980736, 0.20522313261938263, 0.20047278116438372, 0.2024162890925525, 0.18146869032149726, 0.1864747666928941, 0.2946614612864221, 0.21304926537224467, 0.2521404909373749, 0.18695157647960492, 0.24017524321603922, 0.20321463840130427, 0.18183241538438155, 0.16695739960473477, 0.1643945128675658, 0.16997877572970443, 0.15665531879674965, 0.17198940924641049, 0.17900299707942102, 0.17542370358372117, 0.1679173339269513, 0.17909367225334716, 0.18710248078685188, 0.18705040709513765, 0.1800393495146938, 0.1325051107637053, 0.17019374442086332, 0.099529010733024, 0.10530920573159996, 0.14636050255972155, 0.4489492851792176, 0.11837587186194942, 0.1409595796289932, 0.1186765362791884, 0.09673687495489758, 0.2054671687237306, 0.16176883643729467, 0.1176954691508314, 0.18329718038197207, 0.17001421827126828, 0.16589241942790323, 0.170885313764642, 0.16933521015955266, 0.16790504539397588, 0.17677790182563713, 0.1624430894752692, 0.18161596071064356, 0.16786871573546902, 0.07398619526629446, 0.04529510868383879, 0.08436757795831451, 0.10312607258294171, 0.07251704697911532, 0.1023686070979527, 0.08139756580475555, 0.09390842729556736, 0.07935600394222186]}, "mutation_prompt": null}
{"id": "e27991ae-2011-4e90-a86d-6f8a5f6fd82e", "solution": "class EnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n        \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedFruitFlyOptimizationAlgorithm", "description": "Introducing variable step size adaptation based on fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9626247928318256, 0.9632000730559437, 0.9629228994141732, 0.9553208329211377, 0.9587872995454703, 0.9574273052432166, 0.9572377649196783, 0.9616447147461578, 0.9590938248174591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110471711886517, 0.0662838313408145, 0.0843843477203502, 0.11417592912098573, 0.1210284907978435, 0.08580161522655161, 0.08501518504806205, 0.07465500513906975, 0.06035132748983851, 0.04445317946183491, 0.041209131266489396, 0.039660027895891625, 0.07409895741652928, 0.07093539045792108, 0.04727530688078263, 0.03888794136352447, 0.07881885548735135, 0.06068138613235552, 0.9867319993984939, 0.9910914559974805, 0.9918975482121721, 0.9915878054264754, 0.9863892398258957, 0.988344435640171, 0.9912376008158433, 0.990574889834242, 0.9915682472771505, 0.4444199136925745, 0.843838925783692, 0.2272086302208386, 0.9006174950113759, 0.2939441708858225, 0.8717855073708606, 0.8824761374125891, 0.8295890051345037, 0.7097638662247654, 0.22779184025814858, 0.13513028820704853, 0.11602587075806237, 0.2544624834271134, 0.1617084512786412, 0.15048215461097136, 0.08748252631214914, 0.15544956559112466, 0.16885217799955243, 0.19478067081690165, 0.13551528506691246, 0.15726855658980698, 0.1992958445600781, 0.21428617685283147, 0.1265427711391518, 0.22468004538597353, 0.20230443639497087, 0.18205859508266808, 0.18979427475480182, 0.20954025087352723, 0.13810133331043362, 0.2196641057988784, 0.21316508536297019, 0.21238093133211, 0.19083586209178616, 0.22100954950794072, 0.21074435530239055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10973826208243498, 0.05247325098310507, 0.0975072315057054, 0.04117675876934623, 0.02736704167635584, 0.019344629376617517, 0.08532041982641059, 0.0898657800577235, 0.06912394939025213, 0.12393249198780609, 0.24125630572408574, 0.15751871684387475, 0.04799920914305078, 0.10095774820529402, 0.13932536115230032, 0.11078064254768882, 0.146570548818578, 0.24233224057621516, 0.18165990467523774, 0.08873652467200988, 0.3369110509226363, 0.08448731121954611, 0.07024963863094325, 0.14038935095272265, 0.08285085959292626, 0.2543955985098031, 0.09444318163217069, 0.4778345606982004, 0.5182589717452478, 0.5661259404086096, 0.4950181473643981, 0.48910798752835105, 0.47737407211859506, 0.477421155728348, 0.5049531337430265, 0.48579617461973157, 0.05432224388033213, 0.06849081744064456, 0.07557465887641612, 0.16734332670422336, 0.07348737923448012, 0.0568125994660309, 0.0582110172566116, 0.059526688984896436, 0.052961039862952974, 0.09454445111866039, 0.08083064058450384, 0.07331345574882286, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.115310974232268, 0.11060282739820382, 0.07726393575557644, 0.13324694676135473, 0.17577535020746093, 0.21561921130222161, 0.20615785631445915, 0.31782855080512895, 0.2983707950636374, 0.19672270391300595, 0.22655201506669387, 0.09528171145304443, 0.08533466910770426, 0.28929082336791156, 0.3266354736526087, 0.1647575655325414, 0.19871655197483684, 0.13426462317731824, 0.14253791747859756, 0.23523771516761305, 0.06562436638322056, 0.16957818348322473, 0.13647838095142084, 0.1680403052969237, 0.19079806313505032, 0.1388711663591381, 0.17495183401555836, 0.1442272123897239, 0.14990896372426887, 0.1553263738964049, 0.17176698784291133, 0.16210530406419743, 0.1499454106669973, 0.1633450974985191, 0.16118034067601272, 0.1588414486010925, 0.1550831683129381, 0.17743052811987525, 0.16211141367952442, 0.04385307240429104, 0.18965677336207987, 0.05626128006000852, 0.1740079808622571, 0.1207914665021157, 0.11524048047967173, 0.06088618922663591, 0.056615725614002965, 0.16771082323170883, 0.06628511471530196, 0.21466951544958945, 0.5240611666794004, 0.018606112313171663, 0.02460524310662493, 0.21257870837427195, 0.07007896550408355, 0.168759032041789, 0.31111666256345305, 0.12073379103187143, 0.13518910684419383, 0.1605863081829093, 0.14972201013750308, 0.14537950529696697, 0.14866234174886073, 0.1285400289737858, 0.1618218976339133, 0.14689007985489466, 0.05392377197562259, 0.05833858056721852, 0.043744270391468665, 0.07417021367077958, 0.059691448473264797, 0.06655162724548513, 0.04499292109757247, 0.05622896976275604, 0.04685163174015761]}, "mutation_prompt": null}
{"id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 26, "fitness": 0.24043212871908365, "feedback": "The algorithm DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.28.", "error": "", "parent_id": "c80d6c9c-4efe-45d9-ac9c-b39dfa6144ed", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "f774fcb5-ce74-4c60-97d8-f9bf6a1acc21", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "daf9945f-bfb8-488e-a65d-805c99c757cb", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "2a775bb6-8715-4e6d-a5af-10d5e811be5c", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.normal(0, self.step_size, self.dim)\n            new_individual = np.clip(new_individual, self.lb, self.ub)  # Ensure within bounds\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Introduce a Gaussian mutation with adaptive step size control for faster convergence.", "configspace": "", "generation": 29, "fitness": 0.20973415431929043, "feedback": "The algorithm EnhancedDynamicPopulationEnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.24.", "error": "", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9731915722740935, 0.9662662345639456, 0.9687228509433988, 0.9664528998704416, 0.9605402643325159, 0.9652291134624738, 0.9670115883352657, 0.9644214759845211, 0.9673208950851363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514343490478259, 0.052137576460984936, 0.054725992034883486, 0.08483377643777423, 0.0654518190004334, 0.05114577383676566, 0.0670917988777695, 0.06564801349391092, 0.09823951366287476, 0.03870846811581419, 0.04605381361719141, 0.04278284458366344, 0.05963824552678798, 0.08778197203713212, 0.02702382714567253, 0.028355365888639072, 0.08120509827205824, 0.0480481346576862, 0.12538686052881842, 0.13335182580338167, 0.10058231605085732, 0.12498473534123078, 0.10394014432447962, 0.10402768142387309, 0.13040954466275267, 0.08508663987651055, 0.11754974638145632, 0.8383385085142318, 0.8885654187537381, 0.3985679742668693, 0.8753706785065128, 0.873960905137766, 0.8918449834444018, 0.7704799250815012, 0.884837584713957, 0.7611303310288464, 0.15879119388378438, 0.11584398988868527, 0.10574847897062079, 0.21251851514912146, 0.17045958408319606, 0.19897838558594583, 0.13971582836047414, 0.15065805972402546, 0.1190422910786203, 0.21017036157606794, 0.23423456869488468, 0.19129875331372526, 0.2043936891033995, 0.23618400664339245, 0.20557827754885327, 0.1998153666807474, 0.2090800768423512, 0.19636370218033283, 0.19909159766935058, 0.21092557792219446, 0.198120004208019, 0.2605027235999927, 0.3037507346934939, 0.19801174947081723, 0.22511819351916063, 0.21930710296007083, 0.20089212524366973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09572302946354971, 0.05752166212546095, 0.10215927764457067, 0.04055540727232143, 0.021932136760718812, 0.024594126042408404, 0.07614145478536649, 0.07419461394800708, 0.10232183839683562, 0.16693005660552318, 0.12626881777646282, 0.32198740465305165, 0.11126619946091054, 0.18223601851944415, 0.09103098816540134, 0.20685850013088625, 0.1505540401708486, 0.2015157136000073, 0.17451461190053597, 0.1776709814274704, 0.20388281422574406, 0.09548535090028576, 0.19833448124365127, 0.26274620664314985, 0.1300102547318982, 0.15202765058938617, 0.2587977151196583, 0.503741183803001, 0.5110514131710533, 0.4857773871930624, 0.5349058251050902, 0.4830200345856891, 0.5089885272859862, 0.49415802436176315, 0.5001452538159764, 0.5074588491541474, 0.058955721068571276, 0.06684928606751195, 0.15051883258858811, 0.09117540418893111, 0.05491548840628879, 0.10868405585003271, 0.05099360300886879, 0.07329677720180339, 0.06535051467952002, 0.08905027208514071, 0.0881686093069971, 0.06958922520308863, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.07850886059705697, 0.06583798650138784, 0.10225540593989135, 0.24632682646105863, 0.2479047860848851, 0.13458752933931373, 0.2059494740298059, 0.24391564979441072, 0.1620905360854824, 0.24798736535398513, 0.17191987906428663, 0.1453698140944829, 0.21955134760119033, 0.3028149456359187, 0.04290212141721628, 0.13160776465426205, 0.16843281070958216, 0.1082904565679561, 0.20813884671657712, 0.21095149710487593, 0.22311747193609788, 0.14788305567133342, 0.19709302415675878, 0.1841243527666958, 0.17710998967252034, 0.1697165254603713, 0.1678493654956139, 0.17472914371252724, 0.19013160774008653, 0.16077315983149654, 0.1607092726730811, 0.1526936513920697, 0.15205133415819927, 0.15125101254377082, 0.1632874768908208, 0.15620154010890475, 0.15227336141828274, 0.15520694824990877, 0.15507589356393925, 0.057001885216572235, 0.08966256109220416, 0.18962629912033413, 0.17059333808444865, 0.17084592876143212, 0.09700595205066787, 0.9468354554821065, 0.056615725614002965, 0.168062145622081, 0.6080990406374596, 0.056816555675625935, 0.6749741590814573, 0.020687868477532678, 0.031199408777494275, 0.21473003187988227, 0.036746872545830644, 0.12142410564069528, 0.3504137346601889, 0.15698775750857163, 0.14942477563450862, 0.15578531696842457, 0.14809223235038893, 0.14721651614087772, 0.12907278258189203, 0.15824464818488837, 0.16497942014244416, 0.14689007985489466, 0.044878232156358666, 0.05025071267047154, 0.05666358623011003, 0.04537911014482887, 0.04106288605243058, 0.061894051856872134, 0.059976780292941845, 0.049611101779027056, 0.055365202187904305]}, "mutation_prompt": null}
{"id": "4dc71312-dcc3-48e1-bda0-157c296aafc7", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "9b1973cf-0ade-411d-9c72-de1f93a68396", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "39231cde-8d90-4204-881f-1e7d1690ea53", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "4c6659fa-f0ea-455c-887a-719d817980c8", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "4624fb83-f3ba-47b8-bae9-ec6fb6e0211b", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        mutation_strength = np.ones(self.dim)  # Initialize mutation strength per dimension\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            mutation = np.random.normal(0, mutation_strength)  # Adaptive mutation based on strength per dimension\n            new_individual = mean_individual + mutation\n            new_individual = np.clip(new_individual, self.lb, self.ub)  # Ensure within bounds\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                mutation_strength *= 1.1  # Increase mutation strength for better exploration\n            else:\n                mutation_strength *= 0.9  # Decrease mutation strength for better exploitation\n                \n            if np.random.rand() < 0.1:\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    mutation_strength = np.append(mutation_strength, np.ones(self.dim))  # Initialize new mutation strength\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Introduce an adaptive mutation strategy based on fitness trends to enhance exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 34, "fitness": 0.20973415431929043, "feedback": "The algorithm EnhancedDynamicPopulationEnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.24.", "error": "", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9731915722740935, 0.9662662345639456, 0.9687228509433988, 0.9664528998704416, 0.9605402643325159, 0.9652291134624738, 0.9670115883352657, 0.9644214759845211, 0.9673208950851363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514343490478259, 0.052137576460984936, 0.054725992034883486, 0.08483377643777423, 0.0654518190004334, 0.05114577383676566, 0.0670917988777695, 0.06564801349391092, 0.09823951366287476, 0.03870846811581419, 0.04605381361719141, 0.04278284458366344, 0.05963824552678798, 0.08778197203713212, 0.02702382714567253, 0.028355365888639072, 0.08120509827205824, 0.0480481346576862, 0.12538686052881842, 0.13335182580338167, 0.10058231605085732, 0.12498473534123078, 0.10394014432447962, 0.10402768142387309, 0.13040954466275267, 0.08508663987651055, 0.11754974638145632, 0.8383385085142318, 0.8885654187537381, 0.3985679742668693, 0.8753706785065128, 0.873960905137766, 0.8918449834444018, 0.7704799250815012, 0.884837584713957, 0.7611303310288464, 0.15879119388378438, 0.11584398988868527, 0.10574847897062079, 0.21251851514912146, 0.17045958408319606, 0.19897838558594583, 0.13971582836047414, 0.15065805972402546, 0.1190422910786203, 0.21017036157606794, 0.23423456869488468, 0.19129875331372526, 0.2043936891033995, 0.23618400664339245, 0.20557827754885327, 0.1998153666807474, 0.2090800768423512, 0.19636370218033283, 0.19909159766935058, 0.21092557792219446, 0.198120004208019, 0.2605027235999927, 0.3037507346934939, 0.19801174947081723, 0.22511819351916063, 0.21930710296007083, 0.20089212524366973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09572302946354971, 0.05752166212546095, 0.10215927764457067, 0.04055540727232143, 0.021932136760718812, 0.024594126042408404, 0.07614145478536649, 0.07419461394800708, 0.10232183839683562, 0.16693005660552318, 0.12626881777646282, 0.32198740465305165, 0.11126619946091054, 0.18223601851944415, 0.09103098816540134, 0.20685850013088625, 0.1505540401708486, 0.2015157136000073, 0.17451461190053597, 0.1776709814274704, 0.20388281422574406, 0.09548535090028576, 0.19833448124365127, 0.26274620664314985, 0.1300102547318982, 0.15202765058938617, 0.2587977151196583, 0.503741183803001, 0.5110514131710533, 0.4857773871930624, 0.5349058251050902, 0.4830200345856891, 0.5089885272859862, 0.49415802436176315, 0.5001452538159764, 0.5074588491541474, 0.058955721068571276, 0.06684928606751195, 0.15051883258858811, 0.09117540418893111, 0.05491548840628879, 0.10868405585003271, 0.05099360300886879, 0.07329677720180339, 0.06535051467952002, 0.08905027208514071, 0.0881686093069971, 0.06958922520308863, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.07850886059705697, 0.06583798650138784, 0.10225540593989135, 0.24632682646105863, 0.2479047860848851, 0.13458752933931373, 0.2059494740298059, 0.24391564979441072, 0.1620905360854824, 0.24798736535398513, 0.17191987906428663, 0.1453698140944829, 0.21955134760119033, 0.3028149456359187, 0.04290212141721628, 0.13160776465426205, 0.16843281070958216, 0.1082904565679561, 0.20813884671657712, 0.21095149710487593, 0.22311747193609788, 0.14788305567133342, 0.19709302415675878, 0.1841243527666958, 0.17710998967252034, 0.1697165254603713, 0.1678493654956139, 0.17472914371252724, 0.19013160774008653, 0.16077315983149654, 0.1607092726730811, 0.1526936513920697, 0.15205133415819927, 0.15125101254377082, 0.1632874768908208, 0.15620154010890475, 0.15227336141828274, 0.15520694824990877, 0.15507589356393925, 0.057001885216572235, 0.08966256109220416, 0.18962629912033413, 0.17059333808444865, 0.17084592876143212, 0.09700595205066787, 0.9468354554821065, 0.056615725614002965, 0.168062145622081, 0.6080990406374596, 0.056816555675625935, 0.6749741590814573, 0.020687868477532678, 0.031199408777494275, 0.21473003187988227, 0.036746872545830644, 0.12142410564069528, 0.3504137346601889, 0.15698775750857163, 0.14942477563450862, 0.15578531696842457, 0.14809223235038893, 0.14721651614087772, 0.12907278258189203, 0.15824464818488837, 0.16497942014244416, 0.14689007985489466, 0.044878232156358666, 0.05025071267047154, 0.05666358623011003, 0.04537911014482887, 0.04106288605243058, 0.061894051856872134, 0.059976780292941845, 0.049611101779027056, 0.055365202187904305]}, "mutation_prompt": null}
{"id": "d3e068dc-8999-4265-ad1f-1a659b28aa12", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "8f524a8e-bc21-4b6b-b324-c3576eca95fb", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "3b477136-0267-455f-b611-eff8efece6fa", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "b9455f72-9dff-43f9-b822-08ee02818779", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "84b60095-4b93-44c7-8d7e-706eb5317551", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "e95cdf67-8963-44b3-a8c5-43067170ae4b", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "c6af3131-08fd-43e4-9f06-124725bfd235", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "efd5f42a-9374-4f49-a7ea-0a1f5357e04b", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "33415b16-87ab-4d2d-b83a-3d7be24ee7f0", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "2c6f62bb-0fdc-4580-84ed-72163fe2c279", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "577dd751-ed8a-43d8-b0ea-df19077be905", "solution": "import numpy as np\n\nclass DynamicMutatedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            diff = np.abs(new_individual - mean_individual)\n            mutation_step = np.clip(np.mean(diff), 0.1, 1.0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * mutation_step\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n            \n            if np.random.rand() < 0.1:\n                replace_idx = np.argmax(fitness_values)\n                population[replace_idx] = new_individual\n                fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicMutatedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic mutation strategy where the step size adapts based on the difference between new and mean individuals to enhance exploration and exploitation.", "configspace": "", "generation": 45, "fitness": 0.18680777753950875, "feedback": "The algorithm DynamicMutatedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.3998028322395082, 0.3889240960168312, 0.3874130490652047, 0.38368898499750914, 0.3652228691205507, 0.3828856941924329, 0.38606255532341116, 0.36916934080975095, 0.4065324215664927, 0.02511915032323664, 0.03622115644633306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002694543377035563, 9.999999999998899e-05, 9.999999999998899e-05, 0.06972776708341422, 0.07716922422205119, 0.0609865580988217, 0.09211857802215995, 0.08362456086451309, 0.0816472160114683, 0.08027742681292727, 0.0747011424782158, 0.07661665811222174, 0.08873810147171712, 0.04940105680600104, 0.05670126228996264, 0.08715020104057802, 0.06518747293024951, 0.08302692760863084, 0.0898323814454356, 0.08125634846298013, 0.08507683104220998, 0.943045765107314, 0.9166080545760158, 0.9243264458351439, 0.9166016673347576, 0.9009986509033057, 0.9262562070828345, 0.8776091499958092, 0.8979437518303954, 0.8909598880489985, 0.2665817238575039, 0.2625920382982192, 0.23055641125425652, 0.24503688869153506, 0.2691938676765432, 0.23907797590518443, 0.26694867579100556, 0.2314719951443438, 0.24998162995573514, 0.23932708777380263, 0.17821194865390444, 0.16274706892812096, 0.2899050361202833, 0.29763189992732797, 0.231746735143055, 0.21993488440639053, 0.2742781509478236, 0.21930795129713787, 0.1492953509089433, 0.19921889983713204, 0.1419520761366131, 0.12926088350987752, 0.11097026684789357, 9.999999999998899e-05, 0.15140830765322622, 0.16355003323391115, 0.16353663980713062, 0.13981149096236245, 0.13506957778208684, 0.14379617286569468, 0.1476933191094436, 0.15628240351696454, 0.1528191471010688, 0.15809146554355646, 0.12099514941165124, 0.14228067217419282, 0.00028167192604233726, 0.008235382813354564, 0.00014998223962026103, 0.0002952425974941386, 9.999999999998899e-05, 0.007591227544424095, 9.999999999998899e-05, 9.999999999998899e-05, 0.010210286844501426, 0.13057349701912102, 0.07676502737488577, 0.10229393561536493, 0.06070070723113663, 0.04579745604349972, 0.033429494795695236, 0.1275522569570241, 0.0951580360277845, 0.10181015624407042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08256317201146646, 0.07511293544414488, 0.05862924288968241, 0.07545033377597588, 0.08373185276669826, 0.07055391359425633, 0.06847148165878103, 0.07738779692015962, 0.05036935085203165, 0.3789596310987524, 0.39095655623675596, 0.3779403307843614, 0.3765470508768526, 0.3669529409943637, 0.38089125107396926, 0.4173996295936119, 0.4083113322974926, 0.37231057636235065, 0.08214667543521004, 0.08412825297425441, 0.07827913033190348, 0.07923554521039367, 0.07297666577292561, 0.09169395012514725, 0.0798891410807171, 0.08878770904559496, 0.08616991224464832, 0.21754968270667974, 0.24266859698378362, 0.15431765257079966, 0.16713625577429791, 0.20386157749408895, 0.18160206432153347, 0.15194287769671477, 0.2299920785229479, 0.2003547405072924, 0.21764535818028785, 0.23199817589691651, 0.16627907955861632, 0.23058319166801888, 0.2751809318393541, 0.22338098184880972, 0.15288336574569839, 0.18145492258330598, 0.11085487702696206, 0.15270437212933796, 0.1975517136346231, 0.13940028759234135, 0.16955648403048984, 0.1850515431043659, 0.14276562240669988, 0.1708048027005984, 0.15501788508662862, 0.05949401230627138, 0.2403103157928006, 0.26018008564662487, 0.2557390818217261, 0.20868793251643047, 0.22163417046016742, 0.24842765174296078, 0.20787877364663965, 0.23155233259102692, 0.20703167067151562, 0.17596976655186136, 0.17226037961572715, 0.17092633175967753, 0.17899315316658848, 0.168298147305872, 0.16684221684183598, 0.17120875122510115, 0.17038722474825174, 0.18720988610665346, 0.5496563461664037, 0.18772631944811913, 0.1817625878486262, 0.1734337659388171, 0.1207914665021157, 0.11486439200364329, 0.06088618922663591, 0.05910341408242037, 0.16777931235912036, 0.4539127699978953, 0.07331703058121697, 0.4820224180260816, 0.08005601784791816, 0.14136172349439002, 0.2067606675289948, 0.31036783388348266, 0.16646720691067152, 0.2811918249924732, 0.1742384793730971, 0.1963523322809564, 0.17783370103071416, 0.18001287468745453, 0.1958860604687065, 0.18734743574025836, 0.1707969900533297, 0.1775109526070613, 0.17202457956066342, 0.08448922009005433, 0.0888594844830668, 0.0628049527482446, 0.07754744699957994, 0.06421238003765062, 0.1046176067013399, 0.06570771890799965, 0.0742562941463295, 0.0784686077525536]}, "mutation_prompt": null}
{"id": "3f8d721c-f77a-45ba-91c9-33be9393edc2", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "3325d945-eaad-410d-9680-da3b17ddf1fc", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "612c1fbb-3e4e-4b4c-933d-8652230ac7ff", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "feaf7338-7c53-4d39-80e5-6387279aceba", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "da466f79-5612-4e0e-8260-ba6dba40de5d", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "2a0f9125-b854-42c4-8e4c-ea8f7644c4f0", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "52a49b0b-c4f6-4e39-bd27-d06e6e381820", "solution": "import numpy as np\n\nclass ChaoticEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def chaotic_map(self, x):\n        return 3.9 * x * (1 - x)\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            chaotic_value = self.chaotic_map(np.random.rand())\n            new_individual = mean_individual + chaotic_value * (np.random.uniform(-1, 1, self.dim) * self.step_size)\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "ChaoticEnhancedFruitFlyOptimizationAlgorithm", "description": "Enhance exploration by introducing a chaotic search strategy to diversify the solutions.", "configspace": "", "generation": 52, "fitness": 0.23247318471150427, "feedback": "The algorithm ChaoticEnhancedFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.29.", "error": "", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9745192285491271, 0.9749364132444608, 0.9723485338937274, 0.9622460739495003, 0.9725778076851088, 0.9675557234315253, 0.9738998924174049, 0.9692304931205615, 0.968222457944887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05213226613943989, 0.07300405077602501, 0.03457859216902548, 0.05486188908289624, 0.050861130913415264, 0.05554541699380222, 0.0954202546245162, 0.07451898272874624, 0.06175324865022069, 0.04261686182419688, 0.059906928802601955, 0.03962450122943595, 0.054187218656385316, 0.043750344170091604, 0.03988143557504664, 0.05502180773965193, 0.0570770354493938, 0.06714719717853312, 0.9900653073542681, 0.9883077155974787, 0.9949759976002429, 0.9858446144844584, 0.9898695544822262, 0.9889174888496687, 0.9822467604921209, 0.9876225643883062, 0.9909540464408401, 0.40631564021082867, 0.9207966286383275, 0.2785830934437362, 0.9007801905099919, 0.8877486146283858, 0.8626239884492507, 0.6945794863566912, 0.8397806229154458, 0.7485146856718152, 0.1374080639113514, 0.1351676134457621, 0.08027896733799023, 0.22418655804205823, 0.22400194424057274, 0.11948291913850795, 0.09132417300946705, 0.11466618943379803, 0.12216399361095431, 0.18884045769695468, 0.19569001063431835, 0.20544800608040936, 0.17836534503097412, 0.16811883263813965, 0.19349185536209146, 0.18041165557318728, 0.18088565273224955, 0.20023640824267952, 0.24429996737628878, 0.1831270718438427, 0.25519496999487323, 0.23511893028442066, 0.23478851270700085, 0.15821315106768596, 0.19593151957605404, 0.1935279729145888, 0.18895008971180982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071024597578947, 0.05512194605710208, 0.09775185505263051, 0.05624332779090779, 0.0169813399796922, 0.026680277238671057, 0.11192619562728856, 0.06052797793427944, 0.0739770745576197, 0.26701225716943044, 0.1879555902244603, 0.42520942314193844, 0.08600920302053605, 0.13395411154757753, 0.07207901168670994, 0.10341847911011193, 0.12309863140946253, 0.10257448345587594, 0.11904523556120117, 0.21433231339047165, 0.08856762286432918, 0.2258970433944293, 0.16616581432559197, 0.6865639289634413, 0.08394944597152876, 0.3355360903881607, 0.10231138972799525, 0.5642886098563449, 0.485226701865172, 0.5107787169853443, 0.4854967726896072, 0.5448766163849978, 0.49898315737104426, 0.489264305061606, 0.48233966161564834, 0.512740515148363, 0.06612768363608501, 0.1003150314673048, 0.05967470361039273, 0.06699479703103517, 0.03982611450412299, 0.0446653145534881, 0.04376868041733739, 0.0717178968909149, 0.09521710981380982, 0.10102432565957187, 0.06735693451091307, 0.10264154205531917, 0.09855305120349966, 0.06581597144687368, 0.07162291290406575, 0.08571962058748173, 0.0567564650193122, 0.09573960276012095, 0.13503763398094792, 0.14843484404344254, 0.14725633441957742, 0.12701811406787833, 0.20321041188780287, 0.12373913071741482, 0.11481771422630715, 0.24436590817621628, 0.08730151401697983, 0.06975778560720136, 0.08451796364789466, 0.05382058480698837, 0.0684480814967714, 0.19327040278722707, 0.07200128634403624, 0.06335459353299955, 0.23119386714771717, 0.09931920986997189, 0.1562915003133012, 0.12815752613559872, 0.1771478440624893, 0.1658431283124695, 0.244656595343835, 0.20169423448396762, 0.18909999917188736, 0.18625529996536938, 0.16376136233290728, 0.1541948708364087, 0.16123752016361703, 0.1553403110132895, 0.1575471065008076, 0.15115557908346833, 0.1539521813081134, 0.1561669215339423, 0.16315720575988013, 0.16294922133483414, 0.04385307240429104, 0.1899917637787063, 0.0704344061507427, 0.11571922426546766, 0.1207914665021157, 0.2023582115296274, 0.06088618922663591, 0.056615725614002965, 0.1671473880890617, 0.7763936171402178, 0.07372782148512402, 0.5201241282950205, 0.018606112313171663, 0.021600351495484005, 0.045511073114331335, 0.3441215276233611, 0.16806400826948031, 0.04889401170789809, 0.14853718968710328, 0.12213857177837473, 0.14763022729669195, 0.1700925076174431, 0.16833481901346536, 0.16876998815890742, 0.14433063730552365, 0.15048304964282233, 0.14689007985489466, 0.04296960685333473, 0.03666236016441582, 0.037294386295959714, 0.0893113181491606, 0.051226826880072074, 0.07110415567279083, 0.05962313008579134, 0.04546407486063386, 0.034824331220391636]}, "mutation_prompt": null}
{"id": "ce802cb0-bc63-423f-8d36-77f3bac12b87", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "311cd744-b4b7-4e7f-8eac-ee1ab6699ce8", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "0179952a-464e-432a-bd14-7cabd335e69e", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "840233dd-1ccd-4b8e-809d-7af213069047", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "a78fb473-46a6-40db-bab6-db0f9b171b69", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "b7403ef8-c319-4357-a326-d48cfa159204", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "d3810c8e-8989-4558-a921-cad55818fa66", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "b3b3e9b8-2e47-47ec-8242-7da4fc24b719", "solution": "class DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicPopulationEnhancedFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy by introducing a mechanism to adjust the population size based on the fitness improvement.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9634889996981738, 0.9658233448942264, 0.9647517981480013, 0.957594274208634, 0.9612957054313686, 0.9567509931883981, 0.9582801561365858, 0.9652512625804506, 0.959296239075433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863610397886221, 0.1287804899619297, 0.055285702320270524, 0.15110115708205651, 0.05752358381414402, 0.058305989797016955, 0.056881769688165384, 0.053260392821798286, 0.05590429562128507, 0.041289392428979, 0.045010815661129744, 0.07915526150508179, 0.05127009128098092, 0.06329868103343483, 0.055864120240561865, 0.050753313539739775, 0.05942498393875706, 0.04628189458571519, 0.9911439374760078, 0.9942689510701311, 0.9908634148904631, 0.9932901039955904, 0.9916196871343101, 0.9938087791552564, 0.9936241213521452, 0.9915453578576845, 0.9935669337998382, 0.8712413420576395, 0.3128695569507598, 0.18566553885464798, 0.8801766111553583, 0.5945685344106661, 0.8996901758630288, 0.7661998085531765, 0.7201258386333295, 0.5800584128623707, 0.14225557219469864, 0.1137241667706157, 0.10710718414317055, 0.21643455432755065, 0.17041957282383247, 0.21205440095280714, 0.10430360043276743, 0.15047745033813098, 0.1513709451725539, 0.45726693560366627, 0.20413219844808483, 0.19987685287172952, 0.2929156033659708, 0.20003936563092073, 0.18463167306095174, 0.22600018068356753, 0.21800452228879108, 0.20472166236220035, 0.2013514849211635, 0.20159514094486486, 0.20110449807758368, 0.13557327521641405, 0.20904719703757824, 0.21118049254391458, 0.21022653603522834, 0.2025261196765583, 0.2036692761028117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11954369581694368, 0.05558632792983553, 0.09442888949396111, 0.04652694259844281, 0.024058616817548506, 0.028520164682986016, 0.09606955945998219, 0.059506272552850015, 0.11223620902025722, 0.18806103757033676, 0.1588889283488476, 0.19018866057088557, 0.03887110464662835, 0.11731396924540238, 0.09376346837964322, 0.05569317076124769, 0.3690353874158381, 0.12528629034221916, 0.2039384573916141, 0.08644967453488117, 0.1217208684914689, 0.09860496873053926, 0.06945078641744717, 0.33811657262760986, 0.05421231741612553, 0.30562485640924186, 0.04164510823761158, 0.5295941340306745, 0.48639490765131754, 0.5460300314220671, 0.5009260113570396, 0.5131701437117049, 0.48957218431285376, 0.49884449931517205, 0.5189244467807974, 0.5037876195100452, 0.05049550984710727, 0.0619856717414059, 0.06209578083262168, 0.05976770417180177, 0.04845835796778264, 0.12070290713447906, 0.06226748520312342, 0.07024863259194103, 0.06883717466833461, 0.09658665151632218, 0.10137319931954514, 0.1692252886281742, 0.09855305120349966, 0.06927216760462218, 0.05643121168494414, 0.13236047264974127, 0.05591387508962398, 0.07726393575557644, 0.1677913173777268, 0.17648280897506452, 0.1727158727056951, 0.1606191270946944, 0.2374679916271515, 0.13018338995287781, 0.12760182304210999, 0.2019909248507965, 0.10612794556063732, 0.21545813814687054, 0.3535370140997678, 0.08275279614965803, 0.17263612561578756, 0.27450839492289425, 0.07895763237939646, 0.10854036398726619, 0.18593679983200628, 0.10667591913221841, 0.16151348298792056, 0.19579803461224288, 0.18601576287735044, 0.19311143933013153, 0.19756884682506437, 0.13589842009295483, 0.18695157647960492, 0.15056862857191466, 0.16521341450243143, 0.1551671825869113, 0.16110356527176917, 0.1596959204388979, 0.15071797914657004, 0.15513158154476292, 0.1531130257667248, 0.15250546128316766, 0.17017933485499526, 0.14793998566166844, 0.04385307240429104, 0.18974272942825632, 0.9356570563750709, 0.9656093309285235, 0.1207914665021157, 0.11516095302849605, 0.07793879236551005, 0.056615725614002965, 0.16852760712138426, 0.5698294063217018, 0.060344320701000154, 0.6241915681812322, 0.018606112313171663, 0.026363201512122236, 0.21330030933218158, 0.3167531007922234, 0.1665352253413399, 0.04699085375017564, 0.14251253685660725, 0.1614631965774297, 0.1497451962577666, 0.13901653812983183, 0.1533360410804291, 0.17611629086399827, 0.17317458884320658, 0.15578654373297973, 0.14689007985489466, 0.056497546163532975, 0.07241638749898771, 0.03651575263470952, 0.09312130319682033, 0.05086049671548276, 0.071570744345682, 0.04959844034601624, 0.05793006290544489, 0.05067545464332179]}, "mutation_prompt": null}
{"id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 61, "fitness": 0.257769649340351, "feedback": "The algorithm EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.26.", "error": "", "parent_id": "7f026eae-69c2-4fa1-a5aa-5da17dee9167", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "adac23ab-6318-41fb-8e9d-3398982c95cf", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "65d19c40-695b-411e-bfad-04ad8e6024a0", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "a6dfd45f-a42c-43d9-8e83-73bc2d88d484", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "4fe89f49-2b45-4b80-a966-79b19fff7e5f", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "cb1c3a01-71bf-480f-a6b5-40253acf44cb", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n        self.mutation_factor = 0.1\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            mutation_vector = np.random.uniform(self.lb, self.ub, self.dim) * self.mutation_factor\n            new_individual = mean_individual + mutation_vector\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                mutation_vector = np.random.uniform(self.lb, self.ub, self.dim) * self.mutation_factor\n                new_individual = elite_individual + mutation_vector\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Improve exploration by introducing a mutation operator that adds a random vector scaled by a factor to the mean individual.", "configspace": "", "generation": 66, "fitness": 0.20266793789306223, "feedback": "The algorithm EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.37127813282450906, 0.37130761882511343, 0.3860910856734736, 0.42641425239621256, 0.37723851486735616, 0.3626330384682769, 0.38338158704795977, 0.39117135833296757, 0.38165418575041465, 0.0584915044135742, 0.03181827688292482, 0.010486235647165443, 0.008341891302310667, 0.019342616168180005, 9.999999999998899e-05, 9.999999999998899e-05, 0.03303061528088547, 9.999999999998899e-05, 0.07177459549833443, 0.08984224975573629, 0.05954277691159826, 0.1061689412243253, 0.10126297810632334, 0.09588683903424677, 0.07522003767600616, 0.08191918676133214, 0.07607216965578811, 0.0894389979627247, 0.05352144367568579, 0.07013674274274051, 0.08621155273452008, 0.08440353080094742, 0.11027899298857013, 0.09840429897225844, 0.09081371604718191, 0.10716786165256476, 0.9738068415372778, 0.9671891886601741, 0.9734290288030358, 0.962658981037814, 0.9625859365426868, 0.9657661481655012, 0.9590080787787564, 0.9657363565306696, 0.9530066424240314, 0.2820343579383865, 0.2754456012254872, 0.25564005621351316, 0.24868998597005965, 0.25523052884418895, 0.27072566688482036, 0.24131947685189548, 0.27090470808226286, 0.2564258310910664, 0.31331591650642987, 0.2154998536823104, 0.26315115731001315, 0.30301087520149506, 0.3314346312755798, 0.328523889136094, 0.30898722985108484, 0.3273187939602411, 0.34944901343500456, 0.10068935584854155, 0.15265926995848367, 0.13858923862940897, 0.1614716272476333, 0.14190942447938693, 0.10107159463211846, 0.1483947536092015, 0.1551324014389962, 0.12615819081135304, 0.16016225368199832, 0.15538941556037844, 0.14906884285159194, 0.14254144520316547, 0.15187492275076364, 0.13055701322332913, 0.14103910535459707, 0.1489948190663839, 0.16676403864027434, 9.999999999998899e-05, 0.018373999667046892, 9.999999999998899e-05, 0.03467385088791486, 9.999999999998899e-05, 0.039272885469589514, 0.009127273648620204, 0.005394972761339378, 0.013187500304298161, 0.08562713849704306, 0.04161453667413606, 0.15447516536403805, 0.09856860523343325, 0.040820770075672974, 0.04793459819939816, 0.15770119510817426, 0.033828554755702456, 0.05080859722096265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06806415988178594, 0.08593864228355652, 0.06841639876981631, 0.09145770662000974, 0.07476132324841944, 0.0916731605077723, 0.07717425323277727, 0.08524319464911989, 0.06171685033074281, 0.36190802554611823, 0.359614614505965, 0.38545844763529014, 0.36044823012940475, 0.3690587929832173, 0.3647333507049604, 0.372670586086006, 0.37516334993516065, 0.3706253297586508, 0.07368414199562923, 0.09585164370755028, 0.08119064318724123, 0.12319284579405321, 0.0805843050285383, 0.10400040201710414, 0.10199441502660045, 0.09155156541350518, 0.0935870067938731, 0.2380144801531371, 0.22716023935359864, 0.20869052327966686, 0.21197864705892444, 0.23710381195578412, 0.23980523744907245, 0.21108164545234587, 0.24958120113557558, 0.22229197361175135, 0.2415954863121088, 0.27055483661063284, 0.2302943974278634, 0.26336030730932003, 0.2464280145030967, 0.2609681060559724, 0.20136249175750132, 0.1990729140061538, 0.11997224922054961, 0.19089852387521344, 0.20772657646359582, 0.16689180131008452, 0.20261371724276, 0.21771725196243719, 0.16453626673393373, 0.16545217992026973, 0.17437214283038016, 0.13921243510811399, 0.23929692154160365, 0.22396520128837505, 0.220949982798461, 0.21616710116319993, 0.24940462565344923, 0.21918882266855122, 0.286485901306631, 0.23571388406891047, 0.22382885643678774, 0.18232862467794175, 0.1896812649915055, 0.20354971844504988, 0.17329467175175728, 0.18104018682126988, 0.17553191291861803, 0.18855402472929994, 0.1906009672289618, 0.180303029973081, 0.13561048202258663, 0.18733292412378644, 0.15953300708603524, 0.17311740557499666, 0.20109765353107045, 0.11492961507705368, 0.15279038712118453, 0.11492625686059199, 0.16909698536172724, 0.503156794496262, 0.5235181442086034, 0.4591953473051845, 0.49446779554189035, 0.15529058737995516, 0.21140898124550778, 0.09486727059639777, 0.16855520816028513, 0.42326421451204743, 0.20468476295314464, 0.2096133148663767, 0.19420136294494328, 0.1951043371664375, 0.18961758430676923, 0.19868077245789073, 0.19422509774513308, 0.18252716065181396, 0.17929760332172862, 0.0987067054553541, 0.10501738915016212, 0.07999022334842854, 0.11572919966330919, 0.1021226067903721, 0.10966713566580788, 0.08246935597790339, 0.08839500507271225, 0.09925940594475469]}, "mutation_prompt": null}
{"id": "8860eb8d-e5a3-49dc-83b5-98165bf4abbf", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "608b9193-6115-4d23-bbf2-7a6732127486", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "ca70b0e4-a4b4-4515-ad4e-53723cc2e929", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "2a3a2f31-aad2-4fc3-91b5-fbe9dd4c7caf", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "3a4d2a84-2695-418c-91b4-036ae33e9c94", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "b4a4810e-7bae-407e-8332-9f3e8d8bdbd3", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "1c5c1d2a-a8d3-446a-be08-6996427b78f1", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "c8563e2f-e9a8-4ebf-bfc5-bad32b9bc3d9", "solution": "import numpy as np\n\nclass EnhancedDynamicStepSizeFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1 if new_fitness < np.min(fitness_values) else 0.9\n                \n                if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                    if new_fitness < np.min(fitness_values):\n                        population = np.vstack((population, new_individual))\n                        fitness_values = np.append(fitness_values, new_fitness)\n                        population_size += 1\n                    elif new_fitness < np.max(fitness_values):\n                        replace_idx = np.argmax(fitness_values)\n                        population[replace_idx] = new_individual\n                        fitness_values[replace_idx] = new_fitness\n\n                elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n                elite_population = population[elite_idx]\n                elite_fitness = fitness_values[elite_idx]\n                \n                for elite_individual in elite_population:\n                    new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                    new_fitness = func(new_individual)\n                    if new_fitness < np.max(fitness_values):\n                        max_idx = np.argmax(fitness_values)\n                        population[max_idx] = new_individual\n                        fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicStepSizeFruitFlyOptimizationAlgorithm", "description": "Introducing a dynamic adaptive step size based on fitness improvement to enhance exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 74, "fitness": 0.1015166693591049, "feedback": "The algorithm EnhancedDynamicStepSizeFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.09.", "error": "", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.2916717744525519, 0.1600753908452507, 0.28682878440305537, 0.06166029173181309, 0.0902786258380962, 0.061878044839860036, 0.14982737883334651, 0.124894442479763, 0.14826948215315172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06735273036155343, 0.06746740149363162, 0.05666629425050651, 0.06349384330665941, 0.05778918161299318, 0.05225330528002636, 0.07422441203250985, 0.027607542523534367, 0.061768567272927455, 0.08487146412727431, 0.009353357757699077, 0.046766820467282755, 0.06841064478713921, 9.999999999998899e-05, 0.009340937486663425, 0.06676178044475622, 0.027619428303377713, 9.999999999998899e-05, 0.07197499399498553, 0.05185058253209951, 0.07546982130293567, 0.05984085199570377, 0.06967730443841469, 0.05291807962613715, 0.052699687438337195, 0.07382380272049882, 0.0453743429775344, 0.11586002139798679, 9.999999999998899e-05, 0.02723900069203833, 0.01923713375051972, 0.06232243075980293, 0.030738653009430017, 0.07221308757539824, 0.06151404187364129, 9.999999999998899e-05, 0.21911153199513234, 0.11438645000459924, 0.09392938712659726, 0.09998207781245805, 9.999999999998899e-05, 0.1015676631063378, 0.09744457573739551, 0.047265838643658964, 0.11239365619408348, 0.21147301640665261, 9.999999999998899e-05, 0.020342280320464146, 0.006603127807158327, 9.999999999998899e-05, 0.18538536678692763, 0.174433507175088, 0.0718222591016896, 0.0192025695546717, 0.11989173668167552, 0.12922099102487605, 0.057740984318429, 0.11512641040591098, 0.2189813196392859, 0.13452537042201873, 0.14567317504097643, 0.13332634356055273, 0.13630163478595692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07209602954282346, 0.03582194130145111, 0.10366865745715836, 0.0746084440628112, 0.01157764453838206, 0.030213577085384746, 0.13592736671292782, 0.03498771585015037, 0.0447986419180918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01638292504957628, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4390931880674165, 0.24018870524911873, 0.24558860539174698, 0.1355210896002098, 0.15870921422834727, 0.12324535146565485, 0.23343597555939655, 0.25088119713947976, 0.22254575581596236, 0.04305970418396898, 0.0397743954740194, 0.022986143206270904, 0.07293642279920254, 0.06758151499576615, 0.1082260546836813, 0.04755215147838576, 0.03966476638331329, 0.06819133840171032, 0.1810342465270668, 0.31087990827027046, 0.3059170462826709, 0.461931074306273, 0.0983390742725504, 0.25314167831857515, 0.10018509792635177, 0.10854717427264127, 0.4367104508186974, 0.12996943622046853, 0.1859195919529817, 0.1321444666258742, 0.159685994410401, 0.2001114998721647, 0.14192909779923701, 0.17124285057451438, 0.14884679375764043, 0.10358365829361882, 0.0694237148298158, 0.17169193984137887, 0.07539948207869929, 0.126151774779249, 0.19590702376572078, 0.08417402347640235, 0.09475756374892153, 0.11226707203493902, 0.05742781355593074, 0.20555333615246474, 0.1951652630666908, 0.22721157871296582, 0.22486989879675756, 0.18652499889486895, 0.1607066474562454, 0.18958804153801612, 0.16587615315157422, 0.20781010705180303, 0.1891194107029639, 0.16917402175751428, 0.16277693214935574, 0.16648661893418482, 0.16436479894057032, 0.1579362513689252, 0.1795078954650433, 0.16428027282857294, 0.16931649562289564, 0.06869952313361793, 0.1897997285680727, 0.10669487951760015, 0.23207946806139845, 0.15363531392088337, 0.11371772451368378, 0.10835757946828795, 0.056615725614002965, 0.12276038134762624, 0.5754680152145594, 0.06840487271448015, 0.16886164787246782, 0.02541125303694658, 0.10344260480132839, 0.11191670281103794, 0.11279268324035985, 0.12224521251027054, 0.19247709760813103, 0.1860897342585195, 0.18110116718663272, 0.18747458136696515, 0.1825140476513134, 0.1760338222759832, 0.1770396703611501, 0.2590277779002208, 0.17788878916503037, 0.1954490813439249, 0.08787631053967593, 0.07125268075242508, 0.0585101543926525, 0.08770459379816131, 0.04645083423163565, 0.07262079459496895, 0.04909338019345122, 0.06224333280706995, 0.08277958912176386]}, "mutation_prompt": null}
{"id": "c07cc9f4-9ce2-4235-baa2-8db1e2435b29", "solution": "import numpy as np\n\nclass CompetitiveSwarmOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            for i in range(population_size):\n                competing_idx = np.random.randint(population_size)\n                if fitness_values[i] < fitness_values[competing_idx]:\n                    population[competing_idx] = population[i]\n                    fitness_values[competing_idx] = fitness_values[i]\n            \n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "CompetitiveSwarmOptimizationAlgorithm", "description": "Introduce a competitive swarm optimization mechanism to encourage exploration and exploitation by allowing each individual to compete with a randomly selected elite member.", "configspace": "", "generation": 75, "fitness": 0.18537045479766814, "feedback": "The algorithm CompetitiveSwarmOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.37011436673159126, 0.3857885377858169, 0.3735281233877724, 0.36036959165246607, 0.37546073970139493, 0.366906469115317, 0.45224723094979746, 0.3720464420559324, 0.37125680436575137, 0.00034476983305142817, 0.0008046108254508022, 9.999999999998899e-05, 0.0554443640115565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017936513788099573, 9.999999999998899e-05, 0.08100348193367479, 0.059405277703688086, 0.056478971605246064, 0.07766675377746557, 0.08059251439875648, 0.09507425961871863, 0.03751327713531594, 0.05851461526310109, 0.025932340353700734, 0.030652583755817586, 0.005077453571376789, 0.07600374273910837, 0.09017010547323356, 0.019970238494794623, 0.07881434383262476, 0.07449978047220795, 0.0377348134636597, 0.030037043051273082, 0.9763763727793987, 0.9691553021606021, 0.975993854280017, 0.9806951353979534, 0.9731308940992178, 0.9721589919197119, 0.9789056131921015, 0.9767865221485261, 0.964444001392363, 0.2371986470841405, 0.2661368133819546, 0.2747355205069637, 0.24778722809888765, 0.25565044919444935, 0.27757559428287726, 0.2512998703833186, 0.2577031426402022, 0.24167972959676187, 0.31151982220844765, 0.18107075358270808, 0.3025877319609549, 0.2856495057041234, 0.302108922287486, 0.3005659581104776, 0.17646828910255663, 0.29855569273471705, 0.3179029583537095, 0.12231314217423628, 0.13043984827345523, 0.15957282975599496, 0.1485747156850955, 0.14462060957237877, 0.08986526256206018, 0.14378687834965675, 0.14299803490320506, 0.12899848797685132, 0.1381993089643162, 0.12001311699395956, 0.12607710747652434, 0.13425242085755706, 0.14660815491705237, 0.12824528209709807, 0.16793942501377657, 0.14563817322969552, 0.12797982925680573, 0.0003039040998672471, 9.999999999998899e-05, 9.999999999998899e-05, 0.03191711030080058, 0.009512662339370759, 0.04724502237417949, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10711174483382169, 0.03465185604873877, 0.11086645622854008, 0.09783711116121818, 0.024106295551364787, 0.04474507019976026, 0.19057013413580182, 0.07640723234870761, 0.06403736439689633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07198399442182968, 0.07194233358054203, 0.07550304493150528, 0.09054129387558096, 0.07307469843426972, 0.07728453622411746, 0.07108200242540008, 0.06631944674204404, 0.07294904747922193, 0.35078455551051024, 0.3529118793778645, 0.3690725001003953, 0.3725183875085232, 0.36828167781924614, 0.36590208975119354, 0.3549914338354182, 0.36132391923041274, 0.3660391206847299, 0.07872835808209488, 0.08898995900528517, 0.09467629380513187, 0.09999114504284012, 0.11052186919798224, 0.08369042079420597, 0.06621704687024976, 0.06514407168473135, 0.0656765801081638, 0.22595436078221132, 0.20618809555956008, 0.15276043688592944, 0.22875368463541246, 0.1535112215764146, 0.21552532057578866, 0.20082703622180864, 0.19711501305104162, 0.20770631767161385, 0.161258951430866, 0.16662769148942658, 0.23873986464980135, 0.15959728597310718, 0.1856894553155316, 0.17963767617943882, 0.19554855493838408, 0.16665651997335884, 0.11014811458019813, 0.19949207411826775, 0.20880240611318446, 0.07486572358271515, 0.19420301556554698, 0.13434503333201386, 0.06438314711415916, 0.16506073754372608, 0.14837880009319981, 0.07646893544008837, 0.1959937871216565, 0.2217440271838571, 0.17161227911196908, 0.2288602506144638, 0.1835111512176555, 0.19850458783674596, 0.20757864487632882, 0.17226381689294723, 0.21593051444823141, 0.184724149722853, 0.19270890387424078, 0.20561560978407611, 0.1799851840054556, 0.18466165341111274, 0.19771032527304044, 0.16618590328841687, 0.1904395319910278, 0.18125906514669154, 0.13466109308282326, 0.08426763759064815, 0.13684778646649742, 0.1729773625612797, 0.19902976151425922, 0.10959610842841683, 0.15246973702674516, 0.11490298362049, 0.17740465457130927, 0.08325491329729262, 0.11300006303339327, 0.4363236800339594, 0.12751572869727046, 0.47094910465740236, 0.21332808153226412, 0.16864338376057253, 0.07328150155386592, 0.4497078492528993, 0.1813924447647799, 0.18484980827252984, 0.20383812119572453, 0.1909879017024727, 0.1703960167602716, 0.2100147214448691, 0.21167437761928665, 0.1949512906854437, 0.18585417413454364, 0.07347131663611695, 0.06867550732804861, 0.08582510274383914, 0.08713621294267448, 0.08423045336610613, 0.10467814862963098, 0.08314532793713403, 0.07443505619746682, 0.08405618702576534]}, "mutation_prompt": null}
{"id": "cf664288-3271-4373-b45e-f9ea21c4c22a", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "73909e24-0883-4e96-82b9-fcec472a2267", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "27784973-60ee-4814-92c5-6fa9551d6435", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                mutation_strength = 0.5 * np.std(fitness_values)  # Dynamic mutation strength based on fitness history\n                new_individual = elite_individual + np.random.normal(0, mutation_strength, self.dim)\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Introducing a dynamic mutation strategy based on fitness history to adapt exploration and exploitation dynamically for faster convergence.", "configspace": "", "generation": 78, "fitness": 0.24847302823222284, "feedback": "The algorithm EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9266139254304363, 0.9248574051595639, 0.9438665584919299, 0.9219125889665405, 0.9369088277477919, 0.9248175622670415, 0.9270182850265066, 0.9394543711118964, 0.9203543447093375, 0.016614771583925214, 0.008199527372647397, 9.999999999998899e-05, 9.999999999998899e-05, 0.02201175629509322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07891252010444061, 0.07237312251943773, 0.07422865587810501, 0.13677059431180882, 0.07771463300691084, 0.0726412031216247, 0.06291918259143459, 0.0766257666863579, 0.07792298558280986, 0.08248994704636992, 0.060594685968638595, 0.09266791875320812, 0.06866152290431526, 0.061787523895096674, 0.09840970657994508, 0.060536015825889855, 0.05577350971376893, 0.057422263747630264, 0.9958642062823495, 0.996278383419106, 0.9972144804223618, 0.9939326452357087, 0.9929988889523285, 0.9939890435504037, 0.9924320369577233, 0.9915209216000878, 0.9942260628158395, 0.3589861593103033, 0.33005433670681117, 0.44010014986127677, 0.33969104459602517, 0.3491772713230714, 0.3240516922899823, 0.4415886831378091, 0.2680049942520025, 0.38101082770184735, 0.35504657016536423, 0.21012506959216326, 0.13591481311377995, 0.1740375806912804, 0.27346546768581215, 0.2155104459601599, 0.1941594041512884, 0.23860863922426956, 0.2299409505984944, 0.118552472334426, 0.1800721965902552, 0.17090207920803224, 0.1322094091630297, 0.11822782156312006, 0.5321166753055863, 0.15303433668986033, 0.1274964038815839, 0.18123654448898685, 0.18632177324588173, 0.18018310564566087, 0.18555046791577912, 0.1859510177433904, 0.1754667416793938, 0.17989776836024007, 0.196738815649243, 0.1680252824336148, 0.17607843429417458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013588389193961659, 0.004009896980989858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07845874374367323, 0.04789702320907452, 0.07169131881358515, 0.055369024049786275, 0.02782683930200236, 0.02526431239174165, 0.13038789877477575, 0.06352886008868386, 0.07817063038903982, 0.08605900938673217, 0.1686413072565096, 0.13828953167643487, 0.10583933493565933, 0.08250807813987782, 0.09153764177323809, 0.2560273657790495, 0.11923410104448973, 0.22558674991680716, 0.338138975719645, 0.11638334377933535, 0.18030596476559424, 0.13367077264521054, 0.13499632615528867, 0.13920689845756518, 0.17374949772258474, 0.15514732466955306, 0.08103940855537606, 0.40956306956423794, 0.39415237999260666, 0.4356020385217506, 0.430693466210319, 0.41366490568943404, 0.4205774686067911, 0.4347816172649299, 0.42969286540561635, 0.42216365676054723, 0.12949393259708342, 0.06966633833774427, 0.06649718459797316, 0.11231133161869455, 0.08438191459179323, 0.09374834489488171, 0.0696043431143093, 0.07670024209177173, 0.07417126208111258, 0.15405244371823812, 0.14869089597187557, 0.16067273691027295, 0.22093346694553884, 0.1641802551742887, 0.1576072707818521, 0.14621352219549044, 0.16557508054104364, 0.22739152692460107, 0.2637121206973996, 0.25334405928189385, 0.20792511177260664, 0.22443363268012995, 0.3043798630955127, 0.27610509298189234, 0.25414142139571294, 0.280816750039932, 0.25340047300903745, 0.44224598847874785, 0.26030283926969355, 0.43591434727812384, 0.3222582930202764, 0.22336770770058278, 0.31978611406080104, 0.23323652146135831, 0.2424148070436739, 0.2322813297965396, 0.19454231219439821, 0.2803329784695109, 0.22929486802771204, 0.19979110804310618, 0.20544023030991154, 0.22080102869357665, 0.2632071728978854, 0.23005454740511588, 0.22150008490241035, 0.19045808923245433, 0.18084744843782696, 0.1758606480044489, 0.17553146850062662, 0.18448146319652237, 0.17243661329371285, 0.16384053500818896, 0.19504599689125013, 0.1981668440797003, 0.5894664422497768, 0.870200040785793, 0.18733356673532509, 0.8315351451018577, 0.18089134430544873, 0.168629354590068, 0.14321134903917832, 0.15544627053614546, 0.5477367631111121, 0.40017703230452417, 0.17543743915263077, 0.34124267748881354, 0.1415625815797834, 0.3125455592414832, 0.20231574445403122, 0.22955325343947297, 0.262618687733047, 0.14757611422635908, 0.17629579057409261, 0.20830589611121542, 0.18492160630436516, 0.18336262109404766, 0.1819015136257638, 0.18606556392224982, 0.17549872440970027, 0.177643936342191, 0.17193638311115078, 0.06975145787176895, 0.06353297968488236, 0.06676365629848857, 0.07374186390292836, 0.06556711003768301, 0.07392651282395268, 0.07024138552137937, 0.07532271821636949, 0.09250317296930266]}, "mutation_prompt": null}
{"id": "def83e77-2538-4a71-ab72-bc80efb469cb", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "ffd91279-d0c2-4fdb-8ea7-7d6bb02a0921", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "875b696a-63b2-4fa3-a72e-4a0bd32da200", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "a47b323e-de87-45a9-bd52-4ef93740c0c1", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def chaotic_map(self, x):\n        return 4 * x * (1 - x)\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + self.chaotic_map(np.random.uniform(0, 1, self.dim)) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + self.chaotic_map(np.random.uniform(0, 1, self.dim)) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence, while also incorporating a chaotic map to enhance exploration and exploitation.", "configspace": "", "generation": 82, "fitness": 0.05931075739736223, "feedback": "The algorithm EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.08383330935436972, 0.08078202421087066, 0.09158055654956865, 0.023257586438837463, 0.06634107427242109, 0.03650692400554001, 0.05179658717458624, 0.059584095051069874, 0.0679949745656846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026332704795693607, 0.0408889311550138, 0.03506960833024364, 0.011040375497339827, 0.025563594121079558, 0.029227511259891426, 0.02280577767336822, 0.006425485614376836, 0.00479750348373309, 0.058759842501478476, 0.06422878899478146, 0.0648700687365108, 0.03050623791504259, 0.029979918681034334, 0.015259142786841595, 9.999999999998899e-05, 0.014114129913873286, 9.999999999998899e-05, 0.08106593766896786, 0.06696501827093904, 0.07644345719658596, 0.042128258448298816, 0.04928248263027768, 0.03446900686039267, 0.03340888849104229, 0.05170043920938183, 0.02670467021044809, 0.09518737328395543, 0.03713725026068082, 9.999999999998899e-05, 0.0004516596809318596, 0.03856397434704484, 0.0016606404648098483, 9.999999999998899e-05, 0.012898259305622162, 9.999999999998899e-05, 0.10159881249075642, 0.054040824221713746, 0.06076307966296868, 0.053989470222559066, 0.07169881762507124, 0.034453982224776025, 0.05796502280147997, 0.08168323645823694, 0.05501396763043065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011515246437205806, 0.00689763798009424, 9.999999999998899e-05, 0.06582242929180915, 0.03017053724038199, 0.020696554036311876, 0.0503036919661376, 0.022788862851836345, 0.03191866570761326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1059233478089211, 0.13056702953268418, 0.1879270718709527, 0.09426840226001965, 0.10014024086694628, 0.10754679775247, 0.1456036740776795, 0.12896042945654407, 0.20779183166719117, 0.017984023269612903, 0.0258833717137954, 9.999999999998899e-05, 0.010017396317670846, 0.005172926324234162, 0.036090131888888544, 0.010705435472734282, 9.999999999998899e-05, 0.04196171875688892, 0.12590119130916788, 0.10896528969323449, 0.07051964998130211, 0.12002386763261852, 0.0776547457219684, 0.10070003409965633, 0.08006504360609601, 0.16076040673540615, 0.08731948097925979, 0.13099127674411315, 0.14572194459771093, 0.15042890117904395, 0.13552014120730949, 0.17423346882130697, 0.13553577367736902, 0.14815119066166393, 0.14739062574151818, 0.11636508335423701, 0.07910525546150182, 0.07628280994234826, 0.11329524419556714, 0.08249511646185492, 0.11014663103641364, 0.05993231888444428, 0.11984520857003622, 0.12902522418355833, 0.08509391981296466, 0.1288360585396009, 0.1734301950447238, 0.14962312717789206, 0.151924992196245, 0.12194163847003403, 0.15192759841512948, 0.15699846125294148, 0.15263925387893706, 0.2007379416115075, 9.999999999998899e-05, 9.999999999998899e-05, 0.0377440516801002, 9.999999999998899e-05, 9.999999999998899e-05, 0.010131822223498621, 9.999999999998899e-05, 0.19150202397000304, 0.12293845404551507, 0.13335352737916528, 0.06392279602704332, 0.11585374179587182, 0.08956275353103282, 0.15908357066262546, 0.11108310843645253, 0.16721737939597991, 0.05948854175652196, 0.11781336596629066, 0.28647054161657015, 0.16695314693797714, 0.22773635956891036, 0.057499753648864504, 0.10794644602192716, 0.04585834804979827, 0.036328508560703465, 0.05677367412729151, 0.16949169095774264, 0.1956680852799646, 0.16123577333062844, 0.17477684712167518, 0.16116579766442152, 0.1644275293210521, 0.1702338743945, 0.18102210345641, 0.1760443726591009, 0.15420174118679664, 0.02742004456902647, 0.061145013742530674, 0.06904657073098919, 0.028418779972470443, 0.04407861084521225, 0.06136287844587407, 0.01928244857140249, 0.051666363118266445, 0.0514653088821051]}, "mutation_prompt": null}
{"id": "1c2b8950-d595-4981-9d70-f7b68242f3bb", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "ea541257-a924-4ee0-8b55-6df277e8b9d6", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "68d6ec4e-2962-46a7-8967-a3276fb52572", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "6e4323d9-359e-4ca6-a436-834a66d48ae8", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            mutation_strength = np.random.uniform(0.5, 1.5)  # Dynamic mutation strategy\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size * mutation_strength\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n                    \n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                mutation_strength = np.random.uniform(0.5, 1.5)  # Dynamic mutation strategy\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size * mutation_strength\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Introducing a dynamic mutation strategy to adapt the mutation strength based on the fitness landscape to accelerate convergence.", "configspace": "", "generation": 86, "fitness": 0.25048849372769166, "feedback": "The algorithm EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.27.", "error": "", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9681035719641724, 0.9716013499301749, 0.9643088569379596, 0.954843084669355, 0.9582362075269514, 0.9566476215364241, 0.959646213148548, 0.9661321495734981, 0.9620805264954029, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07143137746899919, 0.10887052532870822, 0.10330681386562246, 0.15031874026944225, 0.052168516010725585, 0.11422103237883652, 0.09897744369300798, 0.10865383794897243, 0.03765620142361914, 0.1666112331504419, 0.061256203025592204, 0.04774410673654639, 0.08817381142022018, 0.10209467474451572, 0.04905836006750819, 0.08773659148385016, 0.0671947574762547, 0.07084332460919562, 0.9866626463478815, 0.9847280174746961, 0.9895286329708399, 0.9868541592939852, 0.96985431097698, 0.9835629048450083, 0.9801854092139699, 0.9817082543178932, 0.9745196207124084, 0.9456304845422803, 0.5493472686806768, 0.16459465348392388, 0.9157454677496729, 0.472287258229368, 0.6013824708269329, 0.5494202464218124, 0.2984623658540465, 0.18365090618565783, 0.32998000234506686, 0.11372868505928801, 0.1321019595466001, 0.28496864030570135, 0.10038941761433451, 0.1963094236806121, 0.06938559144352108, 0.2508515238610197, 0.2260043624011343, 0.2593058821704839, 0.1779259512143272, 0.20348625328531766, 0.19058745087520035, 0.19789311267937215, 0.15010174304257995, 0.17120580062855228, 0.19993166502071624, 0.17074525350633196, 0.21394991349292403, 0.1938674228838384, 0.18215206414484286, 0.13254435563503852, 0.1866233718949042, 0.1777157885799796, 0.19586966706162978, 0.15606362693731857, 0.2764547885804979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025275157130883796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0054996745150965864, 9.999999999998899e-05, 0.07772815787275122, 0.02397677217537153, 0.09912470002301255, 0.052466852458948776, 9.999999999998899e-05, 0.04461053235928358, 0.053705283397352144, 0.04981901687869772, 0.03223008860308141, 0.14749705605583496, 0.07173122520828124, 0.11574079431216322, 0.04710998627817631, 0.18891166749088562, 0.09158571375835622, 0.10572467639224181, 0.17622290214449965, 0.04628616624896764, 0.09160995967195906, 0.17803471890265044, 0.05452532117538922, 0.16565972154787612, 0.12947005287840962, 0.13971453640081777, 0.0811095300268031, 0.12772147335207495, 0.07680604795838841, 0.49551020323429007, 0.49944291645326444, 0.5109398355341295, 0.5607591122706168, 0.48482021554640586, 0.5082027405692302, 0.488895271410692, 0.47922803922078305, 0.5523835879237637, 0.07630574346071539, 0.11376339751331865, 0.10292564056086051, 0.13794174238484014, 0.09908603934912719, 0.10389238841645654, 0.05817944868217817, 0.16754142227904867, 0.09867836077955394, 0.18085130615530876, 0.2511415758423131, 0.24922260389728867, 0.2607352266795745, 0.1479019226814302, 0.29776571291072407, 0.2037255234448666, 0.18162072200296708, 0.17354111262147176, 0.19079886259631862, 0.5614431817893264, 0.1303777289466811, 0.16482240689815586, 0.16090798110722737, 0.14288976260036956, 0.17689734042911787, 0.21086410941702327, 0.11482325062254672, 0.10773156552234342, 0.11920592378781059, 0.0778523409231231, 0.22531481004067822, 0.1588197754015087, 0.11097418403174064, 0.20556211356944076, 0.1937267018736204, 0.06771586250354145, 0.1963981465233039, 0.2541619382535294, 0.24119497628704234, 0.2790980410141125, 0.19148840021818703, 0.239132935613124, 0.19671170049676856, 0.3184115571878501, 0.2174645164285537, 0.18868836540231126, 0.18863463886736398, 0.203014955962308, 0.1839220796480906, 0.17956998739108931, 0.18129161276667272, 0.17417314147937069, 0.2069117799173944, 0.1634841612466018, 0.13386397739348865, 0.12010449155071079, 0.9199801972776415, 0.9734356950256237, 0.20272050026043087, 0.10898540082482921, 0.1533542193318952, 0.11533287604518105, 0.10406510616924047, 0.6545102510614962, 0.33039859657248694, 0.4239174442044341, 0.08313535016687623, 0.1291654446585837, 0.2136851725098493, 0.16653771514870108, 0.10558032697180164, 0.11342150777422555, 0.2442300390877402, 0.2638409597510081, 0.214573728131907, 0.24341716957067794, 0.23342358059578128, 0.2947549676938396, 0.2893508380850761, 0.3777038844115018, 0.2091446273086881, 0.08481053434141195, 0.1663088978185271, 0.09274347357601942, 0.08705185188040354, 0.066678196791492, 0.1336964422493293, 0.06764113359658297, 0.0902091680350885, 0.07647451659739068]}, "mutation_prompt": null}
{"id": "4ce8efe3-01e8-41e8-979d-774178ebfbf6", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "44a3b276-ca84-49ad-8a48-7c732a0dae21", "solution": "class EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_individual = self.mutate(new_individual)  # Introduce mutation operator\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1\n            else:\n                self.step_size *= 0.9\n                \n            if np.random.rand() < 0.1:\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_individual = self.mutate(new_individual)  # Introduce mutation operator\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness\n\n    def mutate(self, individual):\n        mutated_individual = individual + np.random.normal(0, 0.5, self.dim)  # Gaussian mutation\n        return np.clip(mutated_individual, self.lb, self.ub)", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Introducing a mutation operator to enhance exploration and exploit the search space diversity for faster convergence.", "configspace": "", "generation": 88, "fitness": 0.19771738598226024, "feedback": "The algorithm EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.35919114599104107, 0.3572783314495438, 0.3580861816384624, 0.33896665304259455, 0.36261295744070965, 0.34600404907541615, 0.34283939328870994, 0.34339012542802994, 0.3480286853195427, 0.018348025406051183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031123625223339335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11409403091575387, 0.10011269592953576, 0.11606808549019043, 0.10265249275552346, 0.09858129672136617, 0.10225189213740071, 0.1144728175807348, 0.08910338576138255, 0.09059266587546722, 0.08625181727797393, 0.0892817153286849, 0.0801913884519756, 0.0928482986734136, 0.08804304721591183, 0.08669445167156886, 0.0957404433069804, 0.08467845768093052, 0.1235512776902491, 0.9720734866647509, 0.985840060385259, 0.9808962937830613, 0.973484827256149, 0.9713439973672408, 0.9611509731882173, 0.9497317193639697, 0.9738430711592857, 0.9614006177399784, 0.23354210429620037, 0.22407098076621412, 0.22616042410626658, 0.23072256991750784, 0.23234246017438787, 0.22814875212028696, 0.23240519113969926, 0.23903626408888523, 0.24552812980028205, 0.29815542111896387, 0.23714279443524078, 0.28269053997353755, 0.2904827197360573, 0.2819925884713955, 0.3213858130396461, 0.27418734131761857, 0.2612184341051781, 0.28865503946547977, 0.13428788922150636, 0.1287911396257685, 0.1272374410831113, 0.14431941219058686, 0.12769826814152707, 0.11708772626530717, 0.1304689727400673, 0.1365046049890588, 0.1428158209685565, 0.13389962125129728, 0.15046472105603936, 0.1322258844880796, 0.12761445916483283, 0.1470886370854274, 0.17113928547845514, 0.13688460844128036, 0.14102632312855545, 0.12014012800922991, 0.0017661417061107798, 0.020447104716878273, 0.0024523779654925804, 9.999999999998899e-05, 0.002883833763843713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10558136332814616, 0.10126685833360549, 0.15837471625369404, 0.05622649920396505, 0.009291519459840858, 0.05282545111757064, 0.06914289221339864, 0.07789019428409616, 0.0725193137471859, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05356452263141709, 0.07258785547624469, 0.0639424992514982, 0.07908906459380671, 0.06508422210681541, 0.07862002269735346, 0.07369072865012016, 0.07136564465189532, 0.059999363843585396, 0.37931090196797046, 0.3717590157119738, 0.3578354013522381, 0.3489174858079668, 0.33158995328329754, 0.3470463632705031, 0.35040102037572274, 0.3455286072528132, 0.3394443247984823, 0.07612298085229319, 0.1215644278784852, 0.09525832846432059, 0.11982467662727592, 0.10009623845450966, 0.11199994930764656, 0.11367700019493565, 0.101652724487994, 0.0930582022612303, 0.20948096002371452, 0.19500413065074595, 0.18380761894420583, 0.20828910158670288, 0.1790564609585974, 0.1934636099653635, 0.2654877419803733, 0.190083402435403, 0.18287194305670984, 0.27350483023969363, 0.251022766715439, 0.2596014305015901, 0.27816721367266106, 0.2017977843237282, 0.2548056724861564, 0.20601803398668816, 0.2603162605994206, 0.1953589423377935, 0.19584348951918484, 0.19282149293152084, 0.19040790060120916, 0.20603694317328214, 0.201413431971333, 0.1990409246614272, 0.16730557427982762, 0.1709523670870685, 0.16987751107166937, 0.2217616002454823, 0.24247261735698067, 0.2172052196380242, 0.21356689295859665, 0.21490395356012948, 0.21863538245842618, 0.23996489242026464, 0.20858856505581325, 0.21959926197124646, 0.1815045903078324, 0.21168211040429796, 0.1877847953225119, 0.19725384846180716, 0.20864543958596515, 0.18704382979983103, 0.21904071346364173, 0.20929968401348753, 0.18729971641662257, 0.18548827683928604, 0.18513716936870828, 0.16913332594629082, 0.1702021424019875, 0.19676968192382438, 0.19693784640974177, 0.14969383313334328, 0.11439103297312081, 0.16270714572370548, 0.494138495747409, 0.49929132138887744, 0.44936240997338384, 0.16933140861788598, 0.1691741721765877, 0.2107922394672218, 0.4446174147412054, 0.1680315486917041, 0.3926020097565225, 0.18524107732757233, 0.1729865509865205, 0.18144992723251685, 0.18154816136006635, 0.18114834872716734, 0.19030938998687197, 0.19149281566588128, 0.1835527322233501, 0.19624943273171114, 0.09434395557226138, 0.09893189851491047, 0.11143629498769081, 0.09976993754954433, 0.09038713954742983, 0.10314193929802973, 0.09020122102015415, 0.08258153604262786, 0.0828964894575751]}, "mutation_prompt": null}
{"id": "fc132ee8-d351-4b05-a1e4-d61dda0a2a41", "solution": "import numpy as np\n\nclass HybridDynamicPopulationDEFFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n            \n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                # Introduce Differential Evolution operation for enhanced exploitation\n                trial_individual = elite_individual + 0.5 * (population[np.random.choice(len(population))] - population[np.random.choice(len(population))])\n                trial_fitness = func(trial_individual)\n                if trial_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = trial_individual\n                    fitness_values[max_idx] = trial_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "HybridDynamicPopulationDEFFruitFlyOptimizationAlgorithm", "description": "Introduce a novel hybridization strategy by incorporating Differential Evolution for enhanced exploration-exploitation balance.", "configspace": "", "generation": 89, "fitness": 0.2058841896443919, "feedback": "The algorithm HybridDynamicPopulationDEFFruitFlyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.25.", "error": "", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9493081054654685, 0.9462961802847432, 0.94757699778284, 0.9412203900307837, 0.932881111791999, 0.9310824106754731, 0.9588652229725355, 0.9349838381259661, 0.9348944326416654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1122289275093733, 0.05989423680472261, 0.05840000284821001, 0.033430412150392996, 0.058137663504411075, 0.05090486232231106, 0.0355802500911272, 0.051586722834988774, 0.05494111150369663, 0.07396880780816939, 0.08689895458782138, 0.02810829849665919, 0.08179320461115436, 0.03055217257232057, 0.022743490312379988, 0.1477221580975342, 0.0617553059310989, 0.05578101482139464, 0.9788758980445657, 0.9542813934101241, 0.9842232241495941, 0.9779158968696195, 0.9577853363055748, 0.9591854083049443, 0.9595234972244537, 0.9659225133929841, 0.9490084926936124, 0.22016253989070833, 0.08684422312268203, 0.14609778502484227, 0.08604322592795854, 0.23689135226950964, 0.3421122901475915, 0.24189110036454542, 0.11675746558015776, 0.12538059199317309, 0.18883723436869937, 0.10560411763820188, 0.11843234927353607, 0.22303866508782155, 0.09256266815068304, 0.13438566815463238, 0.08170044068273963, 0.1219303074764192, 0.10198999130511455, 0.15099317593788242, 0.16752781250408866, 0.1617903900292047, 0.14045690328168003, 0.09071053845118426, 0.1467998472704225, 0.15000118470086798, 0.1372574048056786, 0.146211727836159, 0.18192541683041108, 0.19199175377674227, 0.21321354109654533, 0.13776516143046935, 0.3738750482048451, 0.1317579374427158, 0.18045009302913073, 0.254661040897311, 0.17578460949328378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08248791858930704, 0.05799639265103451, 0.1289027062892445, 0.14626000821534113, 0.049540888208617795, 0.04794820947976719, 0.09852395978228068, 0.033289546738041076, 0.07919530133598296, 0.13675938725983217, 0.14357134030235807, 0.11086725336179937, 0.06973363716368819, 0.08431653788738436, 0.04628850633793247, 0.34362274986578956, 0.12495734701788752, 0.06955647122539377, 0.1286687125330752, 0.12304372714603484, 0.3479385549690305, 0.08071206293708366, 0.0831895255957017, 0.14659870487102888, 0.13740296700397847, 0.08250908976989701, 0.12024806934269106, 0.4695589872327691, 0.43858762268088314, 0.4400957292464309, 0.433718651327876, 0.44147175564048524, 0.42642527109678097, 0.4485229587118795, 0.46069573520426155, 0.4326033551172498, 0.05182236266845852, 0.09372172812482438, 0.0356140050928212, 0.07398798256193129, 0.06333740983157421, 0.09910384330932609, 0.05140786700255229, 0.048185587483606684, 0.08706291406644118, 0.14630572893211757, 0.15986658846747048, 0.1495060125872818, 0.12294438689346388, 0.11905270143027924, 0.1265050467061738, 0.09879978013365087, 0.11172535003578266, 0.10279697841302626, 0.15040394263824364, 0.18774699417056306, 0.17354605794271571, 0.16013710541116377, 0.2343435531747694, 0.15315307526558886, 0.14021789304984744, 0.14636615717482204, 0.13729350906113136, 0.10748952622354901, 0.10272042160279726, 0.0953580115738265, 0.1041197860082832, 0.08890832446765584, 0.10628162907047534, 0.1303365859366138, 0.1533376755423297, 0.04785764282075211, 0.1780631392308416, 0.18705494105134335, 0.17935588172431127, 0.16787682221135314, 0.17339891391398055, 0.14847118117225078, 0.15310818165410034, 0.16074794901839873, 0.1939539594530022, 0.18028100155998394, 0.1859116432846637, 0.17014202392417288, 0.21321097890083263, 0.18452615483220713, 0.1674617779763532, 0.19541371068508628, 0.1955123453064952, 0.145426406582852, 0.18862254259018707, 0.18985343536203403, 0.1895333109338755, 0.17411281166964077, 0.20212956503092572, 0.1706452952909151, 0.13965138302483304, 0.11654206378551413, 0.1708648355729483, 0.5622556085192565, 0.10688328388038315, 0.1024544363145482, 0.20361501484155942, 0.135138757840084, 0.21054149890481055, 0.4020538171039565, 0.14750097955331798, 0.11354294585741687, 0.16940682500851123, 0.18328281828854065, 0.19517483012602255, 0.1807102622065222, 0.17997166069697212, 0.19916611288835984, 0.21605420186332935, 0.1797361638386108, 0.19510802488172718, 0.06283254864350896, 0.06157321456782372, 0.06929941307809617, 0.09060421197878155, 0.09835552788616586, 0.077132041757076, 0.058084343744313816, 0.039861234036974946, 0.07770557167179326]}, "mutation_prompt": null}
{"id": "c2b74414-da17-4375-b319-d8504cbc5c93", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "0622bb9e-7ff1-4895-9295-14d57e0e402b", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "9c9f47bc-1501-424f-8156-367fa23a605f", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "dc356b15-95bf-406a-81d5-33378de7f0f9", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "3ef237b7-1ab1-468b-8fc2-f974f73042e8", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "6c0e4424-a2fa-4b65-9b4f-9ed743fa7874", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "41de853f-a6d3-4b1b-868f-c8e0ca5197bc", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "afde1b13-98e7-4a4c-97f3-6eb6d06691b4", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "38f6c4c9-2f9a-4281-be96-6f5bdae542ed", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
{"id": "f606c62e-ac4a-4ef6-bb74-a8f95cd11cb1", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        population_size = 10\n        population = np.random.uniform(self.lb, self.ub, (population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - population_size):\n            mean_individual = np.mean(population, axis=0)\n            new_individual = mean_individual + np.random.uniform(-1, 1, self.dim) * self.step_size\n            new_fitness = func(new_individual)\n            \n            if new_fitness < np.max(fitness_values):\n                max_idx = np.argmax(fitness_values)\n                population[max_idx] = new_individual\n                fitness_values[max_idx] = new_fitness\n                self.step_size *= 1.1  # Increase step size for better exploration\n            else:\n                self.step_size *= 0.9  # Decrease step size for better exploitation\n                \n            if np.random.rand() < 0.1:  # Introduce dynamic population adaptation\n                if new_fitness < np.min(fitness_values):\n                    population = np.vstack((population, new_individual))\n                    fitness_values = np.append(fitness_values, new_fitness)\n                    population_size += 1\n                elif new_fitness < np.max(fitness_values):\n                    replace_idx = np.argmax(fitness_values)\n                    population[replace_idx] = new_individual\n                    fitness_values[replace_idx] = new_fitness\n\n            elite_idx = np.argsort(fitness_values)[:5]  # Elite selection\n            elite_population = population[elite_idx]\n            elite_fitness = fitness_values[elite_idx]\n            \n            for elite_individual in elite_population:\n                new_individual = elite_individual + np.random.uniform(-0.5, 0.5, self.dim) * self.step_size\n                new_fitness = func(new_individual)\n                if new_fitness < np.max(fitness_values):\n                    max_idx = np.argmax(fitness_values)\n                    population[max_idx] = new_individual\n                    fitness_values[max_idx] = new_fitness\n            \n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n        best_fitness = fitness_values[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDynamicPopulationFruitFlyOptimizationAlgorithm", "description": "Implement a dynamic population adaptation strategy with elitism to preserve the best solutions and accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6ce66393-3357-4097-ad0b-75c60ff5d932", "metadata": {"aucs": [0.9676318467592793, 0.9651589050098327, 0.9662981459263698, 0.9575364321981126, 0.9628588804760703, 0.9599086916725375, 0.9656011492306189, 0.9671796040293509, 0.9638885135252553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037936138751143433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15044920055865607, 0.12079079943670745, 0.11417784282613352, 0.16730869626498257, 0.09893255783013977, 0.11422719610900423, 0.08197726900600077, 0.08773899950006381, 0.056664239090917334, 0.13791527991434327, 0.02667498075618857, 0.07881260429362569, 0.09497606738244502, 0.0732222471658237, 0.09820271732376351, 0.1142961551349887, 0.09872265544918479, 0.1082611998825721, 0.9776950766526203, 0.9833065250024986, 0.983608690395406, 0.9514178091468781, 0.9748987580760176, 0.9791835942139946, 0.9442003773541154, 0.9827020727447369, 0.9745715109532073, 0.516478280508795, 0.19988178226901976, 0.29501126436122804, 0.9018818340464932, 0.9199130812002037, 0.9084386789758837, 0.26789714830159594, 0.1799032970336324, 0.6598634460311138, 0.2330142444226767, 0.14204788883513952, 0.11312412469895605, 0.22414559488695296, 0.17832263480955557, 0.22376907000013257, 0.12957353412832961, 0.1812640268182728, 0.18397360809400154, 0.24874488266635475, 0.13668719748971125, 0.18334429223612425, 0.29953447699382285, 0.27488784945131484, 0.20694352569035968, 0.1810687894310158, 0.18308811548716808, 0.19635407893868184, 0.25875237787961936, 0.18331355480126177, 0.17089521767191507, 0.21055756948536886, 0.2061084631762624, 0.18504249137326312, 0.1803317065381529, 0.29313746240386007, 0.13497816329545853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050263416094540436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06236269929999694, 0.0222787551562178, 0.0685254132585289, 0.06803029800815652, 0.011230837337559252, 0.029575718041575105, 0.06988595554751387, 0.02120856774717028, 0.05523908896414009, 0.06297754083955132, 0.2951156606475771, 0.16254673658707885, 0.2036394791690681, 0.14419064719608354, 0.06830528950418324, 0.14928958423843264, 0.25118806553579465, 0.08847923283437742, 0.16863773728450615, 0.3667369332422883, 0.21129797368803904, 0.21585275832794826, 0.19331662362845003, 0.05294589949735451, 0.136543376775765, 0.19313399940891485, 0.07044143397511293, 0.522998924655836, 0.506892482209353, 0.537607457785612, 0.551428422888045, 0.4996401736819448, 0.5508934054992066, 0.5010664297889149, 0.49568114613645475, 0.4931529248535821, 0.07413230303911644, 0.09865402147471136, 0.06732025619921878, 0.1502356754735883, 0.08800138602392382, 0.10369564778502449, 0.0789764770660244, 0.10342360692135155, 0.11431074503311811, 0.20577950032532866, 0.2567581727242295, 0.5351698305736952, 0.29499222025827, 0.2266644402034257, 0.23772258301883753, 0.1474097591005239, 0.21490875279346866, 0.17856337524525956, 0.14416214825613627, 0.2894241902318444, 0.20966248314553682, 0.18278059027304638, 0.5445771106011897, 0.1511077147228601, 0.26222499415624534, 0.2664003980717914, 0.11777534367269726, 0.10414612443993088, 0.27416877906771076, 0.11286511143847744, 0.3276630161886436, 0.19990333514277459, 0.1484251697935247, 0.1375820115061126, 0.19673017768796486, 0.04877431478667438, 0.26268193816753693, 0.23551949238323966, 0.21254226911612628, 0.30522352651840035, 0.2518044912237085, 0.32411361824945795, 0.20614272453169236, 0.3337827743599774, 0.2563401486725837, 0.18287697129475122, 0.18528186464263652, 0.18397258160586638, 0.17154182333776857, 0.16587800041471823, 0.18852671753378092, 0.20321458600766218, 0.21328367295298656, 0.18319817684963824, 0.13548923383741895, 0.18977470707848154, 0.1345281752832791, 0.1738949467298464, 0.2027027807252052, 0.14907789966559848, 0.15197639015753972, 0.11530628960001066, 0.16839663264109572, 0.7759226794474442, 0.11284400616515045, 0.48345183677328407, 0.1280363916549726, 0.4716409330797916, 0.21354110513055313, 0.0950380949461136, 0.17002612498336, 0.26609266294318445, 0.23498531461032002, 0.2148476754521118, 0.20119269792119243, 0.2095772924970153, 0.21097997851498518, 0.26521870216974963, 0.2639610093516991, 0.27327473804425606, 0.2778271941193964, 0.09070886672406397, 0.09358275841491992, 0.08889407033939678, 0.11606048429501248, 0.06257334511387291, 0.1403126417390408, 0.08539907361652799, 0.0593440281622708, 0.08948060234871846]}, "mutation_prompt": null}
