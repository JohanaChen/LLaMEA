{"id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 0, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "6d0b5dcc-88fb-4488-8300-7fc2b03de25d", "solution": "class Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        \n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        w = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = w * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            w = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight to adjust the balance between exploration and exploitation for faster convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'Enhanced_PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'Enhanced_PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "d951f781-b503-42db-ad28-9a83be255fe4", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "71335a80-adfb-4f00-98ba-2aa9d715154a", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "f1642955-a056-4d7b-a690-46e00de05508", "solution": "class PSO_NelderMead_FastConvergence(PSO_NelderMead):\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia=0.5, c1=2.0, c2=2.0):\n        super().__init__(budget, dim, swarm_size, max_iter)\n        self.inertia = inertia\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        # Initialize algorithm parameters and variables\n        inertia_min, inertia_max = 0.3, 0.9\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia = self.inertia\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia * velocity[i] + self.c1 * np.random.rand() * (pbest[i] - swarm[i]) + self.c2 * np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Dynamic inertia weight adaptation based on fitness improvement\n            prev_gbest_fitness = func(gbest)\n            prev_inertia = inertia\n\n            if func(gbest) < prev_gbest_fitness:\n                inertia = min(inertia_max, inertia + 0.1)\n            else:\n                inertia = max(inertia_min, inertia - 0.1)\n\n            velocity *= prev_inertia / inertia\n\n        return gbest", "name": "PSO_NelderMead_FastConvergence", "description": "Introducing dynamic inertia weight adaptation based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 4, "fitness": 0.3133411985997847, "feedback": "The algorithm PSO_NelderMead_FastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8984225114315617, 0.8996173859369131, 0.9075811099658697, 0.8932652096531789, 0.9195475007103214, 0.9190446235252206, 0.9020654315509935, 0.9232746154729401, 0.900006040112654, 0.3988741049445059, 0.5060155701996318, 0.5254499199726732, 0.5463669569585778, 0.6776725484291164, 0.36000434172233187, 0.026141183520041356, 0.4653577825243278, 0.5990407412236054, 0.1115538259188561, 0.04454097080880859, 0.051298403905214784, 0.09468956355946634, 0.08301495549463178, 0.07793112311763895, 0.057804012719105624, 0.04376545690606637, 0.09443644340525992, 0.08513443420870459, 0.04185780337652889, 0.04270126604372437, 0.06848033685993682, 0.016867745523309496, 0.06608892558434198, 0.04693614325409712, 0.08943852826331222, 9.999999999998899e-05, 0.9573514213432038, 0.9937651520024462, 0.9908465513798991, 0.9748815294937299, 0.9107709113029203, 0.9604859869884161, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.29789759653417114, 0.21780692532686652, 0.3195058857466083, 0.4391061176354689, 0.36158856771186043, 0.23190352012629822, 0.20326880615427567, 0.4017777500752603, 0.3973328079908467, 0.2302134520296507, 0.09528427202369694, 0.14354385712875173, 0.15768202354178318, 0.15691984862320785, 0.14988276911902354, 0.06186300565741876, 0.10050192226581689, 0.13928965525520576, 0.7194784598331838, 0.5610759614146812, 0.7078477266507921, 0.600505132105431, 0.7823887418319269, 0.1238693150314184, 0.1365647327547247, 0.5757153418191931, 0.5659590725581953, 0.6349280691397977, 0.6315334225870632, 0.13502012263876495, 0.7386686365747845, 0.7023482372987575, 0.7268835281527446, 0.10444116668841141, 0.6861318128711138, 0.13486907853418106, 0.12109900465145651, 0.6617242540509701, 0.5747216794738756, 0.42410827984683164, 0.12082429893655133, 0.38873649819981226, 0.31766807071734915, 0.5026393573664387, 0.38144325466906426, 0.16071653937125396, 0.14802158155859835, 0.20841593823812565, 0.10888923965932151, 0.09464990653625305, 0.08473996358378622, 0.15700097099414578, 0.09338898543087493, 0.11103740766501324, 0.11471726441452212, 0.36387969507747575, 0.22853828128209963, 0.5942081125183828, 0.38442650931812894, 0.6212652489155438, 0.58311119032136, 0.15040768127868975, 0.05444026453669848, 0.3097184628611557, 0.10430131521056518, 0.2196440925563795, 0.1813874938994786, 0.23459037794312232, 0.22100232914976936, 0.06390398830106803, 0.22774148470184719, 0.12786269725287713, 0.833659189661664, 0.8561559042359904, 0.847511161647072, 0.7935765053132944, 0.7971359256106022, 0.794781503008207, 0.8163442159139858, 0.8587928753366646, 0.8443163648683849, 0.05016989984861486, 0.049675658168991, 0.040938215921925813, 0.05707073465217127, 0.07020087762954119, 0.08694714901313305, 0.09256574219128655, 0.021280639552668568, 0.07847141438780347, 0.15076426143992394, 0.14099697355365604, 0.11406906625031665, 0.2064737001605722, 0.1286689169789259, 0.11905415857971946, 0.23932879393711803, 0.11496819654883494, 0.1544072825123658, 0.14488026051043146, 0.1814316434992842, 0.16186476532460692, 0.2112250768259707, 0.13860594380641655, 0.1912961332058768, 0.24103110085067947, 0.21236131983762985, 0.1918807284238606, 0.050392733016535796, 0.058832909747504325, 0.10158278754334438, 0.13230680621931046, 0.13661334637987876, 0.12502746170055512, 0.15659820151860038, 0.11046778580176853, 0.11378807581523309, 0.16910397152875334, 0.20857205735942785, 0.1715902380080182, 0.34012041058830667, 0.14275690764771787, 0.17402806670596382, 0.17478018944800555, 0.1887587083561716, 0.1769741211685829, 0.1654141859773154, 0.16518372412009907, 0.17987856886643872, 0.17325194771655783, 0.16552822913007026, 0.1713199426206724, 0.20182500465643494, 0.1618718713414713, 0.16714783996981186, 0.1264508119274429, 0.12677589267011158, 0.15440474401293125, 0.9258535635663778, 0.2012470092850045, 0.20122935309866885, 0.09981674894075854, 0.1692284530194167, 0.21037233770682784, 0.9043080386514173, 0.15721127595682194, 0.11102570490465258, 0.1031504301391265, 0.1691799700595702, 0.21014512021974197, 0.10486683543773923, 0.10490055639360052, 0.8722737944156271, 0.17468274594191224, 0.24928085589136095, 0.18829601628855952, 0.23169587885789433, 0.1622762819257909, 0.20122839250533753, 0.19431229335332068, 0.22763241808041357, 0.19750852632265836, 0.06855942756068611, 0.06624853536009445, 0.06434311123690972, 0.10457584233733219, 0.059169404592421926, 0.09135114224113894, 0.04612787052755196, 0.03613447757210975, 0.0821502159308517]}, "mutation_prompt": null}
{"id": "2b86f3a3-32ce-48ec-b909-43e9f3c77cfa", "solution": "class PSO_NelderMead_FastConvergence(PSO_NelderMead):\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=0.9):\n        super().__init__(budget, dim, swarm_size, max_iter)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_min + ((_ + 1) / self.max_iter) * (self.inertia_max - self.inertia_min)  # Adaptive inertia weight\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n                \n                swarm[i] = new_position.copy()\n                \n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n            \n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n        \n        return gbest", "name": "PSO_NelderMead_FastConvergence", "description": "Introducing adaptive inertia weight for Particle Swarm Optimization to dynamically adjust the exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 5, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_FastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "0a511891-ad03-4c02-ba51-f9dcb63d8145", "solution": "class PSO_NelderMead_FastConvergence(PSO_NelderMead):\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=0.9):\n        super().__init__(budget, dim, swarm_size, max_iter)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                cognitive = np.random.rand() * (pbest[i] - swarm[i])\n                social = np.random.rand() * (gbest - swarm[i])\n                new_velocity = inertia_weight * velocity[i] + cognitive + social\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "PSO_NelderMead_FastConvergence", "description": "Introducing adaptive inertia weight for velocity update to balance exploration and exploitation dynamically.", "configspace": "", "generation": 6, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_FastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "feee941f-54c6-4221-826d-b9f33863e86f", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "a02ed91e-824e-41c2-83f2-d1c579b4bd7e", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        \n        inertia_weight = 0.9  # Initial inertia weight\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                cognitive = np.random.rand() * (pbest[i] - swarm[i])\n                social = np.random.rand() * (gbest - swarm[i])\n                new_velocity = inertia_weight * velocity[i] + cognitive + social\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = 0.4 + 0.5 * (self.max_iter - _) / self.max_iter  # Dynamic inertia weight\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Introducing a dynamic inertia weight to facilitate faster convergence by adaptively adjusting the particle velocities during optimization.", "configspace": "", "generation": 8, "fitness": 0.3448107479908297, "feedback": "The algorithm FastPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "a8930112-7887-4d8a-a83a-a537afe36ae9", "solution": "class Modified_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Dynamic inertia weight update\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "Modified_PSO_NelderMead", "description": "Introducing dynamic inertia weight update to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'Modified_PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'Modified_PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "2bbddd1d-1733-4e0f-b76c-53495215ccc2", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        w = self.w_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = w * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            w = self.w_max - (_ / self.max_iter) * (self.w_max - self.w_min)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight adaptation to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 10, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "7b6e569e-eabb-4448-85b3-c8ca189a3f0a", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "e0a5dd44-f8e5-42e0-a644-56d98a0600a4", "solution": "import numpy as np\n\nclass Accelerated_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            inertia_weight = 0.9 - 0.7 * _ / self.max_iter\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Accelerated_PSO_NelderMead", "description": "Introducing dynamic inertia weight to the particle swarm optimization (PSO) component to balance exploration and exploitation dynamically.", "configspace": "", "generation": 12, "fitness": 0.3448107479908297, "feedback": "The algorithm Accelerated_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "7ff59338-3456-4027-84ed-32a29d66940d", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "5ae0d7bb-4cdf-41fa-acc3-a33fa49eec4d", "solution": "class PSO_NelderMead_Enhanced(PSO_NelderMead):\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_max=0.9, inertia_min=0.4):\n        super().__init__(budget, dim, swarm_size, max_iter)\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "PSO_NelderMead_Enhanced", "description": "Introducing dynamic inertia weight for adaptive velocity control to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 14, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "c5c73cab-c3ae-4f08-85d9-a3a0643b583a", "solution": "import numpy as np\n\nclass FasterPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.9  # Initial inertia weight\n        self.w_min = 0.4  # Minimum inertia weight\n        self.w_decay = 0.95  # Inertia weight decay rate\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = self.w * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            self.w = max(self.w_min, self.w * self.w_decay)  # Update inertia weight\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "FasterPSO_NelderMead", "description": "Introducing dynamic inertia weight to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 15, "fitness": 0.3448107479908297, "feedback": "The algorithm FasterPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "910dbbe5-ebb1-48d9-bb4d-d5ed9e4436cd", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "3cd671cb-6777-4a43-ab22-d09fd01f1c0c", "solution": "import numpy as np\n\nclass PSO_NelderMead_Enhanced:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def dynamic_inertia_weight(self, curr_iter, max_iter):\n        return self.inertia_max - (self.inertia_max - self.inertia_min) * (curr_iter / max_iter)\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2 * (reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5 * (simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5 * (simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for iter_count in range(1, self.max_iter + 1):\n            inertia_weight = self.dynamic_inertia_weight(iter_count, self.max_iter)\n\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_Enhanced", "description": "Introducing dynamic inertia weight adaptation to enhance exploration and exploitation balance, leading to faster convergence.", "configspace": "", "generation": 17, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "530b173f-7d0d-4643-8317-9d2d3e7e4fa4", "solution": "import numpy as np\n\nclass PSO_NelderMead_Optimized:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = self.inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n                    self.inertia_weight *= 1.01  # Dynamic inertia weight adaptation\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_Optimized", "description": "Introducing dynamic inertia weight adaptation based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 18, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_Optimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "7512957f-6066-4b09-976e-0f2638454fb5", "solution": "class AcceleratedPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0  # Initial lower bound\n        self.ub = 5.0  # Initial upper bound\n\n    def dynamic_search_space(self, iteration):\n        progress = iteration / self.max_iter  # Calculate progress ratio\n        reduction_factor = 1 - progress  # Calculate reduction factor\n        self.lb = -5.0 * reduction_factor  # Adjust lower bound dynamically\n        self.ub = 5.0 * reduction_factor  # Adjust upper bound dynamically\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for iter_count in range(1, self.max_iter + 1):  # Start from 1 for iteration-based adjustments\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            self.dynamic_search_space(iter_count)  # Dynamically adjust search space based on iteration\n\n        return gbest", "name": "AcceleratedPSO_NelderMead", "description": "Accelerating convergence by dynamically adjusting the search space boundaries based on the algorithm's progress.", "configspace": "", "generation": 19, "fitness": 0.3448107479908297, "feedback": "The algorithm AcceleratedPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "8f6bdb45-d141-4640-bdaa-8e0cedcb43d7", "solution": "import numpy as np\n\nclass AdaptivePSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = 0.9\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = max(0.4, inertia_weight - 0.005)  # Adaptive inertia weight update\n\n        return gbest", "name": "AdaptivePSO_NelderMead", "description": "Introducing adaptive inertia weight parameter in the Particle Swarm Optimization (PSO) algorithm to enhance convergence speed.", "configspace": "", "generation": 20, "fitness": 0.3448107479908297, "feedback": "The algorithm AdaptivePSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "5861428f-2043-40f3-84e8-b288a0baafdb", "solution": "class PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        w = self.w_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = w * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            w = self.w_max - (_ / self.max_iter) * (self.w_max - self.w_min)  # Dynamic inertia weight adaptation\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Introducing dynamic inertia weight adaptation based on particle performance to enhance convergence speed.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "786c9e3f-3038-4f11-aff7-d02f5f3db54b", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "7ba76a07-ab73-45bf-a6ef-153e8b4674db", "solution": "class Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Dynamic inertia weight adaptation\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight adaptation to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'Enhanced_PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'Enhanced_PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "9d807af7-c835-494a-b995-c370f502b80d", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "d0fa7cf6-354a-4399-b3c3-6bb706c6577d", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "bde5545f-9628-4d85-bc07-2f7b1bc25e72", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                exploration_weight = np.exp(-2*(_/self.max_iter))\n                exploitation_weight = 1 - exploration_weight\n                new_velocity = exploration_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic adjustment of the velocity weights to promote exploration and exploitation balance.", "configspace": "", "generation": 26, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "09490667-84e9-4f41-83ff-4b0f1beb6d81", "solution": "import numpy as np\n\nclass PSO_NelderMead_FasterConvergence:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_weight=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = inertia_weight\n        self.c1 = c1\n        self.c2 = c2\n\n    def optimize_simplex(self, simplex, func):\n        # Same as before\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        prev_best_fitness = func(gbest)\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = self.inertia_weight * velocity[i] + self.c1 * np.random.rand() * (pbest[i] - swarm[i]) + self.c2 * np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                current_best_fitness = func(gbest)\n                if func(new_position) < current_best_fitness:\n                    gbest = new_position.copy()\n                    fitness_gain = prev_best_fitness - current_best_fitness\n                    self.inertia_weight = max(0.4, min(self.inertia_weight + 0.1 * fitness_gain, 0.9))\n                    prev_best_fitness = current_best_fitness\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_FasterConvergence", "description": "Introducing dynamic inertia weight adjustment based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndentationError('expected an indented block', ('<string>', 18, 5, '    def __call__(self, func):\\n')).", "error": "IndentationError('expected an indented block', ('<string>', 18, 5, '    def __call__(self, func):\\n'))", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "a0e98a20-b630-434a-8367-72ec9e9692e2", "solution": "import numpy as np\n\nclass PSO_NelderMead_FasterConvergence:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_FasterConvergence", "description": "Employ a dynamic inertia weight strategy in the Particle Swarm Optimization algorithm to adaptively adjust the particle velocities, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 28, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_FasterConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "62384a58-6289-4b65-9ffb-e0ba07f9538c", "solution": "class Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        w = self.w_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = w * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            improvement_rate = 1.0 - (func(gbest) / func(swarm[gbest_idx]))\n            w = self.w_max - (self.w_max - self.w_min) * improvement_rate\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight updating based on individual particle performance to accelerate convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'Enhanced_PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'Enhanced_PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "2c89cac7-8a9c-4c23-95e6-26f50d51d7c6", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.9  # Initial inertia weight\n        self.w_range = [0.4, 0.9]  # Inertia weight range\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = self.w * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            self.w = self.w_range[0] + ((_ + 1) / self.max_iter) * (self.w_range[1] - self.w_range[0])  # Dynamic inertia weight update\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Introducing a dynamic inertia weight updating scheme to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 30, "fitness": 0.3448107479908297, "feedback": "The algorithm FastPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "63b530f6-b6c3-426f-840f-943e138e2b69", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n\n    def optimize_simplex(self, simplex, func):\n        inertia_weight = self.inertia_max\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n            \n            inertia_weight = self.inertia_max - (_ / (self.budget // self.dim)) * (self.inertia_max - self.inertia_min)\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Introducing a dynamic inertia weight mechanism to adjust particle movement based on previous performance, promoting faster convergence by balancing exploration and exploitation.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'inertia_weight' is not defined\").", "error": "NameError(\"name 'inertia_weight' is not defined\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "fe9fbceb-c508-4165-9c85-33ef709e61ab", "solution": "class FastPSO_NelderMead(PSO_NelderMead):\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=1.0):\n        super().__init__(budget, dim, swarm_size, max_iter)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia = self.inertia_min + (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Introducing dynamic adjustment of the particle swarm's inertia weight to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'FastPSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'FastPSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "9c631c6a-2b52-4977-8a82-df9799b48a65", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def optimize_simplex(self, simplex, func):\n        inertia = self.inertia_max\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            inertia = self.inertia_min + (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.swarm_size):\n                new_velocity = inertia * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing a dynamic inertia weight to adjust the balance between exploration and exploitation during optimization to enhance convergence speed.", "configspace": "", "generation": 33, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "52b72b44-22e6-442f-8664-de28feb265a4", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = 0.5\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest_prev = gbest.copy()\n            gbest = self.optimize_simplex(simplex, func)\n\n            if func(gbest) < func(gbest_prev):\n                inertia_weight = max(0.4, inertia_weight * 1.1)  # Dynamic inertia weight adjustment\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight adjustment based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 34, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "7528f540-1d03-409d-adc2-ee3b26b8fa3d", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.5  # Initial inertia weight\n        self.c1 = 1.5  # Cognitive parameter\n        self.c2 = 1.5  # Social parameter\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1 = np.random.rand()\n                r2 = np.random.rand()\n                new_velocity = self.w * velocity[i] + self.c1 * r1 * (pbest[i] - swarm[i]) + self.c2 * r2 * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            # Dynamic adjustment of inertia weight\n            self.w = 0.5 + 0.4 * (self.max_iter - _) / self.max_iter\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight and adaptive mutation probability to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 35, "fitness": 0.33438578683879955, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.9038211924486894, 0.9234445498737074, 0.908215253184034, 0.9093728119118922, 0.9078698154947612, 0.9020680000014254, 0.9196531244718548, 0.9181096564090603, 0.892200900453327, 0.5799890411364901, 0.5355207959558242, 0.6085754810414749, 0.20229738651932416, 0.318289901581677, 0.6143091989405034, 0.5319200644963509, 0.39222637433053564, 0.024948084882519983, 0.07798753826636495, 0.07018446557107838, 0.16537177760084198, 0.053945979519452014, 0.06260734614136798, 0.09028713271452526, 0.06628569975618215, 0.05171837146575542, 0.0833542207310487, 0.04522186310294274, 0.0547560622504647, 0.14754366008793673, 0.0712929201397472, 0.051193840176172456, 0.0389742751210409, 0.07367765388706926, 0.02049640356632776, 0.012814261690979212, 0.9682572746005511, 0.9905869292876984, 0.9784374032404413, 0.9770085870890695, 0.9535919058324962, 0.9681307081420665, 0.9666978113723477, 0.9735502110637867, 0.9749924440901616, 0.24152003890953644, 0.18237896223999517, 0.2896970302111661, 0.46453917109485166, 0.22677510120578814, 0.4550563762539771, 0.15897627665989678, 0.23668344514860273, 0.14017626772195269, 0.21240309649615186, 0.13632043589238585, 0.12404814222002336, 0.19458158889627986, 0.3232168096361212, 0.09369567766867481, 0.06611603136768007, 0.16768408395124224, 0.16180738074908818, 0.7438694653070537, 0.13392278515274814, 0.5531327098429781, 0.762136102118543, 0.7834590180140875, 0.6214060240995309, 0.7440208955534449, 0.13248237262461138, 0.79156679071479, 0.7805447432337659, 0.5011115246626721, 0.783222088202693, 0.7336487826452003, 0.13663180947588827, 0.13419459051878435, 0.6044441093735908, 0.5866061777732151, 0.7764846130497852, 0.39951738568182693, 0.579753656461995, 0.4609293721219142, 0.5183074311633864, 0.6124607575782075, 0.5677557943971362, 0.4515581657814577, 0.515637073041933, 0.4937936374697198, 0.30071269824245794, 0.32921960573788756, 0.1985318790215299, 0.11146114760758807, 0.18374324505731743, 0.07089081085919968, 0.2199386307476089, 0.1972527333444949, 0.0967377266061491, 0.10384542026577637, 0.25500646126736504, 0.17926674586144276, 0.4674716114247792, 0.7235794692506679, 0.6552741553950412, 0.2393361364766301, 0.14242802788816478, 0.07741287231713845, 0.3689210207188399, 0.22272766249618436, 0.47763031309537374, 0.3148658734990073, 0.09822001171611205, 0.13057235277256818, 0.12760539158155337, 0.15133952489528602, 0.13334347090193532, 0.8450334222308177, 0.856265325459012, 0.8511571289747634, 0.8534640162202215, 0.8472647339464205, 0.8162701801887668, 0.804580054872917, 0.8152669913266288, 0.8229547832463153, 0.033359376437657406, 0.06882150079812888, 0.08271176758567489, 0.06642685720709507, 0.06333823333399902, 0.07811309331201444, 0.11137870097388058, 0.10652286112798337, 0.07585081724894316, 0.12396206666290854, 0.14099697355365604, 0.10822670995676342, 0.16121570057168866, 0.23899128709689677, 0.184578839617766, 0.2839370335878795, 0.10782604993584044, 0.1593998234062607, 0.14894317921519873, 0.20204631611619261, 0.16186476532460692, 0.21719092958414798, 0.2217675461458979, 0.2177265236626681, 0.21626775906120155, 0.22043389649998868, 0.20034539270283214, 0.06890270437704471, 0.05771807700761167, 0.17242789260273006, 0.15160169544540025, 0.14869616952702602, 0.19757307019931247, 0.19073158652737, 0.13467349217577462, 0.13288580487675716, 0.18417501692118488, 0.15841188756102642, 0.1715902380080182, 0.23599634774676925, 0.15444686890891557, 0.15877184576429915, 0.2166333207324448, 0.20057916314643964, 0.28388763610728585, 0.15561797914237918, 0.1847541122350682, 0.18010141008915215, 0.18620408186411108, 0.16739760121297864, 0.15763056217380855, 0.17091731143757716, 0.18671465530712295, 0.19547282042889125, 0.1262665669402515, 0.12706096005239265, 0.1537122623731717, 0.9337895121399203, 0.20153423900841405, 0.1997738799104496, 0.1000586993269792, 0.169657136839381, 0.9119359220914826, 0.8883483289185256, 0.15730454863447507, 0.763067646427479, 0.7465392175650045, 0.16945726557390495, 0.20944409009447085, 0.105447774731939, 0.10486196237999845, 0.16757755882936176, 0.16906976596940693, 0.20769630292068364, 0.23008148086391222, 0.24420916401296067, 0.22198630156225385, 0.1678986115547224, 0.19431229335332068, 0.19161366114781953, 0.19750852632265836, 0.08197264496723577, 0.09208987413582781, 0.08789472362646988, 0.09468315597214882, 0.08611919973917392, 0.07508117742032261, 0.023718157464397316, 0.09517023359644705, 0.0739659509193612]}, "mutation_prompt": null}
{"id": "3a08f878-3af3-4562-beff-2296cca5a2e6", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def optimize_simplex(self, simplex, func, curr_iter):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n            if curr_iter % 10 == 0:\n                scale_factor = 1.0 - (0.9 / self.max_iter) * curr_iter\n                simplex = [s + np.random.normal(0, scale_factor, self.dim) for s in simplex]\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for iter_count in range(1, self.max_iter + 1):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func, iter_count)\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (1 - iter_count / self.max_iter)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing an adaptive inertia weight to balance exploration and exploitation and enhancing the local search by dynamically adjusting the simplex size.", "configspace": "", "generation": 36, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "e0f45123-3012-4544-93b6-3bc184c825e6", "solution": "import numpy as np\n\nclass PSO_NelderMead_Enhanced:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, w_max=0.9, w_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w_max = w_max\n        self.w_min = w_min\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        w = self.w_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = w * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            w = self.w_max - (_ / self.max_iter) * (self.w_max - self.w_min)  # Dynamic inertia weight\n\n        return gbest", "name": "PSO_NelderMead_Enhanced", "description": "Introducing dynamic inertia weight adaptation to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 37, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "83ba3dcb-79fe-4086-8650-6d4d61f9b7b6", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "658c4d29-b58a-4e86-b197-c400e21eff4d", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "ca885346-7dc7-4bcf-8ff2-8a8791257987", "solution": "import numpy as np\n\nclass PSO_NelderMead_Speedup:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.phi_p = 2.0\n        self.phi_g = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + self.phi_p * np.random.rand() * (pbest[i] - swarm[i]) + self.phi_g * np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Update inertia weight based on population diversity\n            diversity = np.mean(np.std(swarm, axis=0))\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (diversity/np.sqrt(self.dim))\n\n        return gbest", "name": "PSO_NelderMead_Speedup", "description": "Introducing adaptive inertia weights based on population diversity to enhance convergence speed.", "configspace": "", "generation": 40, "fitness": 0.3133411985997847, "feedback": "The algorithm PSO_NelderMead_Speedup got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8984225114315617, 0.8996173859369131, 0.9075811099658697, 0.8932652096531789, 0.9195475007103214, 0.9190446235252206, 0.9020654315509935, 0.9232746154729401, 0.900006040112654, 0.3988741049445059, 0.5060155701996318, 0.5254499199726732, 0.5463669569585778, 0.6776725484291164, 0.36000434172233187, 0.026141183520041356, 0.4653577825243278, 0.5990407412236054, 0.1115538259188561, 0.04454097080880859, 0.051298403905214784, 0.09468956355946634, 0.08301495549463178, 0.07793112311763895, 0.057804012719105624, 0.04376545690606637, 0.09443644340525992, 0.08513443420870459, 0.04185780337652889, 0.04270126604372437, 0.06848033685993682, 0.016867745523309496, 0.06608892558434198, 0.04693614325409712, 0.08943852826331222, 9.999999999998899e-05, 0.9573514213432038, 0.9937651520024462, 0.9908465513798991, 0.9748815294937299, 0.9107709113029203, 0.9604859869884161, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.29789759653417114, 0.21780692532686652, 0.3195058857466083, 0.4391061176354689, 0.36158856771186043, 0.23190352012629822, 0.20326880615427567, 0.4017777500752603, 0.3973328079908467, 0.2302134520296507, 0.09528427202369694, 0.14354385712875173, 0.15768202354178318, 0.15691984862320785, 0.14988276911902354, 0.06186300565741876, 0.10050192226581689, 0.13928965525520576, 0.7194784598331838, 0.5610759614146812, 0.7078477266507921, 0.600505132105431, 0.7823887418319269, 0.1238693150314184, 0.1365647327547247, 0.5757153418191931, 0.5659590725581953, 0.6349280691397977, 0.6315334225870632, 0.13502012263876495, 0.7386686365747845, 0.7023482372987575, 0.7268835281527446, 0.10444116668841141, 0.6861318128711138, 0.13486907853418106, 0.12109900465145651, 0.6617242540509701, 0.5747216794738756, 0.42410827984683164, 0.12082429893655133, 0.38873649819981226, 0.31766807071734915, 0.5026393573664387, 0.38144325466906426, 0.16071653937125396, 0.14802158155859835, 0.20841593823812565, 0.10888923965932151, 0.09464990653625305, 0.08473996358378622, 0.15700097099414578, 0.09338898543087493, 0.11103740766501324, 0.11471726441452212, 0.36387969507747575, 0.22853828128209963, 0.5942081125183828, 0.38442650931812894, 0.6212652489155438, 0.58311119032136, 0.15040768127868975, 0.05444026453669848, 0.3097184628611557, 0.10430131521056518, 0.2196440925563795, 0.1813874938994786, 0.23459037794312232, 0.22100232914976936, 0.06390398830106803, 0.22774148470184719, 0.12786269725287713, 0.833659189661664, 0.8561559042359904, 0.847511161647072, 0.7935765053132944, 0.7971359256106022, 0.794781503008207, 0.8163442159139858, 0.8587928753366646, 0.8443163648683849, 0.05016989984861486, 0.049675658168991, 0.040938215921925813, 0.05707073465217127, 0.07020087762954119, 0.08694714901313305, 0.09256574219128655, 0.021280639552668568, 0.07847141438780347, 0.15076426143992394, 0.14099697355365604, 0.11406906625031665, 0.2064737001605722, 0.1286689169789259, 0.11905415857971946, 0.23932879393711803, 0.11496819654883494, 0.1544072825123658, 0.14488026051043146, 0.1814316434992842, 0.16186476532460692, 0.2112250768259707, 0.13860594380641655, 0.1912961332058768, 0.24103110085067947, 0.21236131983762985, 0.1918807284238606, 0.050392733016535796, 0.058832909747504325, 0.10158278754334438, 0.13230680621931046, 0.13661334637987876, 0.12502746170055512, 0.15659820151860038, 0.11046778580176853, 0.11378807581523309, 0.16910397152875334, 0.20857205735942785, 0.1715902380080182, 0.34012041058830667, 0.14275690764771787, 0.17402806670596382, 0.17478018944800555, 0.1887587083561716, 0.1769741211685829, 0.1654141859773154, 0.16518372412009907, 0.17987856886643872, 0.17325194771655783, 0.16552822913007026, 0.1713199426206724, 0.20182500465643494, 0.1618718713414713, 0.16714783996981186, 0.1264508119274429, 0.12677589267011158, 0.15440474401293125, 0.9258535635663778, 0.2012470092850045, 0.20122935309866885, 0.09981674894075854, 0.1692284530194167, 0.21037233770682784, 0.9043080386514173, 0.15721127595682194, 0.11102570490465258, 0.1031504301391265, 0.1691799700595702, 0.21014512021974197, 0.10486683543773923, 0.10490055639360052, 0.8722737944156271, 0.17468274594191224, 0.24928085589136095, 0.18829601628855952, 0.23169587885789433, 0.1622762819257909, 0.20122839250533753, 0.19431229335332068, 0.22763241808041357, 0.19750852632265836, 0.06855942756068611, 0.06624853536009445, 0.06434311123690972, 0.10457584233733219, 0.059169404592421926, 0.09135114224113894, 0.04612787052755196, 0.03613447757210975, 0.0821502159308517]}, "mutation_prompt": null}
{"id": "4021939b-85dd-4e51-81a9-ed129e8784ec", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "3974ac08-54a7-4be1-ad97-b7d814d7a0df", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "ba837cad-7c3c-40fc-810c-0ef70b450ec9", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = 0.5\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = 0.4 + 0.5 * (1 - _ / self.max_iter)  # Adaptive inertia weight\n\n        return gbest", "name": "AdaptiveInertiaPSO_NelderMead", "description": "Introducing adaptive inertia weight to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 43, "fitness": 0.3448107479908297, "feedback": "The algorithm AdaptiveInertiaPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "9944f7f0-135e-4626-b5b5-87e0370b68b7", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w_min = 0.4\n        self.w_max = 1.0\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        inertia_weight = self.w_max\n        mutation_rate = 0.5\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                new_velocity = inertia_weight * velocity[i] + self.c1 * r1 * (pbest[i] - swarm[i]) + self.c2 * r2 * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, mutation_rate, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = self.w_min + ((_ + 1) / self.max_iter) * (self.w_max - self.w_min)\n            mutation_rate = 0.5 * (1 - (_ + 1) / self.max_iter)\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Introducing dynamic inertia weight and adaptive mutation rate to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 44, "fitness": 0.33438578683879955, "feedback": "The algorithm FastPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.9038211924486894, 0.9234445498737074, 0.908215253184034, 0.9093728119118922, 0.9078698154947612, 0.9020680000014254, 0.9196531244718548, 0.9181096564090603, 0.892200900453327, 0.5799890411364901, 0.5355207959558242, 0.6085754810414749, 0.20229738651932416, 0.318289901581677, 0.6143091989405034, 0.5319200644963509, 0.39222637433053564, 0.024948084882519983, 0.07798753826636495, 0.07018446557107838, 0.16537177760084198, 0.053945979519452014, 0.06260734614136798, 0.09028713271452526, 0.06628569975618215, 0.05171837146575542, 0.0833542207310487, 0.04522186310294274, 0.0547560622504647, 0.14754366008793673, 0.0712929201397472, 0.051193840176172456, 0.0389742751210409, 0.07367765388706926, 0.02049640356632776, 0.012814261690979212, 0.9682572746005511, 0.9905869292876984, 0.9784374032404413, 0.9770085870890695, 0.9535919058324962, 0.9681307081420665, 0.9666978113723477, 0.9735502110637867, 0.9749924440901616, 0.24152003890953644, 0.18237896223999517, 0.2896970302111661, 0.46453917109485166, 0.22677510120578814, 0.4550563762539771, 0.15897627665989678, 0.23668344514860273, 0.14017626772195269, 0.21240309649615186, 0.13632043589238585, 0.12404814222002336, 0.19458158889627986, 0.3232168096361212, 0.09369567766867481, 0.06611603136768007, 0.16768408395124224, 0.16180738074908818, 0.7438694653070537, 0.13392278515274814, 0.5531327098429781, 0.762136102118543, 0.7834590180140875, 0.6214060240995309, 0.7440208955534449, 0.13248237262461138, 0.79156679071479, 0.7805447432337659, 0.5011115246626721, 0.783222088202693, 0.7336487826452003, 0.13663180947588827, 0.13419459051878435, 0.6044441093735908, 0.5866061777732151, 0.7764846130497852, 0.39951738568182693, 0.579753656461995, 0.4609293721219142, 0.5183074311633864, 0.6124607575782075, 0.5677557943971362, 0.4515581657814577, 0.515637073041933, 0.4937936374697198, 0.30071269824245794, 0.32921960573788756, 0.1985318790215299, 0.11146114760758807, 0.18374324505731743, 0.07089081085919968, 0.2199386307476089, 0.1972527333444949, 0.0967377266061491, 0.10384542026577637, 0.25500646126736504, 0.17926674586144276, 0.4674716114247792, 0.7235794692506679, 0.6552741553950412, 0.2393361364766301, 0.14242802788816478, 0.07741287231713845, 0.3689210207188399, 0.22272766249618436, 0.47763031309537374, 0.3148658734990073, 0.09822001171611205, 0.13057235277256818, 0.12760539158155337, 0.15133952489528602, 0.13334347090193532, 0.8450334222308177, 0.856265325459012, 0.8511571289747634, 0.8534640162202215, 0.8472647339464205, 0.8162701801887668, 0.804580054872917, 0.8152669913266288, 0.8229547832463153, 0.033359376437657406, 0.06882150079812888, 0.08271176758567489, 0.06642685720709507, 0.06333823333399902, 0.07811309331201444, 0.11137870097388058, 0.10652286112798337, 0.07585081724894316, 0.12396206666290854, 0.14099697355365604, 0.10822670995676342, 0.16121570057168866, 0.23899128709689677, 0.184578839617766, 0.2839370335878795, 0.10782604993584044, 0.1593998234062607, 0.14894317921519873, 0.20204631611619261, 0.16186476532460692, 0.21719092958414798, 0.2217675461458979, 0.2177265236626681, 0.21626775906120155, 0.22043389649998868, 0.20034539270283214, 0.06890270437704471, 0.05771807700761167, 0.17242789260273006, 0.15160169544540025, 0.14869616952702602, 0.19757307019931247, 0.19073158652737, 0.13467349217577462, 0.13288580487675716, 0.18417501692118488, 0.15841188756102642, 0.1715902380080182, 0.23599634774676925, 0.15444686890891557, 0.15877184576429915, 0.2166333207324448, 0.20057916314643964, 0.28388763610728585, 0.15561797914237918, 0.1847541122350682, 0.18010141008915215, 0.18620408186411108, 0.16739760121297864, 0.15763056217380855, 0.17091731143757716, 0.18671465530712295, 0.19547282042889125, 0.1262665669402515, 0.12706096005239265, 0.1537122623731717, 0.9337895121399203, 0.20153423900841405, 0.1997738799104496, 0.1000586993269792, 0.169657136839381, 0.9119359220914826, 0.8883483289185256, 0.15730454863447507, 0.763067646427479, 0.7465392175650045, 0.16945726557390495, 0.20944409009447085, 0.105447774731939, 0.10486196237999845, 0.16757755882936176, 0.16906976596940693, 0.20769630292068364, 0.23008148086391222, 0.24420916401296067, 0.22198630156225385, 0.1678986115547224, 0.19431229335332068, 0.19161366114781953, 0.19750852632265836, 0.08197264496723577, 0.09208987413582781, 0.08789472362646988, 0.09468315597214882, 0.08611919973917392, 0.07508117742032261, 0.023718157464397316, 0.09517023359644705, 0.0739659509193612]}, "mutation_prompt": null}
{"id": "d0d11712-4773-47fd-a98c-ee4d4629fcb9", "solution": "class PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.9  # Initial inertia weight\n        self.w_min = 0.4  # Minimum inertia weight\n        self.w_max = 0.9  # Maximum inertia weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = self.w * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Dynamic inertia weight updating for balance\n            self.w = self.w_max - (_ / self.max_iter) * (self.w_max - self.w_min)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Introducing dynamic inertia weight updating to improve exploration and exploitation balance in PSO_NelderMead algorithm for faster convergence.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "23d4e388-8ad8-4be1-a0d9-468ca262d2e0", "solution": "class Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_max=0.9, inertia_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n\n    def __call__(self, func):\n        inertia_weight = self.inertia_max\n        # Rest of the code remains the same\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Existing code for velocity update and position update\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            # Introduce dynamic inertia weight adaptation\n            inertia_weight = self.inertia_max - ((_ + 1) / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func, inertia_weight)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight adaptation to enhance exploration and exploitation balance, leading to faster convergence.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'new_position' is not defined\").", "error": "NameError(\"name 'new_position' is not defined\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "b86e2424-ada5-46ce-b613-65a9a7e7b89b", "solution": "class Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_max=0.9, inertia_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n\n    def optimize_simplex(self, simplex, func):\n        inertia_weight = self.inertia_max\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing a dynamic inertia weight control mechanism to adjust particle movement based on their historical performance, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 47, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "6e46b4b3-be96-4302-82ed-3afc78a89a2b", "solution": "import numpy as np\n\nclass Improved_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n\n    def optimize_simplex(self, simplex, func):\n        inertia_weight = self.inertia_max\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n            inertia_weight = self.inertia_max - (_ / (self.budget // self.dim)) * (self.inertia_max - self.inertia_min)\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Improved_PSO_NelderMead", "description": "Introducing dynamic inertia weight adaptation to improve convergence speed by balancing exploration and exploitation.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'inertia_weight' is not defined\").", "error": "NameError(\"name 'inertia_weight' is not defined\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "cae716c2-2885-4ad2-a4d8-2b286cae83cb", "solution": "class PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            w = self.w_min + (_ / self.max_iter) * (self.w_max - self.w_min)\n            for i in range(self.swarm_size):\n                new_velocity = w * velocity[i] + self.c1 * np.random.rand() * (pbest[i] - swarm[i]) + self.c2 * np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Introducing dynamic inertia weight adaptation to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "6e0c9ba7-a476-4214-aaaa-0a5c3a5e8cd5", "solution": "import numpy as np\n\nclass Improved_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_max=0.9, inertia_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Adapt the inertia weight dynamically\n            inertia_weight = self.inertia_max - ((_ + 1) / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "Improved_PSO_NelderMead", "description": "Implement adaptive inertia weight in the Particle Swarm Optimization (PSO) to dynamically adjust the balance between exploration and exploitation for faster convergence.", "configspace": "", "generation": 50, "fitness": 0.3448107479908297, "feedback": "The algorithm Improved_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "b2a8fd4b-2ff1-47e9-b1d4-6912c58c63eb", "solution": "class Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=0.9, w_change_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n        self.w_change_iter = w_change_iter\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertial_weight = self.inertia_max\n\n        for it in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertial_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            if it % self.w_change_iter == 0 and it > 0:\n                inertial_weight = self.inertia_max - (self.inertia_max - self.inertia_min) * it / self.max_iter\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic adjustment of inertia weight in the Particle Swarm Optimization (PSO) algorithm to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'Enhanced_PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'Enhanced_PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "944b5878-bc0d-452d-ae2d-5644b9c31249", "solution": "import numpy as np\n\nclass DynamicInertiaPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        inertia_min = 0.4\n        inertia_max = 0.9\n\n        for t in range(self.max_iter):\n            inertia = inertia_max - (inertia_max - inertia_min) * t / self.max_iter\n            for i in range(self.swarm_size):\n                new_velocity = inertia * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "DynamicInertiaPSO_NelderMead", "description": "Enhancing convergence speed by introducing a dynamic inertia weight factor that adjusts based on the optimization progress.", "configspace": "", "generation": 52, "fitness": 0.3448107479908297, "feedback": "The algorithm DynamicInertiaPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "ac4c9606-472d-478f-8782-6cccc3051a15", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "904ff0cc-c387-47f2-8b60-f14d49c99cd0", "solution": "class PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 1.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_max - ((_ / self.max_iter) * (self.inertia_max - self.inertia_min))\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Introducing dynamic inertia weight to balance exploration and exploitation in the Particle Swarm Optimization (PSO) component of the algorithm.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "12f501d2-c9fe-4e5d-abd5-3402147db9ab", "solution": "class PSO_NelderMead_Enhanced:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "PSO_NelderMead_Enhanced", "description": "Introducing a dynamic inertia weight to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead_Enhanced' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead_Enhanced' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "ee1c09fa-a74a-4615-b097-2acb4420e7c3", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "5e23fb2e-6c90-48b7-b621-c4016ef7f12d", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "12f5085a-fcc1-43b8-9437-3da35c0ece79", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = 0.5  # Initialize inertia weight\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n            \n            # Adjust inertia weight based on function landscape\n            inertia_weight = 0.4 + 0.1 * np.exp(-0.1 * func(gbest))\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Introducing dynamic inertia weight adjustment based on the function landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": 0.3448107479908297, "feedback": "The algorithm FastPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "57c87f06-b7ef-4798-be82-f62ddbd4c308", "solution": "import numpy as np\n\nclass PSO_NelderMead_Fast:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.9  # Initial inertia weight\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_weight - 0.5 * _ / self.max_iter  # Dynamic inertia weight\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_Fast", "description": "Introduce a dynamic inertia weight for Particle Swarm Optimization to improve exploration and exploitation balance, leading to faster convergence.", "configspace": "", "generation": 59, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_Fast got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "64b3d2a2-a1a7-41e7-8ce4-7ecd57e091d8", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "19580c42-ded2-41fe-8d7f-8cc410d5d073", "solution": "class PSO_NelderMead_FastConvergence(PSO_NelderMead):\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_max=0.9, inertia_min=0.4):\n        super().__init__(budget, dim, swarm_size, max_iter)\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        inertia_weight = self.inertia_max\n        inertia_decay = (self.inertia_max - self.inertia_min) / self.max_iter\n\n        for t in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = max(inertia_weight - inertia_decay, self.inertia_min)\n\n        return gbest", "name": "PSO_NelderMead_FastConvergence", "description": "Introducing a dynamic inertia weight adaptation mechanism to enhance exploration and exploitation balance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead_FastConvergence' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead_FastConvergence' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "8c4011e3-4cc5-417f-8062-a4089c0af5e4", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 1.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                new_velocity = self.w * velocity[i] + self.c1 * r1 * (pbest[i] - swarm[i]) + self.c2 * r2 * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n            \n            # Adapt the inertia weight based on individual particle performance\n            best_particle_idx = np.argmin([func(p) for p in swarm])\n            worst_particle_idx = np.argmax([func(p) for p in swarm])\n            self.w = 0.5 + 0.5 * (func(pbest[best_particle_idx]) - func(pbest[worst_particle_idx])) / (func(pbest[best_particle_idx]) + func(pbest[worst_particle_idx]))\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Introducing a novel adaptive inertia weight mechanism based on individual particle performance to enhance exploration and exploitation balance, thereby improving convergence speed.", "configspace": "", "generation": 62, "fitness": 0.32458905767157314, "feedback": "The algorithm FastPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.29.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.9362241524617821, 0.9160119914728638, 0.9129442007562623, 0.9234249133867148, 0.9105065303269871, 0.916954122295411, 0.9358613976373299, 0.9088514778151419, 0.8970504562626861, 0.5782784625393476, 0.5579763798012228, 0.21582767480243714, 0.29973776893410575, 0.5311350754800903, 0.41942736553364335, 0.3378117691307193, 0.48656659285591985, 0.47797877388309784, 0.07977628973868145, 0.11207467223968381, 0.05921480140997648, 0.04711371066744374, 0.06781076389854457, 0.05952607494585305, 0.039013133504134156, 0.05780853403657438, 0.1262256405478982, 0.05001385088937149, 0.07689025168097019, 0.043435451939123015, 0.058396937740022636, 0.08650165238551777, 0.0416020110696208, 0.043478097651439174, 0.04064548302624005, 0.03827817771452535, 0.9746717709909463, 0.9834037763564939, 0.9813985998965222, 0.9735243886100164, 0.9536847638557814, 0.9754574671230886, 0.9740998437145139, 0.9796802556353167, 0.9154309471446725, 0.2813061721968797, 0.364051479389752, 0.23602427472542864, 0.3335677971048021, 0.31686423120821483, 0.5668307773979442, 0.3696657864487414, 0.49921865259529374, 0.5054391511068023, 0.1876186563600083, 0.068931934367919, 0.09979698795861258, 0.17560037046902666, 0.15793901467831128, 0.1736051885003126, 0.10071894807109383, 0.09970516843370425, 0.05835913065527798, 0.48679449841620825, 0.7972733180292184, 0.6160903047216102, 0.5611147423645528, 0.13438169964242175, 0.37079794848072256, 0.7661060589436723, 0.13623132945336458, 0.5268777678376912, 0.6991477466347079, 0.5125502230219188, 0.6098401234049595, 0.13640793166506193, 0.5044477405457448, 0.13361254880356954, 0.6518359631748516, 0.5879501316633733, 0.45898119990642594, 0.5866244445145041, 0.4227966510918483, 0.4726506515780857, 0.689599652621422, 0.18657633311651145, 0.16138839594694365, 0.6214086515815993, 0.6207021184346344, 0.20616049947126047, 0.1577055330420093, 0.24971405864582485, 0.4330723275855638, 0.11405429292716907, 0.11009250902696077, 0.05263237275141508, 0.12588349561488665, 0.11611706620018125, 0.3814880144310916, 0.3891033935136585, 0.211623078026981, 0.42407904471337665, 0.32954085723376303, 0.6289366101469849, 0.5671164987366932, 0.30175772437844706, 0.5173220941859384, 0.0459083346814928, 0.14927579588315676, 0.1012665308215368, 0.3281286902122309, 0.10261636339597191, 0.43388340056612273, 0.08686572440875628, 0.09034943515362337, 0.1584631408543462, 0.42700323957253583, 0.8631131878493981, 0.857933938445712, 0.8281586614601908, 0.8200077481800623, 0.8853585618973678, 0.8456681481906445, 0.8777142734100212, 0.8215514435131944, 0.854909336324964, 0.08096701376681625, 0.08977882784785474, 0.07537625681145377, 0.050192671645394094, 0.07061963878320188, 0.055155157245055486, 0.060159304247684675, 0.07020380207588572, 0.0678773236153224, 0.1319872198443811, 0.17367442486661144, 0.10008724566704419, 0.20900792321747663, 0.15637697611848012, 0.1764945701574161, 0.23658577339733866, 0.19952143035418513, 0.09555890981892556, 0.12982740087003508, 0.13414142500073156, 0.17613312284280014, 0.14788661519351776, 0.13214565385550847, 0.17086129140714457, 0.17688098315988188, 0.18698834211699245, 0.16029962867540581, 0.13765860920006912, 0.12657347222976567, 0.10944808515209314, 0.10572934276403523, 0.14246556433368462, 0.1623797797890445, 0.17834299484469507, 0.10133100849238419, 0.12470656126137891, 0.1976053548417147, 0.18618449755389288, 0.14522665417527403, 0.18541381943884416, 0.241898090891141, 0.19241694276231958, 0.21754337572542626, 0.15113894005684703, 0.1574880345288524, 0.18029251777722455, 0.1944760597939632, 0.1740173216186457, 0.1868941735414016, 0.17297416567502566, 0.1873063465865461, 0.1666987708354014, 0.1838923169354434, 0.21021251030680355, 0.10500939075164317, 0.12680270559698148, 0.15368794177634026, 0.17366141734715346, 0.20116136744595958, 0.1998232801385682, 0.12302733653534614, 0.16924823947152656, 0.9494574176988186, 0.9195321414159978, 0.15742415159003464, 0.11065858192964528, 0.10479799338269546, 0.8966129337820594, 0.21066649346572974, 0.10496568129737205, 0.10522904339642503, 0.8742124963140968, 0.17404247328364453, 0.16579486056451676, 0.31637397969195824, 0.16805151559757614, 0.18929873366294836, 0.1807518341365063, 0.23383008075754164, 0.19894830343188508, 0.19284597894210542, 0.06977671554522058, 0.07735031240508139, 0.0917303970071176, 0.06964508404081082, 0.06497186556969481, 0.06519888029875087, 0.0713462708397612, 0.059278306789818824, 0.057184230938000846]}, "mutation_prompt": null}
{"id": "7417fb5c-b043-45d7-ba78-0323e6ed920b", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_max=0.9, inertia_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            inertia_weight = self.inertia_max - ((_ + 1) / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight to control particle velocity exploration and exploitation balance for enhanced convergence speed.", "configspace": "", "generation": 63, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "16db2766-d7e3-4007-8461-ed0d951f4d73", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "3850f7f2-d33e-400d-b210-eddea5b9601a", "solution": "import numpy as np\n\nclass Accelerated_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        \n        inertia_weight = 0.5  # Initial inertia weight\n\n        for eval_count in range(1, self.budget + 1):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive = 2.0 * r1 * (pbest[i] - swarm[i])\n                social = 2.0 * r2 * (gbest - swarm[i])\n                new_velocity = inertia_weight * velocity[i] + cognitive + social\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n            \n            # Update inertia weight dynamically based on function evaluations\n            inertia_weight = 0.9 - eval_count / self.budget\n\n        return gbest", "name": "Accelerated_PSO_NelderMead", "description": "Introduce a dynamic inertia weight adaptation based on function evaluations to enhance convergence speed.", "configspace": "", "generation": 65, "fitness": 0.32458905767157314, "feedback": "The algorithm Accelerated_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.29.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.9362241524617821, 0.9160119914728638, 0.9129442007562623, 0.9234249133867148, 0.9105065303269871, 0.916954122295411, 0.9358613976373299, 0.9088514778151419, 0.8970504562626861, 0.5782784625393476, 0.5579763798012228, 0.21582767480243714, 0.29973776893410575, 0.5311350754800903, 0.41942736553364335, 0.3378117691307193, 0.48656659285591985, 0.47797877388309784, 0.07977628973868145, 0.11207467223968381, 0.05921480140997648, 0.04711371066744374, 0.06781076389854457, 0.05952607494585305, 0.039013133504134156, 0.05780853403657438, 0.1262256405478982, 0.05001385088937149, 0.07689025168097019, 0.043435451939123015, 0.058396937740022636, 0.08650165238551777, 0.0416020110696208, 0.043478097651439174, 0.04064548302624005, 0.03827817771452535, 0.9746717709909463, 0.9834037763564939, 0.9813985998965222, 0.9735243886100164, 0.9536847638557814, 0.9754574671230886, 0.9740998437145139, 0.9796802556353167, 0.9154309471446725, 0.2813061721968797, 0.364051479389752, 0.23602427472542864, 0.3335677971048021, 0.31686423120821483, 0.5668307773979442, 0.3696657864487414, 0.49921865259529374, 0.5054391511068023, 0.1876186563600083, 0.068931934367919, 0.09979698795861258, 0.17560037046902666, 0.15793901467831128, 0.1736051885003126, 0.10071894807109383, 0.09970516843370425, 0.05835913065527798, 0.48679449841620825, 0.7972733180292184, 0.6160903047216102, 0.5611147423645528, 0.13438169964242175, 0.37079794848072256, 0.7661060589436723, 0.13623132945336458, 0.5268777678376912, 0.6991477466347079, 0.5125502230219188, 0.6098401234049595, 0.13640793166506193, 0.5044477405457448, 0.13361254880356954, 0.6518359631748516, 0.5879501316633733, 0.45898119990642594, 0.5866244445145041, 0.4227966510918483, 0.4726506515780857, 0.689599652621422, 0.18657633311651145, 0.16138839594694365, 0.6214086515815993, 0.6207021184346344, 0.20616049947126047, 0.1577055330420093, 0.24971405864582485, 0.4330723275855638, 0.11405429292716907, 0.11009250902696077, 0.05263237275141508, 0.12588349561488665, 0.11611706620018125, 0.3814880144310916, 0.3891033935136585, 0.211623078026981, 0.42407904471337665, 0.32954085723376303, 0.6289366101469849, 0.5671164987366932, 0.30175772437844706, 0.5173220941859384, 0.0459083346814928, 0.14927579588315676, 0.1012665308215368, 0.3281286902122309, 0.10261636339597191, 0.43388340056612273, 0.08686572440875628, 0.09034943515362337, 0.1584631408543462, 0.42700323957253583, 0.8631131878493981, 0.857933938445712, 0.8281586614601908, 0.8200077481800623, 0.8853585618973678, 0.8456681481906445, 0.8777142734100212, 0.8215514435131944, 0.854909336324964, 0.08096701376681625, 0.08977882784785474, 0.07537625681145377, 0.050192671645394094, 0.07061963878320188, 0.055155157245055486, 0.060159304247684675, 0.07020380207588572, 0.0678773236153224, 0.1319872198443811, 0.17367442486661144, 0.10008724566704419, 0.20900792321747663, 0.15637697611848012, 0.1764945701574161, 0.23658577339733866, 0.19952143035418513, 0.09555890981892556, 0.12982740087003508, 0.13414142500073156, 0.17613312284280014, 0.14788661519351776, 0.13214565385550847, 0.17086129140714457, 0.17688098315988188, 0.18698834211699245, 0.16029962867540581, 0.13765860920006912, 0.12657347222976567, 0.10944808515209314, 0.10572934276403523, 0.14246556433368462, 0.1623797797890445, 0.17834299484469507, 0.10133100849238419, 0.12470656126137891, 0.1976053548417147, 0.18618449755389288, 0.14522665417527403, 0.18541381943884416, 0.241898090891141, 0.19241694276231958, 0.21754337572542626, 0.15113894005684703, 0.1574880345288524, 0.18029251777722455, 0.1944760597939632, 0.1740173216186457, 0.1868941735414016, 0.17297416567502566, 0.1873063465865461, 0.1666987708354014, 0.1838923169354434, 0.21021251030680355, 0.10500939075164317, 0.12680270559698148, 0.15368794177634026, 0.17366141734715346, 0.20116136744595958, 0.1998232801385682, 0.12302733653534614, 0.16924823947152656, 0.9494574176988186, 0.9195321414159978, 0.15742415159003464, 0.11065858192964528, 0.10479799338269546, 0.8966129337820594, 0.21066649346572974, 0.10496568129737205, 0.10522904339642503, 0.8742124963140968, 0.17404247328364453, 0.16579486056451676, 0.31637397969195824, 0.16805151559757614, 0.18929873366294836, 0.1807518341365063, 0.23383008075754164, 0.19894830343188508, 0.19284597894210542, 0.06977671554522058, 0.07735031240508139, 0.0917303970071176, 0.06964508404081082, 0.06497186556969481, 0.06519888029875087, 0.0713462708397612, 0.059278306789818824, 0.057184230938000846]}, "mutation_prompt": null}
{"id": "1fd2f03a-2bef-4c70-9c47-a226fbab6125", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "77600f86-e1d0-4e15-a340-5c8e90ce4ee0", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "32981048-6f77-4b22-91f2-9a6b54a3bf8f", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n\n    def optimize_simplex(self, simplex, func):\n        inertia_weight = self.inertia_max\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight for velocity adaptation to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 68, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "3a4af97e-cfee-44e8-823c-d66ed82ccd51", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n\n    def optimize_simplex(self, simplex, func):\n        w = self.w_max\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.w_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = self.w_max - (_ / self.max_iter) * (self.w_max - self.w_min)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introduce dynamic inertia weight adjustment to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 69, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "b0e996d5-e064-4e5b-afc8-25e61ed87404", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size  # Modified: Initial swarm size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Modified: Dynamically adjust swarm size based on exploration\n            if np.random.rand() < 0.1 and self.swarm_size > 10:\n                self.swarm_size -= 1\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Accelerating convergence by dynamically adjusting the swarm size based on function landscape exploration.", "configspace": "", "generation": 70, "fitness": 0.3448107479908297, "feedback": "The algorithm FastPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "80be0845-0aa5-4c85-b3df-f50613a9fee7", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_max=0.9, inertia_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n            \n            # Adapt the inertia weight dynamically for faster convergence\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "AdaptiveInertiaPSO_NelderMead", "description": "Introduce adaptive inertia weight for PSO to dynamically adjust particle movement for faster convergence.", "configspace": "", "generation": 71, "fitness": 0.3448107479908297, "feedback": "The algorithm AdaptiveInertiaPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "03a311e0-4fd5-4b17-824d-2ff53f0d62ce", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "2386c510-e4e6-491f-a3b9-c56a581d8fd4", "solution": "import numpy as np\n\nclass Improved_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_weight=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = inertia_weight\n\n    def optimize_simplex(self, simplex, func):\n        # Unchanged\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                cognitive_component = np.random.rand() * (pbest[i] - swarm[i])\n                social_component = np.random.rand() * (gbest - swarm[i])\n\n                new_velocity = self.inertia_weight * velocity[i] + cognitive_component + social_component\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Improved_PSO_NelderMead", "description": "Improve the exploration phase by incorporating a dynamic adjustment of the particle velocities based on each particle's historical best positions.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: IndentationError('expected an indented block', ('<string>', 16, 5, '    def __call__(self, func):\\n')).", "error": "IndentationError('expected an indented block', ('<string>', 16, 5, '    def __call__(self, func):\\n'))", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "06aecb41-2e02-4c15-8044-a3164154837e", "solution": "class PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = self.inertia_max - ((_ + 1) / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Introducing dynamic inertia weight adaptation to improve convergence speed by adjusting the particle's exploration and exploitation behavior over iterations.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "de15a938-6a4a-4134-912c-8dee410e378b", "solution": "class PSO_NelderMead_Hybrid:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                cognitive = np.random.rand() * (pbest[i] - swarm[i])\n                social = np.random.rand() * (gbest - swarm[i])\n                new_velocity = inertia_weight * velocity[i] + cognitive + social\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_Hybrid", "description": "Introducing dynamic inertia weight to adjust particle velocities based on fitness improvements.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead_Hybrid' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead_Hybrid' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "af896e6d-bf8e-4acd-8a26-c6e72fe24534", "solution": "class PSO_NelderMead_FastConvergence(PSO_NelderMead):\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=0.9):\n        super().__init__(budget, dim, swarm_size, max_iter)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n                    inertia_weight = max(inertia_weight - 0.01, self.inertia_min)  # Update inertia weight dynamically\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_FastConvergence", "description": "Introducing dynamic inertia weight adjustment based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead_FastConvergence' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead_FastConvergence' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "d6a1d812-42f7-4e43-a183-6ba978a18714", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "a53aaf6f-f1d1-49fe-8913-29797b274118", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "1c7c61a6-4ef6-4f52-b6ae-7458cd490bc6", "solution": "import numpy as np\n\nclass PSO_NelderMead_Fast:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_max=0.9, inertia_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n\n    def optimize_simplex(self, simplex, func, inertia):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func, inertia)\n            inertia = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "PSO_NelderMead_Fast", "description": "Introducing dynamic inertia weight adaptation to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 79, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_Fast got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "af86d75a-d357-43e2-baa0-6e7506e20f6a", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "ff38477c-4932-442b-be5d-2b148d5966c9", "solution": "import numpy as np\n\nclass Modified_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        \n        inertia_weight = 0.9  # Initialize inertia weight\n        \n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            # Update inertia weight dynamically\n            inertia_weight = 0.5 + 0.4 * (self.max_iter - _) / self.max_iter\n            \n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Modified_PSO_NelderMead", "description": "Introducing dynamic inertia weight to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 81, "fitness": 0.3448107479908297, "feedback": "The algorithm Modified_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "0a127f7b-8a0d-4f35-8794-18dee8b2805f", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def optimize_simplex(self, simplex, func):\n        inertia_weight = self.inertia_max\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_min + (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing a dynamic inertia weight to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 82, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "f1656ad3-c9e9-4499-9f1a-9f92644581b6", "solution": "import numpy as np\n\nclass PSO_NelderMead_Adapted:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func, inertia_weight, c1, c2):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        inertia_weight = 0.9\n        c1 = 2.0\n        c2 = 2.0\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * c1 * (pbest[i] - swarm[i]) + np.random.rand() * c2 * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            inertia_weight *= 0.99\n            c1 *= 0.98\n            c2 *= 0.98\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func, inertia_weight, c1, c2)\n\n        return gbest", "name": "PSO_NelderMead_Adapted", "description": "Introducing dynamic parameter adaptation to adjust the inertia weight and acceleration coefficients during optimization.", "configspace": "", "generation": 83, "fitness": 0.3133411985997847, "feedback": "The algorithm PSO_NelderMead_Adapted got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8984225114315617, 0.8996173859369131, 0.9075811099658697, 0.8932652096531789, 0.9195475007103214, 0.9190446235252206, 0.9020654315509935, 0.9232746154729401, 0.900006040112654, 0.3988741049445059, 0.5060155701996318, 0.5254499199726732, 0.5463669569585778, 0.6776725484291164, 0.36000434172233187, 0.026141183520041356, 0.4653577825243278, 0.5990407412236054, 0.1115538259188561, 0.04454097080880859, 0.051298403905214784, 0.09468956355946634, 0.08301495549463178, 0.07793112311763895, 0.057804012719105624, 0.04376545690606637, 0.09443644340525992, 0.08513443420870459, 0.04185780337652889, 0.04270126604372437, 0.06848033685993682, 0.016867745523309496, 0.06608892558434198, 0.04693614325409712, 0.08943852826331222, 9.999999999998899e-05, 0.9573514213432038, 0.9937651520024462, 0.9908465513798991, 0.9748815294937299, 0.9107709113029203, 0.9604859869884161, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.29789759653417114, 0.21780692532686652, 0.3195058857466083, 0.4391061176354689, 0.36158856771186043, 0.23190352012629822, 0.20326880615427567, 0.4017777500752603, 0.3973328079908467, 0.2302134520296507, 0.09528427202369694, 0.14354385712875173, 0.15768202354178318, 0.15691984862320785, 0.14988276911902354, 0.06186300565741876, 0.10050192226581689, 0.13928965525520576, 0.7194784598331838, 0.5610759614146812, 0.7078477266507921, 0.600505132105431, 0.7823887418319269, 0.1238693150314184, 0.1365647327547247, 0.5757153418191931, 0.5659590725581953, 0.6349280691397977, 0.6315334225870632, 0.13502012263876495, 0.7386686365747845, 0.7023482372987575, 0.7268835281527446, 0.10444116668841141, 0.6861318128711138, 0.13486907853418106, 0.12109900465145651, 0.6617242540509701, 0.5747216794738756, 0.42410827984683164, 0.12082429893655133, 0.38873649819981226, 0.31766807071734915, 0.5026393573664387, 0.38144325466906426, 0.16071653937125396, 0.14802158155859835, 0.20841593823812565, 0.10888923965932151, 0.09464990653625305, 0.08473996358378622, 0.15700097099414578, 0.09338898543087493, 0.11103740766501324, 0.11471726441452212, 0.36387969507747575, 0.22853828128209963, 0.5942081125183828, 0.38442650931812894, 0.6212652489155438, 0.58311119032136, 0.15040768127868975, 0.05444026453669848, 0.3097184628611557, 0.10430131521056518, 0.2196440925563795, 0.1813874938994786, 0.23459037794312232, 0.22100232914976936, 0.06390398830106803, 0.22774148470184719, 0.12786269725287713, 0.833659189661664, 0.8561559042359904, 0.847511161647072, 0.7935765053132944, 0.7971359256106022, 0.794781503008207, 0.8163442159139858, 0.8587928753366646, 0.8443163648683849, 0.05016989984861486, 0.049675658168991, 0.040938215921925813, 0.05707073465217127, 0.07020087762954119, 0.08694714901313305, 0.09256574219128655, 0.021280639552668568, 0.07847141438780347, 0.15076426143992394, 0.14099697355365604, 0.11406906625031665, 0.2064737001605722, 0.1286689169789259, 0.11905415857971946, 0.23932879393711803, 0.11496819654883494, 0.1544072825123658, 0.14488026051043146, 0.1814316434992842, 0.16186476532460692, 0.2112250768259707, 0.13860594380641655, 0.1912961332058768, 0.24103110085067947, 0.21236131983762985, 0.1918807284238606, 0.050392733016535796, 0.058832909747504325, 0.10158278754334438, 0.13230680621931046, 0.13661334637987876, 0.12502746170055512, 0.15659820151860038, 0.11046778580176853, 0.11378807581523309, 0.16910397152875334, 0.20857205735942785, 0.1715902380080182, 0.34012041058830667, 0.14275690764771787, 0.17402806670596382, 0.17478018944800555, 0.1887587083561716, 0.1769741211685829, 0.1654141859773154, 0.16518372412009907, 0.17987856886643872, 0.17325194771655783, 0.16552822913007026, 0.1713199426206724, 0.20182500465643494, 0.1618718713414713, 0.16714783996981186, 0.1264508119274429, 0.12677589267011158, 0.15440474401293125, 0.9258535635663778, 0.2012470092850045, 0.20122935309866885, 0.09981674894075854, 0.1692284530194167, 0.21037233770682784, 0.9043080386514173, 0.15721127595682194, 0.11102570490465258, 0.1031504301391265, 0.1691799700595702, 0.21014512021974197, 0.10486683543773923, 0.10490055639360052, 0.8722737944156271, 0.17468274594191224, 0.24928085589136095, 0.18829601628855952, 0.23169587885789433, 0.1622762819257909, 0.20122839250533753, 0.19431229335332068, 0.22763241808041357, 0.19750852632265836, 0.06855942756068611, 0.06624853536009445, 0.06434311123690972, 0.10457584233733219, 0.059169404592421926, 0.09135114224113894, 0.04612787052755196, 0.03613447757210975, 0.0821502159308517]}, "mutation_prompt": null}
{"id": "b3a98be5-826d-4c2d-afb8-07c24b1a769a", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "2096cc8b-f289-4352-8b49-62214a59e484", "solution": "import numpy as np\n\nclass Improved_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n\n    def optimize_simplex(self, simplex, func):\n        inertia = self.inertia_max\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                inertia = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n                new_velocity = inertia * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n                    \n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "Improved_PSO_NelderMead", "description": "Introduce dynamic inertia weight for better exploration and exploitation balance.", "configspace": "", "generation": 85, "fitness": 0.3448107479908297, "feedback": "The algorithm Improved_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "701e50ff-1015-4f35-935d-81a18188c6c2", "solution": "class PSO_NelderMead_AdaptiveInertia:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_AdaptiveInertia", "description": "Introducing adaptive inertia weight to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead_AdaptiveInertia' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead_AdaptiveInertia' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "1cc2b3ae-231f-403d-a8c5-1cda7b64ad61", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "3a87fe3b-746d-4086-8640-334ecb2e0171", "solution": "class PSO_NelderMead_FastConvergence(PSO_NelderMead):\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_decay=0.95):\n        super().__init__(budget, dim, swarm_size, max_iter)\n        self.inertia_decay = inertia_decay\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = 0.9  # Initial inertia weight\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Dynamic inertia weight adaptation\n            inertia_weight = max(inertia_weight * self.inertia_decay, 0.4)  # Minimum inertia weight of 0.4\n\n        return gbest", "name": "PSO_NelderMead_FastConvergence", "description": "Introducing dynamic inertia weight adaptation based on individual particle performance to enhance convergence speed.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead_FastConvergence' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead_FastConvergence' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "bcddda33-e505-4bdc-ab5b-39b6902b4cdd", "solution": "import numpy as np\n\nclass Enhanced_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        \n        # Introducing dynamic inertia weight scaling\n        inertia_weight = 0.9\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Update inertia weight dynamically\n            inertia_weight = max(0.4, inertia_weight - 0.01)\n\n        return gbest", "name": "Enhanced_PSO_NelderMead", "description": "Introducing dynamic inertia weight scaling to adjust particle velocities for faster convergence.", "configspace": "", "generation": 89, "fitness": 0.3448107479908297, "feedback": "The algorithm Enhanced_PSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "8fea7dd2-f0f5-4f76-8128-175233bc0ac6", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "21c8e67a-0a60-4fd7-a807-23f89870c60b", "solution": "import numpy as np\n\nclass PSO_NelderMead_FastConvergence:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                inertia_weight = self.inertia_max - ((_ * (self.inertia_max - self.inertia_min)) / (self.max_iter - 1))\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_FastConvergence", "description": "Introducing adaptive inertia weight to dynamically adjust particle velocity for faster convergence.", "configspace": "", "generation": 91, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_FastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "b9b688be-52bc-466e-9b51-3b519682954a", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "8a457c07-4ba7-404f-9174-8ec6f2e0169a", "solution": "import numpy as np\n\nclass PSO_NelderMead_Enhanced:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def optimize_simplex(self, simplex, func):\n        inertia_weight = self.inertia_max\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n            inertia_weight = self.inertia_min + (_ / (self.budget // self.dim)) * (self.inertia_max - self.inertia_min)\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                inertia_weight = self.inertia_min + (_ / (self.max_iter)) * (self.inertia_max - self.inertia_min)\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead_Enhanced", "description": "Introducing a dynamic inertia weight adaptation scheme to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 93, "fitness": 0.3448107479908297, "feedback": "The algorithm PSO_NelderMead_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "92c84a80-9c46-439f-86cf-1cb66074342f", "solution": "class PSO_NelderMead_AdaptiveInertia:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia_weight * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            inertia_weight = self.inertia_min + (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n\n        return gbest", "name": "PSO_NelderMead_AdaptiveInertia", "description": "Introducing adaptive inertia weight update to enhance exploration and exploitation balance during optimization.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'PSO_NelderMead_AdaptiveInertia' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'PSO_NelderMead_AdaptiveInertia' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "ff1e246f-a71b-4054-a18d-2d71c8f55871", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        best_fitness = func(gbest)\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = self.w * velocity[i] + self.c1 * np.random.rand() * (pbest[i] - swarm[i]) + self.c2 * np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < best_fitness:\n                    gbest = new_position.copy()\n                    best_fitness = func(new_position)\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Introducing dynamic inertia weight adaptation based on fitness improvement.", "configspace": "", "generation": 95, "fitness": 0.3353574842771132, "feedback": "The algorithm FastPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.9058587693308806, 0.9253993089119116, 0.9101758424048955, 0.9115255964796829, 0.9097748505360367, 0.9041922674332721, 0.9216772150969617, 0.9199843680362618, 0.8942078098240609, 0.5826890411364863, 0.5379207959558248, 0.6109754810414743, 0.20499738651932353, 0.3210899015816753, 0.6171091989405025, 0.5346200644963504, 0.39492637433053557, 0.025099850006583102, 0.07813435410696223, 0.07030047233456604, 0.1656860187495467, 0.05406260387534545, 0.06273331488653111, 0.09042206899304961, 0.06641272588424996, 0.05183146086640389, 0.08347911000228747, 0.045285407406701284, 0.05488653990867953, 0.1478575159366068, 0.07139949114385413, 0.05130808082110594, 0.03906630665767985, 0.07386781182912305, 0.02055305190069079, 0.012848833795051862, 0.9705918689869298, 0.9916090166642605, 0.980558778322858, 0.9792172656101912, 0.9556155170218367, 0.9702087236264815, 0.9687093571931389, 0.9756722601225881, 0.9770610700660581, 0.2423611972870523, 0.1828010312784275, 0.29062134783796467, 0.46652229483045016, 0.22726930681413082, 0.45662655482111125, 0.1594627323756307, 0.23750332148727815, 0.14072724541150206, 0.2125750656613048, 0.13651503830091172, 0.1241256530472854, 0.19464582257633556, 0.3239917917876175, 0.09384766247612131, 0.06616349227454887, 0.16782727752686277, 0.16204978067890463, 0.746469465307054, 0.13440336034322464, 0.5555327098429785, 0.7642361021185431, 0.7856590180140887, 0.6237060240995304, 0.7464208955534457, 0.1328337512985498, 0.7941667907147907, 0.783038151460987, 0.5035115246626716, 0.7856213981947284, 0.7362487826452004, 0.1369831881498289, 0.13456002433968184, 0.6071441093735906, 0.5891061777732164, 0.7786710558525766, 0.40231738568182573, 0.5822536564619959, 0.46362937212191546, 0.5210074311633877, 0.6150607575782079, 0.5703557943971338, 0.4543581657814564, 0.5181370730419324, 0.4961936374697199, 0.3021909775265442, 0.33201960573788813, 0.2013318790215296, 0.11300245605334025, 0.18644324505731902, 0.07128965344786897, 0.22090775320693024, 0.19907045278536029, 0.09709692898870348, 0.10437886603706048, 0.2567427484518765, 0.18065743942579937, 0.469677543758545, 0.7257794692506678, 0.6576741553950416, 0.24082975724924216, 0.14319720053396068, 0.07780275931355518, 0.3700825883286535, 0.22328748268557208, 0.479054654723048, 0.3159769417233165, 0.09851018178649973, 0.1309565844739864, 0.12867140553722256, 0.1517124061876015, 0.13368040676494908, 0.8469807016929506, 0.858585725880699, 0.8529777816959215, 0.8555204956828901, 0.8493914838096908, 0.8182266110017116, 0.8067875277665701, 0.8171473151468732, 0.824838913092717, 0.03338527636883937, 0.06895774062727922, 0.08287298545753075, 0.0665698934474589, 0.06339694619789993, 0.07825358710557972, 0.11163747464608442, 0.1067416485566649, 0.07598684589187377, 0.12411571870205895, 0.14116284354803232, 0.10831764581904335, 0.16140346904563008, 0.23938516942414256, 0.18489374420298954, 0.2844127948306969, 0.10795204280327653, 0.159625382782963, 0.14902740005073134, 0.20219212954369692, 0.16192050481301845, 0.21741596187692014, 0.22196297420412026, 0.2178962333086747, 0.2164854220301622, 0.2205658259959532, 0.2004739274899262, 0.06898369185500686, 0.05775178625224431, 0.17272283457371562, 0.15180905342081208, 0.14883370887845737, 0.1978544400609923, 0.19100592554133522, 0.13474553539024603, 0.13303339922237023, 0.18438555988766714, 0.15857309686027388, 0.17170941336857581, 0.23638723744251988, 0.15456016822072538, 0.15894799187066888, 0.2168899107386123, 0.20079684776743012, 0.28435533418817516, 0.1557682745579677, 0.18524771433994103, 0.18026540142137948, 0.18669766754646844, 0.16752100819966942, 0.1579501347438993, 0.17098604388358363, 0.18717043892375573, 0.19571653790494337, 0.12642726054548659, 0.12718212687524755, 0.1538669437602781, 0.936177770972012, 0.20174568931370185, 0.20004061074535173, 0.10007938148318185, 0.16981320983887105, 0.9142788732326337, 0.8907232497859775, 0.1574348860211483, 0.7655891378751565, 0.7489676770892872, 0.16965345854971292, 0.20981677115791786, 0.10548111266271731, 0.10501430366091768, 0.16791487416099093, 0.16911357755208178, 0.20790400362828754, 0.23034143046167022, 0.24456531135557336, 0.22224757365871595, 0.16800474197221626, 0.1944495605428076, 0.19178085190610084, 0.19766547743542373, 0.08209456131198734, 0.09225410195971329, 0.08806341329390166, 0.09489587004533839, 0.08624542485144115, 0.07520469507582328, 0.023740963764396272, 0.09532991257980283, 0.0740793809845871]}, "mutation_prompt": null}
{"id": "3d23d2f4-76b6-475a-9212-476cf42bf05f", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5  # Initial inertia weight\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                cognitive_component = np.random.rand() * (pbest[i] - swarm[i])\n                social_component = np.random.rand() * (gbest - swarm[i])\n                new_velocity = self.inertia_weight * velocity[i] + cognitive_component + social_component\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Adjust inertia weight based on local fitness improvement\n            local_fitness_improvement = np.mean([func(pbest[i]) for i in range(self.swarm_size)]) - func(gbest)\n            self.inertia_weight = max(0.4, min(0.9, self.inertia_weight + 0.1 * local_fitness_improvement))\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Introducing dynamic inertia weight adjustment based on local fitness improvement for faster convergence.", "configspace": "", "generation": 96, "fitness": 0.3448107479908297, "feedback": "The algorithm FastPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
{"id": "3836bf9a-7aa4-4861-91fa-81d7e99eb4d3", "solution": "import numpy as np\n\nclass FastPSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        inertia_weight = self.w_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                cognitive_comp = self.c1 * np.random.rand() * (pbest[i] - swarm[i])\n                social_comp = self.c2 * np.random.rand() * (gbest - swarm[i])\n                new_velocity = inertia_weight * velocity[i] + cognitive_comp + social_comp\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            inertia_weight = self.w_max - (_ / self.max_iter) * (self.w_max - self.w_min)\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "FastPSO_NelderMead", "description": "Incorporate adaptive inertia weight and a dynamic scaling factor for the velocity adjustment to enhance convergence speed.", "configspace": "", "generation": 97, "fitness": 0.3133411985997847, "feedback": "The algorithm FastPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8984225114315617, 0.8996173859369131, 0.9075811099658697, 0.8932652096531789, 0.9195475007103214, 0.9190446235252206, 0.9020654315509935, 0.9232746154729401, 0.900006040112654, 0.3988741049445059, 0.5060155701996318, 0.5254499199726732, 0.5463669569585778, 0.6776725484291164, 0.36000434172233187, 0.026141183520041356, 0.4653577825243278, 0.5990407412236054, 0.1115538259188561, 0.04454097080880859, 0.051298403905214784, 0.09468956355946634, 0.08301495549463178, 0.07793112311763895, 0.057804012719105624, 0.04376545690606637, 0.09443644340525992, 0.08513443420870459, 0.04185780337652889, 0.04270126604372437, 0.06848033685993682, 0.016867745523309496, 0.06608892558434198, 0.04693614325409712, 0.08943852826331222, 9.999999999998899e-05, 0.9573514213432038, 0.9937651520024462, 0.9908465513798991, 0.9748815294937299, 0.9107709113029203, 0.9604859869884161, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.29789759653417114, 0.21780692532686652, 0.3195058857466083, 0.4391061176354689, 0.36158856771186043, 0.23190352012629822, 0.20326880615427567, 0.4017777500752603, 0.3973328079908467, 0.2302134520296507, 0.09528427202369694, 0.14354385712875173, 0.15768202354178318, 0.15691984862320785, 0.14988276911902354, 0.06186300565741876, 0.10050192226581689, 0.13928965525520576, 0.7194784598331838, 0.5610759614146812, 0.7078477266507921, 0.600505132105431, 0.7823887418319269, 0.1238693150314184, 0.1365647327547247, 0.5757153418191931, 0.5659590725581953, 0.6349280691397977, 0.6315334225870632, 0.13502012263876495, 0.7386686365747845, 0.7023482372987575, 0.7268835281527446, 0.10444116668841141, 0.6861318128711138, 0.13486907853418106, 0.12109900465145651, 0.6617242540509701, 0.5747216794738756, 0.42410827984683164, 0.12082429893655133, 0.38873649819981226, 0.31766807071734915, 0.5026393573664387, 0.38144325466906426, 0.16071653937125396, 0.14802158155859835, 0.20841593823812565, 0.10888923965932151, 0.09464990653625305, 0.08473996358378622, 0.15700097099414578, 0.09338898543087493, 0.11103740766501324, 0.11471726441452212, 0.36387969507747575, 0.22853828128209963, 0.5942081125183828, 0.38442650931812894, 0.6212652489155438, 0.58311119032136, 0.15040768127868975, 0.05444026453669848, 0.3097184628611557, 0.10430131521056518, 0.2196440925563795, 0.1813874938994786, 0.23459037794312232, 0.22100232914976936, 0.06390398830106803, 0.22774148470184719, 0.12786269725287713, 0.833659189661664, 0.8561559042359904, 0.847511161647072, 0.7935765053132944, 0.7971359256106022, 0.794781503008207, 0.8163442159139858, 0.8587928753366646, 0.8443163648683849, 0.05016989984861486, 0.049675658168991, 0.040938215921925813, 0.05707073465217127, 0.07020087762954119, 0.08694714901313305, 0.09256574219128655, 0.021280639552668568, 0.07847141438780347, 0.15076426143992394, 0.14099697355365604, 0.11406906625031665, 0.2064737001605722, 0.1286689169789259, 0.11905415857971946, 0.23932879393711803, 0.11496819654883494, 0.1544072825123658, 0.14488026051043146, 0.1814316434992842, 0.16186476532460692, 0.2112250768259707, 0.13860594380641655, 0.1912961332058768, 0.24103110085067947, 0.21236131983762985, 0.1918807284238606, 0.050392733016535796, 0.058832909747504325, 0.10158278754334438, 0.13230680621931046, 0.13661334637987876, 0.12502746170055512, 0.15659820151860038, 0.11046778580176853, 0.11378807581523309, 0.16910397152875334, 0.20857205735942785, 0.1715902380080182, 0.34012041058830667, 0.14275690764771787, 0.17402806670596382, 0.17478018944800555, 0.1887587083561716, 0.1769741211685829, 0.1654141859773154, 0.16518372412009907, 0.17987856886643872, 0.17325194771655783, 0.16552822913007026, 0.1713199426206724, 0.20182500465643494, 0.1618718713414713, 0.16714783996981186, 0.1264508119274429, 0.12677589267011158, 0.15440474401293125, 0.9258535635663778, 0.2012470092850045, 0.20122935309866885, 0.09981674894075854, 0.1692284530194167, 0.21037233770682784, 0.9043080386514173, 0.15721127595682194, 0.11102570490465258, 0.1031504301391265, 0.1691799700595702, 0.21014512021974197, 0.10486683543773923, 0.10490055639360052, 0.8722737944156271, 0.17468274594191224, 0.24928085589136095, 0.18829601628855952, 0.23169587885789433, 0.1622762819257909, 0.20122839250533753, 0.19431229335332068, 0.22763241808041357, 0.19750852632265836, 0.06855942756068611, 0.06624853536009445, 0.06434311123690972, 0.10457584233733219, 0.059169404592421926, 0.09135114224113894, 0.04612787052755196, 0.03613447757210975, 0.0821502159308517]}, "mutation_prompt": null}
{"id": "e3b9383f-d15c-4c41-8f77-c9c88737e876", "solution": "class Accelerated_PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100, inertia_min=0.4, inertia_max=0.9, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n        \n        inertia = self.inertia_max\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = inertia * velocity[i] + self.c1 * np.random.rand() * (pbest[i] - swarm[i]) + self.c2 * np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n            \n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n            # Adapt inertia dynamically based on convergence speed\n            if np.random.rand() < 0.1:\n                prev_gbest = gbest\n                gbest_idx = np.argmin([func(p) for p in swarm])\n                gbest = swarm[gbest_idx].copy()\n                if func(gbest) >= func(prev_gbest):\n                    inertia = max(self.inertia_min, inertia - 0.05)\n                else:\n                    inertia = min(self.inertia_max, inertia + 0.05)\n\n        return gbest", "name": "Accelerated_PSO_NelderMead", "description": "Introducing dynamic adaptation of the inertia weight parameter based on convergence speed to accelerate the optimization process.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'Accelerated_PSO_NelderMead' object has no attribute 'optimize_simplex'\").", "error": "AttributeError(\"'Accelerated_PSO_NelderMead' object has no attribute 'optimize_simplex'\")", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {}, "mutation_prompt": null}
{"id": "21a18a2a-24d5-49fd-b091-6f3ebf4e5746", "solution": "import numpy as np\n\nclass PSO_NelderMead:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def optimize_simplex(self, simplex, func):\n        for _ in range(self.budget // self.dim):\n            simplex.sort(key=lambda x: func(x))\n            centroid = np.mean(simplex[:-1], axis=0)\n            reflection = centroid + (centroid - simplex[-1])\n            if func(simplex[0]) <= func(reflection) < func(simplex[-2]):\n                simplex[-1] = reflection\n            elif func(reflection) < func(simplex[0]):\n                expansion = centroid + 2*(reflection - centroid)\n                if func(expansion) < func(reflection):\n                    simplex[-1] = expansion\n                else:\n                    simplex[-1] = reflection\n            else:\n                contraction = centroid + 0.5*(simplex[-1] - centroid)\n                if func(contraction) < func(simplex[-1]):\n                    simplex[-1] = contraction\n                else:\n                    for i in range(1, len(simplex)):\n                        simplex[i] = 0.5*(simplex[i] + simplex[0])\n\n        return simplex[0]\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        velocity = np.zeros((self.swarm_size, self.dim))\n        gbest_idx = np.argmin([func(p) for p in swarm])\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_velocity = 0.5 * velocity[i] + np.random.rand() * (pbest[i] - swarm[i]) + np.random.rand() * (gbest - swarm[i])\n                new_position = swarm[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n\n                if func(new_position) < func(pbest[i]):\n                    pbest[i] = new_position.copy()\n\n                swarm[i] = new_position.copy()\n\n                if func(new_position) < func(gbest):\n                    gbest = new_position.copy()\n\n            simplex = [gbest + np.random.normal(0, 0.5, self.dim) for _ in range(self.dim + 1)]\n            gbest = self.optimize_simplex(simplex, func)\n\n        return gbest", "name": "PSO_NelderMead", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a Nelder-Mead simplex method for local search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0216845-06b2-4a0c-9e54-7da606d5f5ba", "metadata": {"aucs": [0.8999688663845723, 0.9161263684911249, 0.9144079625814133, 0.8842602098867158, 0.9177161323013726, 0.902513236111388, 0.8792444665862127, 0.9151680951381558, 0.9028475066500757, 0.5534054192954958, 0.5443518249399104, 0.5372713978338001, 0.620539822184278, 0.4244495894923661, 0.5647350465971509, 0.074429101195576, 0.5676837049454972, 0.15223082951765887, 0.08627228194407943, 0.06849813076016431, 0.10756248430998405, 0.1213198940983824, 0.1481416930114534, 0.08680876099254331, 0.0375339886644559, 0.030651605293570694, 0.07319411734098136, 0.06411362286006572, 0.05405906048699416, 0.04433214343566705, 0.09418803048777213, 0.07298613522852615, 0.015260006518439728, 0.08336207844799026, 0.027184223824247233, 0.015012517523080748, 0.9719435074512675, 0.9580821539801045, 0.9547578183585421, 0.9751260919295451, 0.9415893577550803, 0.9664490601134474, 0.9542507814120522, 0.9721354376345991, 0.9703115891259884, 0.16752769713445903, 0.17583346622339358, 0.22697082589028938, 0.5147877737660209, 0.21854413055307542, 0.29414404177671893, 0.44661662026511795, 0.3444681963389141, 0.19635195017790386, 0.12761924868701968, 0.09151966293248404, 0.12373657247090852, 0.21708526551610552, 0.17229553090369043, 0.10899581779255008, 0.151436185767455, 0.152736353654511, 0.15784410001742488, 0.7061766655610935, 0.4662431280118948, 0.6620332958073987, 0.6771502400354594, 0.7763972790784048, 0.1324925809892029, 0.5857210287442405, 0.7670747597032256, 0.7123087218432302, 0.1344938717053974, 0.6738148523877474, 0.6245686546893274, 0.771006215469822, 0.7122989688003327, 0.6075523720076167, 0.8126904930176565, 0.7808457135571155, 0.7976023532918051, 0.34153258608461556, 0.5341423652270837, 0.3005916073892929, 0.3293999006719568, 0.4364926571857072, 0.45644457602414734, 0.6557861952177516, 0.28235887472599697, 0.4680506834784731, 0.22190466400440767, 0.4756774041664309, 0.167785680460676, 0.10888923965932151, 0.13367378689081777, 0.08350391578399141, 0.18473383261787035, 0.08998352208470695, 0.07564591138270882, 0.47496043395986376, 0.27841571235980833, 0.4977941865626825, 0.6544315540190684, 0.4857718207190759, 0.6253650831040094, 0.18216302483517222, 0.3202873537917933, 0.11285474422136499, 0.18187769967192646, 0.09226209109239825, 0.5168291287002295, 0.5453053199468063, 0.1594656815420209, 0.12328848686697069, 0.08865178876319424, 0.23007668219652566, 0.4034520639508944, 0.8337261678621335, 0.8486945119209455, 0.8533390184663603, 0.8359429034628046, 0.8373023683402203, 0.8296006024079382, 0.8047541244153366, 0.8196316765610084, 0.8464594294877341, 0.049932199087760476, 0.03486192164849178, 0.07855742540467725, 0.062122369185080406, 0.0831978765499396, 0.10256733504076943, 0.09029206989148608, 0.027398803688355344, 0.10556552021850585, 0.20974219005973826, 0.1093344320272519, 0.08961798865564563, 0.16121570057168866, 0.2304846972577157, 0.1744310654466954, 0.23932879393711803, 0.14794581738676038, 0.13232970320949267, 0.163603118958207, 0.1599309346630453, 0.1699524536516661, 0.18479457956599776, 0.2526726141951797, 0.20045445270610196, 0.2137223381605411, 0.2588742704215714, 0.15750944927972832, 0.07894117711707205, 0.08531384320172186, 0.16548944218235206, 0.29303051546796355, 0.1347733572491987, 0.07629510305381482, 0.09851726939295691, 0.12268694468019126, 0.16063085260410104, 0.19199652109394294, 0.21097199938456368, 0.1715902380080182, 0.21030565300106918, 0.25594831666337237, 0.14661959334731567, 0.18732136716126868, 0.24978260939805563, 0.18620598166401292, 0.17530766543491905, 0.16685367105566706, 0.15386492305174526, 0.16390990294589192, 0.21252702048922778, 0.17131024805209238, 0.18629077428998098, 0.17461096506199936, 0.186770436029421, 0.910291687181456, 0.12684182150833878, 0.15381380511518095, 0.9371187282627026, 0.20129341128271105, 0.2002163844279351, 0.0994242133989397, 0.16967272280096168, 0.9264717834323452, 0.8411088226956068, 0.15717536023387713, 0.8910303288203343, 0.10318233100198615, 0.16793228215864453, 0.2087049894350249, 0.10358158270804285, 0.8838781072526063, 0.16714873584175638, 0.22614405341788413, 0.24928085589136095, 0.23008148086391222, 0.22250677742888847, 0.19058330301360116, 0.22277978579397273, 0.19431229335332068, 0.1466979531389515, 0.19750852632265836, 0.06777685600379024, 0.09677133647495961, 0.0879607134123711, 0.07466528809026518, 0.0682882603678936, 0.06536810084046085, 0.08274881385115973, 0.07051021766973631, 0.04318149059938514]}, "mutation_prompt": null}
